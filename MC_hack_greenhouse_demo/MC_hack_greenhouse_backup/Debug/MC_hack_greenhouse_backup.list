
MC_hack_greenhouse_backup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005530  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080056ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000014  080056c0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080056c0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb7d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea4  00000000  00000000  0002cbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ec5  00000000  00000000  0002ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7c9  00000000  00000000  00044e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e55  00000000  00000000  000525e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d643b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000d648c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055d8 	.word	0x080055d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080055d8 	.word	0x080055d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb75 	bl	8000918 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb01 	bl	8000840 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb67 	bl	8000918 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb5d 	bl	8000918 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb0d 	bl	800088c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb03 	bl	800088c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f852 	bl	800036c <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	b580      	push	{r7, lr}
 80002dc:	0007      	movs	r7, r0
 80002de:	4699      	mov	r9, r3
 80002e0:	0c3b      	lsrs	r3, r7, #16
 80002e2:	469c      	mov	ip, r3
 80002e4:	0413      	lsls	r3, r2, #16
 80002e6:	0c1b      	lsrs	r3, r3, #16
 80002e8:	001d      	movs	r5, r3
 80002ea:	000e      	movs	r6, r1
 80002ec:	4661      	mov	r1, ip
 80002ee:	0400      	lsls	r0, r0, #16
 80002f0:	0c14      	lsrs	r4, r2, #16
 80002f2:	0c00      	lsrs	r0, r0, #16
 80002f4:	4345      	muls	r5, r0
 80002f6:	434b      	muls	r3, r1
 80002f8:	4360      	muls	r0, r4
 80002fa:	4361      	muls	r1, r4
 80002fc:	18c0      	adds	r0, r0, r3
 80002fe:	0c2c      	lsrs	r4, r5, #16
 8000300:	1820      	adds	r0, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	4283      	cmp	r3, r0
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4372      	muls	r2, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	4463      	add	r3, ip
 800031a:	042d      	lsls	r5, r5, #16
 800031c:	0c2d      	lsrs	r5, r5, #16
 800031e:	18c9      	adds	r1, r1, r3
 8000320:	0400      	lsls	r0, r0, #16
 8000322:	1940      	adds	r0, r0, r5
 8000324:	1889      	adds	r1, r1, r2
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <__aeabi_d2uiz>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	2200      	movs	r2, #0
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <__aeabi_d2uiz+0x38>)
 8000336:	0004      	movs	r4, r0
 8000338:	000d      	movs	r5, r1
 800033a:	f001 fbe5 	bl	8001b08 <__aeabi_dcmpge>
 800033e:	2800      	cmp	r0, #0
 8000340:	d104      	bne.n	800034c <__aeabi_d2uiz+0x1c>
 8000342:	0020      	movs	r0, r4
 8000344:	0029      	movs	r1, r5
 8000346:	f001 fad7 	bl	80018f8 <__aeabi_d2iz>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <__aeabi_d2uiz+0x38>)
 800034e:	2200      	movs	r2, #0
 8000350:	0020      	movs	r0, r4
 8000352:	0029      	movs	r1, r5
 8000354:	f000 ff3e 	bl	80011d4 <__aeabi_dsub>
 8000358:	f001 face 	bl	80018f8 <__aeabi_d2iz>
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	061b      	lsls	r3, r3, #24
 8000360:	469c      	mov	ip, r3
 8000362:	4460      	add	r0, ip
 8000364:	e7f1      	b.n	800034a <__aeabi_d2uiz+0x1a>
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	41e00000 	.word	0x41e00000

0800036c <__udivmoddi4>:
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	4657      	mov	r7, sl
 8000370:	464e      	mov	r6, r9
 8000372:	4645      	mov	r5, r8
 8000374:	46de      	mov	lr, fp
 8000376:	b5e0      	push	{r5, r6, r7, lr}
 8000378:	0004      	movs	r4, r0
 800037a:	000d      	movs	r5, r1
 800037c:	4692      	mov	sl, r2
 800037e:	4699      	mov	r9, r3
 8000380:	b083      	sub	sp, #12
 8000382:	428b      	cmp	r3, r1
 8000384:	d830      	bhi.n	80003e8 <__udivmoddi4+0x7c>
 8000386:	d02d      	beq.n	80003e4 <__udivmoddi4+0x78>
 8000388:	4649      	mov	r1, r9
 800038a:	4650      	mov	r0, sl
 800038c:	f001 fbe4 	bl	8001b58 <__clzdi2>
 8000390:	0029      	movs	r1, r5
 8000392:	0006      	movs	r6, r0
 8000394:	0020      	movs	r0, r4
 8000396:	f001 fbdf 	bl	8001b58 <__clzdi2>
 800039a:	1a33      	subs	r3, r6, r0
 800039c:	4698      	mov	r8, r3
 800039e:	3b20      	subs	r3, #32
 80003a0:	469b      	mov	fp, r3
 80003a2:	d433      	bmi.n	800040c <__udivmoddi4+0xa0>
 80003a4:	465a      	mov	r2, fp
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	4642      	mov	r2, r8
 80003ac:	001f      	movs	r7, r3
 80003ae:	4653      	mov	r3, sl
 80003b0:	4093      	lsls	r3, r2
 80003b2:	001e      	movs	r6, r3
 80003b4:	42af      	cmp	r7, r5
 80003b6:	d83a      	bhi.n	800042e <__udivmoddi4+0xc2>
 80003b8:	42af      	cmp	r7, r5
 80003ba:	d100      	bne.n	80003be <__udivmoddi4+0x52>
 80003bc:	e078      	b.n	80004b0 <__udivmoddi4+0x144>
 80003be:	465b      	mov	r3, fp
 80003c0:	1ba4      	subs	r4, r4, r6
 80003c2:	41bd      	sbcs	r5, r7
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	da00      	bge.n	80003ca <__udivmoddi4+0x5e>
 80003c8:	e075      	b.n	80004b6 <__udivmoddi4+0x14a>
 80003ca:	2200      	movs	r2, #0
 80003cc:	2300      	movs	r3, #0
 80003ce:	9200      	str	r2, [sp, #0]
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	2301      	movs	r3, #1
 80003d4:	465a      	mov	r2, fp
 80003d6:	4093      	lsls	r3, r2
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	2301      	movs	r3, #1
 80003dc:	4642      	mov	r2, r8
 80003de:	4093      	lsls	r3, r2
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	e028      	b.n	8000436 <__udivmoddi4+0xca>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	d9cf      	bls.n	8000388 <__udivmoddi4+0x1c>
 80003e8:	2200      	movs	r2, #0
 80003ea:	2300      	movs	r3, #0
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <__udivmoddi4+0x8e>
 80003f6:	601c      	str	r4, [r3, #0]
 80003f8:	605d      	str	r5, [r3, #4]
 80003fa:	9800      	ldr	r0, [sp, #0]
 80003fc:	9901      	ldr	r1, [sp, #4]
 80003fe:	b003      	add	sp, #12
 8000400:	bcf0      	pop	{r4, r5, r6, r7}
 8000402:	46bb      	mov	fp, r7
 8000404:	46b2      	mov	sl, r6
 8000406:	46a9      	mov	r9, r5
 8000408:	46a0      	mov	r8, r4
 800040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800040c:	4642      	mov	r2, r8
 800040e:	2320      	movs	r3, #32
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	4652      	mov	r2, sl
 8000414:	40da      	lsrs	r2, r3
 8000416:	4641      	mov	r1, r8
 8000418:	0013      	movs	r3, r2
 800041a:	464a      	mov	r2, r9
 800041c:	408a      	lsls	r2, r1
 800041e:	0017      	movs	r7, r2
 8000420:	4642      	mov	r2, r8
 8000422:	431f      	orrs	r7, r3
 8000424:	4653      	mov	r3, sl
 8000426:	4093      	lsls	r3, r2
 8000428:	001e      	movs	r6, r3
 800042a:	42af      	cmp	r7, r5
 800042c:	d9c4      	bls.n	80003b8 <__udivmoddi4+0x4c>
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	4643      	mov	r3, r8
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0d9      	beq.n	80003f0 <__udivmoddi4+0x84>
 800043c:	07fb      	lsls	r3, r7, #31
 800043e:	0872      	lsrs	r2, r6, #1
 8000440:	431a      	orrs	r2, r3
 8000442:	4646      	mov	r6, r8
 8000444:	087b      	lsrs	r3, r7, #1
 8000446:	e00e      	b.n	8000466 <__udivmoddi4+0xfa>
 8000448:	42ab      	cmp	r3, r5
 800044a:	d101      	bne.n	8000450 <__udivmoddi4+0xe4>
 800044c:	42a2      	cmp	r2, r4
 800044e:	d80c      	bhi.n	800046a <__udivmoddi4+0xfe>
 8000450:	1aa4      	subs	r4, r4, r2
 8000452:	419d      	sbcs	r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	1924      	adds	r4, r4, r4
 8000458:	416d      	adcs	r5, r5
 800045a:	2100      	movs	r1, #0
 800045c:	3e01      	subs	r6, #1
 800045e:	1824      	adds	r4, r4, r0
 8000460:	414d      	adcs	r5, r1
 8000462:	2e00      	cmp	r6, #0
 8000464:	d006      	beq.n	8000474 <__udivmoddi4+0x108>
 8000466:	42ab      	cmp	r3, r5
 8000468:	d9ee      	bls.n	8000448 <__udivmoddi4+0xdc>
 800046a:	3e01      	subs	r6, #1
 800046c:	1924      	adds	r4, r4, r4
 800046e:	416d      	adcs	r5, r5
 8000470:	2e00      	cmp	r6, #0
 8000472:	d1f8      	bne.n	8000466 <__udivmoddi4+0xfa>
 8000474:	9800      	ldr	r0, [sp, #0]
 8000476:	9901      	ldr	r1, [sp, #4]
 8000478:	465b      	mov	r3, fp
 800047a:	1900      	adds	r0, r0, r4
 800047c:	4169      	adcs	r1, r5
 800047e:	2b00      	cmp	r3, #0
 8000480:	db24      	blt.n	80004cc <__udivmoddi4+0x160>
 8000482:	002b      	movs	r3, r5
 8000484:	465a      	mov	r2, fp
 8000486:	4644      	mov	r4, r8
 8000488:	40d3      	lsrs	r3, r2
 800048a:	002a      	movs	r2, r5
 800048c:	40e2      	lsrs	r2, r4
 800048e:	001c      	movs	r4, r3
 8000490:	465b      	mov	r3, fp
 8000492:	0015      	movs	r5, r2
 8000494:	2b00      	cmp	r3, #0
 8000496:	db2a      	blt.n	80004ee <__udivmoddi4+0x182>
 8000498:	0026      	movs	r6, r4
 800049a:	409e      	lsls	r6, r3
 800049c:	0033      	movs	r3, r6
 800049e:	0026      	movs	r6, r4
 80004a0:	4647      	mov	r7, r8
 80004a2:	40be      	lsls	r6, r7
 80004a4:	0032      	movs	r2, r6
 80004a6:	1a80      	subs	r0, r0, r2
 80004a8:	4199      	sbcs	r1, r3
 80004aa:	9000      	str	r0, [sp, #0]
 80004ac:	9101      	str	r1, [sp, #4]
 80004ae:	e79f      	b.n	80003f0 <__udivmoddi4+0x84>
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d8bc      	bhi.n	800042e <__udivmoddi4+0xc2>
 80004b4:	e783      	b.n	80003be <__udivmoddi4+0x52>
 80004b6:	4642      	mov	r2, r8
 80004b8:	2320      	movs	r3, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	2200      	movs	r2, #0
 80004c0:	9100      	str	r1, [sp, #0]
 80004c2:	9201      	str	r2, [sp, #4]
 80004c4:	2201      	movs	r2, #1
 80004c6:	40da      	lsrs	r2, r3
 80004c8:	9201      	str	r2, [sp, #4]
 80004ca:	e786      	b.n	80003da <__udivmoddi4+0x6e>
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	002a      	movs	r2, r5
 80004d4:	4646      	mov	r6, r8
 80004d6:	409a      	lsls	r2, r3
 80004d8:	0023      	movs	r3, r4
 80004da:	40f3      	lsrs	r3, r6
 80004dc:	4644      	mov	r4, r8
 80004de:	4313      	orrs	r3, r2
 80004e0:	002a      	movs	r2, r5
 80004e2:	40e2      	lsrs	r2, r4
 80004e4:	001c      	movs	r4, r3
 80004e6:	465b      	mov	r3, fp
 80004e8:	0015      	movs	r5, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dad4      	bge.n	8000498 <__udivmoddi4+0x12c>
 80004ee:	4642      	mov	r2, r8
 80004f0:	002f      	movs	r7, r5
 80004f2:	2320      	movs	r3, #32
 80004f4:	0026      	movs	r6, r4
 80004f6:	4097      	lsls	r7, r2
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	40de      	lsrs	r6, r3
 80004fc:	003b      	movs	r3, r7
 80004fe:	4333      	orrs	r3, r6
 8000500:	e7cd      	b.n	800049e <__udivmoddi4+0x132>
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fadd>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	46c6      	mov	lr, r8
 8000508:	0243      	lsls	r3, r0, #9
 800050a:	0a5b      	lsrs	r3, r3, #9
 800050c:	024e      	lsls	r6, r1, #9
 800050e:	0045      	lsls	r5, r0, #1
 8000510:	004f      	lsls	r7, r1, #1
 8000512:	00da      	lsls	r2, r3, #3
 8000514:	0fc4      	lsrs	r4, r0, #31
 8000516:	469c      	mov	ip, r3
 8000518:	0a70      	lsrs	r0, r6, #9
 800051a:	4690      	mov	r8, r2
 800051c:	b500      	push	{lr}
 800051e:	0e2d      	lsrs	r5, r5, #24
 8000520:	0e3f      	lsrs	r7, r7, #24
 8000522:	0fc9      	lsrs	r1, r1, #31
 8000524:	09b6      	lsrs	r6, r6, #6
 8000526:	428c      	cmp	r4, r1
 8000528:	d04b      	beq.n	80005c2 <__aeabi_fadd+0xbe>
 800052a:	1bea      	subs	r2, r5, r7
 800052c:	2a00      	cmp	r2, #0
 800052e:	dd36      	ble.n	800059e <__aeabi_fadd+0x9a>
 8000530:	2f00      	cmp	r7, #0
 8000532:	d061      	beq.n	80005f8 <__aeabi_fadd+0xf4>
 8000534:	2dff      	cmp	r5, #255	; 0xff
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x36>
 8000538:	e0ad      	b.n	8000696 <__aeabi_fadd+0x192>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	04db      	lsls	r3, r3, #19
 800053e:	431e      	orrs	r6, r3
 8000540:	2a1b      	cmp	r2, #27
 8000542:	dc00      	bgt.n	8000546 <__aeabi_fadd+0x42>
 8000544:	e0d3      	b.n	80006ee <__aeabi_fadd+0x1ea>
 8000546:	2001      	movs	r0, #1
 8000548:	4643      	mov	r3, r8
 800054a:	1a18      	subs	r0, r3, r0
 800054c:	0143      	lsls	r3, r0, #5
 800054e:	d400      	bmi.n	8000552 <__aeabi_fadd+0x4e>
 8000550:	e08c      	b.n	800066c <__aeabi_fadd+0x168>
 8000552:	0180      	lsls	r0, r0, #6
 8000554:	0987      	lsrs	r7, r0, #6
 8000556:	0038      	movs	r0, r7
 8000558:	f001 fae0 	bl	8001b1c <__clzsi2>
 800055c:	3805      	subs	r0, #5
 800055e:	4087      	lsls	r7, r0
 8000560:	4285      	cmp	r5, r0
 8000562:	dc00      	bgt.n	8000566 <__aeabi_fadd+0x62>
 8000564:	e0b6      	b.n	80006d4 <__aeabi_fadd+0x1d0>
 8000566:	1a2d      	subs	r5, r5, r0
 8000568:	48b3      	ldr	r0, [pc, #716]	; (8000838 <__aeabi_fadd+0x334>)
 800056a:	4038      	ands	r0, r7
 800056c:	0743      	lsls	r3, r0, #29
 800056e:	d004      	beq.n	800057a <__aeabi_fadd+0x76>
 8000570:	230f      	movs	r3, #15
 8000572:	4003      	ands	r3, r0
 8000574:	2b04      	cmp	r3, #4
 8000576:	d000      	beq.n	800057a <__aeabi_fadd+0x76>
 8000578:	3004      	adds	r0, #4
 800057a:	0143      	lsls	r3, r0, #5
 800057c:	d400      	bmi.n	8000580 <__aeabi_fadd+0x7c>
 800057e:	e078      	b.n	8000672 <__aeabi_fadd+0x16e>
 8000580:	1c6a      	adds	r2, r5, #1
 8000582:	2dfe      	cmp	r5, #254	; 0xfe
 8000584:	d065      	beq.n	8000652 <__aeabi_fadd+0x14e>
 8000586:	0180      	lsls	r0, r0, #6
 8000588:	0a43      	lsrs	r3, r0, #9
 800058a:	469c      	mov	ip, r3
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	4663      	mov	r3, ip
 8000590:	05d0      	lsls	r0, r2, #23
 8000592:	4318      	orrs	r0, r3
 8000594:	07e4      	lsls	r4, r4, #31
 8000596:	4320      	orrs	r0, r4
 8000598:	bc80      	pop	{r7}
 800059a:	46b8      	mov	r8, r7
 800059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d035      	beq.n	800060e <__aeabi_fadd+0x10a>
 80005a2:	1b7a      	subs	r2, r7, r5
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_fadd+0xa6>
 80005a8:	e0af      	b.n	800070a <__aeabi_fadd+0x206>
 80005aa:	4643      	mov	r3, r8
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0xae>
 80005b0:	e0a7      	b.n	8000702 <__aeabi_fadd+0x1fe>
 80005b2:	1e53      	subs	r3, r2, #1
 80005b4:	2a01      	cmp	r2, #1
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0xb6>
 80005b8:	e12f      	b.n	800081a <__aeabi_fadd+0x316>
 80005ba:	2aff      	cmp	r2, #255	; 0xff
 80005bc:	d069      	beq.n	8000692 <__aeabi_fadd+0x18e>
 80005be:	001a      	movs	r2, r3
 80005c0:	e0aa      	b.n	8000718 <__aeabi_fadd+0x214>
 80005c2:	1be9      	subs	r1, r5, r7
 80005c4:	2900      	cmp	r1, #0
 80005c6:	dd70      	ble.n	80006aa <__aeabi_fadd+0x1a6>
 80005c8:	2f00      	cmp	r7, #0
 80005ca:	d037      	beq.n	800063c <__aeabi_fadd+0x138>
 80005cc:	2dff      	cmp	r5, #255	; 0xff
 80005ce:	d062      	beq.n	8000696 <__aeabi_fadd+0x192>
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	04db      	lsls	r3, r3, #19
 80005d4:	431e      	orrs	r6, r3
 80005d6:	291b      	cmp	r1, #27
 80005d8:	dc00      	bgt.n	80005dc <__aeabi_fadd+0xd8>
 80005da:	e0b0      	b.n	800073e <__aeabi_fadd+0x23a>
 80005dc:	2001      	movs	r0, #1
 80005de:	4440      	add	r0, r8
 80005e0:	0143      	lsls	r3, r0, #5
 80005e2:	d543      	bpl.n	800066c <__aeabi_fadd+0x168>
 80005e4:	3501      	adds	r5, #1
 80005e6:	2dff      	cmp	r5, #255	; 0xff
 80005e8:	d033      	beq.n	8000652 <__aeabi_fadd+0x14e>
 80005ea:	2301      	movs	r3, #1
 80005ec:	4a93      	ldr	r2, [pc, #588]	; (800083c <__aeabi_fadd+0x338>)
 80005ee:	4003      	ands	r3, r0
 80005f0:	0840      	lsrs	r0, r0, #1
 80005f2:	4010      	ands	r0, r2
 80005f4:	4318      	orrs	r0, r3
 80005f6:	e7b9      	b.n	800056c <__aeabi_fadd+0x68>
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d100      	bne.n	80005fe <__aeabi_fadd+0xfa>
 80005fc:	e083      	b.n	8000706 <__aeabi_fadd+0x202>
 80005fe:	1e51      	subs	r1, r2, #1
 8000600:	2a01      	cmp	r2, #1
 8000602:	d100      	bne.n	8000606 <__aeabi_fadd+0x102>
 8000604:	e0d8      	b.n	80007b8 <__aeabi_fadd+0x2b4>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d045      	beq.n	8000696 <__aeabi_fadd+0x192>
 800060a:	000a      	movs	r2, r1
 800060c:	e798      	b.n	8000540 <__aeabi_fadd+0x3c>
 800060e:	27fe      	movs	r7, #254	; 0xfe
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	4217      	tst	r7, r2
 8000614:	d000      	beq.n	8000618 <__aeabi_fadd+0x114>
 8000616:	e086      	b.n	8000726 <__aeabi_fadd+0x222>
 8000618:	2d00      	cmp	r5, #0
 800061a:	d000      	beq.n	800061e <__aeabi_fadd+0x11a>
 800061c:	e0b7      	b.n	800078e <__aeabi_fadd+0x28a>
 800061e:	4643      	mov	r3, r8
 8000620:	2b00      	cmp	r3, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fadd+0x122>
 8000624:	e0f3      	b.n	800080e <__aeabi_fadd+0x30a>
 8000626:	2200      	movs	r2, #0
 8000628:	2e00      	cmp	r6, #0
 800062a:	d0b0      	beq.n	800058e <__aeabi_fadd+0x8a>
 800062c:	1b98      	subs	r0, r3, r6
 800062e:	0143      	lsls	r3, r0, #5
 8000630:	d400      	bmi.n	8000634 <__aeabi_fadd+0x130>
 8000632:	e0fa      	b.n	800082a <__aeabi_fadd+0x326>
 8000634:	4643      	mov	r3, r8
 8000636:	000c      	movs	r4, r1
 8000638:	1af0      	subs	r0, r6, r3
 800063a:	e797      	b.n	800056c <__aeabi_fadd+0x68>
 800063c:	2e00      	cmp	r6, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0x13e>
 8000640:	e0c8      	b.n	80007d4 <__aeabi_fadd+0x2d0>
 8000642:	1e4a      	subs	r2, r1, #1
 8000644:	2901      	cmp	r1, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x146>
 8000648:	e0ae      	b.n	80007a8 <__aeabi_fadd+0x2a4>
 800064a:	29ff      	cmp	r1, #255	; 0xff
 800064c:	d023      	beq.n	8000696 <__aeabi_fadd+0x192>
 800064e:	0011      	movs	r1, r2
 8000650:	e7c1      	b.n	80005d6 <__aeabi_fadd+0xd2>
 8000652:	2300      	movs	r3, #0
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	469c      	mov	ip, r3
 8000658:	e799      	b.n	800058e <__aeabi_fadd+0x8a>
 800065a:	21fe      	movs	r1, #254	; 0xfe
 800065c:	1c6a      	adds	r2, r5, #1
 800065e:	4211      	tst	r1, r2
 8000660:	d077      	beq.n	8000752 <__aeabi_fadd+0x24e>
 8000662:	2aff      	cmp	r2, #255	; 0xff
 8000664:	d0f5      	beq.n	8000652 <__aeabi_fadd+0x14e>
 8000666:	0015      	movs	r5, r2
 8000668:	4446      	add	r6, r8
 800066a:	0870      	lsrs	r0, r6, #1
 800066c:	0743      	lsls	r3, r0, #29
 800066e:	d000      	beq.n	8000672 <__aeabi_fadd+0x16e>
 8000670:	e77e      	b.n	8000570 <__aeabi_fadd+0x6c>
 8000672:	08c3      	lsrs	r3, r0, #3
 8000674:	2dff      	cmp	r5, #255	; 0xff
 8000676:	d00e      	beq.n	8000696 <__aeabi_fadd+0x192>
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	469c      	mov	ip, r3
 800067e:	b2ea      	uxtb	r2, r5
 8000680:	e785      	b.n	800058e <__aeabi_fadd+0x8a>
 8000682:	2e00      	cmp	r6, #0
 8000684:	d007      	beq.n	8000696 <__aeabi_fadd+0x192>
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	03d2      	lsls	r2, r2, #15
 800068a:	4213      	tst	r3, r2
 800068c:	d003      	beq.n	8000696 <__aeabi_fadd+0x192>
 800068e:	4210      	tst	r0, r2
 8000690:	d101      	bne.n	8000696 <__aeabi_fadd+0x192>
 8000692:	000c      	movs	r4, r1
 8000694:	0003      	movs	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0db      	beq.n	8000652 <__aeabi_fadd+0x14e>
 800069a:	2080      	movs	r0, #128	; 0x80
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	4318      	orrs	r0, r3
 80006a0:	0240      	lsls	r0, r0, #9
 80006a2:	0a43      	lsrs	r3, r0, #9
 80006a4:	469c      	mov	ip, r3
 80006a6:	22ff      	movs	r2, #255	; 0xff
 80006a8:	e771      	b.n	800058e <__aeabi_fadd+0x8a>
 80006aa:	2900      	cmp	r1, #0
 80006ac:	d0d5      	beq.n	800065a <__aeabi_fadd+0x156>
 80006ae:	1b7a      	subs	r2, r7, r5
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d160      	bne.n	8000776 <__aeabi_fadd+0x272>
 80006b4:	4643      	mov	r3, r8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d024      	beq.n	8000704 <__aeabi_fadd+0x200>
 80006ba:	1e53      	subs	r3, r2, #1
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d073      	beq.n	80007a8 <__aeabi_fadd+0x2a4>
 80006c0:	2aff      	cmp	r2, #255	; 0xff
 80006c2:	d0e7      	beq.n	8000694 <__aeabi_fadd+0x190>
 80006c4:	001a      	movs	r2, r3
 80006c6:	2a1b      	cmp	r2, #27
 80006c8:	dc00      	bgt.n	80006cc <__aeabi_fadd+0x1c8>
 80006ca:	e085      	b.n	80007d8 <__aeabi_fadd+0x2d4>
 80006cc:	2001      	movs	r0, #1
 80006ce:	003d      	movs	r5, r7
 80006d0:	1980      	adds	r0, r0, r6
 80006d2:	e785      	b.n	80005e0 <__aeabi_fadd+0xdc>
 80006d4:	2320      	movs	r3, #32
 80006d6:	003a      	movs	r2, r7
 80006d8:	1b45      	subs	r5, r0, r5
 80006da:	0038      	movs	r0, r7
 80006dc:	3501      	adds	r5, #1
 80006de:	40ea      	lsrs	r2, r5
 80006e0:	1b5d      	subs	r5, r3, r5
 80006e2:	40a8      	lsls	r0, r5
 80006e4:	1e43      	subs	r3, r0, #1
 80006e6:	4198      	sbcs	r0, r3
 80006e8:	2500      	movs	r5, #0
 80006ea:	4310      	orrs	r0, r2
 80006ec:	e73e      	b.n	800056c <__aeabi_fadd+0x68>
 80006ee:	2320      	movs	r3, #32
 80006f0:	0030      	movs	r0, r6
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	0031      	movs	r1, r6
 80006f6:	4098      	lsls	r0, r3
 80006f8:	40d1      	lsrs	r1, r2
 80006fa:	1e43      	subs	r3, r0, #1
 80006fc:	4198      	sbcs	r0, r3
 80006fe:	4308      	orrs	r0, r1
 8000700:	e722      	b.n	8000548 <__aeabi_fadd+0x44>
 8000702:	000c      	movs	r4, r1
 8000704:	0003      	movs	r3, r0
 8000706:	0015      	movs	r5, r2
 8000708:	e7b4      	b.n	8000674 <__aeabi_fadd+0x170>
 800070a:	2fff      	cmp	r7, #255	; 0xff
 800070c:	d0c1      	beq.n	8000692 <__aeabi_fadd+0x18e>
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	4640      	mov	r0, r8
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	4318      	orrs	r0, r3
 8000716:	4680      	mov	r8, r0
 8000718:	2a1b      	cmp	r2, #27
 800071a:	dd51      	ble.n	80007c0 <__aeabi_fadd+0x2bc>
 800071c:	2001      	movs	r0, #1
 800071e:	000c      	movs	r4, r1
 8000720:	003d      	movs	r5, r7
 8000722:	1a30      	subs	r0, r6, r0
 8000724:	e712      	b.n	800054c <__aeabi_fadd+0x48>
 8000726:	4643      	mov	r3, r8
 8000728:	1b9f      	subs	r7, r3, r6
 800072a:	017b      	lsls	r3, r7, #5
 800072c:	d42b      	bmi.n	8000786 <__aeabi_fadd+0x282>
 800072e:	2f00      	cmp	r7, #0
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x230>
 8000732:	e710      	b.n	8000556 <__aeabi_fadd+0x52>
 8000734:	2300      	movs	r3, #0
 8000736:	2400      	movs	r4, #0
 8000738:	2200      	movs	r2, #0
 800073a:	469c      	mov	ip, r3
 800073c:	e727      	b.n	800058e <__aeabi_fadd+0x8a>
 800073e:	2320      	movs	r3, #32
 8000740:	0032      	movs	r2, r6
 8000742:	0030      	movs	r0, r6
 8000744:	40ca      	lsrs	r2, r1
 8000746:	1a59      	subs	r1, r3, r1
 8000748:	4088      	lsls	r0, r1
 800074a:	1e43      	subs	r3, r0, #1
 800074c:	4198      	sbcs	r0, r3
 800074e:	4310      	orrs	r0, r2
 8000750:	e745      	b.n	80005de <__aeabi_fadd+0xda>
 8000752:	2d00      	cmp	r5, #0
 8000754:	d14a      	bne.n	80007ec <__aeabi_fadd+0x2e8>
 8000756:	4643      	mov	r3, r8
 8000758:	2b00      	cmp	r3, #0
 800075a:	d063      	beq.n	8000824 <__aeabi_fadd+0x320>
 800075c:	2200      	movs	r2, #0
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x260>
 8000762:	e714      	b.n	800058e <__aeabi_fadd+0x8a>
 8000764:	0030      	movs	r0, r6
 8000766:	4440      	add	r0, r8
 8000768:	0143      	lsls	r3, r0, #5
 800076a:	d400      	bmi.n	800076e <__aeabi_fadd+0x26a>
 800076c:	e77e      	b.n	800066c <__aeabi_fadd+0x168>
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <__aeabi_fadd+0x334>)
 8000770:	3501      	adds	r5, #1
 8000772:	4018      	ands	r0, r3
 8000774:	e77a      	b.n	800066c <__aeabi_fadd+0x168>
 8000776:	2fff      	cmp	r7, #255	; 0xff
 8000778:	d08c      	beq.n	8000694 <__aeabi_fadd+0x190>
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	4641      	mov	r1, r8
 800077e:	04db      	lsls	r3, r3, #19
 8000780:	4319      	orrs	r1, r3
 8000782:	4688      	mov	r8, r1
 8000784:	e79f      	b.n	80006c6 <__aeabi_fadd+0x1c2>
 8000786:	4643      	mov	r3, r8
 8000788:	000c      	movs	r4, r1
 800078a:	1af7      	subs	r7, r6, r3
 800078c:	e6e3      	b.n	8000556 <__aeabi_fadd+0x52>
 800078e:	4642      	mov	r2, r8
 8000790:	2a00      	cmp	r2, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_fadd+0x292>
 8000794:	e775      	b.n	8000682 <__aeabi_fadd+0x17e>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d000      	beq.n	800079c <__aeabi_fadd+0x298>
 800079a:	e77a      	b.n	8000692 <__aeabi_fadd+0x18e>
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	03db      	lsls	r3, r3, #15
 80007a0:	2400      	movs	r4, #0
 80007a2:	469c      	mov	ip, r3
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	e6f2      	b.n	800058e <__aeabi_fadd+0x8a>
 80007a8:	0030      	movs	r0, r6
 80007aa:	4440      	add	r0, r8
 80007ac:	2501      	movs	r5, #1
 80007ae:	0143      	lsls	r3, r0, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fadd+0x2b0>
 80007b2:	e75b      	b.n	800066c <__aeabi_fadd+0x168>
 80007b4:	2502      	movs	r5, #2
 80007b6:	e718      	b.n	80005ea <__aeabi_fadd+0xe6>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2501      	movs	r5, #1
 80007bc:	1b98      	subs	r0, r3, r6
 80007be:	e6c5      	b.n	800054c <__aeabi_fadd+0x48>
 80007c0:	2320      	movs	r3, #32
 80007c2:	4644      	mov	r4, r8
 80007c4:	4640      	mov	r0, r8
 80007c6:	40d4      	lsrs	r4, r2
 80007c8:	1a9a      	subs	r2, r3, r2
 80007ca:	4090      	lsls	r0, r2
 80007cc:	1e43      	subs	r3, r0, #1
 80007ce:	4198      	sbcs	r0, r3
 80007d0:	4320      	orrs	r0, r4
 80007d2:	e7a4      	b.n	800071e <__aeabi_fadd+0x21a>
 80007d4:	000d      	movs	r5, r1
 80007d6:	e74d      	b.n	8000674 <__aeabi_fadd+0x170>
 80007d8:	2320      	movs	r3, #32
 80007da:	4641      	mov	r1, r8
 80007dc:	4640      	mov	r0, r8
 80007de:	40d1      	lsrs	r1, r2
 80007e0:	1a9a      	subs	r2, r3, r2
 80007e2:	4090      	lsls	r0, r2
 80007e4:	1e43      	subs	r3, r0, #1
 80007e6:	4198      	sbcs	r0, r3
 80007e8:	4308      	orrs	r0, r1
 80007ea:	e770      	b.n	80006ce <__aeabi_fadd+0x1ca>
 80007ec:	4642      	mov	r2, r8
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x2f0>
 80007f2:	e74f      	b.n	8000694 <__aeabi_fadd+0x190>
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fadd+0x2f6>
 80007f8:	e74d      	b.n	8000696 <__aeabi_fadd+0x192>
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	4213      	tst	r3, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x300>
 8000802:	e748      	b.n	8000696 <__aeabi_fadd+0x192>
 8000804:	4210      	tst	r0, r2
 8000806:	d000      	beq.n	800080a <__aeabi_fadd+0x306>
 8000808:	e745      	b.n	8000696 <__aeabi_fadd+0x192>
 800080a:	0003      	movs	r3, r0
 800080c:	e743      	b.n	8000696 <__aeabi_fadd+0x192>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d090      	beq.n	8000734 <__aeabi_fadd+0x230>
 8000812:	000c      	movs	r4, r1
 8000814:	4684      	mov	ip, r0
 8000816:	2200      	movs	r2, #0
 8000818:	e6b9      	b.n	800058e <__aeabi_fadd+0x8a>
 800081a:	4643      	mov	r3, r8
 800081c:	000c      	movs	r4, r1
 800081e:	1af0      	subs	r0, r6, r3
 8000820:	3501      	adds	r5, #1
 8000822:	e693      	b.n	800054c <__aeabi_fadd+0x48>
 8000824:	4684      	mov	ip, r0
 8000826:	2200      	movs	r2, #0
 8000828:	e6b1      	b.n	800058e <__aeabi_fadd+0x8a>
 800082a:	2800      	cmp	r0, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_fadd+0x32c>
 800082e:	e71d      	b.n	800066c <__aeabi_fadd+0x168>
 8000830:	2300      	movs	r3, #0
 8000832:	2400      	movs	r4, #0
 8000834:	469c      	mov	ip, r3
 8000836:	e6aa      	b.n	800058e <__aeabi_fadd+0x8a>
 8000838:	fbffffff 	.word	0xfbffffff
 800083c:	7dffffff 	.word	0x7dffffff

08000840 <__eqsf2>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	0042      	lsls	r2, r0, #1
 8000844:	0245      	lsls	r5, r0, #9
 8000846:	024e      	lsls	r6, r1, #9
 8000848:	004c      	lsls	r4, r1, #1
 800084a:	0fc3      	lsrs	r3, r0, #31
 800084c:	0a6d      	lsrs	r5, r5, #9
 800084e:	2001      	movs	r0, #1
 8000850:	0e12      	lsrs	r2, r2, #24
 8000852:	0a76      	lsrs	r6, r6, #9
 8000854:	0e24      	lsrs	r4, r4, #24
 8000856:	0fc9      	lsrs	r1, r1, #31
 8000858:	2aff      	cmp	r2, #255	; 0xff
 800085a:	d006      	beq.n	800086a <__eqsf2+0x2a>
 800085c:	2cff      	cmp	r4, #255	; 0xff
 800085e:	d003      	beq.n	8000868 <__eqsf2+0x28>
 8000860:	42a2      	cmp	r2, r4
 8000862:	d101      	bne.n	8000868 <__eqsf2+0x28>
 8000864:	42b5      	cmp	r5, r6
 8000866:	d006      	beq.n	8000876 <__eqsf2+0x36>
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	2d00      	cmp	r5, #0
 800086c:	d1fc      	bne.n	8000868 <__eqsf2+0x28>
 800086e:	2cff      	cmp	r4, #255	; 0xff
 8000870:	d1fa      	bne.n	8000868 <__eqsf2+0x28>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d1f8      	bne.n	8000868 <__eqsf2+0x28>
 8000876:	428b      	cmp	r3, r1
 8000878:	d006      	beq.n	8000888 <__eqsf2+0x48>
 800087a:	2001      	movs	r0, #1
 800087c:	2a00      	cmp	r2, #0
 800087e:	d1f3      	bne.n	8000868 <__eqsf2+0x28>
 8000880:	0028      	movs	r0, r5
 8000882:	1e43      	subs	r3, r0, #1
 8000884:	4198      	sbcs	r0, r3
 8000886:	e7ef      	b.n	8000868 <__eqsf2+0x28>
 8000888:	2000      	movs	r0, #0
 800088a:	e7ed      	b.n	8000868 <__eqsf2+0x28>

0800088c <__gesf2>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	0042      	lsls	r2, r0, #1
 8000890:	0245      	lsls	r5, r0, #9
 8000892:	024e      	lsls	r6, r1, #9
 8000894:	004c      	lsls	r4, r1, #1
 8000896:	0fc3      	lsrs	r3, r0, #31
 8000898:	0a6d      	lsrs	r5, r5, #9
 800089a:	0e12      	lsrs	r2, r2, #24
 800089c:	0a76      	lsrs	r6, r6, #9
 800089e:	0e24      	lsrs	r4, r4, #24
 80008a0:	0fc8      	lsrs	r0, r1, #31
 80008a2:	2aff      	cmp	r2, #255	; 0xff
 80008a4:	d01b      	beq.n	80008de <__gesf2+0x52>
 80008a6:	2cff      	cmp	r4, #255	; 0xff
 80008a8:	d00e      	beq.n	80008c8 <__gesf2+0x3c>
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d11b      	bne.n	80008e6 <__gesf2+0x5a>
 80008ae:	2c00      	cmp	r4, #0
 80008b0:	d101      	bne.n	80008b6 <__gesf2+0x2a>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d01c      	beq.n	80008f0 <__gesf2+0x64>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d00c      	beq.n	80008d4 <__gesf2+0x48>
 80008ba:	4283      	cmp	r3, r0
 80008bc:	d01c      	beq.n	80008f8 <__gesf2+0x6c>
 80008be:	2102      	movs	r1, #2
 80008c0:	1e58      	subs	r0, r3, #1
 80008c2:	4008      	ands	r0, r1
 80008c4:	3801      	subs	r0, #1
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d122      	bne.n	8000912 <__gesf2+0x86>
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d1f4      	bne.n	80008ba <__gesf2+0x2e>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d1f2      	bne.n	80008ba <__gesf2+0x2e>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1f6      	bne.n	80008c6 <__gesf2+0x3a>
 80008d8:	2001      	movs	r0, #1
 80008da:	4240      	negs	r0, r0
 80008dc:	e7f3      	b.n	80008c6 <__gesf2+0x3a>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d117      	bne.n	8000912 <__gesf2+0x86>
 80008e2:	2cff      	cmp	r4, #255	; 0xff
 80008e4:	d0f0      	beq.n	80008c8 <__gesf2+0x3c>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d1e7      	bne.n	80008ba <__gesf2+0x2e>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d1e5      	bne.n	80008ba <__gesf2+0x2e>
 80008ee:	e7e6      	b.n	80008be <__gesf2+0x32>
 80008f0:	2000      	movs	r0, #0
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0e7      	beq.n	80008c6 <__gesf2+0x3a>
 80008f6:	e7e2      	b.n	80008be <__gesf2+0x32>
 80008f8:	42a2      	cmp	r2, r4
 80008fa:	dc05      	bgt.n	8000908 <__gesf2+0x7c>
 80008fc:	dbea      	blt.n	80008d4 <__gesf2+0x48>
 80008fe:	42b5      	cmp	r5, r6
 8000900:	d802      	bhi.n	8000908 <__gesf2+0x7c>
 8000902:	d3e7      	bcc.n	80008d4 <__gesf2+0x48>
 8000904:	2000      	movs	r0, #0
 8000906:	e7de      	b.n	80008c6 <__gesf2+0x3a>
 8000908:	4243      	negs	r3, r0
 800090a:	4158      	adcs	r0, r3
 800090c:	0040      	lsls	r0, r0, #1
 800090e:	3801      	subs	r0, #1
 8000910:	e7d9      	b.n	80008c6 <__gesf2+0x3a>
 8000912:	2002      	movs	r0, #2
 8000914:	4240      	negs	r0, r0
 8000916:	e7d6      	b.n	80008c6 <__gesf2+0x3a>

08000918 <__lesf2>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	0042      	lsls	r2, r0, #1
 800091c:	0245      	lsls	r5, r0, #9
 800091e:	024e      	lsls	r6, r1, #9
 8000920:	004c      	lsls	r4, r1, #1
 8000922:	0fc3      	lsrs	r3, r0, #31
 8000924:	0a6d      	lsrs	r5, r5, #9
 8000926:	0e12      	lsrs	r2, r2, #24
 8000928:	0a76      	lsrs	r6, r6, #9
 800092a:	0e24      	lsrs	r4, r4, #24
 800092c:	0fc8      	lsrs	r0, r1, #31
 800092e:	2aff      	cmp	r2, #255	; 0xff
 8000930:	d00b      	beq.n	800094a <__lesf2+0x32>
 8000932:	2cff      	cmp	r4, #255	; 0xff
 8000934:	d00d      	beq.n	8000952 <__lesf2+0x3a>
 8000936:	2a00      	cmp	r2, #0
 8000938:	d11f      	bne.n	800097a <__lesf2+0x62>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d116      	bne.n	800096c <__lesf2+0x54>
 800093e:	2e00      	cmp	r6, #0
 8000940:	d114      	bne.n	800096c <__lesf2+0x54>
 8000942:	2000      	movs	r0, #0
 8000944:	2d00      	cmp	r5, #0
 8000946:	d010      	beq.n	800096a <__lesf2+0x52>
 8000948:	e009      	b.n	800095e <__lesf2+0x46>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d10c      	bne.n	8000968 <__lesf2+0x50>
 800094e:	2cff      	cmp	r4, #255	; 0xff
 8000950:	d113      	bne.n	800097a <__lesf2+0x62>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d108      	bne.n	8000968 <__lesf2+0x50>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d008      	beq.n	800096c <__lesf2+0x54>
 800095a:	4283      	cmp	r3, r0
 800095c:	d012      	beq.n	8000984 <__lesf2+0x6c>
 800095e:	2102      	movs	r1, #2
 8000960:	1e58      	subs	r0, r3, #1
 8000962:	4008      	ands	r0, r1
 8000964:	3801      	subs	r0, #1
 8000966:	e000      	b.n	800096a <__lesf2+0x52>
 8000968:	2002      	movs	r0, #2
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	2d00      	cmp	r5, #0
 800096e:	d1f4      	bne.n	800095a <__lesf2+0x42>
 8000970:	2800      	cmp	r0, #0
 8000972:	d1fa      	bne.n	800096a <__lesf2+0x52>
 8000974:	2001      	movs	r0, #1
 8000976:	4240      	negs	r0, r0
 8000978:	e7f7      	b.n	800096a <__lesf2+0x52>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d1ed      	bne.n	800095a <__lesf2+0x42>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d1eb      	bne.n	800095a <__lesf2+0x42>
 8000982:	e7ec      	b.n	800095e <__lesf2+0x46>
 8000984:	42a2      	cmp	r2, r4
 8000986:	dc05      	bgt.n	8000994 <__lesf2+0x7c>
 8000988:	dbf2      	blt.n	8000970 <__lesf2+0x58>
 800098a:	42b5      	cmp	r5, r6
 800098c:	d802      	bhi.n	8000994 <__lesf2+0x7c>
 800098e:	d3ef      	bcc.n	8000970 <__lesf2+0x58>
 8000990:	2000      	movs	r0, #0
 8000992:	e7ea      	b.n	800096a <__lesf2+0x52>
 8000994:	4243      	negs	r3, r0
 8000996:	4158      	adcs	r0, r3
 8000998:	0040      	lsls	r0, r0, #1
 800099a:	3801      	subs	r0, #1
 800099c:	e7e5      	b.n	800096a <__lesf2+0x52>
 800099e:	46c0      	nop			; (mov r8, r8)

080009a0 <__aeabi_fsub>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	46ce      	mov	lr, r9
 80009a4:	4647      	mov	r7, r8
 80009a6:	0243      	lsls	r3, r0, #9
 80009a8:	0a5b      	lsrs	r3, r3, #9
 80009aa:	024e      	lsls	r6, r1, #9
 80009ac:	00da      	lsls	r2, r3, #3
 80009ae:	4694      	mov	ip, r2
 80009b0:	0a72      	lsrs	r2, r6, #9
 80009b2:	4691      	mov	r9, r2
 80009b4:	0045      	lsls	r5, r0, #1
 80009b6:	004a      	lsls	r2, r1, #1
 80009b8:	b580      	push	{r7, lr}
 80009ba:	0e2d      	lsrs	r5, r5, #24
 80009bc:	001f      	movs	r7, r3
 80009be:	0fc4      	lsrs	r4, r0, #31
 80009c0:	0e12      	lsrs	r2, r2, #24
 80009c2:	0fc9      	lsrs	r1, r1, #31
 80009c4:	09b6      	lsrs	r6, r6, #6
 80009c6:	2aff      	cmp	r2, #255	; 0xff
 80009c8:	d05b      	beq.n	8000a82 <__aeabi_fsub+0xe2>
 80009ca:	2001      	movs	r0, #1
 80009cc:	4041      	eors	r1, r0
 80009ce:	428c      	cmp	r4, r1
 80009d0:	d039      	beq.n	8000a46 <__aeabi_fsub+0xa6>
 80009d2:	1aa8      	subs	r0, r5, r2
 80009d4:	2800      	cmp	r0, #0
 80009d6:	dd5a      	ble.n	8000a8e <__aeabi_fsub+0xee>
 80009d8:	2a00      	cmp	r2, #0
 80009da:	d06a      	beq.n	8000ab2 <__aeabi_fsub+0x112>
 80009dc:	2dff      	cmp	r5, #255	; 0xff
 80009de:	d100      	bne.n	80009e2 <__aeabi_fsub+0x42>
 80009e0:	e0d9      	b.n	8000b96 <__aeabi_fsub+0x1f6>
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	04d2      	lsls	r2, r2, #19
 80009e6:	4316      	orrs	r6, r2
 80009e8:	281b      	cmp	r0, #27
 80009ea:	dc00      	bgt.n	80009ee <__aeabi_fsub+0x4e>
 80009ec:	e0e9      	b.n	8000bc2 <__aeabi_fsub+0x222>
 80009ee:	2001      	movs	r0, #1
 80009f0:	4663      	mov	r3, ip
 80009f2:	1a18      	subs	r0, r3, r0
 80009f4:	0143      	lsls	r3, r0, #5
 80009f6:	d400      	bmi.n	80009fa <__aeabi_fsub+0x5a>
 80009f8:	e0b4      	b.n	8000b64 <__aeabi_fsub+0x1c4>
 80009fa:	0180      	lsls	r0, r0, #6
 80009fc:	0987      	lsrs	r7, r0, #6
 80009fe:	0038      	movs	r0, r7
 8000a00:	f001 f88c 	bl	8001b1c <__clzsi2>
 8000a04:	3805      	subs	r0, #5
 8000a06:	4087      	lsls	r7, r0
 8000a08:	4285      	cmp	r5, r0
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_fsub+0x6e>
 8000a0c:	e0cc      	b.n	8000ba8 <__aeabi_fsub+0x208>
 8000a0e:	1a2d      	subs	r5, r5, r0
 8000a10:	48b5      	ldr	r0, [pc, #724]	; (8000ce8 <__aeabi_fsub+0x348>)
 8000a12:	4038      	ands	r0, r7
 8000a14:	0743      	lsls	r3, r0, #29
 8000a16:	d004      	beq.n	8000a22 <__aeabi_fsub+0x82>
 8000a18:	230f      	movs	r3, #15
 8000a1a:	4003      	ands	r3, r0
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fsub+0x82>
 8000a20:	3004      	adds	r0, #4
 8000a22:	0143      	lsls	r3, r0, #5
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_fsub+0x88>
 8000a26:	e0a0      	b.n	8000b6a <__aeabi_fsub+0x1ca>
 8000a28:	1c6a      	adds	r2, r5, #1
 8000a2a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x90>
 8000a2e:	e08d      	b.n	8000b4c <__aeabi_fsub+0x1ac>
 8000a30:	0180      	lsls	r0, r0, #6
 8000a32:	0a47      	lsrs	r7, r0, #9
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	05d0      	lsls	r0, r2, #23
 8000a38:	4338      	orrs	r0, r7
 8000a3a:	07e4      	lsls	r4, r4, #31
 8000a3c:	4320      	orrs	r0, r4
 8000a3e:	bcc0      	pop	{r6, r7}
 8000a40:	46b9      	mov	r9, r7
 8000a42:	46b0      	mov	r8, r6
 8000a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a46:	1aa8      	subs	r0, r5, r2
 8000a48:	4680      	mov	r8, r0
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	dd45      	ble.n	8000ada <__aeabi_fsub+0x13a>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d070      	beq.n	8000b34 <__aeabi_fsub+0x194>
 8000a52:	2dff      	cmp	r5, #255	; 0xff
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0xb8>
 8000a56:	e09e      	b.n	8000b96 <__aeabi_fsub+0x1f6>
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	04db      	lsls	r3, r3, #19
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	4643      	mov	r3, r8
 8000a60:	2b1b      	cmp	r3, #27
 8000a62:	dc00      	bgt.n	8000a66 <__aeabi_fsub+0xc6>
 8000a64:	e0d2      	b.n	8000c0c <__aeabi_fsub+0x26c>
 8000a66:	2001      	movs	r0, #1
 8000a68:	4460      	add	r0, ip
 8000a6a:	0143      	lsls	r3, r0, #5
 8000a6c:	d57a      	bpl.n	8000b64 <__aeabi_fsub+0x1c4>
 8000a6e:	3501      	adds	r5, #1
 8000a70:	2dff      	cmp	r5, #255	; 0xff
 8000a72:	d06b      	beq.n	8000b4c <__aeabi_fsub+0x1ac>
 8000a74:	2301      	movs	r3, #1
 8000a76:	4a9d      	ldr	r2, [pc, #628]	; (8000cec <__aeabi_fsub+0x34c>)
 8000a78:	4003      	ands	r3, r0
 8000a7a:	0840      	lsrs	r0, r0, #1
 8000a7c:	4010      	ands	r0, r2
 8000a7e:	4318      	orrs	r0, r3
 8000a80:	e7c8      	b.n	8000a14 <__aeabi_fsub+0x74>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d020      	beq.n	8000ac8 <__aeabi_fsub+0x128>
 8000a86:	428c      	cmp	r4, r1
 8000a88:	d023      	beq.n	8000ad2 <__aeabi_fsub+0x132>
 8000a8a:	0028      	movs	r0, r5
 8000a8c:	38ff      	subs	r0, #255	; 0xff
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d039      	beq.n	8000b06 <__aeabi_fsub+0x166>
 8000a92:	1b57      	subs	r7, r2, r5
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	d000      	beq.n	8000a9a <__aeabi_fsub+0xfa>
 8000a98:	e09d      	b.n	8000bd6 <__aeabi_fsub+0x236>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fsub+0x102>
 8000aa0:	e0db      	b.n	8000c5a <__aeabi_fsub+0x2ba>
 8000aa2:	1e7b      	subs	r3, r7, #1
 8000aa4:	2f01      	cmp	r7, #1
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x10a>
 8000aa8:	e10d      	b.n	8000cc6 <__aeabi_fsub+0x326>
 8000aaa:	2fff      	cmp	r7, #255	; 0xff
 8000aac:	d071      	beq.n	8000b92 <__aeabi_fsub+0x1f2>
 8000aae:	001f      	movs	r7, r3
 8000ab0:	e098      	b.n	8000be4 <__aeabi_fsub+0x244>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0x118>
 8000ab6:	e0a7      	b.n	8000c08 <__aeabi_fsub+0x268>
 8000ab8:	1e42      	subs	r2, r0, #1
 8000aba:	2801      	cmp	r0, #1
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fsub+0x120>
 8000abe:	e0e6      	b.n	8000c8e <__aeabi_fsub+0x2ee>
 8000ac0:	28ff      	cmp	r0, #255	; 0xff
 8000ac2:	d068      	beq.n	8000b96 <__aeabi_fsub+0x1f6>
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	e78f      	b.n	80009e8 <__aeabi_fsub+0x48>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4041      	eors	r1, r0
 8000acc:	42a1      	cmp	r1, r4
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0x132>
 8000ad0:	e77f      	b.n	80009d2 <__aeabi_fsub+0x32>
 8000ad2:	20ff      	movs	r0, #255	; 0xff
 8000ad4:	4240      	negs	r0, r0
 8000ad6:	4680      	mov	r8, r0
 8000ad8:	44a8      	add	r8, r5
 8000ada:	4640      	mov	r0, r8
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d038      	beq.n	8000b52 <__aeabi_fsub+0x1b2>
 8000ae0:	1b51      	subs	r1, r2, r5
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0x148>
 8000ae6:	e0ae      	b.n	8000c46 <__aeabi_fsub+0x2a6>
 8000ae8:	2aff      	cmp	r2, #255	; 0xff
 8000aea:	d100      	bne.n	8000aee <__aeabi_fsub+0x14e>
 8000aec:	e0df      	b.n	8000cae <__aeabi_fsub+0x30e>
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	4660      	mov	r0, ip
 8000af2:	04db      	lsls	r3, r3, #19
 8000af4:	4318      	orrs	r0, r3
 8000af6:	4684      	mov	ip, r0
 8000af8:	291b      	cmp	r1, #27
 8000afa:	dc00      	bgt.n	8000afe <__aeabi_fsub+0x15e>
 8000afc:	e0d9      	b.n	8000cb2 <__aeabi_fsub+0x312>
 8000afe:	2001      	movs	r0, #1
 8000b00:	0015      	movs	r5, r2
 8000b02:	1980      	adds	r0, r0, r6
 8000b04:	e7b1      	b.n	8000a6a <__aeabi_fsub+0xca>
 8000b06:	20fe      	movs	r0, #254	; 0xfe
 8000b08:	1c6a      	adds	r2, r5, #1
 8000b0a:	4210      	tst	r0, r2
 8000b0c:	d171      	bne.n	8000bf2 <__aeabi_fsub+0x252>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d000      	beq.n	8000b14 <__aeabi_fsub+0x174>
 8000b12:	e0a6      	b.n	8000c62 <__aeabi_fsub+0x2c2>
 8000b14:	4663      	mov	r3, ip
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d100      	bne.n	8000b1c <__aeabi_fsub+0x17c>
 8000b1a:	e0d9      	b.n	8000cd0 <__aeabi_fsub+0x330>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x184>
 8000b22:	e788      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000b24:	1b98      	subs	r0, r3, r6
 8000b26:	0143      	lsls	r3, r0, #5
 8000b28:	d400      	bmi.n	8000b2c <__aeabi_fsub+0x18c>
 8000b2a:	e0e1      	b.n	8000cf0 <__aeabi_fsub+0x350>
 8000b2c:	4663      	mov	r3, ip
 8000b2e:	000c      	movs	r4, r1
 8000b30:	1af0      	subs	r0, r6, r3
 8000b32:	e76f      	b.n	8000a14 <__aeabi_fsub+0x74>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x19a>
 8000b38:	e0b7      	b.n	8000caa <__aeabi_fsub+0x30a>
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	2801      	cmp	r0, #1
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fsub+0x1a4>
 8000b42:	e09c      	b.n	8000c7e <__aeabi_fsub+0x2de>
 8000b44:	28ff      	cmp	r0, #255	; 0xff
 8000b46:	d026      	beq.n	8000b96 <__aeabi_fsub+0x1f6>
 8000b48:	4690      	mov	r8, r2
 8000b4a:	e788      	b.n	8000a5e <__aeabi_fsub+0xbe>
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	2700      	movs	r7, #0
 8000b50:	e771      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000b52:	20fe      	movs	r0, #254	; 0xfe
 8000b54:	1c6a      	adds	r2, r5, #1
 8000b56:	4210      	tst	r0, r2
 8000b58:	d064      	beq.n	8000c24 <__aeabi_fsub+0x284>
 8000b5a:	2aff      	cmp	r2, #255	; 0xff
 8000b5c:	d0f6      	beq.n	8000b4c <__aeabi_fsub+0x1ac>
 8000b5e:	0015      	movs	r5, r2
 8000b60:	4466      	add	r6, ip
 8000b62:	0870      	lsrs	r0, r6, #1
 8000b64:	0743      	lsls	r3, r0, #29
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0x1ca>
 8000b68:	e756      	b.n	8000a18 <__aeabi_fsub+0x78>
 8000b6a:	08c3      	lsrs	r3, r0, #3
 8000b6c:	2dff      	cmp	r5, #255	; 0xff
 8000b6e:	d012      	beq.n	8000b96 <__aeabi_fsub+0x1f6>
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5f      	lsrs	r7, r3, #9
 8000b74:	b2ea      	uxtb	r2, r5
 8000b76:	e75e      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000b78:	4662      	mov	r2, ip
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0x1e0>
 8000b7e:	e096      	b.n	8000cae <__aeabi_fsub+0x30e>
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d008      	beq.n	8000b96 <__aeabi_fsub+0x1f6>
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	03d2      	lsls	r2, r2, #15
 8000b88:	4213      	tst	r3, r2
 8000b8a:	d004      	beq.n	8000b96 <__aeabi_fsub+0x1f6>
 8000b8c:	4648      	mov	r0, r9
 8000b8e:	4210      	tst	r0, r2
 8000b90:	d101      	bne.n	8000b96 <__aeabi_fsub+0x1f6>
 8000b92:	000c      	movs	r4, r1
 8000b94:	464b      	mov	r3, r9
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0d8      	beq.n	8000b4c <__aeabi_fsub+0x1ac>
 8000b9a:	2780      	movs	r7, #128	; 0x80
 8000b9c:	03ff      	lsls	r7, r7, #15
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	027f      	lsls	r7, r7, #9
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	0a7f      	lsrs	r7, r7, #9
 8000ba6:	e746      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000ba8:	2320      	movs	r3, #32
 8000baa:	003a      	movs	r2, r7
 8000bac:	1b45      	subs	r5, r0, r5
 8000bae:	0038      	movs	r0, r7
 8000bb0:	3501      	adds	r5, #1
 8000bb2:	40ea      	lsrs	r2, r5
 8000bb4:	1b5d      	subs	r5, r3, r5
 8000bb6:	40a8      	lsls	r0, r5
 8000bb8:	1e43      	subs	r3, r0, #1
 8000bba:	4198      	sbcs	r0, r3
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	e728      	b.n	8000a14 <__aeabi_fsub+0x74>
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	1a1b      	subs	r3, r3, r0
 8000bc6:	0032      	movs	r2, r6
 8000bc8:	409e      	lsls	r6, r3
 8000bca:	40c2      	lsrs	r2, r0
 8000bcc:	0030      	movs	r0, r6
 8000bce:	1e43      	subs	r3, r0, #1
 8000bd0:	4198      	sbcs	r0, r3
 8000bd2:	4310      	orrs	r0, r2
 8000bd4:	e70c      	b.n	80009f0 <__aeabi_fsub+0x50>
 8000bd6:	2aff      	cmp	r2, #255	; 0xff
 8000bd8:	d0db      	beq.n	8000b92 <__aeabi_fsub+0x1f2>
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	4660      	mov	r0, ip
 8000bde:	04db      	lsls	r3, r3, #19
 8000be0:	4318      	orrs	r0, r3
 8000be2:	4684      	mov	ip, r0
 8000be4:	2f1b      	cmp	r7, #27
 8000be6:	dd56      	ble.n	8000c96 <__aeabi_fsub+0x2f6>
 8000be8:	2001      	movs	r0, #1
 8000bea:	000c      	movs	r4, r1
 8000bec:	0015      	movs	r5, r2
 8000bee:	1a30      	subs	r0, r6, r0
 8000bf0:	e700      	b.n	80009f4 <__aeabi_fsub+0x54>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	1b9f      	subs	r7, r3, r6
 8000bf6:	017b      	lsls	r3, r7, #5
 8000bf8:	d43d      	bmi.n	8000c76 <__aeabi_fsub+0x2d6>
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fsub+0x260>
 8000bfe:	e6fe      	b.n	80009fe <__aeabi_fsub+0x5e>
 8000c00:	2400      	movs	r4, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	2700      	movs	r7, #0
 8000c06:	e716      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000c08:	0005      	movs	r5, r0
 8000c0a:	e7af      	b.n	8000b6c <__aeabi_fsub+0x1cc>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	4643      	mov	r3, r8
 8000c10:	4641      	mov	r1, r8
 8000c12:	40da      	lsrs	r2, r3
 8000c14:	2320      	movs	r3, #32
 8000c16:	1a5b      	subs	r3, r3, r1
 8000c18:	409e      	lsls	r6, r3
 8000c1a:	0030      	movs	r0, r6
 8000c1c:	1e43      	subs	r3, r0, #1
 8000c1e:	4198      	sbcs	r0, r3
 8000c20:	4310      	orrs	r0, r2
 8000c22:	e721      	b.n	8000a68 <__aeabi_fsub+0xc8>
 8000c24:	2d00      	cmp	r5, #0
 8000c26:	d1a7      	bne.n	8000b78 <__aeabi_fsub+0x1d8>
 8000c28:	4663      	mov	r3, ip
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d059      	beq.n	8000ce2 <__aeabi_fsub+0x342>
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x296>
 8000c34:	e6ff      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000c36:	0030      	movs	r0, r6
 8000c38:	4460      	add	r0, ip
 8000c3a:	0143      	lsls	r3, r0, #5
 8000c3c:	d592      	bpl.n	8000b64 <__aeabi_fsub+0x1c4>
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <__aeabi_fsub+0x348>)
 8000c40:	3501      	adds	r5, #1
 8000c42:	4018      	ands	r0, r3
 8000c44:	e78e      	b.n	8000b64 <__aeabi_fsub+0x1c4>
 8000c46:	4663      	mov	r3, ip
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d047      	beq.n	8000cdc <__aeabi_fsub+0x33c>
 8000c4c:	1e4b      	subs	r3, r1, #1
 8000c4e:	2901      	cmp	r1, #1
 8000c50:	d015      	beq.n	8000c7e <__aeabi_fsub+0x2de>
 8000c52:	29ff      	cmp	r1, #255	; 0xff
 8000c54:	d02b      	beq.n	8000cae <__aeabi_fsub+0x30e>
 8000c56:	0019      	movs	r1, r3
 8000c58:	e74e      	b.n	8000af8 <__aeabi_fsub+0x158>
 8000c5a:	000c      	movs	r4, r1
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	003d      	movs	r5, r7
 8000c60:	e784      	b.n	8000b6c <__aeabi_fsub+0x1cc>
 8000c62:	4662      	mov	r2, ip
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d18b      	bne.n	8000b80 <__aeabi_fsub+0x1e0>
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d192      	bne.n	8000b92 <__aeabi_fsub+0x1f2>
 8000c6c:	2780      	movs	r7, #128	; 0x80
 8000c6e:	2400      	movs	r4, #0
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	03ff      	lsls	r7, r7, #15
 8000c74:	e6df      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000c76:	4663      	mov	r3, ip
 8000c78:	000c      	movs	r4, r1
 8000c7a:	1af7      	subs	r7, r6, r3
 8000c7c:	e6bf      	b.n	80009fe <__aeabi_fsub+0x5e>
 8000c7e:	0030      	movs	r0, r6
 8000c80:	4460      	add	r0, ip
 8000c82:	2501      	movs	r5, #1
 8000c84:	0143      	lsls	r3, r0, #5
 8000c86:	d400      	bmi.n	8000c8a <__aeabi_fsub+0x2ea>
 8000c88:	e76c      	b.n	8000b64 <__aeabi_fsub+0x1c4>
 8000c8a:	2502      	movs	r5, #2
 8000c8c:	e6f2      	b.n	8000a74 <__aeabi_fsub+0xd4>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	2501      	movs	r5, #1
 8000c92:	1b98      	subs	r0, r3, r6
 8000c94:	e6ae      	b.n	80009f4 <__aeabi_fsub+0x54>
 8000c96:	2320      	movs	r3, #32
 8000c98:	4664      	mov	r4, ip
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	40fc      	lsrs	r4, r7
 8000c9e:	1bdf      	subs	r7, r3, r7
 8000ca0:	40b8      	lsls	r0, r7
 8000ca2:	1e43      	subs	r3, r0, #1
 8000ca4:	4198      	sbcs	r0, r3
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	e79f      	b.n	8000bea <__aeabi_fsub+0x24a>
 8000caa:	0005      	movs	r5, r0
 8000cac:	e75e      	b.n	8000b6c <__aeabi_fsub+0x1cc>
 8000cae:	464b      	mov	r3, r9
 8000cb0:	e771      	b.n	8000b96 <__aeabi_fsub+0x1f6>
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	4665      	mov	r5, ip
 8000cb6:	4660      	mov	r0, ip
 8000cb8:	40cd      	lsrs	r5, r1
 8000cba:	1a59      	subs	r1, r3, r1
 8000cbc:	4088      	lsls	r0, r1
 8000cbe:	1e43      	subs	r3, r0, #1
 8000cc0:	4198      	sbcs	r0, r3
 8000cc2:	4328      	orrs	r0, r5
 8000cc4:	e71c      	b.n	8000b00 <__aeabi_fsub+0x160>
 8000cc6:	4663      	mov	r3, ip
 8000cc8:	000c      	movs	r4, r1
 8000cca:	2501      	movs	r5, #1
 8000ccc:	1af0      	subs	r0, r6, r3
 8000cce:	e691      	b.n	80009f4 <__aeabi_fsub+0x54>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d095      	beq.n	8000c00 <__aeabi_fsub+0x260>
 8000cd4:	000c      	movs	r4, r1
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e6ac      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000cdc:	464b      	mov	r3, r9
 8000cde:	000d      	movs	r5, r1
 8000ce0:	e744      	b.n	8000b6c <__aeabi_fsub+0x1cc>
 8000ce2:	464f      	mov	r7, r9
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e6a6      	b.n	8000a36 <__aeabi_fsub+0x96>
 8000ce8:	fbffffff 	.word	0xfbffffff
 8000cec:	7dffffff 	.word	0x7dffffff
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fsub+0x356>
 8000cf4:	e736      	b.n	8000b64 <__aeabi_fsub+0x1c4>
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e69c      	b.n	8000a36 <__aeabi_fsub+0x96>

08000cfc <__aeabi_dmul>:
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	4657      	mov	r7, sl
 8000d00:	464e      	mov	r6, r9
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	b5e0      	push	{r5, r6, r7, lr}
 8000d08:	4698      	mov	r8, r3
 8000d0a:	030c      	lsls	r4, r1, #12
 8000d0c:	004b      	lsls	r3, r1, #1
 8000d0e:	0006      	movs	r6, r0
 8000d10:	4692      	mov	sl, r2
 8000d12:	b087      	sub	sp, #28
 8000d14:	0b24      	lsrs	r4, r4, #12
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	0fcf      	lsrs	r7, r1, #31
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dmul+0x24>
 8000d1e:	e15c      	b.n	8000fda <__aeabi_dmul+0x2de>
 8000d20:	4ad9      	ldr	r2, [pc, #868]	; (8001088 <__aeabi_dmul+0x38c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dmul+0x2c>
 8000d26:	e175      	b.n	8001014 <__aeabi_dmul+0x318>
 8000d28:	0f42      	lsrs	r2, r0, #29
 8000d2a:	00e4      	lsls	r4, r4, #3
 8000d2c:	4314      	orrs	r4, r2
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	0412      	lsls	r2, r2, #16
 8000d32:	4314      	orrs	r4, r2
 8000d34:	4ad5      	ldr	r2, [pc, #852]	; (800108c <__aeabi_dmul+0x390>)
 8000d36:	00c5      	lsls	r5, r0, #3
 8000d38:	4694      	mov	ip, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4699      	mov	r9, r3
 8000d42:	469b      	mov	fp, r3
 8000d44:	4643      	mov	r3, r8
 8000d46:	4642      	mov	r2, r8
 8000d48:	031e      	lsls	r6, r3, #12
 8000d4a:	0fd2      	lsrs	r2, r2, #31
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4650      	mov	r0, sl
 8000d50:	4690      	mov	r8, r2
 8000d52:	0b36      	lsrs	r6, r6, #12
 8000d54:	0d5b      	lsrs	r3, r3, #21
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dmul+0x5e>
 8000d58:	e120      	b.n	8000f9c <__aeabi_dmul+0x2a0>
 8000d5a:	4acb      	ldr	r2, [pc, #812]	; (8001088 <__aeabi_dmul+0x38c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dmul+0x66>
 8000d60:	e162      	b.n	8001028 <__aeabi_dmul+0x32c>
 8000d62:	49ca      	ldr	r1, [pc, #808]	; (800108c <__aeabi_dmul+0x390>)
 8000d64:	0f42      	lsrs	r2, r0, #29
 8000d66:	468c      	mov	ip, r1
 8000d68:	9900      	ldr	r1, [sp, #0]
 8000d6a:	4463      	add	r3, ip
 8000d6c:	00f6      	lsls	r6, r6, #3
 8000d6e:	468c      	mov	ip, r1
 8000d70:	4316      	orrs	r6, r2
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	449c      	add	ip, r3
 8000d76:	0412      	lsls	r2, r2, #16
 8000d78:	4663      	mov	r3, ip
 8000d7a:	4316      	orrs	r6, r2
 8000d7c:	00c2      	lsls	r2, r0, #3
 8000d7e:	2000      	movs	r0, #0
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	9900      	ldr	r1, [sp, #0]
 8000d84:	4643      	mov	r3, r8
 8000d86:	3101      	adds	r1, #1
 8000d88:	468c      	mov	ip, r1
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	407b      	eors	r3, r7
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	290f      	cmp	r1, #15
 8000d92:	d826      	bhi.n	8000de2 <__aeabi_dmul+0xe6>
 8000d94:	4bbe      	ldr	r3, [pc, #760]	; (8001090 <__aeabi_dmul+0x394>)
 8000d96:	0089      	lsls	r1, r1, #2
 8000d98:	5859      	ldr	r1, [r3, r1]
 8000d9a:	468f      	mov	pc, r1
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	0034      	movs	r4, r6
 8000da2:	0015      	movs	r5, r2
 8000da4:	4683      	mov	fp, r0
 8000da6:	465b      	mov	r3, fp
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d016      	beq.n	8000dda <__aeabi_dmul+0xde>
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dmul+0xb6>
 8000db0:	e203      	b.n	80011ba <__aeabi_dmul+0x4be>
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d000      	beq.n	8000db8 <__aeabi_dmul+0xbc>
 8000db6:	e0cd      	b.n	8000f54 <__aeabi_dmul+0x258>
 8000db8:	2200      	movs	r2, #0
 8000dba:	2400      	movs	r4, #0
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	9b01      	ldr	r3, [sp, #4]
 8000dc0:	0512      	lsls	r2, r2, #20
 8000dc2:	4322      	orrs	r2, r4
 8000dc4:	07db      	lsls	r3, r3, #31
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	0028      	movs	r0, r5
 8000dca:	0011      	movs	r1, r2
 8000dcc:	b007      	add	sp, #28
 8000dce:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd0:	46bb      	mov	fp, r7
 8000dd2:	46b2      	mov	sl, r6
 8000dd4:	46a9      	mov	r9, r5
 8000dd6:	46a0      	mov	r8, r4
 8000dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dda:	2400      	movs	r4, #0
 8000ddc:	2500      	movs	r5, #0
 8000dde:	4aaa      	ldr	r2, [pc, #680]	; (8001088 <__aeabi_dmul+0x38c>)
 8000de0:	e7ed      	b.n	8000dbe <__aeabi_dmul+0xc2>
 8000de2:	0c28      	lsrs	r0, r5, #16
 8000de4:	042d      	lsls	r5, r5, #16
 8000de6:	0c2d      	lsrs	r5, r5, #16
 8000de8:	002b      	movs	r3, r5
 8000dea:	0c11      	lsrs	r1, r2, #16
 8000dec:	0412      	lsls	r2, r2, #16
 8000dee:	0c12      	lsrs	r2, r2, #16
 8000df0:	4353      	muls	r3, r2
 8000df2:	4698      	mov	r8, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	002f      	movs	r7, r5
 8000df8:	4343      	muls	r3, r0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	434f      	muls	r7, r1
 8000dfe:	444f      	add	r7, r9
 8000e00:	46bb      	mov	fp, r7
 8000e02:	4647      	mov	r7, r8
 8000e04:	000b      	movs	r3, r1
 8000e06:	0c3f      	lsrs	r7, r7, #16
 8000e08:	46ba      	mov	sl, r7
 8000e0a:	4343      	muls	r3, r0
 8000e0c:	44da      	add	sl, fp
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	45d1      	cmp	r9, sl
 8000e12:	d904      	bls.n	8000e1e <__aeabi_dmul+0x122>
 8000e14:	2780      	movs	r7, #128	; 0x80
 8000e16:	027f      	lsls	r7, r7, #9
 8000e18:	46b9      	mov	r9, r7
 8000e1a:	444b      	add	r3, r9
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	4653      	mov	r3, sl
 8000e20:	0c1b      	lsrs	r3, r3, #16
 8000e22:	469b      	mov	fp, r3
 8000e24:	4653      	mov	r3, sl
 8000e26:	041f      	lsls	r7, r3, #16
 8000e28:	4643      	mov	r3, r8
 8000e2a:	041b      	lsls	r3, r3, #16
 8000e2c:	0c1b      	lsrs	r3, r3, #16
 8000e2e:	4698      	mov	r8, r3
 8000e30:	003b      	movs	r3, r7
 8000e32:	4443      	add	r3, r8
 8000e34:	9304      	str	r3, [sp, #16]
 8000e36:	0c33      	lsrs	r3, r6, #16
 8000e38:	0436      	lsls	r6, r6, #16
 8000e3a:	0c36      	lsrs	r6, r6, #16
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	0033      	movs	r3, r6
 8000e40:	4343      	muls	r3, r0
 8000e42:	4699      	mov	r9, r3
 8000e44:	4643      	mov	r3, r8
 8000e46:	4343      	muls	r3, r0
 8000e48:	002f      	movs	r7, r5
 8000e4a:	469a      	mov	sl, r3
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4377      	muls	r7, r6
 8000e50:	435d      	muls	r5, r3
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	444d      	add	r5, r9
 8000e56:	1945      	adds	r5, r0, r5
 8000e58:	45a9      	cmp	r9, r5
 8000e5a:	d903      	bls.n	8000e64 <__aeabi_dmul+0x168>
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	4699      	mov	r9, r3
 8000e62:	44ca      	add	sl, r9
 8000e64:	043f      	lsls	r7, r7, #16
 8000e66:	0c28      	lsrs	r0, r5, #16
 8000e68:	0c3f      	lsrs	r7, r7, #16
 8000e6a:	042d      	lsls	r5, r5, #16
 8000e6c:	19ed      	adds	r5, r5, r7
 8000e6e:	0c27      	lsrs	r7, r4, #16
 8000e70:	0424      	lsls	r4, r4, #16
 8000e72:	0c24      	lsrs	r4, r4, #16
 8000e74:	0003      	movs	r3, r0
 8000e76:	0020      	movs	r0, r4
 8000e78:	4350      	muls	r0, r2
 8000e7a:	437a      	muls	r2, r7
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	003a      	movs	r2, r7
 8000e80:	4453      	add	r3, sl
 8000e82:	9305      	str	r3, [sp, #20]
 8000e84:	0c03      	lsrs	r3, r0, #16
 8000e86:	469a      	mov	sl, r3
 8000e88:	434a      	muls	r2, r1
 8000e8a:	4361      	muls	r1, r4
 8000e8c:	4449      	add	r1, r9
 8000e8e:	4451      	add	r1, sl
 8000e90:	44ab      	add	fp, r5
 8000e92:	4589      	cmp	r9, r1
 8000e94:	d903      	bls.n	8000e9e <__aeabi_dmul+0x1a2>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	025b      	lsls	r3, r3, #9
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	444a      	add	r2, r9
 8000e9e:	0400      	lsls	r0, r0, #16
 8000ea0:	0c0b      	lsrs	r3, r1, #16
 8000ea2:	0c00      	lsrs	r0, r0, #16
 8000ea4:	0409      	lsls	r1, r1, #16
 8000ea6:	1809      	adds	r1, r1, r0
 8000ea8:	0020      	movs	r0, r4
 8000eaa:	4699      	mov	r9, r3
 8000eac:	4643      	mov	r3, r8
 8000eae:	4370      	muls	r0, r6
 8000eb0:	435c      	muls	r4, r3
 8000eb2:	437e      	muls	r6, r7
 8000eb4:	435f      	muls	r7, r3
 8000eb6:	0c03      	lsrs	r3, r0, #16
 8000eb8:	4698      	mov	r8, r3
 8000eba:	19a4      	adds	r4, r4, r6
 8000ebc:	4444      	add	r4, r8
 8000ebe:	444a      	add	r2, r9
 8000ec0:	9703      	str	r7, [sp, #12]
 8000ec2:	42a6      	cmp	r6, r4
 8000ec4:	d904      	bls.n	8000ed0 <__aeabi_dmul+0x1d4>
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	025b      	lsls	r3, r3, #9
 8000eca:	4698      	mov	r8, r3
 8000ecc:	4447      	add	r7, r8
 8000ece:	9703      	str	r7, [sp, #12]
 8000ed0:	0423      	lsls	r3, r4, #16
 8000ed2:	9e02      	ldr	r6, [sp, #8]
 8000ed4:	469a      	mov	sl, r3
 8000ed6:	9b05      	ldr	r3, [sp, #20]
 8000ed8:	445e      	add	r6, fp
 8000eda:	4698      	mov	r8, r3
 8000edc:	42ae      	cmp	r6, r5
 8000ede:	41ad      	sbcs	r5, r5
 8000ee0:	1876      	adds	r6, r6, r1
 8000ee2:	428e      	cmp	r6, r1
 8000ee4:	4189      	sbcs	r1, r1
 8000ee6:	0400      	lsls	r0, r0, #16
 8000ee8:	0c00      	lsrs	r0, r0, #16
 8000eea:	4450      	add	r0, sl
 8000eec:	4440      	add	r0, r8
 8000eee:	426d      	negs	r5, r5
 8000ef0:	1947      	adds	r7, r0, r5
 8000ef2:	46b8      	mov	r8, r7
 8000ef4:	4693      	mov	fp, r2
 8000ef6:	4249      	negs	r1, r1
 8000ef8:	4689      	mov	r9, r1
 8000efa:	44c3      	add	fp, r8
 8000efc:	44d9      	add	r9, fp
 8000efe:	4298      	cmp	r0, r3
 8000f00:	4180      	sbcs	r0, r0
 8000f02:	45a8      	cmp	r8, r5
 8000f04:	41ad      	sbcs	r5, r5
 8000f06:	4593      	cmp	fp, r2
 8000f08:	4192      	sbcs	r2, r2
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	4189      	sbcs	r1, r1
 8000f0e:	426d      	negs	r5, r5
 8000f10:	4240      	negs	r0, r0
 8000f12:	4328      	orrs	r0, r5
 8000f14:	0c24      	lsrs	r4, r4, #16
 8000f16:	4252      	negs	r2, r2
 8000f18:	4249      	negs	r1, r1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	1900      	adds	r0, r0, r4
 8000f20:	1880      	adds	r0, r0, r2
 8000f22:	18c7      	adds	r7, r0, r3
 8000f24:	464b      	mov	r3, r9
 8000f26:	0ddc      	lsrs	r4, r3, #23
 8000f28:	9b04      	ldr	r3, [sp, #16]
 8000f2a:	0275      	lsls	r5, r6, #9
 8000f2c:	431d      	orrs	r5, r3
 8000f2e:	1e6a      	subs	r2, r5, #1
 8000f30:	4195      	sbcs	r5, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	0df6      	lsrs	r6, r6, #23
 8000f36:	027f      	lsls	r7, r7, #9
 8000f38:	4335      	orrs	r5, r6
 8000f3a:	025a      	lsls	r2, r3, #9
 8000f3c:	433c      	orrs	r4, r7
 8000f3e:	4315      	orrs	r5, r2
 8000f40:	01fb      	lsls	r3, r7, #7
 8000f42:	d400      	bmi.n	8000f46 <__aeabi_dmul+0x24a>
 8000f44:	e11c      	b.n	8001180 <__aeabi_dmul+0x484>
 8000f46:	2101      	movs	r1, #1
 8000f48:	086a      	lsrs	r2, r5, #1
 8000f4a:	400d      	ands	r5, r1
 8000f4c:	4315      	orrs	r5, r2
 8000f4e:	07e2      	lsls	r2, r4, #31
 8000f50:	4315      	orrs	r5, r2
 8000f52:	0864      	lsrs	r4, r4, #1
 8000f54:	494f      	ldr	r1, [pc, #316]	; (8001094 <__aeabi_dmul+0x398>)
 8000f56:	4461      	add	r1, ip
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	dc00      	bgt.n	8000f5e <__aeabi_dmul+0x262>
 8000f5c:	e0b0      	b.n	80010c0 <__aeabi_dmul+0x3c4>
 8000f5e:	076b      	lsls	r3, r5, #29
 8000f60:	d009      	beq.n	8000f76 <__aeabi_dmul+0x27a>
 8000f62:	220f      	movs	r2, #15
 8000f64:	402a      	ands	r2, r5
 8000f66:	2a04      	cmp	r2, #4
 8000f68:	d005      	beq.n	8000f76 <__aeabi_dmul+0x27a>
 8000f6a:	1d2a      	adds	r2, r5, #4
 8000f6c:	42aa      	cmp	r2, r5
 8000f6e:	41ad      	sbcs	r5, r5
 8000f70:	426d      	negs	r5, r5
 8000f72:	1964      	adds	r4, r4, r5
 8000f74:	0015      	movs	r5, r2
 8000f76:	01e3      	lsls	r3, r4, #7
 8000f78:	d504      	bpl.n	8000f84 <__aeabi_dmul+0x288>
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	4a46      	ldr	r2, [pc, #280]	; (8001098 <__aeabi_dmul+0x39c>)
 8000f7e:	00c9      	lsls	r1, r1, #3
 8000f80:	4014      	ands	r4, r2
 8000f82:	4461      	add	r1, ip
 8000f84:	4a45      	ldr	r2, [pc, #276]	; (800109c <__aeabi_dmul+0x3a0>)
 8000f86:	4291      	cmp	r1, r2
 8000f88:	dd00      	ble.n	8000f8c <__aeabi_dmul+0x290>
 8000f8a:	e726      	b.n	8000dda <__aeabi_dmul+0xde>
 8000f8c:	0762      	lsls	r2, r4, #29
 8000f8e:	08ed      	lsrs	r5, r5, #3
 8000f90:	0264      	lsls	r4, r4, #9
 8000f92:	0549      	lsls	r1, r1, #21
 8000f94:	4315      	orrs	r5, r2
 8000f96:	0b24      	lsrs	r4, r4, #12
 8000f98:	0d4a      	lsrs	r2, r1, #21
 8000f9a:	e710      	b.n	8000dbe <__aeabi_dmul+0xc2>
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	4332      	orrs	r2, r6
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dmul+0x2a8>
 8000fa2:	e07f      	b.n	80010a4 <__aeabi_dmul+0x3a8>
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dmul+0x2ae>
 8000fa8:	e0dc      	b.n	8001164 <__aeabi_dmul+0x468>
 8000faa:	0030      	movs	r0, r6
 8000fac:	f000 fdb6 	bl	8001b1c <__clzsi2>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	3a0b      	subs	r2, #11
 8000fb4:	231d      	movs	r3, #29
 8000fb6:	0001      	movs	r1, r0
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	4652      	mov	r2, sl
 8000fbc:	3908      	subs	r1, #8
 8000fbe:	40da      	lsrs	r2, r3
 8000fc0:	408e      	lsls	r6, r1
 8000fc2:	4316      	orrs	r6, r2
 8000fc4:	4652      	mov	r2, sl
 8000fc6:	408a      	lsls	r2, r1
 8000fc8:	9b00      	ldr	r3, [sp, #0]
 8000fca:	4935      	ldr	r1, [pc, #212]	; (80010a0 <__aeabi_dmul+0x3a4>)
 8000fcc:	1a18      	subs	r0, r3, r0
 8000fce:	0003      	movs	r3, r0
 8000fd0:	468c      	mov	ip, r1
 8000fd2:	4463      	add	r3, ip
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	e6d3      	b.n	8000d82 <__aeabi_dmul+0x86>
 8000fda:	0025      	movs	r5, r4
 8000fdc:	4305      	orrs	r5, r0
 8000fde:	d04a      	beq.n	8001076 <__aeabi_dmul+0x37a>
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dmul+0x2ea>
 8000fe4:	e0b0      	b.n	8001148 <__aeabi_dmul+0x44c>
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f000 fd98 	bl	8001b1c <__clzsi2>
 8000fec:	0001      	movs	r1, r0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	390b      	subs	r1, #11
 8000ff2:	231d      	movs	r3, #29
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	1a5b      	subs	r3, r3, r1
 8000ff8:	0031      	movs	r1, r6
 8000ffa:	0035      	movs	r5, r6
 8000ffc:	3808      	subs	r0, #8
 8000ffe:	4084      	lsls	r4, r0
 8001000:	40d9      	lsrs	r1, r3
 8001002:	4085      	lsls	r5, r0
 8001004:	430c      	orrs	r4, r1
 8001006:	4826      	ldr	r0, [pc, #152]	; (80010a0 <__aeabi_dmul+0x3a4>)
 8001008:	1a83      	subs	r3, r0, r2
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2300      	movs	r3, #0
 800100e:	4699      	mov	r9, r3
 8001010:	469b      	mov	fp, r3
 8001012:	e697      	b.n	8000d44 <__aeabi_dmul+0x48>
 8001014:	0005      	movs	r5, r0
 8001016:	4325      	orrs	r5, r4
 8001018:	d126      	bne.n	8001068 <__aeabi_dmul+0x36c>
 800101a:	2208      	movs	r2, #8
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	2400      	movs	r4, #0
 8001022:	4691      	mov	r9, r2
 8001024:	469b      	mov	fp, r3
 8001026:	e68d      	b.n	8000d44 <__aeabi_dmul+0x48>
 8001028:	4652      	mov	r2, sl
 800102a:	9b00      	ldr	r3, [sp, #0]
 800102c:	4332      	orrs	r2, r6
 800102e:	d110      	bne.n	8001052 <__aeabi_dmul+0x356>
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <__aeabi_dmul+0x38c>)
 8001032:	2600      	movs	r6, #0
 8001034:	468c      	mov	ip, r1
 8001036:	4463      	add	r3, ip
 8001038:	4649      	mov	r1, r9
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2302      	movs	r3, #2
 800103e:	4319      	orrs	r1, r3
 8001040:	4689      	mov	r9, r1
 8001042:	2002      	movs	r0, #2
 8001044:	e69d      	b.n	8000d82 <__aeabi_dmul+0x86>
 8001046:	465b      	mov	r3, fp
 8001048:	9701      	str	r7, [sp, #4]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d000      	beq.n	8001050 <__aeabi_dmul+0x354>
 800104e:	e6ad      	b.n	8000dac <__aeabi_dmul+0xb0>
 8001050:	e6c3      	b.n	8000dda <__aeabi_dmul+0xde>
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <__aeabi_dmul+0x38c>)
 8001054:	2003      	movs	r0, #3
 8001056:	4694      	mov	ip, r2
 8001058:	4463      	add	r3, ip
 800105a:	464a      	mov	r2, r9
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2303      	movs	r3, #3
 8001060:	431a      	orrs	r2, r3
 8001062:	4691      	mov	r9, r2
 8001064:	4652      	mov	r2, sl
 8001066:	e68c      	b.n	8000d82 <__aeabi_dmul+0x86>
 8001068:	220c      	movs	r2, #12
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2303      	movs	r3, #3
 800106e:	0005      	movs	r5, r0
 8001070:	4691      	mov	r9, r2
 8001072:	469b      	mov	fp, r3
 8001074:	e666      	b.n	8000d44 <__aeabi_dmul+0x48>
 8001076:	2304      	movs	r3, #4
 8001078:	4699      	mov	r9, r3
 800107a:	2300      	movs	r3, #0
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	2400      	movs	r4, #0
 8001082:	469b      	mov	fp, r3
 8001084:	e65e      	b.n	8000d44 <__aeabi_dmul+0x48>
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	000007ff 	.word	0x000007ff
 800108c:	fffffc01 	.word	0xfffffc01
 8001090:	080055f0 	.word	0x080055f0
 8001094:	000003ff 	.word	0x000003ff
 8001098:	feffffff 	.word	0xfeffffff
 800109c:	000007fe 	.word	0x000007fe
 80010a0:	fffffc0d 	.word	0xfffffc0d
 80010a4:	4649      	mov	r1, r9
 80010a6:	2301      	movs	r3, #1
 80010a8:	4319      	orrs	r1, r3
 80010aa:	4689      	mov	r9, r1
 80010ac:	2600      	movs	r6, #0
 80010ae:	2001      	movs	r0, #1
 80010b0:	e667      	b.n	8000d82 <__aeabi_dmul+0x86>
 80010b2:	2300      	movs	r3, #0
 80010b4:	2480      	movs	r4, #128	; 0x80
 80010b6:	2500      	movs	r5, #0
 80010b8:	4a43      	ldr	r2, [pc, #268]	; (80011c8 <__aeabi_dmul+0x4cc>)
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	0324      	lsls	r4, r4, #12
 80010be:	e67e      	b.n	8000dbe <__aeabi_dmul+0xc2>
 80010c0:	2001      	movs	r0, #1
 80010c2:	1a40      	subs	r0, r0, r1
 80010c4:	2838      	cmp	r0, #56	; 0x38
 80010c6:	dd00      	ble.n	80010ca <__aeabi_dmul+0x3ce>
 80010c8:	e676      	b.n	8000db8 <__aeabi_dmul+0xbc>
 80010ca:	281f      	cmp	r0, #31
 80010cc:	dd5b      	ble.n	8001186 <__aeabi_dmul+0x48a>
 80010ce:	221f      	movs	r2, #31
 80010d0:	0023      	movs	r3, r4
 80010d2:	4252      	negs	r2, r2
 80010d4:	1a51      	subs	r1, r2, r1
 80010d6:	40cb      	lsrs	r3, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	2820      	cmp	r0, #32
 80010dc:	d003      	beq.n	80010e6 <__aeabi_dmul+0x3ea>
 80010de:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <__aeabi_dmul+0x4d0>)
 80010e0:	4462      	add	r2, ip
 80010e2:	4094      	lsls	r4, r2
 80010e4:	4325      	orrs	r5, r4
 80010e6:	1e6a      	subs	r2, r5, #1
 80010e8:	4195      	sbcs	r5, r2
 80010ea:	002a      	movs	r2, r5
 80010ec:	430a      	orrs	r2, r1
 80010ee:	2107      	movs	r1, #7
 80010f0:	000d      	movs	r5, r1
 80010f2:	2400      	movs	r4, #0
 80010f4:	4015      	ands	r5, r2
 80010f6:	4211      	tst	r1, r2
 80010f8:	d05b      	beq.n	80011b2 <__aeabi_dmul+0x4b6>
 80010fa:	210f      	movs	r1, #15
 80010fc:	2400      	movs	r4, #0
 80010fe:	4011      	ands	r1, r2
 8001100:	2904      	cmp	r1, #4
 8001102:	d053      	beq.n	80011ac <__aeabi_dmul+0x4b0>
 8001104:	1d11      	adds	r1, r2, #4
 8001106:	4291      	cmp	r1, r2
 8001108:	4192      	sbcs	r2, r2
 800110a:	4252      	negs	r2, r2
 800110c:	18a4      	adds	r4, r4, r2
 800110e:	000a      	movs	r2, r1
 8001110:	0223      	lsls	r3, r4, #8
 8001112:	d54b      	bpl.n	80011ac <__aeabi_dmul+0x4b0>
 8001114:	2201      	movs	r2, #1
 8001116:	2400      	movs	r4, #0
 8001118:	2500      	movs	r5, #0
 800111a:	e650      	b.n	8000dbe <__aeabi_dmul+0xc2>
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	031b      	lsls	r3, r3, #12
 8001120:	421c      	tst	r4, r3
 8001122:	d009      	beq.n	8001138 <__aeabi_dmul+0x43c>
 8001124:	421e      	tst	r6, r3
 8001126:	d107      	bne.n	8001138 <__aeabi_dmul+0x43c>
 8001128:	4333      	orrs	r3, r6
 800112a:	031c      	lsls	r4, r3, #12
 800112c:	4643      	mov	r3, r8
 800112e:	0015      	movs	r5, r2
 8001130:	0b24      	lsrs	r4, r4, #12
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <__aeabi_dmul+0x4cc>)
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	e642      	b.n	8000dbe <__aeabi_dmul+0xc2>
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	0312      	lsls	r2, r2, #12
 800113c:	4314      	orrs	r4, r2
 800113e:	0324      	lsls	r4, r4, #12
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <__aeabi_dmul+0x4cc>)
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	9701      	str	r7, [sp, #4]
 8001146:	e63a      	b.n	8000dbe <__aeabi_dmul+0xc2>
 8001148:	f000 fce8 	bl	8001b1c <__clzsi2>
 800114c:	0001      	movs	r1, r0
 800114e:	0002      	movs	r2, r0
 8001150:	3115      	adds	r1, #21
 8001152:	3220      	adds	r2, #32
 8001154:	291c      	cmp	r1, #28
 8001156:	dc00      	bgt.n	800115a <__aeabi_dmul+0x45e>
 8001158:	e74b      	b.n	8000ff2 <__aeabi_dmul+0x2f6>
 800115a:	0034      	movs	r4, r6
 800115c:	3808      	subs	r0, #8
 800115e:	2500      	movs	r5, #0
 8001160:	4084      	lsls	r4, r0
 8001162:	e750      	b.n	8001006 <__aeabi_dmul+0x30a>
 8001164:	f000 fcda 	bl	8001b1c <__clzsi2>
 8001168:	0003      	movs	r3, r0
 800116a:	001a      	movs	r2, r3
 800116c:	3215      	adds	r2, #21
 800116e:	3020      	adds	r0, #32
 8001170:	2a1c      	cmp	r2, #28
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dmul+0x47a>
 8001174:	e71e      	b.n	8000fb4 <__aeabi_dmul+0x2b8>
 8001176:	4656      	mov	r6, sl
 8001178:	3b08      	subs	r3, #8
 800117a:	2200      	movs	r2, #0
 800117c:	409e      	lsls	r6, r3
 800117e:	e723      	b.n	8000fc8 <__aeabi_dmul+0x2cc>
 8001180:	9b00      	ldr	r3, [sp, #0]
 8001182:	469c      	mov	ip, r3
 8001184:	e6e6      	b.n	8000f54 <__aeabi_dmul+0x258>
 8001186:	4912      	ldr	r1, [pc, #72]	; (80011d0 <__aeabi_dmul+0x4d4>)
 8001188:	0022      	movs	r2, r4
 800118a:	4461      	add	r1, ip
 800118c:	002e      	movs	r6, r5
 800118e:	408d      	lsls	r5, r1
 8001190:	408a      	lsls	r2, r1
 8001192:	40c6      	lsrs	r6, r0
 8001194:	1e69      	subs	r1, r5, #1
 8001196:	418d      	sbcs	r5, r1
 8001198:	4332      	orrs	r2, r6
 800119a:	432a      	orrs	r2, r5
 800119c:	40c4      	lsrs	r4, r0
 800119e:	0753      	lsls	r3, r2, #29
 80011a0:	d0b6      	beq.n	8001110 <__aeabi_dmul+0x414>
 80011a2:	210f      	movs	r1, #15
 80011a4:	4011      	ands	r1, r2
 80011a6:	2904      	cmp	r1, #4
 80011a8:	d1ac      	bne.n	8001104 <__aeabi_dmul+0x408>
 80011aa:	e7b1      	b.n	8001110 <__aeabi_dmul+0x414>
 80011ac:	0765      	lsls	r5, r4, #29
 80011ae:	0264      	lsls	r4, r4, #9
 80011b0:	0b24      	lsrs	r4, r4, #12
 80011b2:	08d2      	lsrs	r2, r2, #3
 80011b4:	4315      	orrs	r5, r2
 80011b6:	2200      	movs	r2, #0
 80011b8:	e601      	b.n	8000dbe <__aeabi_dmul+0xc2>
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	0312      	lsls	r2, r2, #12
 80011be:	4314      	orrs	r4, r2
 80011c0:	0324      	lsls	r4, r4, #12
 80011c2:	4a01      	ldr	r2, [pc, #4]	; (80011c8 <__aeabi_dmul+0x4cc>)
 80011c4:	0b24      	lsrs	r4, r4, #12
 80011c6:	e5fa      	b.n	8000dbe <__aeabi_dmul+0xc2>
 80011c8:	000007ff 	.word	0x000007ff
 80011cc:	0000043e 	.word	0x0000043e
 80011d0:	0000041e 	.word	0x0000041e

080011d4 <__aeabi_dsub>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	4657      	mov	r7, sl
 80011d8:	464e      	mov	r6, r9
 80011da:	4645      	mov	r5, r8
 80011dc:	46de      	mov	lr, fp
 80011de:	b5e0      	push	{r5, r6, r7, lr}
 80011e0:	001e      	movs	r6, r3
 80011e2:	0017      	movs	r7, r2
 80011e4:	004a      	lsls	r2, r1, #1
 80011e6:	030b      	lsls	r3, r1, #12
 80011e8:	0d52      	lsrs	r2, r2, #21
 80011ea:	0a5b      	lsrs	r3, r3, #9
 80011ec:	4690      	mov	r8, r2
 80011ee:	0f42      	lsrs	r2, r0, #29
 80011f0:	431a      	orrs	r2, r3
 80011f2:	0fcd      	lsrs	r5, r1, #31
 80011f4:	4ccd      	ldr	r4, [pc, #820]	; (800152c <__aeabi_dsub+0x358>)
 80011f6:	0331      	lsls	r1, r6, #12
 80011f8:	00c3      	lsls	r3, r0, #3
 80011fa:	4694      	mov	ip, r2
 80011fc:	0070      	lsls	r0, r6, #1
 80011fe:	0f7a      	lsrs	r2, r7, #29
 8001200:	0a49      	lsrs	r1, r1, #9
 8001202:	00ff      	lsls	r7, r7, #3
 8001204:	469a      	mov	sl, r3
 8001206:	46b9      	mov	r9, r7
 8001208:	0d40      	lsrs	r0, r0, #21
 800120a:	0ff6      	lsrs	r6, r6, #31
 800120c:	4311      	orrs	r1, r2
 800120e:	42a0      	cmp	r0, r4
 8001210:	d100      	bne.n	8001214 <__aeabi_dsub+0x40>
 8001212:	e0b1      	b.n	8001378 <__aeabi_dsub+0x1a4>
 8001214:	2201      	movs	r2, #1
 8001216:	4056      	eors	r6, r2
 8001218:	46b3      	mov	fp, r6
 800121a:	42b5      	cmp	r5, r6
 800121c:	d100      	bne.n	8001220 <__aeabi_dsub+0x4c>
 800121e:	e088      	b.n	8001332 <__aeabi_dsub+0x15e>
 8001220:	4642      	mov	r2, r8
 8001222:	1a12      	subs	r2, r2, r0
 8001224:	2a00      	cmp	r2, #0
 8001226:	dc00      	bgt.n	800122a <__aeabi_dsub+0x56>
 8001228:	e0ae      	b.n	8001388 <__aeabi_dsub+0x1b4>
 800122a:	2800      	cmp	r0, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x5c>
 800122e:	e0c1      	b.n	80013b4 <__aeabi_dsub+0x1e0>
 8001230:	48be      	ldr	r0, [pc, #760]	; (800152c <__aeabi_dsub+0x358>)
 8001232:	4580      	cmp	r8, r0
 8001234:	d100      	bne.n	8001238 <__aeabi_dsub+0x64>
 8001236:	e151      	b.n	80014dc <__aeabi_dsub+0x308>
 8001238:	2080      	movs	r0, #128	; 0x80
 800123a:	0400      	lsls	r0, r0, #16
 800123c:	4301      	orrs	r1, r0
 800123e:	2a38      	cmp	r2, #56	; 0x38
 8001240:	dd00      	ble.n	8001244 <__aeabi_dsub+0x70>
 8001242:	e17b      	b.n	800153c <__aeabi_dsub+0x368>
 8001244:	2a1f      	cmp	r2, #31
 8001246:	dd00      	ble.n	800124a <__aeabi_dsub+0x76>
 8001248:	e1ee      	b.n	8001628 <__aeabi_dsub+0x454>
 800124a:	2020      	movs	r0, #32
 800124c:	003e      	movs	r6, r7
 800124e:	1a80      	subs	r0, r0, r2
 8001250:	000c      	movs	r4, r1
 8001252:	40d6      	lsrs	r6, r2
 8001254:	40d1      	lsrs	r1, r2
 8001256:	4087      	lsls	r7, r0
 8001258:	4662      	mov	r2, ip
 800125a:	4084      	lsls	r4, r0
 800125c:	1a52      	subs	r2, r2, r1
 800125e:	1e78      	subs	r0, r7, #1
 8001260:	4187      	sbcs	r7, r0
 8001262:	4694      	mov	ip, r2
 8001264:	4334      	orrs	r4, r6
 8001266:	4327      	orrs	r7, r4
 8001268:	1bdc      	subs	r4, r3, r7
 800126a:	42a3      	cmp	r3, r4
 800126c:	419b      	sbcs	r3, r3
 800126e:	4662      	mov	r2, ip
 8001270:	425b      	negs	r3, r3
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	4699      	mov	r9, r3
 8001276:	464b      	mov	r3, r9
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	d400      	bmi.n	800127e <__aeabi_dsub+0xaa>
 800127c:	e118      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 800127e:	464b      	mov	r3, r9
 8001280:	0258      	lsls	r0, r3, #9
 8001282:	0a43      	lsrs	r3, r0, #9
 8001284:	4699      	mov	r9, r3
 8001286:	464b      	mov	r3, r9
 8001288:	2b00      	cmp	r3, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dsub+0xba>
 800128c:	e137      	b.n	80014fe <__aeabi_dsub+0x32a>
 800128e:	4648      	mov	r0, r9
 8001290:	f000 fc44 	bl	8001b1c <__clzsi2>
 8001294:	0001      	movs	r1, r0
 8001296:	3908      	subs	r1, #8
 8001298:	2320      	movs	r3, #32
 800129a:	0022      	movs	r2, r4
 800129c:	4648      	mov	r0, r9
 800129e:	1a5b      	subs	r3, r3, r1
 80012a0:	40da      	lsrs	r2, r3
 80012a2:	4088      	lsls	r0, r1
 80012a4:	408c      	lsls	r4, r1
 80012a6:	4643      	mov	r3, r8
 80012a8:	4310      	orrs	r0, r2
 80012aa:	4588      	cmp	r8, r1
 80012ac:	dd00      	ble.n	80012b0 <__aeabi_dsub+0xdc>
 80012ae:	e136      	b.n	800151e <__aeabi_dsub+0x34a>
 80012b0:	1ac9      	subs	r1, r1, r3
 80012b2:	1c4b      	adds	r3, r1, #1
 80012b4:	2b1f      	cmp	r3, #31
 80012b6:	dd00      	ble.n	80012ba <__aeabi_dsub+0xe6>
 80012b8:	e0ea      	b.n	8001490 <__aeabi_dsub+0x2bc>
 80012ba:	2220      	movs	r2, #32
 80012bc:	0026      	movs	r6, r4
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	0001      	movs	r1, r0
 80012c2:	4094      	lsls	r4, r2
 80012c4:	40de      	lsrs	r6, r3
 80012c6:	40d8      	lsrs	r0, r3
 80012c8:	2300      	movs	r3, #0
 80012ca:	4091      	lsls	r1, r2
 80012cc:	1e62      	subs	r2, r4, #1
 80012ce:	4194      	sbcs	r4, r2
 80012d0:	4681      	mov	r9, r0
 80012d2:	4698      	mov	r8, r3
 80012d4:	4331      	orrs	r1, r6
 80012d6:	430c      	orrs	r4, r1
 80012d8:	0763      	lsls	r3, r4, #29
 80012da:	d009      	beq.n	80012f0 <__aeabi_dsub+0x11c>
 80012dc:	230f      	movs	r3, #15
 80012de:	4023      	ands	r3, r4
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d005      	beq.n	80012f0 <__aeabi_dsub+0x11c>
 80012e4:	1d23      	adds	r3, r4, #4
 80012e6:	42a3      	cmp	r3, r4
 80012e8:	41a4      	sbcs	r4, r4
 80012ea:	4264      	negs	r4, r4
 80012ec:	44a1      	add	r9, r4
 80012ee:	001c      	movs	r4, r3
 80012f0:	464b      	mov	r3, r9
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	d400      	bmi.n	80012f8 <__aeabi_dsub+0x124>
 80012f6:	e0de      	b.n	80014b6 <__aeabi_dsub+0x2e2>
 80012f8:	4641      	mov	r1, r8
 80012fa:	4b8c      	ldr	r3, [pc, #560]	; (800152c <__aeabi_dsub+0x358>)
 80012fc:	3101      	adds	r1, #1
 80012fe:	4299      	cmp	r1, r3
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x130>
 8001302:	e0e7      	b.n	80014d4 <__aeabi_dsub+0x300>
 8001304:	464b      	mov	r3, r9
 8001306:	488a      	ldr	r0, [pc, #552]	; (8001530 <__aeabi_dsub+0x35c>)
 8001308:	08e4      	lsrs	r4, r4, #3
 800130a:	4003      	ands	r3, r0
 800130c:	0018      	movs	r0, r3
 800130e:	0549      	lsls	r1, r1, #21
 8001310:	075b      	lsls	r3, r3, #29
 8001312:	0240      	lsls	r0, r0, #9
 8001314:	4323      	orrs	r3, r4
 8001316:	0d4a      	lsrs	r2, r1, #21
 8001318:	0b04      	lsrs	r4, r0, #12
 800131a:	0512      	lsls	r2, r2, #20
 800131c:	07ed      	lsls	r5, r5, #31
 800131e:	4322      	orrs	r2, r4
 8001320:	432a      	orrs	r2, r5
 8001322:	0018      	movs	r0, r3
 8001324:	0011      	movs	r1, r2
 8001326:	bcf0      	pop	{r4, r5, r6, r7}
 8001328:	46bb      	mov	fp, r7
 800132a:	46b2      	mov	sl, r6
 800132c:	46a9      	mov	r9, r5
 800132e:	46a0      	mov	r8, r4
 8001330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001332:	4642      	mov	r2, r8
 8001334:	1a12      	subs	r2, r2, r0
 8001336:	2a00      	cmp	r2, #0
 8001338:	dd52      	ble.n	80013e0 <__aeabi_dsub+0x20c>
 800133a:	2800      	cmp	r0, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_dsub+0x16c>
 800133e:	e09c      	b.n	800147a <__aeabi_dsub+0x2a6>
 8001340:	45a0      	cmp	r8, r4
 8001342:	d100      	bne.n	8001346 <__aeabi_dsub+0x172>
 8001344:	e0ca      	b.n	80014dc <__aeabi_dsub+0x308>
 8001346:	2080      	movs	r0, #128	; 0x80
 8001348:	0400      	lsls	r0, r0, #16
 800134a:	4301      	orrs	r1, r0
 800134c:	2a38      	cmp	r2, #56	; 0x38
 800134e:	dd00      	ble.n	8001352 <__aeabi_dsub+0x17e>
 8001350:	e149      	b.n	80015e6 <__aeabi_dsub+0x412>
 8001352:	2a1f      	cmp	r2, #31
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dsub+0x184>
 8001356:	e197      	b.n	8001688 <__aeabi_dsub+0x4b4>
 8001358:	0010      	movs	r0, r2
 800135a:	000e      	movs	r6, r1
 800135c:	3820      	subs	r0, #32
 800135e:	40c6      	lsrs	r6, r0
 8001360:	2a20      	cmp	r2, #32
 8001362:	d004      	beq.n	800136e <__aeabi_dsub+0x19a>
 8001364:	2040      	movs	r0, #64	; 0x40
 8001366:	1a82      	subs	r2, r0, r2
 8001368:	4091      	lsls	r1, r2
 800136a:	430f      	orrs	r7, r1
 800136c:	46b9      	mov	r9, r7
 800136e:	464c      	mov	r4, r9
 8001370:	1e62      	subs	r2, r4, #1
 8001372:	4194      	sbcs	r4, r2
 8001374:	4334      	orrs	r4, r6
 8001376:	e13a      	b.n	80015ee <__aeabi_dsub+0x41a>
 8001378:	000a      	movs	r2, r1
 800137a:	433a      	orrs	r2, r7
 800137c:	d028      	beq.n	80013d0 <__aeabi_dsub+0x1fc>
 800137e:	46b3      	mov	fp, r6
 8001380:	42b5      	cmp	r5, r6
 8001382:	d02b      	beq.n	80013dc <__aeabi_dsub+0x208>
 8001384:	4a6b      	ldr	r2, [pc, #428]	; (8001534 <__aeabi_dsub+0x360>)
 8001386:	4442      	add	r2, r8
 8001388:	2a00      	cmp	r2, #0
 800138a:	d05d      	beq.n	8001448 <__aeabi_dsub+0x274>
 800138c:	4642      	mov	r2, r8
 800138e:	4644      	mov	r4, r8
 8001390:	1a82      	subs	r2, r0, r2
 8001392:	2c00      	cmp	r4, #0
 8001394:	d000      	beq.n	8001398 <__aeabi_dsub+0x1c4>
 8001396:	e0f5      	b.n	8001584 <__aeabi_dsub+0x3b0>
 8001398:	4665      	mov	r5, ip
 800139a:	431d      	orrs	r5, r3
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x1cc>
 800139e:	e19c      	b.n	80016da <__aeabi_dsub+0x506>
 80013a0:	1e55      	subs	r5, r2, #1
 80013a2:	2a01      	cmp	r2, #1
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dsub+0x1d4>
 80013a6:	e1fb      	b.n	80017a0 <__aeabi_dsub+0x5cc>
 80013a8:	4c60      	ldr	r4, [pc, #384]	; (800152c <__aeabi_dsub+0x358>)
 80013aa:	42a2      	cmp	r2, r4
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dsub+0x1dc>
 80013ae:	e1bd      	b.n	800172c <__aeabi_dsub+0x558>
 80013b0:	002a      	movs	r2, r5
 80013b2:	e0f0      	b.n	8001596 <__aeabi_dsub+0x3c2>
 80013b4:	0008      	movs	r0, r1
 80013b6:	4338      	orrs	r0, r7
 80013b8:	d100      	bne.n	80013bc <__aeabi_dsub+0x1e8>
 80013ba:	e0c3      	b.n	8001544 <__aeabi_dsub+0x370>
 80013bc:	1e50      	subs	r0, r2, #1
 80013be:	2a01      	cmp	r2, #1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x1f0>
 80013c2:	e1a8      	b.n	8001716 <__aeabi_dsub+0x542>
 80013c4:	4c59      	ldr	r4, [pc, #356]	; (800152c <__aeabi_dsub+0x358>)
 80013c6:	42a2      	cmp	r2, r4
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x1f8>
 80013ca:	e087      	b.n	80014dc <__aeabi_dsub+0x308>
 80013cc:	0002      	movs	r2, r0
 80013ce:	e736      	b.n	800123e <__aeabi_dsub+0x6a>
 80013d0:	2201      	movs	r2, #1
 80013d2:	4056      	eors	r6, r2
 80013d4:	46b3      	mov	fp, r6
 80013d6:	42b5      	cmp	r5, r6
 80013d8:	d000      	beq.n	80013dc <__aeabi_dsub+0x208>
 80013da:	e721      	b.n	8001220 <__aeabi_dsub+0x4c>
 80013dc:	4a55      	ldr	r2, [pc, #340]	; (8001534 <__aeabi_dsub+0x360>)
 80013de:	4442      	add	r2, r8
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dsub+0x212>
 80013e4:	e0b5      	b.n	8001552 <__aeabi_dsub+0x37e>
 80013e6:	4642      	mov	r2, r8
 80013e8:	4644      	mov	r4, r8
 80013ea:	1a82      	subs	r2, r0, r2
 80013ec:	2c00      	cmp	r4, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dsub+0x21e>
 80013f0:	e138      	b.n	8001664 <__aeabi_dsub+0x490>
 80013f2:	4e4e      	ldr	r6, [pc, #312]	; (800152c <__aeabi_dsub+0x358>)
 80013f4:	42b0      	cmp	r0, r6
 80013f6:	d100      	bne.n	80013fa <__aeabi_dsub+0x226>
 80013f8:	e1de      	b.n	80017b8 <__aeabi_dsub+0x5e4>
 80013fa:	2680      	movs	r6, #128	; 0x80
 80013fc:	4664      	mov	r4, ip
 80013fe:	0436      	lsls	r6, r6, #16
 8001400:	4334      	orrs	r4, r6
 8001402:	46a4      	mov	ip, r4
 8001404:	2a38      	cmp	r2, #56	; 0x38
 8001406:	dd00      	ble.n	800140a <__aeabi_dsub+0x236>
 8001408:	e196      	b.n	8001738 <__aeabi_dsub+0x564>
 800140a:	2a1f      	cmp	r2, #31
 800140c:	dd00      	ble.n	8001410 <__aeabi_dsub+0x23c>
 800140e:	e224      	b.n	800185a <__aeabi_dsub+0x686>
 8001410:	2620      	movs	r6, #32
 8001412:	1ab4      	subs	r4, r6, r2
 8001414:	46a2      	mov	sl, r4
 8001416:	4664      	mov	r4, ip
 8001418:	4656      	mov	r6, sl
 800141a:	40b4      	lsls	r4, r6
 800141c:	46a1      	mov	r9, r4
 800141e:	001c      	movs	r4, r3
 8001420:	464e      	mov	r6, r9
 8001422:	40d4      	lsrs	r4, r2
 8001424:	4326      	orrs	r6, r4
 8001426:	0034      	movs	r4, r6
 8001428:	4656      	mov	r6, sl
 800142a:	40b3      	lsls	r3, r6
 800142c:	1e5e      	subs	r6, r3, #1
 800142e:	41b3      	sbcs	r3, r6
 8001430:	431c      	orrs	r4, r3
 8001432:	4663      	mov	r3, ip
 8001434:	40d3      	lsrs	r3, r2
 8001436:	18c9      	adds	r1, r1, r3
 8001438:	19e4      	adds	r4, r4, r7
 800143a:	42bc      	cmp	r4, r7
 800143c:	41bf      	sbcs	r7, r7
 800143e:	427f      	negs	r7, r7
 8001440:	46b9      	mov	r9, r7
 8001442:	4680      	mov	r8, r0
 8001444:	4489      	add	r9, r1
 8001446:	e0d8      	b.n	80015fa <__aeabi_dsub+0x426>
 8001448:	4640      	mov	r0, r8
 800144a:	4c3b      	ldr	r4, [pc, #236]	; (8001538 <__aeabi_dsub+0x364>)
 800144c:	3001      	adds	r0, #1
 800144e:	4220      	tst	r0, r4
 8001450:	d000      	beq.n	8001454 <__aeabi_dsub+0x280>
 8001452:	e0b4      	b.n	80015be <__aeabi_dsub+0x3ea>
 8001454:	4640      	mov	r0, r8
 8001456:	2800      	cmp	r0, #0
 8001458:	d000      	beq.n	800145c <__aeabi_dsub+0x288>
 800145a:	e144      	b.n	80016e6 <__aeabi_dsub+0x512>
 800145c:	4660      	mov	r0, ip
 800145e:	4318      	orrs	r0, r3
 8001460:	d100      	bne.n	8001464 <__aeabi_dsub+0x290>
 8001462:	e190      	b.n	8001786 <__aeabi_dsub+0x5b2>
 8001464:	0008      	movs	r0, r1
 8001466:	4338      	orrs	r0, r7
 8001468:	d000      	beq.n	800146c <__aeabi_dsub+0x298>
 800146a:	e1aa      	b.n	80017c2 <__aeabi_dsub+0x5ee>
 800146c:	4661      	mov	r1, ip
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	0749      	lsls	r1, r1, #29
 8001472:	430b      	orrs	r3, r1
 8001474:	4661      	mov	r1, ip
 8001476:	08cc      	lsrs	r4, r1, #3
 8001478:	e027      	b.n	80014ca <__aeabi_dsub+0x2f6>
 800147a:	0008      	movs	r0, r1
 800147c:	4338      	orrs	r0, r7
 800147e:	d061      	beq.n	8001544 <__aeabi_dsub+0x370>
 8001480:	1e50      	subs	r0, r2, #1
 8001482:	2a01      	cmp	r2, #1
 8001484:	d100      	bne.n	8001488 <__aeabi_dsub+0x2b4>
 8001486:	e139      	b.n	80016fc <__aeabi_dsub+0x528>
 8001488:	42a2      	cmp	r2, r4
 800148a:	d027      	beq.n	80014dc <__aeabi_dsub+0x308>
 800148c:	0002      	movs	r2, r0
 800148e:	e75d      	b.n	800134c <__aeabi_dsub+0x178>
 8001490:	0002      	movs	r2, r0
 8001492:	391f      	subs	r1, #31
 8001494:	40ca      	lsrs	r2, r1
 8001496:	0011      	movs	r1, r2
 8001498:	2b20      	cmp	r3, #32
 800149a:	d003      	beq.n	80014a4 <__aeabi_dsub+0x2d0>
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4098      	lsls	r0, r3
 80014a2:	4304      	orrs	r4, r0
 80014a4:	1e63      	subs	r3, r4, #1
 80014a6:	419c      	sbcs	r4, r3
 80014a8:	2300      	movs	r3, #0
 80014aa:	4699      	mov	r9, r3
 80014ac:	4698      	mov	r8, r3
 80014ae:	430c      	orrs	r4, r1
 80014b0:	0763      	lsls	r3, r4, #29
 80014b2:	d000      	beq.n	80014b6 <__aeabi_dsub+0x2e2>
 80014b4:	e712      	b.n	80012dc <__aeabi_dsub+0x108>
 80014b6:	464b      	mov	r3, r9
 80014b8:	464a      	mov	r2, r9
 80014ba:	08e4      	lsrs	r4, r4, #3
 80014bc:	075b      	lsls	r3, r3, #29
 80014be:	4323      	orrs	r3, r4
 80014c0:	08d4      	lsrs	r4, r2, #3
 80014c2:	4642      	mov	r2, r8
 80014c4:	4919      	ldr	r1, [pc, #100]	; (800152c <__aeabi_dsub+0x358>)
 80014c6:	428a      	cmp	r2, r1
 80014c8:	d00e      	beq.n	80014e8 <__aeabi_dsub+0x314>
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	0552      	lsls	r2, r2, #21
 80014ce:	0b24      	lsrs	r4, r4, #12
 80014d0:	0d52      	lsrs	r2, r2, #21
 80014d2:	e722      	b.n	800131a <__aeabi_dsub+0x146>
 80014d4:	000a      	movs	r2, r1
 80014d6:	2400      	movs	r4, #0
 80014d8:	2300      	movs	r3, #0
 80014da:	e71e      	b.n	800131a <__aeabi_dsub+0x146>
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	4662      	mov	r2, ip
 80014e0:	0752      	lsls	r2, r2, #29
 80014e2:	4313      	orrs	r3, r2
 80014e4:	4662      	mov	r2, ip
 80014e6:	08d4      	lsrs	r4, r2, #3
 80014e8:	001a      	movs	r2, r3
 80014ea:	4322      	orrs	r2, r4
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x31c>
 80014ee:	e1fc      	b.n	80018ea <__aeabi_dsub+0x716>
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	0312      	lsls	r2, r2, #12
 80014f4:	4314      	orrs	r4, r2
 80014f6:	0324      	lsls	r4, r4, #12
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <__aeabi_dsub+0x358>)
 80014fa:	0b24      	lsrs	r4, r4, #12
 80014fc:	e70d      	b.n	800131a <__aeabi_dsub+0x146>
 80014fe:	0020      	movs	r0, r4
 8001500:	f000 fb0c 	bl	8001b1c <__clzsi2>
 8001504:	0001      	movs	r1, r0
 8001506:	3118      	adds	r1, #24
 8001508:	291f      	cmp	r1, #31
 800150a:	dc00      	bgt.n	800150e <__aeabi_dsub+0x33a>
 800150c:	e6c4      	b.n	8001298 <__aeabi_dsub+0xc4>
 800150e:	3808      	subs	r0, #8
 8001510:	4084      	lsls	r4, r0
 8001512:	4643      	mov	r3, r8
 8001514:	0020      	movs	r0, r4
 8001516:	2400      	movs	r4, #0
 8001518:	4588      	cmp	r8, r1
 800151a:	dc00      	bgt.n	800151e <__aeabi_dsub+0x34a>
 800151c:	e6c8      	b.n	80012b0 <__aeabi_dsub+0xdc>
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__aeabi_dsub+0x35c>)
 8001520:	1a5b      	subs	r3, r3, r1
 8001522:	4010      	ands	r0, r2
 8001524:	4698      	mov	r8, r3
 8001526:	4681      	mov	r9, r0
 8001528:	e6d6      	b.n	80012d8 <__aeabi_dsub+0x104>
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	000007ff 	.word	0x000007ff
 8001530:	ff7fffff 	.word	0xff7fffff
 8001534:	fffff801 	.word	0xfffff801
 8001538:	000007fe 	.word	0x000007fe
 800153c:	430f      	orrs	r7, r1
 800153e:	1e7a      	subs	r2, r7, #1
 8001540:	4197      	sbcs	r7, r2
 8001542:	e691      	b.n	8001268 <__aeabi_dsub+0x94>
 8001544:	4661      	mov	r1, ip
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	0749      	lsls	r1, r1, #29
 800154a:	430b      	orrs	r3, r1
 800154c:	4661      	mov	r1, ip
 800154e:	08cc      	lsrs	r4, r1, #3
 8001550:	e7b8      	b.n	80014c4 <__aeabi_dsub+0x2f0>
 8001552:	4640      	mov	r0, r8
 8001554:	4cd3      	ldr	r4, [pc, #844]	; (80018a4 <__aeabi_dsub+0x6d0>)
 8001556:	3001      	adds	r0, #1
 8001558:	4220      	tst	r0, r4
 800155a:	d000      	beq.n	800155e <__aeabi_dsub+0x38a>
 800155c:	e0a2      	b.n	80016a4 <__aeabi_dsub+0x4d0>
 800155e:	4640      	mov	r0, r8
 8001560:	2800      	cmp	r0, #0
 8001562:	d000      	beq.n	8001566 <__aeabi_dsub+0x392>
 8001564:	e101      	b.n	800176a <__aeabi_dsub+0x596>
 8001566:	4660      	mov	r0, ip
 8001568:	4318      	orrs	r0, r3
 800156a:	d100      	bne.n	800156e <__aeabi_dsub+0x39a>
 800156c:	e15e      	b.n	800182c <__aeabi_dsub+0x658>
 800156e:	0008      	movs	r0, r1
 8001570:	4338      	orrs	r0, r7
 8001572:	d000      	beq.n	8001576 <__aeabi_dsub+0x3a2>
 8001574:	e15f      	b.n	8001836 <__aeabi_dsub+0x662>
 8001576:	4661      	mov	r1, ip
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	0749      	lsls	r1, r1, #29
 800157c:	430b      	orrs	r3, r1
 800157e:	4661      	mov	r1, ip
 8001580:	08cc      	lsrs	r4, r1, #3
 8001582:	e7a2      	b.n	80014ca <__aeabi_dsub+0x2f6>
 8001584:	4dc8      	ldr	r5, [pc, #800]	; (80018a8 <__aeabi_dsub+0x6d4>)
 8001586:	42a8      	cmp	r0, r5
 8001588:	d100      	bne.n	800158c <__aeabi_dsub+0x3b8>
 800158a:	e0cf      	b.n	800172c <__aeabi_dsub+0x558>
 800158c:	2580      	movs	r5, #128	; 0x80
 800158e:	4664      	mov	r4, ip
 8001590:	042d      	lsls	r5, r5, #16
 8001592:	432c      	orrs	r4, r5
 8001594:	46a4      	mov	ip, r4
 8001596:	2a38      	cmp	r2, #56	; 0x38
 8001598:	dc56      	bgt.n	8001648 <__aeabi_dsub+0x474>
 800159a:	2a1f      	cmp	r2, #31
 800159c:	dd00      	ble.n	80015a0 <__aeabi_dsub+0x3cc>
 800159e:	e0d1      	b.n	8001744 <__aeabi_dsub+0x570>
 80015a0:	2520      	movs	r5, #32
 80015a2:	001e      	movs	r6, r3
 80015a4:	1aad      	subs	r5, r5, r2
 80015a6:	4664      	mov	r4, ip
 80015a8:	40ab      	lsls	r3, r5
 80015aa:	40ac      	lsls	r4, r5
 80015ac:	40d6      	lsrs	r6, r2
 80015ae:	1e5d      	subs	r5, r3, #1
 80015b0:	41ab      	sbcs	r3, r5
 80015b2:	4334      	orrs	r4, r6
 80015b4:	4323      	orrs	r3, r4
 80015b6:	4664      	mov	r4, ip
 80015b8:	40d4      	lsrs	r4, r2
 80015ba:	1b09      	subs	r1, r1, r4
 80015bc:	e049      	b.n	8001652 <__aeabi_dsub+0x47e>
 80015be:	4660      	mov	r0, ip
 80015c0:	1bdc      	subs	r4, r3, r7
 80015c2:	1a46      	subs	r6, r0, r1
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	4180      	sbcs	r0, r0
 80015c8:	4240      	negs	r0, r0
 80015ca:	4681      	mov	r9, r0
 80015cc:	0030      	movs	r0, r6
 80015ce:	464e      	mov	r6, r9
 80015d0:	1b80      	subs	r0, r0, r6
 80015d2:	4681      	mov	r9, r0
 80015d4:	0200      	lsls	r0, r0, #8
 80015d6:	d476      	bmi.n	80016c6 <__aeabi_dsub+0x4f2>
 80015d8:	464b      	mov	r3, r9
 80015da:	4323      	orrs	r3, r4
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dsub+0x40c>
 80015de:	e652      	b.n	8001286 <__aeabi_dsub+0xb2>
 80015e0:	2400      	movs	r4, #0
 80015e2:	2500      	movs	r5, #0
 80015e4:	e771      	b.n	80014ca <__aeabi_dsub+0x2f6>
 80015e6:	4339      	orrs	r1, r7
 80015e8:	000c      	movs	r4, r1
 80015ea:	1e62      	subs	r2, r4, #1
 80015ec:	4194      	sbcs	r4, r2
 80015ee:	18e4      	adds	r4, r4, r3
 80015f0:	429c      	cmp	r4, r3
 80015f2:	419b      	sbcs	r3, r3
 80015f4:	425b      	negs	r3, r3
 80015f6:	4463      	add	r3, ip
 80015f8:	4699      	mov	r9, r3
 80015fa:	464b      	mov	r3, r9
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	d400      	bmi.n	8001602 <__aeabi_dsub+0x42e>
 8001600:	e756      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 8001602:	2301      	movs	r3, #1
 8001604:	469c      	mov	ip, r3
 8001606:	4ba8      	ldr	r3, [pc, #672]	; (80018a8 <__aeabi_dsub+0x6d4>)
 8001608:	44e0      	add	r8, ip
 800160a:	4598      	cmp	r8, r3
 800160c:	d038      	beq.n	8001680 <__aeabi_dsub+0x4ac>
 800160e:	464b      	mov	r3, r9
 8001610:	48a6      	ldr	r0, [pc, #664]	; (80018ac <__aeabi_dsub+0x6d8>)
 8001612:	2201      	movs	r2, #1
 8001614:	4003      	ands	r3, r0
 8001616:	0018      	movs	r0, r3
 8001618:	0863      	lsrs	r3, r4, #1
 800161a:	4014      	ands	r4, r2
 800161c:	431c      	orrs	r4, r3
 800161e:	07c3      	lsls	r3, r0, #31
 8001620:	431c      	orrs	r4, r3
 8001622:	0843      	lsrs	r3, r0, #1
 8001624:	4699      	mov	r9, r3
 8001626:	e657      	b.n	80012d8 <__aeabi_dsub+0x104>
 8001628:	0010      	movs	r0, r2
 800162a:	000e      	movs	r6, r1
 800162c:	3820      	subs	r0, #32
 800162e:	40c6      	lsrs	r6, r0
 8001630:	2a20      	cmp	r2, #32
 8001632:	d004      	beq.n	800163e <__aeabi_dsub+0x46a>
 8001634:	2040      	movs	r0, #64	; 0x40
 8001636:	1a82      	subs	r2, r0, r2
 8001638:	4091      	lsls	r1, r2
 800163a:	430f      	orrs	r7, r1
 800163c:	46b9      	mov	r9, r7
 800163e:	464f      	mov	r7, r9
 8001640:	1e7a      	subs	r2, r7, #1
 8001642:	4197      	sbcs	r7, r2
 8001644:	4337      	orrs	r7, r6
 8001646:	e60f      	b.n	8001268 <__aeabi_dsub+0x94>
 8001648:	4662      	mov	r2, ip
 800164a:	431a      	orrs	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	1e5a      	subs	r2, r3, #1
 8001650:	4193      	sbcs	r3, r2
 8001652:	1afc      	subs	r4, r7, r3
 8001654:	42a7      	cmp	r7, r4
 8001656:	41bf      	sbcs	r7, r7
 8001658:	427f      	negs	r7, r7
 800165a:	1bcb      	subs	r3, r1, r7
 800165c:	4699      	mov	r9, r3
 800165e:	465d      	mov	r5, fp
 8001660:	4680      	mov	r8, r0
 8001662:	e608      	b.n	8001276 <__aeabi_dsub+0xa2>
 8001664:	4666      	mov	r6, ip
 8001666:	431e      	orrs	r6, r3
 8001668:	d100      	bne.n	800166c <__aeabi_dsub+0x498>
 800166a:	e0be      	b.n	80017ea <__aeabi_dsub+0x616>
 800166c:	1e56      	subs	r6, r2, #1
 800166e:	2a01      	cmp	r2, #1
 8001670:	d100      	bne.n	8001674 <__aeabi_dsub+0x4a0>
 8001672:	e109      	b.n	8001888 <__aeabi_dsub+0x6b4>
 8001674:	4c8c      	ldr	r4, [pc, #560]	; (80018a8 <__aeabi_dsub+0x6d4>)
 8001676:	42a2      	cmp	r2, r4
 8001678:	d100      	bne.n	800167c <__aeabi_dsub+0x4a8>
 800167a:	e119      	b.n	80018b0 <__aeabi_dsub+0x6dc>
 800167c:	0032      	movs	r2, r6
 800167e:	e6c1      	b.n	8001404 <__aeabi_dsub+0x230>
 8001680:	4642      	mov	r2, r8
 8001682:	2400      	movs	r4, #0
 8001684:	2300      	movs	r3, #0
 8001686:	e648      	b.n	800131a <__aeabi_dsub+0x146>
 8001688:	2020      	movs	r0, #32
 800168a:	000c      	movs	r4, r1
 800168c:	1a80      	subs	r0, r0, r2
 800168e:	003e      	movs	r6, r7
 8001690:	4087      	lsls	r7, r0
 8001692:	4084      	lsls	r4, r0
 8001694:	40d6      	lsrs	r6, r2
 8001696:	1e78      	subs	r0, r7, #1
 8001698:	4187      	sbcs	r7, r0
 800169a:	40d1      	lsrs	r1, r2
 800169c:	4334      	orrs	r4, r6
 800169e:	433c      	orrs	r4, r7
 80016a0:	448c      	add	ip, r1
 80016a2:	e7a4      	b.n	80015ee <__aeabi_dsub+0x41a>
 80016a4:	4a80      	ldr	r2, [pc, #512]	; (80018a8 <__aeabi_dsub+0x6d4>)
 80016a6:	4290      	cmp	r0, r2
 80016a8:	d100      	bne.n	80016ac <__aeabi_dsub+0x4d8>
 80016aa:	e0e9      	b.n	8001880 <__aeabi_dsub+0x6ac>
 80016ac:	19df      	adds	r7, r3, r7
 80016ae:	429f      	cmp	r7, r3
 80016b0:	419b      	sbcs	r3, r3
 80016b2:	4461      	add	r1, ip
 80016b4:	425b      	negs	r3, r3
 80016b6:	18c9      	adds	r1, r1, r3
 80016b8:	07cc      	lsls	r4, r1, #31
 80016ba:	087f      	lsrs	r7, r7, #1
 80016bc:	084b      	lsrs	r3, r1, #1
 80016be:	4699      	mov	r9, r3
 80016c0:	4680      	mov	r8, r0
 80016c2:	433c      	orrs	r4, r7
 80016c4:	e6f4      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 80016c6:	1afc      	subs	r4, r7, r3
 80016c8:	42a7      	cmp	r7, r4
 80016ca:	41bf      	sbcs	r7, r7
 80016cc:	4663      	mov	r3, ip
 80016ce:	427f      	negs	r7, r7
 80016d0:	1ac9      	subs	r1, r1, r3
 80016d2:	1bcb      	subs	r3, r1, r7
 80016d4:	4699      	mov	r9, r3
 80016d6:	465d      	mov	r5, fp
 80016d8:	e5d5      	b.n	8001286 <__aeabi_dsub+0xb2>
 80016da:	08ff      	lsrs	r7, r7, #3
 80016dc:	074b      	lsls	r3, r1, #29
 80016de:	465d      	mov	r5, fp
 80016e0:	433b      	orrs	r3, r7
 80016e2:	08cc      	lsrs	r4, r1, #3
 80016e4:	e6ee      	b.n	80014c4 <__aeabi_dsub+0x2f0>
 80016e6:	4662      	mov	r2, ip
 80016e8:	431a      	orrs	r2, r3
 80016ea:	d000      	beq.n	80016ee <__aeabi_dsub+0x51a>
 80016ec:	e082      	b.n	80017f4 <__aeabi_dsub+0x620>
 80016ee:	000b      	movs	r3, r1
 80016f0:	433b      	orrs	r3, r7
 80016f2:	d11b      	bne.n	800172c <__aeabi_dsub+0x558>
 80016f4:	2480      	movs	r4, #128	; 0x80
 80016f6:	2500      	movs	r5, #0
 80016f8:	0324      	lsls	r4, r4, #12
 80016fa:	e6f9      	b.n	80014f0 <__aeabi_dsub+0x31c>
 80016fc:	19dc      	adds	r4, r3, r7
 80016fe:	429c      	cmp	r4, r3
 8001700:	419b      	sbcs	r3, r3
 8001702:	4461      	add	r1, ip
 8001704:	4689      	mov	r9, r1
 8001706:	425b      	negs	r3, r3
 8001708:	4499      	add	r9, r3
 800170a:	464b      	mov	r3, r9
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	d444      	bmi.n	800179a <__aeabi_dsub+0x5c6>
 8001710:	2301      	movs	r3, #1
 8001712:	4698      	mov	r8, r3
 8001714:	e6cc      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 8001716:	1bdc      	subs	r4, r3, r7
 8001718:	4662      	mov	r2, ip
 800171a:	42a3      	cmp	r3, r4
 800171c:	419b      	sbcs	r3, r3
 800171e:	1a51      	subs	r1, r2, r1
 8001720:	425b      	negs	r3, r3
 8001722:	1acb      	subs	r3, r1, r3
 8001724:	4699      	mov	r9, r3
 8001726:	2301      	movs	r3, #1
 8001728:	4698      	mov	r8, r3
 800172a:	e5a4      	b.n	8001276 <__aeabi_dsub+0xa2>
 800172c:	08ff      	lsrs	r7, r7, #3
 800172e:	074b      	lsls	r3, r1, #29
 8001730:	465d      	mov	r5, fp
 8001732:	433b      	orrs	r3, r7
 8001734:	08cc      	lsrs	r4, r1, #3
 8001736:	e6d7      	b.n	80014e8 <__aeabi_dsub+0x314>
 8001738:	4662      	mov	r2, ip
 800173a:	431a      	orrs	r2, r3
 800173c:	0014      	movs	r4, r2
 800173e:	1e63      	subs	r3, r4, #1
 8001740:	419c      	sbcs	r4, r3
 8001742:	e679      	b.n	8001438 <__aeabi_dsub+0x264>
 8001744:	0015      	movs	r5, r2
 8001746:	4664      	mov	r4, ip
 8001748:	3d20      	subs	r5, #32
 800174a:	40ec      	lsrs	r4, r5
 800174c:	46a0      	mov	r8, r4
 800174e:	2a20      	cmp	r2, #32
 8001750:	d005      	beq.n	800175e <__aeabi_dsub+0x58a>
 8001752:	2540      	movs	r5, #64	; 0x40
 8001754:	4664      	mov	r4, ip
 8001756:	1aaa      	subs	r2, r5, r2
 8001758:	4094      	lsls	r4, r2
 800175a:	4323      	orrs	r3, r4
 800175c:	469a      	mov	sl, r3
 800175e:	4654      	mov	r4, sl
 8001760:	1e63      	subs	r3, r4, #1
 8001762:	419c      	sbcs	r4, r3
 8001764:	4643      	mov	r3, r8
 8001766:	4323      	orrs	r3, r4
 8001768:	e773      	b.n	8001652 <__aeabi_dsub+0x47e>
 800176a:	4662      	mov	r2, ip
 800176c:	431a      	orrs	r2, r3
 800176e:	d023      	beq.n	80017b8 <__aeabi_dsub+0x5e4>
 8001770:	000a      	movs	r2, r1
 8001772:	433a      	orrs	r2, r7
 8001774:	d000      	beq.n	8001778 <__aeabi_dsub+0x5a4>
 8001776:	e0a0      	b.n	80018ba <__aeabi_dsub+0x6e6>
 8001778:	4662      	mov	r2, ip
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	0752      	lsls	r2, r2, #29
 800177e:	4313      	orrs	r3, r2
 8001780:	4662      	mov	r2, ip
 8001782:	08d4      	lsrs	r4, r2, #3
 8001784:	e6b0      	b.n	80014e8 <__aeabi_dsub+0x314>
 8001786:	000b      	movs	r3, r1
 8001788:	433b      	orrs	r3, r7
 800178a:	d100      	bne.n	800178e <__aeabi_dsub+0x5ba>
 800178c:	e728      	b.n	80015e0 <__aeabi_dsub+0x40c>
 800178e:	08ff      	lsrs	r7, r7, #3
 8001790:	074b      	lsls	r3, r1, #29
 8001792:	465d      	mov	r5, fp
 8001794:	433b      	orrs	r3, r7
 8001796:	08cc      	lsrs	r4, r1, #3
 8001798:	e697      	b.n	80014ca <__aeabi_dsub+0x2f6>
 800179a:	2302      	movs	r3, #2
 800179c:	4698      	mov	r8, r3
 800179e:	e736      	b.n	800160e <__aeabi_dsub+0x43a>
 80017a0:	1afc      	subs	r4, r7, r3
 80017a2:	42a7      	cmp	r7, r4
 80017a4:	41bf      	sbcs	r7, r7
 80017a6:	4663      	mov	r3, ip
 80017a8:	427f      	negs	r7, r7
 80017aa:	1ac9      	subs	r1, r1, r3
 80017ac:	1bcb      	subs	r3, r1, r7
 80017ae:	4699      	mov	r9, r3
 80017b0:	2301      	movs	r3, #1
 80017b2:	465d      	mov	r5, fp
 80017b4:	4698      	mov	r8, r3
 80017b6:	e55e      	b.n	8001276 <__aeabi_dsub+0xa2>
 80017b8:	074b      	lsls	r3, r1, #29
 80017ba:	08ff      	lsrs	r7, r7, #3
 80017bc:	433b      	orrs	r3, r7
 80017be:	08cc      	lsrs	r4, r1, #3
 80017c0:	e692      	b.n	80014e8 <__aeabi_dsub+0x314>
 80017c2:	1bdc      	subs	r4, r3, r7
 80017c4:	4660      	mov	r0, ip
 80017c6:	42a3      	cmp	r3, r4
 80017c8:	41b6      	sbcs	r6, r6
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	4276      	negs	r6, r6
 80017ce:	1b80      	subs	r0, r0, r6
 80017d0:	4681      	mov	r9, r0
 80017d2:	0200      	lsls	r0, r0, #8
 80017d4:	d560      	bpl.n	8001898 <__aeabi_dsub+0x6c4>
 80017d6:	1afc      	subs	r4, r7, r3
 80017d8:	42a7      	cmp	r7, r4
 80017da:	41bf      	sbcs	r7, r7
 80017dc:	4663      	mov	r3, ip
 80017de:	427f      	negs	r7, r7
 80017e0:	1ac9      	subs	r1, r1, r3
 80017e2:	1bcb      	subs	r3, r1, r7
 80017e4:	4699      	mov	r9, r3
 80017e6:	465d      	mov	r5, fp
 80017e8:	e576      	b.n	80012d8 <__aeabi_dsub+0x104>
 80017ea:	08ff      	lsrs	r7, r7, #3
 80017ec:	074b      	lsls	r3, r1, #29
 80017ee:	433b      	orrs	r3, r7
 80017f0:	08cc      	lsrs	r4, r1, #3
 80017f2:	e667      	b.n	80014c4 <__aeabi_dsub+0x2f0>
 80017f4:	000a      	movs	r2, r1
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	433a      	orrs	r2, r7
 80017fa:	d100      	bne.n	80017fe <__aeabi_dsub+0x62a>
 80017fc:	e66f      	b.n	80014de <__aeabi_dsub+0x30a>
 80017fe:	4662      	mov	r2, ip
 8001800:	0752      	lsls	r2, r2, #29
 8001802:	4313      	orrs	r3, r2
 8001804:	4662      	mov	r2, ip
 8001806:	08d4      	lsrs	r4, r2, #3
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	0312      	lsls	r2, r2, #12
 800180c:	4214      	tst	r4, r2
 800180e:	d007      	beq.n	8001820 <__aeabi_dsub+0x64c>
 8001810:	08c8      	lsrs	r0, r1, #3
 8001812:	4210      	tst	r0, r2
 8001814:	d104      	bne.n	8001820 <__aeabi_dsub+0x64c>
 8001816:	465d      	mov	r5, fp
 8001818:	0004      	movs	r4, r0
 800181a:	08fb      	lsrs	r3, r7, #3
 800181c:	0749      	lsls	r1, r1, #29
 800181e:	430b      	orrs	r3, r1
 8001820:	0f5a      	lsrs	r2, r3, #29
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	0752      	lsls	r2, r2, #29
 8001828:	4313      	orrs	r3, r2
 800182a:	e65d      	b.n	80014e8 <__aeabi_dsub+0x314>
 800182c:	074b      	lsls	r3, r1, #29
 800182e:	08ff      	lsrs	r7, r7, #3
 8001830:	433b      	orrs	r3, r7
 8001832:	08cc      	lsrs	r4, r1, #3
 8001834:	e649      	b.n	80014ca <__aeabi_dsub+0x2f6>
 8001836:	19dc      	adds	r4, r3, r7
 8001838:	429c      	cmp	r4, r3
 800183a:	419b      	sbcs	r3, r3
 800183c:	4461      	add	r1, ip
 800183e:	4689      	mov	r9, r1
 8001840:	425b      	negs	r3, r3
 8001842:	4499      	add	r9, r3
 8001844:	464b      	mov	r3, r9
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	d400      	bmi.n	800184c <__aeabi_dsub+0x678>
 800184a:	e631      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 800184c:	464a      	mov	r2, r9
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <__aeabi_dsub+0x6d8>)
 8001850:	401a      	ands	r2, r3
 8001852:	2301      	movs	r3, #1
 8001854:	4691      	mov	r9, r2
 8001856:	4698      	mov	r8, r3
 8001858:	e62a      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 800185a:	0016      	movs	r6, r2
 800185c:	4664      	mov	r4, ip
 800185e:	3e20      	subs	r6, #32
 8001860:	40f4      	lsrs	r4, r6
 8001862:	46a0      	mov	r8, r4
 8001864:	2a20      	cmp	r2, #32
 8001866:	d005      	beq.n	8001874 <__aeabi_dsub+0x6a0>
 8001868:	2640      	movs	r6, #64	; 0x40
 800186a:	4664      	mov	r4, ip
 800186c:	1ab2      	subs	r2, r6, r2
 800186e:	4094      	lsls	r4, r2
 8001870:	4323      	orrs	r3, r4
 8001872:	469a      	mov	sl, r3
 8001874:	4654      	mov	r4, sl
 8001876:	1e63      	subs	r3, r4, #1
 8001878:	419c      	sbcs	r4, r3
 800187a:	4643      	mov	r3, r8
 800187c:	431c      	orrs	r4, r3
 800187e:	e5db      	b.n	8001438 <__aeabi_dsub+0x264>
 8001880:	0002      	movs	r2, r0
 8001882:	2400      	movs	r4, #0
 8001884:	2300      	movs	r3, #0
 8001886:	e548      	b.n	800131a <__aeabi_dsub+0x146>
 8001888:	19dc      	adds	r4, r3, r7
 800188a:	42bc      	cmp	r4, r7
 800188c:	41bf      	sbcs	r7, r7
 800188e:	4461      	add	r1, ip
 8001890:	4689      	mov	r9, r1
 8001892:	427f      	negs	r7, r7
 8001894:	44b9      	add	r9, r7
 8001896:	e738      	b.n	800170a <__aeabi_dsub+0x536>
 8001898:	464b      	mov	r3, r9
 800189a:	4323      	orrs	r3, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x6cc>
 800189e:	e69f      	b.n	80015e0 <__aeabi_dsub+0x40c>
 80018a0:	e606      	b.n	80014b0 <__aeabi_dsub+0x2dc>
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	000007fe 	.word	0x000007fe
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	ff7fffff 	.word	0xff7fffff
 80018b0:	08ff      	lsrs	r7, r7, #3
 80018b2:	074b      	lsls	r3, r1, #29
 80018b4:	433b      	orrs	r3, r7
 80018b6:	08cc      	lsrs	r4, r1, #3
 80018b8:	e616      	b.n	80014e8 <__aeabi_dsub+0x314>
 80018ba:	4662      	mov	r2, ip
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	0752      	lsls	r2, r2, #29
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4662      	mov	r2, ip
 80018c4:	08d4      	lsrs	r4, r2, #3
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	0312      	lsls	r2, r2, #12
 80018ca:	4214      	tst	r4, r2
 80018cc:	d007      	beq.n	80018de <__aeabi_dsub+0x70a>
 80018ce:	08c8      	lsrs	r0, r1, #3
 80018d0:	4210      	tst	r0, r2
 80018d2:	d104      	bne.n	80018de <__aeabi_dsub+0x70a>
 80018d4:	465d      	mov	r5, fp
 80018d6:	0004      	movs	r4, r0
 80018d8:	08fb      	lsrs	r3, r7, #3
 80018da:	0749      	lsls	r1, r1, #29
 80018dc:	430b      	orrs	r3, r1
 80018de:	0f5a      	lsrs	r2, r3, #29
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	0752      	lsls	r2, r2, #29
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	e5fe      	b.n	80014e8 <__aeabi_dsub+0x314>
 80018ea:	2300      	movs	r3, #0
 80018ec:	4a01      	ldr	r2, [pc, #4]	; (80018f4 <__aeabi_dsub+0x720>)
 80018ee:	001c      	movs	r4, r3
 80018f0:	e513      	b.n	800131a <__aeabi_dsub+0x146>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__aeabi_d2iz>:
 80018f8:	000a      	movs	r2, r1
 80018fa:	b530      	push	{r4, r5, lr}
 80018fc:	4c13      	ldr	r4, [pc, #76]	; (800194c <__aeabi_d2iz+0x54>)
 80018fe:	0053      	lsls	r3, r2, #1
 8001900:	0309      	lsls	r1, r1, #12
 8001902:	0005      	movs	r5, r0
 8001904:	0b09      	lsrs	r1, r1, #12
 8001906:	2000      	movs	r0, #0
 8001908:	0d5b      	lsrs	r3, r3, #21
 800190a:	0fd2      	lsrs	r2, r2, #31
 800190c:	42a3      	cmp	r3, r4
 800190e:	dd04      	ble.n	800191a <__aeabi_d2iz+0x22>
 8001910:	480f      	ldr	r0, [pc, #60]	; (8001950 <__aeabi_d2iz+0x58>)
 8001912:	4283      	cmp	r3, r0
 8001914:	dd02      	ble.n	800191c <__aeabi_d2iz+0x24>
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <__aeabi_d2iz+0x5c>)
 8001918:	18d0      	adds	r0, r2, r3
 800191a:	bd30      	pop	{r4, r5, pc}
 800191c:	2080      	movs	r0, #128	; 0x80
 800191e:	0340      	lsls	r0, r0, #13
 8001920:	4301      	orrs	r1, r0
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <__aeabi_d2iz+0x60>)
 8001924:	1ac0      	subs	r0, r0, r3
 8001926:	281f      	cmp	r0, #31
 8001928:	dd08      	ble.n	800193c <__aeabi_d2iz+0x44>
 800192a:	480c      	ldr	r0, [pc, #48]	; (800195c <__aeabi_d2iz+0x64>)
 800192c:	1ac3      	subs	r3, r0, r3
 800192e:	40d9      	lsrs	r1, r3
 8001930:	000b      	movs	r3, r1
 8001932:	4258      	negs	r0, r3
 8001934:	2a00      	cmp	r2, #0
 8001936:	d1f0      	bne.n	800191a <__aeabi_d2iz+0x22>
 8001938:	0018      	movs	r0, r3
 800193a:	e7ee      	b.n	800191a <__aeabi_d2iz+0x22>
 800193c:	4c08      	ldr	r4, [pc, #32]	; (8001960 <__aeabi_d2iz+0x68>)
 800193e:	40c5      	lsrs	r5, r0
 8001940:	46a4      	mov	ip, r4
 8001942:	4463      	add	r3, ip
 8001944:	4099      	lsls	r1, r3
 8001946:	000b      	movs	r3, r1
 8001948:	432b      	orrs	r3, r5
 800194a:	e7f2      	b.n	8001932 <__aeabi_d2iz+0x3a>
 800194c:	000003fe 	.word	0x000003fe
 8001950:	0000041d 	.word	0x0000041d
 8001954:	7fffffff 	.word	0x7fffffff
 8001958:	00000433 	.word	0x00000433
 800195c:	00000413 	.word	0x00000413
 8001960:	fffffbed 	.word	0xfffffbed

08001964 <__aeabi_i2d>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	2800      	cmp	r0, #0
 8001968:	d016      	beq.n	8001998 <__aeabi_i2d+0x34>
 800196a:	17c3      	asrs	r3, r0, #31
 800196c:	18c5      	adds	r5, r0, r3
 800196e:	405d      	eors	r5, r3
 8001970:	0fc4      	lsrs	r4, r0, #31
 8001972:	0028      	movs	r0, r5
 8001974:	f000 f8d2 	bl	8001b1c <__clzsi2>
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <__aeabi_i2d+0x5c>)
 800197a:	1a12      	subs	r2, r2, r0
 800197c:	280a      	cmp	r0, #10
 800197e:	dc16      	bgt.n	80019ae <__aeabi_i2d+0x4a>
 8001980:	0003      	movs	r3, r0
 8001982:	002e      	movs	r6, r5
 8001984:	3315      	adds	r3, #21
 8001986:	409e      	lsls	r6, r3
 8001988:	230b      	movs	r3, #11
 800198a:	1a18      	subs	r0, r3, r0
 800198c:	40c5      	lsrs	r5, r0
 800198e:	0552      	lsls	r2, r2, #21
 8001990:	032d      	lsls	r5, r5, #12
 8001992:	0b2d      	lsrs	r5, r5, #12
 8001994:	0d53      	lsrs	r3, r2, #21
 8001996:	e003      	b.n	80019a0 <__aeabi_i2d+0x3c>
 8001998:	2400      	movs	r4, #0
 800199a:	2300      	movs	r3, #0
 800199c:	2500      	movs	r5, #0
 800199e:	2600      	movs	r6, #0
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	432b      	orrs	r3, r5
 80019a4:	07e4      	lsls	r4, r4, #31
 80019a6:	4323      	orrs	r3, r4
 80019a8:	0030      	movs	r0, r6
 80019aa:	0019      	movs	r1, r3
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	380b      	subs	r0, #11
 80019b0:	4085      	lsls	r5, r0
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	032d      	lsls	r5, r5, #12
 80019b6:	2600      	movs	r6, #0
 80019b8:	0b2d      	lsrs	r5, r5, #12
 80019ba:	0d53      	lsrs	r3, r2, #21
 80019bc:	e7f0      	b.n	80019a0 <__aeabi_i2d+0x3c>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	0000041e 	.word	0x0000041e

080019c4 <__aeabi_ui2d>:
 80019c4:	b510      	push	{r4, lr}
 80019c6:	1e04      	subs	r4, r0, #0
 80019c8:	d010      	beq.n	80019ec <__aeabi_ui2d+0x28>
 80019ca:	f000 f8a7 	bl	8001b1c <__clzsi2>
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <__aeabi_ui2d+0x48>)
 80019d0:	1a1b      	subs	r3, r3, r0
 80019d2:	280a      	cmp	r0, #10
 80019d4:	dc11      	bgt.n	80019fa <__aeabi_ui2d+0x36>
 80019d6:	220b      	movs	r2, #11
 80019d8:	0021      	movs	r1, r4
 80019da:	1a12      	subs	r2, r2, r0
 80019dc:	40d1      	lsrs	r1, r2
 80019de:	3015      	adds	r0, #21
 80019e0:	030a      	lsls	r2, r1, #12
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	4084      	lsls	r4, r0
 80019e6:	0b12      	lsrs	r2, r2, #12
 80019e8:	0d5b      	lsrs	r3, r3, #21
 80019ea:	e001      	b.n	80019f0 <__aeabi_ui2d+0x2c>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	051b      	lsls	r3, r3, #20
 80019f2:	4313      	orrs	r3, r2
 80019f4:	0020      	movs	r0, r4
 80019f6:	0019      	movs	r1, r3
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	0022      	movs	r2, r4
 80019fc:	380b      	subs	r0, #11
 80019fe:	4082      	lsls	r2, r0
 8001a00:	055b      	lsls	r3, r3, #21
 8001a02:	0312      	lsls	r2, r2, #12
 8001a04:	2400      	movs	r4, #0
 8001a06:	0b12      	lsrs	r2, r2, #12
 8001a08:	0d5b      	lsrs	r3, r3, #21
 8001a0a:	e7f1      	b.n	80019f0 <__aeabi_ui2d+0x2c>
 8001a0c:	0000041e 	.word	0x0000041e

08001a10 <__aeabi_f2d>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	0043      	lsls	r3, r0, #1
 8001a14:	0246      	lsls	r6, r0, #9
 8001a16:	0fc4      	lsrs	r4, r0, #31
 8001a18:	20fe      	movs	r0, #254	; 0xfe
 8001a1a:	0e1b      	lsrs	r3, r3, #24
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	0a75      	lsrs	r5, r6, #9
 8001a20:	4208      	tst	r0, r1
 8001a22:	d00c      	beq.n	8001a3e <__aeabi_f2d+0x2e>
 8001a24:	22e0      	movs	r2, #224	; 0xe0
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4694      	mov	ip, r2
 8001a2a:	076d      	lsls	r5, r5, #29
 8001a2c:	0b36      	lsrs	r6, r6, #12
 8001a2e:	4463      	add	r3, ip
 8001a30:	051b      	lsls	r3, r3, #20
 8001a32:	4333      	orrs	r3, r6
 8001a34:	07e4      	lsls	r4, r4, #31
 8001a36:	4323      	orrs	r3, r4
 8001a38:	0028      	movs	r0, r5
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d114      	bne.n	8001a6c <__aeabi_f2d+0x5c>
 8001a42:	2d00      	cmp	r5, #0
 8001a44:	d01b      	beq.n	8001a7e <__aeabi_f2d+0x6e>
 8001a46:	0028      	movs	r0, r5
 8001a48:	f000 f868 	bl	8001b1c <__clzsi2>
 8001a4c:	280a      	cmp	r0, #10
 8001a4e:	dc1c      	bgt.n	8001a8a <__aeabi_f2d+0x7a>
 8001a50:	230b      	movs	r3, #11
 8001a52:	002e      	movs	r6, r5
 8001a54:	1a1b      	subs	r3, r3, r0
 8001a56:	40de      	lsrs	r6, r3
 8001a58:	0003      	movs	r3, r0
 8001a5a:	3315      	adds	r3, #21
 8001a5c:	409d      	lsls	r5, r3
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <__aeabi_f2d+0x88>)
 8001a60:	0336      	lsls	r6, r6, #12
 8001a62:	1a12      	subs	r2, r2, r0
 8001a64:	0552      	lsls	r2, r2, #21
 8001a66:	0b36      	lsrs	r6, r6, #12
 8001a68:	0d53      	lsrs	r3, r2, #21
 8001a6a:	e7e1      	b.n	8001a30 <__aeabi_f2d+0x20>
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	d009      	beq.n	8001a84 <__aeabi_f2d+0x74>
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	0b36      	lsrs	r6, r6, #12
 8001a74:	0312      	lsls	r2, r2, #12
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <__aeabi_f2d+0x8c>)
 8001a78:	076d      	lsls	r5, r5, #29
 8001a7a:	4316      	orrs	r6, r2
 8001a7c:	e7d8      	b.n	8001a30 <__aeabi_f2d+0x20>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2600      	movs	r6, #0
 8001a82:	e7d5      	b.n	8001a30 <__aeabi_f2d+0x20>
 8001a84:	2600      	movs	r6, #0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <__aeabi_f2d+0x8c>)
 8001a88:	e7d2      	b.n	8001a30 <__aeabi_f2d+0x20>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	3b0b      	subs	r3, #11
 8001a8e:	409d      	lsls	r5, r3
 8001a90:	002e      	movs	r6, r5
 8001a92:	2500      	movs	r5, #0
 8001a94:	e7e3      	b.n	8001a5e <__aeabi_f2d+0x4e>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	00000389 	.word	0x00000389
 8001a9c:	000007ff 	.word	0x000007ff

08001aa0 <__aeabi_cdrcmple>:
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	4662      	mov	r2, ip
 8001aa6:	468c      	mov	ip, r1
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	4663      	mov	r3, ip
 8001aac:	e000      	b.n	8001ab0 <__aeabi_cdcmpeq>
 8001aae:	46c0      	nop			; (mov r8, r8)

08001ab0 <__aeabi_cdcmpeq>:
 8001ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001ab2:	f000 f905 	bl	8001cc0 <__ledf2>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d401      	bmi.n	8001abe <__aeabi_cdcmpeq+0xe>
 8001aba:	2100      	movs	r1, #0
 8001abc:	42c8      	cmn	r0, r1
 8001abe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ac0 <__aeabi_dcmpeq>:
 8001ac0:	b510      	push	{r4, lr}
 8001ac2:	f000 f855 	bl	8001b70 <__eqdf2>
 8001ac6:	4240      	negs	r0, r0
 8001ac8:	3001      	adds	r0, #1
 8001aca:	bd10      	pop	{r4, pc}

08001acc <__aeabi_dcmplt>:
 8001acc:	b510      	push	{r4, lr}
 8001ace:	f000 f8f7 	bl	8001cc0 <__ledf2>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	db01      	blt.n	8001ada <__aeabi_dcmplt+0xe>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	2001      	movs	r0, #1
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)

08001ae0 <__aeabi_dcmple>:
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	f000 f8ed 	bl	8001cc0 <__ledf2>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	dd01      	ble.n	8001aee <__aeabi_dcmple+0xe>
 8001aea:	2000      	movs	r0, #0
 8001aec:	bd10      	pop	{r4, pc}
 8001aee:	2001      	movs	r0, #1
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)

08001af4 <__aeabi_dcmpgt>:
 8001af4:	b510      	push	{r4, lr}
 8001af6:	f000 f87d 	bl	8001bf4 <__gedf2>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	dc01      	bgt.n	8001b02 <__aeabi_dcmpgt+0xe>
 8001afe:	2000      	movs	r0, #0
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	2001      	movs	r0, #1
 8001b04:	bd10      	pop	{r4, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)

08001b08 <__aeabi_dcmpge>:
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	f000 f873 	bl	8001bf4 <__gedf2>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	da01      	bge.n	8001b16 <__aeabi_dcmpge+0xe>
 8001b12:	2000      	movs	r0, #0
 8001b14:	bd10      	pop	{r4, pc}
 8001b16:	2001      	movs	r0, #1
 8001b18:	bd10      	pop	{r4, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)

08001b1c <__clzsi2>:
 8001b1c:	211c      	movs	r1, #28
 8001b1e:	2301      	movs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	4298      	cmp	r0, r3
 8001b24:	d301      	bcc.n	8001b2a <__clzsi2+0xe>
 8001b26:	0c00      	lsrs	r0, r0, #16
 8001b28:	3910      	subs	r1, #16
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	4298      	cmp	r0, r3
 8001b2e:	d301      	bcc.n	8001b34 <__clzsi2+0x18>
 8001b30:	0a00      	lsrs	r0, r0, #8
 8001b32:	3908      	subs	r1, #8
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d301      	bcc.n	8001b3e <__clzsi2+0x22>
 8001b3a:	0900      	lsrs	r0, r0, #4
 8001b3c:	3904      	subs	r1, #4
 8001b3e:	a202      	add	r2, pc, #8	; (adr r2, 8001b48 <__clzsi2+0x2c>)
 8001b40:	5c10      	ldrb	r0, [r2, r0]
 8001b42:	1840      	adds	r0, r0, r1
 8001b44:	4770      	bx	lr
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	02020304 	.word	0x02020304
 8001b4c:	01010101 	.word	0x01010101
	...

08001b58 <__clzdi2>:
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	2900      	cmp	r1, #0
 8001b5c:	d103      	bne.n	8001b66 <__clzdi2+0xe>
 8001b5e:	f7ff ffdd 	bl	8001b1c <__clzsi2>
 8001b62:	3020      	adds	r0, #32
 8001b64:	e002      	b.n	8001b6c <__clzdi2+0x14>
 8001b66:	0008      	movs	r0, r1
 8001b68:	f7ff ffd8 	bl	8001b1c <__clzsi2>
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)

08001b70 <__eqdf2>:
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	464e      	mov	r6, r9
 8001b74:	4645      	mov	r5, r8
 8001b76:	46de      	mov	lr, fp
 8001b78:	4657      	mov	r7, sl
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	b5e0      	push	{r5, r6, r7, lr}
 8001b7e:	0017      	movs	r7, r2
 8001b80:	031a      	lsls	r2, r3, #12
 8001b82:	0b12      	lsrs	r2, r2, #12
 8001b84:	0005      	movs	r5, r0
 8001b86:	4684      	mov	ip, r0
 8001b88:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <__eqdf2+0x80>)
 8001b8a:	030e      	lsls	r6, r1, #12
 8001b8c:	004c      	lsls	r4, r1, #1
 8001b8e:	4691      	mov	r9, r2
 8001b90:	005a      	lsls	r2, r3, #1
 8001b92:	0fdb      	lsrs	r3, r3, #31
 8001b94:	469b      	mov	fp, r3
 8001b96:	0b36      	lsrs	r6, r6, #12
 8001b98:	0d64      	lsrs	r4, r4, #21
 8001b9a:	0fc9      	lsrs	r1, r1, #31
 8001b9c:	0d52      	lsrs	r2, r2, #21
 8001b9e:	4284      	cmp	r4, r0
 8001ba0:	d019      	beq.n	8001bd6 <__eqdf2+0x66>
 8001ba2:	4282      	cmp	r2, r0
 8001ba4:	d010      	beq.n	8001bc8 <__eqdf2+0x58>
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	4294      	cmp	r4, r2
 8001baa:	d10e      	bne.n	8001bca <__eqdf2+0x5a>
 8001bac:	454e      	cmp	r6, r9
 8001bae:	d10c      	bne.n	8001bca <__eqdf2+0x5a>
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	45c4      	cmp	ip, r8
 8001bb4:	d109      	bne.n	8001bca <__eqdf2+0x5a>
 8001bb6:	4559      	cmp	r1, fp
 8001bb8:	d017      	beq.n	8001bea <__eqdf2+0x7a>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d105      	bne.n	8001bca <__eqdf2+0x5a>
 8001bbe:	0030      	movs	r0, r6
 8001bc0:	4328      	orrs	r0, r5
 8001bc2:	1e43      	subs	r3, r0, #1
 8001bc4:	4198      	sbcs	r0, r3
 8001bc6:	e000      	b.n	8001bca <__eqdf2+0x5a>
 8001bc8:	2001      	movs	r0, #1
 8001bca:	bcf0      	pop	{r4, r5, r6, r7}
 8001bcc:	46bb      	mov	fp, r7
 8001bce:	46b2      	mov	sl, r6
 8001bd0:	46a9      	mov	r9, r5
 8001bd2:	46a0      	mov	r8, r4
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd6:	0033      	movs	r3, r6
 8001bd8:	2001      	movs	r0, #1
 8001bda:	432b      	orrs	r3, r5
 8001bdc:	d1f5      	bne.n	8001bca <__eqdf2+0x5a>
 8001bde:	42a2      	cmp	r2, r4
 8001be0:	d1f3      	bne.n	8001bca <__eqdf2+0x5a>
 8001be2:	464b      	mov	r3, r9
 8001be4:	433b      	orrs	r3, r7
 8001be6:	d1f0      	bne.n	8001bca <__eqdf2+0x5a>
 8001be8:	e7e2      	b.n	8001bb0 <__eqdf2+0x40>
 8001bea:	2000      	movs	r0, #0
 8001bec:	e7ed      	b.n	8001bca <__eqdf2+0x5a>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__gedf2>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4647      	mov	r7, r8
 8001bf8:	46ce      	mov	lr, r9
 8001bfa:	0004      	movs	r4, r0
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	0016      	movs	r6, r2
 8001c00:	031b      	lsls	r3, r3, #12
 8001c02:	0b1b      	lsrs	r3, r3, #12
 8001c04:	4d2d      	ldr	r5, [pc, #180]	; (8001cbc <__gedf2+0xc8>)
 8001c06:	004a      	lsls	r2, r1, #1
 8001c08:	4699      	mov	r9, r3
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	0043      	lsls	r3, r0, #1
 8001c0e:	030f      	lsls	r7, r1, #12
 8001c10:	46a4      	mov	ip, r4
 8001c12:	46b0      	mov	r8, r6
 8001c14:	0b3f      	lsrs	r7, r7, #12
 8001c16:	0d52      	lsrs	r2, r2, #21
 8001c18:	0fc9      	lsrs	r1, r1, #31
 8001c1a:	0d5b      	lsrs	r3, r3, #21
 8001c1c:	0fc0      	lsrs	r0, r0, #31
 8001c1e:	42aa      	cmp	r2, r5
 8001c20:	d021      	beq.n	8001c66 <__gedf2+0x72>
 8001c22:	42ab      	cmp	r3, r5
 8001c24:	d013      	beq.n	8001c4e <__gedf2+0x5a>
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d122      	bne.n	8001c70 <__gedf2+0x7c>
 8001c2a:	433c      	orrs	r4, r7
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <__gedf2+0x42>
 8001c30:	464d      	mov	r5, r9
 8001c32:	432e      	orrs	r6, r5
 8001c34:	d022      	beq.n	8001c7c <__gedf2+0x88>
 8001c36:	2c00      	cmp	r4, #0
 8001c38:	d010      	beq.n	8001c5c <__gedf2+0x68>
 8001c3a:	4281      	cmp	r1, r0
 8001c3c:	d022      	beq.n	8001c84 <__gedf2+0x90>
 8001c3e:	2002      	movs	r0, #2
 8001c40:	3901      	subs	r1, #1
 8001c42:	4008      	ands	r0, r1
 8001c44:	3801      	subs	r0, #1
 8001c46:	bcc0      	pop	{r6, r7}
 8001c48:	46b9      	mov	r9, r7
 8001c4a:	46b0      	mov	r8, r6
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4e:	464d      	mov	r5, r9
 8001c50:	432e      	orrs	r6, r5
 8001c52:	d129      	bne.n	8001ca8 <__gedf2+0xb4>
 8001c54:	2a00      	cmp	r2, #0
 8001c56:	d1f0      	bne.n	8001c3a <__gedf2+0x46>
 8001c58:	433c      	orrs	r4, r7
 8001c5a:	d1ee      	bne.n	8001c3a <__gedf2+0x46>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d1f2      	bne.n	8001c46 <__gedf2+0x52>
 8001c60:	2001      	movs	r0, #1
 8001c62:	4240      	negs	r0, r0
 8001c64:	e7ef      	b.n	8001c46 <__gedf2+0x52>
 8001c66:	003d      	movs	r5, r7
 8001c68:	4325      	orrs	r5, r4
 8001c6a:	d11d      	bne.n	8001ca8 <__gedf2+0xb4>
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d0ee      	beq.n	8001c4e <__gedf2+0x5a>
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e2      	bne.n	8001c3a <__gedf2+0x46>
 8001c74:	464c      	mov	r4, r9
 8001c76:	4326      	orrs	r6, r4
 8001c78:	d1df      	bne.n	8001c3a <__gedf2+0x46>
 8001c7a:	e7e0      	b.n	8001c3e <__gedf2+0x4a>
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	2c00      	cmp	r4, #0
 8001c80:	d0e1      	beq.n	8001c46 <__gedf2+0x52>
 8001c82:	e7dc      	b.n	8001c3e <__gedf2+0x4a>
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dc0a      	bgt.n	8001c9e <__gedf2+0xaa>
 8001c88:	dbe8      	blt.n	8001c5c <__gedf2+0x68>
 8001c8a:	454f      	cmp	r7, r9
 8001c8c:	d8d7      	bhi.n	8001c3e <__gedf2+0x4a>
 8001c8e:	d00e      	beq.n	8001cae <__gedf2+0xba>
 8001c90:	2000      	movs	r0, #0
 8001c92:	454f      	cmp	r7, r9
 8001c94:	d2d7      	bcs.n	8001c46 <__gedf2+0x52>
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d0e2      	beq.n	8001c60 <__gedf2+0x6c>
 8001c9a:	0008      	movs	r0, r1
 8001c9c:	e7d3      	b.n	8001c46 <__gedf2+0x52>
 8001c9e:	4243      	negs	r3, r0
 8001ca0:	4158      	adcs	r0, r3
 8001ca2:	0040      	lsls	r0, r0, #1
 8001ca4:	3801      	subs	r0, #1
 8001ca6:	e7ce      	b.n	8001c46 <__gedf2+0x52>
 8001ca8:	2002      	movs	r0, #2
 8001caa:	4240      	negs	r0, r0
 8001cac:	e7cb      	b.n	8001c46 <__gedf2+0x52>
 8001cae:	45c4      	cmp	ip, r8
 8001cb0:	d8c5      	bhi.n	8001c3e <__gedf2+0x4a>
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	45c4      	cmp	ip, r8
 8001cb6:	d2c6      	bcs.n	8001c46 <__gedf2+0x52>
 8001cb8:	e7ed      	b.n	8001c96 <__gedf2+0xa2>
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	000007ff 	.word	0x000007ff

08001cc0 <__ledf2>:
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	4647      	mov	r7, r8
 8001cc4:	46ce      	mov	lr, r9
 8001cc6:	0004      	movs	r4, r0
 8001cc8:	0018      	movs	r0, r3
 8001cca:	0016      	movs	r6, r2
 8001ccc:	031b      	lsls	r3, r3, #12
 8001cce:	0b1b      	lsrs	r3, r3, #12
 8001cd0:	4d2c      	ldr	r5, [pc, #176]	; (8001d84 <__ledf2+0xc4>)
 8001cd2:	004a      	lsls	r2, r1, #1
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	0043      	lsls	r3, r0, #1
 8001cda:	030f      	lsls	r7, r1, #12
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	46b0      	mov	r8, r6
 8001ce0:	0b3f      	lsrs	r7, r7, #12
 8001ce2:	0d52      	lsrs	r2, r2, #21
 8001ce4:	0fc9      	lsrs	r1, r1, #31
 8001ce6:	0d5b      	lsrs	r3, r3, #21
 8001ce8:	0fc0      	lsrs	r0, r0, #31
 8001cea:	42aa      	cmp	r2, r5
 8001cec:	d00d      	beq.n	8001d0a <__ledf2+0x4a>
 8001cee:	42ab      	cmp	r3, r5
 8001cf0:	d010      	beq.n	8001d14 <__ledf2+0x54>
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d127      	bne.n	8001d46 <__ledf2+0x86>
 8001cf6:	433c      	orrs	r4, r7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <__ledf2+0x60>
 8001cfc:	464d      	mov	r5, r9
 8001cfe:	432e      	orrs	r6, r5
 8001d00:	d10e      	bne.n	8001d20 <__ledf2+0x60>
 8001d02:	2000      	movs	r0, #0
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d015      	beq.n	8001d34 <__ledf2+0x74>
 8001d08:	e00e      	b.n	8001d28 <__ledf2+0x68>
 8001d0a:	003d      	movs	r5, r7
 8001d0c:	4325      	orrs	r5, r4
 8001d0e:	d110      	bne.n	8001d32 <__ledf2+0x72>
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d118      	bne.n	8001d46 <__ledf2+0x86>
 8001d14:	464d      	mov	r5, r9
 8001d16:	432e      	orrs	r6, r5
 8001d18:	d10b      	bne.n	8001d32 <__ledf2+0x72>
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d102      	bne.n	8001d24 <__ledf2+0x64>
 8001d1e:	433c      	orrs	r4, r7
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	d00b      	beq.n	8001d3c <__ledf2+0x7c>
 8001d24:	4281      	cmp	r1, r0
 8001d26:	d014      	beq.n	8001d52 <__ledf2+0x92>
 8001d28:	2002      	movs	r0, #2
 8001d2a:	3901      	subs	r1, #1
 8001d2c:	4008      	ands	r0, r1
 8001d2e:	3801      	subs	r0, #1
 8001d30:	e000      	b.n	8001d34 <__ledf2+0x74>
 8001d32:	2002      	movs	r0, #2
 8001d34:	bcc0      	pop	{r6, r7}
 8001d36:	46b9      	mov	r9, r7
 8001d38:	46b0      	mov	r8, r6
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d1f9      	bne.n	8001d34 <__ledf2+0x74>
 8001d40:	2001      	movs	r0, #1
 8001d42:	4240      	negs	r0, r0
 8001d44:	e7f6      	b.n	8001d34 <__ledf2+0x74>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ec      	bne.n	8001d24 <__ledf2+0x64>
 8001d4a:	464c      	mov	r4, r9
 8001d4c:	4326      	orrs	r6, r4
 8001d4e:	d1e9      	bne.n	8001d24 <__ledf2+0x64>
 8001d50:	e7ea      	b.n	8001d28 <__ledf2+0x68>
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dd04      	ble.n	8001d60 <__ledf2+0xa0>
 8001d56:	4243      	negs	r3, r0
 8001d58:	4158      	adcs	r0, r3
 8001d5a:	0040      	lsls	r0, r0, #1
 8001d5c:	3801      	subs	r0, #1
 8001d5e:	e7e9      	b.n	8001d34 <__ledf2+0x74>
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbeb      	blt.n	8001d3c <__ledf2+0x7c>
 8001d64:	454f      	cmp	r7, r9
 8001d66:	d8df      	bhi.n	8001d28 <__ledf2+0x68>
 8001d68:	d006      	beq.n	8001d78 <__ledf2+0xb8>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	454f      	cmp	r7, r9
 8001d6e:	d2e1      	bcs.n	8001d34 <__ledf2+0x74>
 8001d70:	2900      	cmp	r1, #0
 8001d72:	d0e5      	beq.n	8001d40 <__ledf2+0x80>
 8001d74:	0008      	movs	r0, r1
 8001d76:	e7dd      	b.n	8001d34 <__ledf2+0x74>
 8001d78:	45c4      	cmp	ip, r8
 8001d7a:	d8d5      	bhi.n	8001d28 <__ledf2+0x68>
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	45c4      	cmp	ip, r8
 8001d80:	d2d8      	bcs.n	8001d34 <__ledf2+0x74>
 8001d82:	e7f5      	b.n	8001d70 <__ledf2+0xb0>
 8001d84:	000007ff 	.word	0x000007ff

08001d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8e:	f000 fcb3 	bl	80026f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d92:	f000 f973 	bl	800207c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d96:	f000 fac9 	bl	800232c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d9a:	f000 fa97 	bl	80022cc <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001d9e:	f000 f9eb 	bl	8002178 <MX_ADC_Init>
  MX_RTC_Init();
 8001da2:	f000 fa5d 	bl	8002260 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001da6:	4b9b      	ldr	r3, [pc, #620]	; (8002014 <main+0x28c>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	0018      	movs	r0, r3
 8001dac:	f001 f9e0 	bl	8003170 <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */
//  float temperature = 25.0;
//  float humidity = 60.0;
  while (1)
  {
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001db0:	4b99      	ldr	r3, [pc, #612]	; (8002018 <main+0x290>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f002 fe9c 	bl	8004af0 <HAL_RTCEx_DeactivateWakeUpTimer>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5F46, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001db8:	4998      	ldr	r1, [pc, #608]	; (800201c <main+0x294>)
 8001dba:	4b97      	ldr	r3, [pc, #604]	; (8002018 <main+0x290>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f002 fdd0 	bl	8004964 <HAL_RTCEx_SetWakeUpTimer_IT>
	HAL_SuspendTick();
 8001dc4:	f000 fd2c 	bl	8002820 <HAL_SuspendTick>

	/* Enter STOP mode */
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f001 fd12 	bl	80037f4 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick();
 8001dd0:	f000 fd34 	bl	800283c <HAL_ResumeTick>
	SystemClock_Config();
 8001dd4:	f000 f952 	bl	800207c <SystemClock_Config>
	// HAL_Delay(1000);
	// HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001dd8:	23a0      	movs	r3, #160	; 0xa0
 8001dda:	05db      	lsls	r3, r3, #23
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2120      	movs	r1, #32
 8001de0:	0018      	movs	r0, r3
 8001de2:	f001 fcbf 	bl	8003764 <HAL_GPIO_WritePin>
    ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	003b      	movs	r3, r7
 8001de8:	0018      	movs	r0, r3
 8001dea:	2308      	movs	r3, #8
 8001dec:	001a      	movs	r2, r3
 8001dee:	2100      	movs	r1, #0
 8001df0:	f003 fbea 	bl	80055c8 <memset>

    sConfig.Channel = ADC_CHANNEL_1;
 8001df4:	003b      	movs	r3, r7
 8001df6:	4a8a      	ldr	r2, [pc, #552]	; (8002020 <main+0x298>)
 8001df8:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 1;
 8001dfa:	003b      	movs	r3, r7
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	605a      	str	r2, [r3, #4]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e00:	003a      	movs	r2, r7
 8001e02:	4b84      	ldr	r3, [pc, #528]	; (8002014 <main+0x28c>)
 8001e04:	0011      	movs	r1, r2
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 ffd6 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8001e0c:	1e03      	subs	r3, r0, #0
 8001e0e:	d001      	beq.n	8001e14 <main+0x8c>
	{
	  Error_Handler();
 8001e10:	f000 fb3c 	bl	800248c <Error_Handler>
	}
	HAL_ADC_Start(&hadc);
 8001e14:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <main+0x28c>)
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 fe92 	bl	8002b40 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 10);
 8001e1c:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <main+0x28c>)
 8001e1e:	210a      	movs	r1, #10
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 ff21 	bl	8002c68 <HAL_ADC_PollForConversion>
    soil_in = HAL_ADC_GetValue(&hadc);
 8001e26:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <main+0x28c>)
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 ffb9 	bl	8002da0 <HAL_ADC_GetValue>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	4b7c      	ldr	r3, [pc, #496]	; (8002024 <main+0x29c>)
 8001e32:	601a      	str	r2, [r3, #0]

    // HAL_ADC_Stop(&hadc);

    sConfig.Channel = ADC_CHANNEL_8;
 8001e34:	003b      	movs	r3, r7
 8001e36:	4a7c      	ldr	r2, [pc, #496]	; (8002028 <main+0x2a0>)
 8001e38:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 1;
 8001e3a:	003b      	movs	r3, r7
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	605a      	str	r2, [r3, #4]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e40:	003a      	movs	r2, r7
 8001e42:	4b74      	ldr	r3, [pc, #464]	; (8002014 <main+0x28c>)
 8001e44:	0011      	movs	r1, r2
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 ffb6 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d001      	beq.n	8001e54 <main+0xcc>
    {
      Error_Handler();
 8001e50:	f000 fb1c 	bl	800248c <Error_Handler>
    }
	// HAL_ADC_Start(&hadc);
    HAL_ADC_PollForConversion(&hadc, 10);
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <main+0x28c>)
 8001e56:	210a      	movs	r1, #10
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 ff05 	bl	8002c68 <HAL_ADC_PollForConversion>
	light_lv = HAL_ADC_GetValue(&hadc);
 8001e5e:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <main+0x28c>)
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 ff9d 	bl	8002da0 <HAL_ADC_GetValue>
 8001e66:	0003      	movs	r3, r0
 8001e68:	001a      	movs	r2, r3
 8001e6a:	4b70      	ldr	r3, [pc, #448]	; (800202c <main+0x2a4>)
 8001e6c:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc);
 8001e6e:	4b69      	ldr	r3, [pc, #420]	; (8002014 <main+0x28c>)
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 feb9 	bl	8002be8 <HAL_ADC_Stop>
    temperature++;
 8001e76:	4b6e      	ldr	r3, [pc, #440]	; (8002030 <main+0x2a8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	21fe      	movs	r1, #254	; 0xfe
 8001e7c:	0589      	lsls	r1, r1, #22
 8001e7e:	1c18      	adds	r0, r3, #0
 8001e80:	f7fe fb40 	bl	8000504 <__aeabi_fadd>
 8001e84:	1c03      	adds	r3, r0, #0
 8001e86:	1c1a      	adds	r2, r3, #0
 8001e88:	4b69      	ldr	r3, [pc, #420]	; (8002030 <main+0x2a8>)
 8001e8a:	601a      	str	r2, [r3, #0]
    humidity--;
 8001e8c:	4b69      	ldr	r3, [pc, #420]	; (8002034 <main+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	21fe      	movs	r1, #254	; 0xfe
 8001e92:	0589      	lsls	r1, r1, #22
 8001e94:	1c18      	adds	r0, r3, #0
 8001e96:	f7fe fd83 	bl	80009a0 <__aeabi_fsub>
 8001e9a:	1c03      	adds	r3, r0, #0
 8001e9c:	1c1a      	adds	r2, r3, #0
 8001e9e:	4b65      	ldr	r3, [pc, #404]	; (8002034 <main+0x2ac>)
 8001ea0:	601a      	str	r2, [r3, #0]
	pest_spray = 250*(-0.6065 + 0.1632*temperature - 0.0024*humidity);
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <main+0x2a8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	1c18      	adds	r0, r3, #0
 8001ea8:	f7ff fdb2 	bl	8001a10 <__aeabi_f2d>
 8001eac:	4a62      	ldr	r2, [pc, #392]	; (8002038 <main+0x2b0>)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <main+0x2b4>)
 8001eb0:	f7fe ff24 	bl	8000cfc <__aeabi_dmul>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	000b      	movs	r3, r1
 8001eb8:	0010      	movs	r0, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	4a60      	ldr	r2, [pc, #384]	; (8002040 <main+0x2b8>)
 8001ebe:	4b61      	ldr	r3, [pc, #388]	; (8002044 <main+0x2bc>)
 8001ec0:	f7ff f988 	bl	80011d4 <__aeabi_dsub>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	000b      	movs	r3, r1
 8001ec8:	0014      	movs	r4, r2
 8001eca:	001d      	movs	r5, r3
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <main+0x2ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1c18      	adds	r0, r3, #0
 8001ed2:	f7ff fd9d 	bl	8001a10 <__aeabi_f2d>
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <main+0x2c0>)
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	; (800204c <main+0x2c4>)
 8001eda:	f7fe ff0f 	bl	8000cfc <__aeabi_dmul>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	000b      	movs	r3, r1
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	0029      	movs	r1, r5
 8001ee6:	f7ff f975 	bl	80011d4 <__aeabi_dsub>
 8001eea:	0002      	movs	r2, r0
 8001eec:	000b      	movs	r3, r1
 8001eee:	0010      	movs	r0, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <main+0x2c8>)
 8001ef6:	f7fe ff01 	bl	8000cfc <__aeabi_dmul>
 8001efa:	0002      	movs	r2, r0
 8001efc:	000b      	movs	r3, r1
 8001efe:	0010      	movs	r0, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	f7ff fcf9 	bl	80018f8 <__aeabi_d2iz>
 8001f06:	0002      	movs	r2, r0
 8001f08:	4b52      	ldr	r3, [pc, #328]	; (8002054 <main+0x2cc>)
 8001f0a:	601a      	str	r2, [r3, #0]
	if(pest_spray < 0) pest_spray = 0;
 8001f0c:	4b51      	ldr	r3, [pc, #324]	; (8002054 <main+0x2cc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da02      	bge.n	8001f1a <main+0x192>
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <main+0x2cc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

    pour_time = soil_in * 0.5 - 0.2*(light_lv-1500);
 8001f1a:	4b42      	ldr	r3, [pc, #264]	; (8002024 <main+0x29c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff fd50 	bl	80019c4 <__aeabi_ui2d>
 8001f24:	2200      	movs	r2, #0
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <main+0x2d0>)
 8001f28:	f7fe fee8 	bl	8000cfc <__aeabi_dmul>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	000b      	movs	r3, r1
 8001f30:	0014      	movs	r4, r2
 8001f32:	001d      	movs	r5, r3
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <main+0x2a4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <main+0x2d4>)
 8001f3a:	4694      	mov	ip, r2
 8001f3c:	4463      	add	r3, ip
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff fd10 	bl	8001964 <__aeabi_i2d>
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <main+0x2d8>)
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <main+0x2dc>)
 8001f48:	f7fe fed8 	bl	8000cfc <__aeabi_dmul>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	000b      	movs	r3, r1
 8001f50:	0020      	movs	r0, r4
 8001f52:	0029      	movs	r1, r5
 8001f54:	f7ff f93e 	bl	80011d4 <__aeabi_dsub>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	000b      	movs	r3, r1
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	f7fe f9e6 	bl	8000330 <__aeabi_d2uiz>
 8001f64:	0002      	movs	r2, r0
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <main+0x2e0>)
 8001f68:	601a      	str	r2, [r3, #0]
    if(soil_in < 2600 || temperature > 32) pour_time = 0;
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <main+0x29c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3f      	ldr	r2, [pc, #252]	; (800206c <main+0x2e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d908      	bls.n	8001f86 <main+0x1fe>
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <main+0x2a8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2184      	movs	r1, #132	; 0x84
 8001f7a:	05c9      	lsls	r1, r1, #23
 8001f7c:	1c18      	adds	r0, r3, #0
 8001f7e:	f7fe f975 	bl	800026c <__aeabi_fcmpgt>
 8001f82:	1e03      	subs	r3, r0, #0
 8001f84:	d002      	beq.n	8001f8c <main+0x204>
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <main+0x2e0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  
	// water spray
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <main+0x2e8>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2120      	movs	r1, #32
 8001f92:	0018      	movs	r0, r3
 8001f94:	f001 fbe6 	bl	8003764 <HAL_GPIO_WritePin>
	HAL_Delay(pour_time);
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <main+0x2e0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 fc1b 	bl	80027d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <main+0x2e8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2120      	movs	r1, #32
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f001 fbdb 	bl	8003764 <HAL_GPIO_WritePin>
	spraying++;
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <main+0x2ec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <main+0x2ec>)
 8001fb6:	601a      	str	r2, [r3, #0]
	spraying %= 2;
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <main+0x2ec>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <main+0x2f0>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d504      	bpl.n	8001fcc <main+0x244>
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <main+0x2ec>)
 8001fd0:	601a      	str	r2, [r3, #0]
	if(!spraying) pest_spray = 0;
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <main+0x2ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <main+0x258>
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <main+0x2cc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
	// pest repellent spray
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <main+0x2e8>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f001 fbbc 	bl	8003764 <HAL_GPIO_WritePin>
	HAL_Delay(pest_spray);
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <main+0x2cc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 fbf1 	bl	80027d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <main+0x2e8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f001 fbb1 	bl	8003764 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002002:	23a0      	movs	r3, #160	; 0xa0
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	2200      	movs	r2, #0
 8002008:	2120      	movs	r1, #32
 800200a:	0018      	movs	r0, r3
 800200c:	f001 fbaa 	bl	8003764 <HAL_GPIO_WritePin>
  {
 8002010:	e6ce      	b.n	8001db0 <main+0x28>
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	20000030 	.word	0x20000030
 8002018:	2000008c 	.word	0x2000008c
 800201c:	00005f46 	.word	0x00005f46
 8002020:	04000002 	.word	0x04000002
 8002024:	20000134 	.word	0x20000134
 8002028:	20000100 	.word	0x20000100
 800202c:	20000138 	.word	0x20000138
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004
 8002038:	d35a8588 	.word	0xd35a8588
 800203c:	3fc4e3bc 	.word	0x3fc4e3bc
 8002040:	b020c49c 	.word	0xb020c49c
 8002044:	3fe36872 	.word	0x3fe36872
 8002048:	30553261 	.word	0x30553261
 800204c:	3f63a92a 	.word	0x3f63a92a
 8002050:	406f4000 	.word	0x406f4000
 8002054:	20000140 	.word	0x20000140
 8002058:	3fe00000 	.word	0x3fe00000
 800205c:	fffffa24 	.word	0xfffffa24
 8002060:	9999999a 	.word	0x9999999a
 8002064:	3fc99999 	.word	0x3fc99999
 8002068:	2000013c 	.word	0x2000013c
 800206c:	00000a27 	.word	0x00000a27
 8002070:	50000400 	.word	0x50000400
 8002074:	20000144 	.word	0x20000144
 8002078:	80000001 	.word	0x80000001

0800207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b09f      	sub	sp, #124	; 0x7c
 8002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002082:	2440      	movs	r4, #64	; 0x40
 8002084:	193b      	adds	r3, r7, r4
 8002086:	0018      	movs	r0, r3
 8002088:	2338      	movs	r3, #56	; 0x38
 800208a:	001a      	movs	r2, r3
 800208c:	2100      	movs	r1, #0
 800208e:	f003 fa9b 	bl	80055c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002092:	232c      	movs	r3, #44	; 0x2c
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	0018      	movs	r0, r3
 8002098:	2314      	movs	r3, #20
 800209a:	001a      	movs	r2, r3
 800209c:	2100      	movs	r1, #0
 800209e:	f003 fa93 	bl	80055c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	0018      	movs	r0, r3
 80020a6:	2328      	movs	r3, #40	; 0x28
 80020a8:	001a      	movs	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	f003 fa8c 	bl	80055c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b0:	4b2e      	ldr	r3, [pc, #184]	; (800216c <SystemClock_Config+0xf0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <SystemClock_Config+0xf4>)
 80020b6:	401a      	ands	r2, r3
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <SystemClock_Config+0xf0>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0109      	lsls	r1, r1, #4
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020c2:	f001 fb89 	bl	80037d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <SystemClock_Config+0xf8>)
 80020c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <SystemClock_Config+0xf8>)
 80020cc:	4928      	ldr	r1, [pc, #160]	; (8002170 <SystemClock_Config+0xf4>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80020d2:	193b      	adds	r3, r7, r4
 80020d4:	2214      	movs	r2, #20
 80020d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	0052      	lsls	r2, r2, #1
 80020de:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020e0:	0021      	movs	r1, r4
 80020e2:	187b      	adds	r3, r7, r1
 80020e4:	2201      	movs	r2, #1
 80020e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	22a0      	movs	r2, #160	; 0xa0
 80020f2:	0212      	lsls	r2, r2, #8
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2200      	movs	r2, #0
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	0018      	movs	r0, r3
 8002100:	f001 fbd4 	bl	80038ac <HAL_RCC_OscConfig>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002108:	f000 f9c0 	bl	800248c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	187b      	adds	r3, r7, r1
 8002110:	220f      	movs	r2, #15
 8002112:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002114:	187b      	adds	r3, r7, r1
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002120:	187b      	adds	r3, r7, r1
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800212c:	187b      	adds	r3, r7, r1
 800212e:	2100      	movs	r1, #0
 8002130:	0018      	movs	r0, r3
 8002132:	f001 ff8f 	bl	8004054 <HAL_RCC_ClockConfig>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800213a:	f000 f9a7 	bl	800248c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2222      	movs	r2, #34	; 0x22
 8002142:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0252      	lsls	r2, r2, #9
 8002150:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	0018      	movs	r0, r3
 8002156:	f002 f9a1 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800215e:	f000 f995 	bl	800248c <Error_Handler>
  }
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b01f      	add	sp, #124	; 0x7c
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40007000 	.word	0x40007000
 8002170:	ffffe7ff 	.word	0xffffe7ff
 8002174:	40021000 	.word	0x40021000

08002178 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800217e:	003b      	movs	r3, r7
 8002180:	0018      	movs	r0, r3
 8002182:	2308      	movs	r3, #8
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f003 fa1e 	bl	80055c8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <MX_ADC_Init+0xd8>)
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <MX_ADC_Init+0xdc>)
 8002190:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <MX_ADC_Init+0xd8>)
 8002194:	2200      	movs	r2, #0
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <MX_ADC_Init+0xd8>)
 800219a:	22c0      	movs	r2, #192	; 0xc0
 800219c:	0612      	lsls	r2, r2, #24
 800219e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <MX_ADC_Init+0xd8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <MX_ADC_Init+0xd8>)
 80021a8:	2203      	movs	r2, #3
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <MX_ADC_Init+0xd8>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <MX_ADC_Init+0xd8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <MX_ADC_Init+0xd8>)
 80021ba:	2220      	movs	r2, #32
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <MX_ADC_Init+0xd8>)
 80021c2:	2221      	movs	r2, #33	; 0x21
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_ADC_Init+0xd8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <MX_ADC_Init+0xd8>)
 80021d0:	22c2      	movs	r2, #194	; 0xc2
 80021d2:	32ff      	adds	r2, #255	; 0xff
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <MX_ADC_Init+0xd8>)
 80021d8:	222c      	movs	r2, #44	; 0x2c
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_ADC_Init+0xd8>)
 80021e0:	2204      	movs	r2, #4
 80021e2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_ADC_Init+0xd8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = ENABLE;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <MX_ADC_Init+0xd8>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_ADC_Init+0xd8>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_ADC_Init+0xd8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_ADC_Init+0xd8>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fb2a 	bl	8002858 <HAL_ADC_Init>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d001      	beq.n	800220c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002208:	f000 f940 	bl	800248c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800220c:	003b      	movs	r3, r7
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <MX_ADC_Init+0xe0>)
 8002210:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002212:	003b      	movs	r3, r7
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	0152      	lsls	r2, r2, #5
 8002218:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800221a:	003a      	movs	r2, r7
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_ADC_Init+0xd8>)
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fdc9 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800222a:	f000 f92f 	bl	800248c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800222e:	003b      	movs	r3, r7
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <MX_ADC_Init+0xe4>)
 8002232:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002234:	003a      	movs	r2, r7
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <MX_ADC_Init+0xd8>)
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fdbc 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d001      	beq.n	8002248 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002244:	f000 f922 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000030 	.word	0x20000030
 8002254:	40012400 	.word	0x40012400
 8002258:	04000002 	.word	0x04000002
 800225c:	20000100 	.word	0x20000100

08002260 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MX_RTC_Init+0x60>)
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <MX_RTC_Init+0x64>)
 8002268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_RTC_Init+0x60>)
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <MX_RTC_Init+0x60>)
 8002272:	227f      	movs	r2, #127	; 0x7f
 8002274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_RTC_Init+0x60>)
 8002278:	22ff      	movs	r2, #255	; 0xff
 800227a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MX_RTC_Init+0x60>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_RTC_Init+0x60>)
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MX_RTC_Init+0x60>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_RTC_Init+0x60>)
 8002290:	2200      	movs	r2, #0
 8002292:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <MX_RTC_Init+0x60>)
 8002296:	0018      	movs	r0, r3
 8002298:	f002 fa74 	bl	8004784 <HAL_RTC_Init>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d001      	beq.n	80022a4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80022a0:	f000 f8f4 	bl	800248c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5F46, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80022a4:	4908      	ldr	r1, [pc, #32]	; (80022c8 <MX_RTC_Init+0x68>)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_RTC_Init+0x60>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	0018      	movs	r0, r3
 80022ac:	f002 fb5a 	bl	8004964 <HAL_RTCEx_SetWakeUpTimer_IT>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d001      	beq.n	80022b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80022b4:	f000 f8ea 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	2000008c 	.word	0x2000008c
 80022c4:	40002800 	.word	0x40002800
 80022c8:	00005f46 	.word	0x00005f46

080022cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART2_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d8:	22e1      	movs	r2, #225	; 0xe1
 80022da:	0252      	lsls	r2, r2, #9
 80022dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002310:	0018      	movs	r0, r3
 8002312:	f002 fc81 	bl	8004c18 <HAL_UART_Init>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f000 f8b7 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200000b0 	.word	0x200000b0
 8002328:	40004400 	.word	0x40004400

0800232c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	2414      	movs	r4, #20
 8002334:	193b      	adds	r3, r7, r4
 8002336:	0018      	movs	r0, r3
 8002338:	2314      	movs	r3, #20
 800233a:	001a      	movs	r2, r3
 800233c:	2100      	movs	r1, #0
 800233e:	f003 f943 	bl	80055c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b40      	ldr	r3, [pc, #256]	; (8002444 <MX_GPIO_Init+0x118>)
 8002344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <MX_GPIO_Init+0x118>)
 8002348:	2104      	movs	r1, #4
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <MX_GPIO_Init+0x118>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800235a:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <MX_GPIO_Init+0x118>)
 800235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <MX_GPIO_Init+0x118>)
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	430a      	orrs	r2, r1
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
 8002366:	4b37      	ldr	r3, [pc, #220]	; (8002444 <MX_GPIO_Init+0x118>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <MX_GPIO_Init+0x118>)
 8002374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <MX_GPIO_Init+0x118>)
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <MX_GPIO_Init+0x118>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	2201      	movs	r2, #1
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <MX_GPIO_Init+0x118>)
 800238c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <MX_GPIO_Init+0x118>)
 8002390:	2102      	movs	r1, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <MX_GPIO_Init+0x118>)
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023a2:	23a0      	movs	r3, #160	; 0xa0
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	2200      	movs	r2, #0
 80023a8:	2120      	movs	r1, #32
 80023aa:	0018      	movs	r0, r3
 80023ac:	f001 f9da 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <MX_GPIO_Init+0x11c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	2130      	movs	r1, #48	; 0x30
 80023b6:	0018      	movs	r0, r3
 80023b8:	f001 f9d4 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0192      	lsls	r2, r2, #6
 80023c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	2284      	movs	r2, #132	; 0x84
 80023c8:	0392      	lsls	r2, r2, #14
 80023ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <MX_GPIO_Init+0x120>)
 80023d6:	0019      	movs	r1, r3
 80023d8:	0010      	movs	r0, r2
 80023da:	f001 f845 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	2220      	movs	r2, #32
 80023e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	2201      	movs	r2, #1
 80023e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023f6:	193a      	adds	r2, r7, r4
 80023f8:	23a0      	movs	r3, #160	; 0xa0
 80023fa:	05db      	lsls	r3, r3, #23
 80023fc:	0011      	movs	r1, r2
 80023fe:	0018      	movs	r0, r3
 8002400:	f001 f832 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002404:	0021      	movs	r1, r4
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2230      	movs	r2, #48	; 0x30
 800240a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	187b      	adds	r3, r7, r1
 800240e:	2201      	movs	r2, #1
 8002410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	187b      	adds	r3, r7, r1
 8002420:	4a09      	ldr	r2, [pc, #36]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002422:	0019      	movs	r1, r3
 8002424:	0010      	movs	r0, r2
 8002426:	f001 f81f 	bl	8003468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2101      	movs	r1, #1
 800242e:	2007      	movs	r0, #7
 8002430:	f000 ffe8 	bl	8003404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002434:	2007      	movs	r0, #7
 8002436:	f000 fffa 	bl	800342e <HAL_NVIC_EnableIRQ>

}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	b00b      	add	sp, #44	; 0x2c
 8002440:	bd90      	pop	{r4, r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	40021000 	.word	0x40021000
 8002448:	50000400 	.word	0x50000400
 800244c:	50000800 	.word	0x50000800

08002450 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	0002      	movs	r2, r0
 8002458:	1dbb      	adds	r3, r7, #6
 800245a:	801a      	strh	r2, [r3, #0]
/* Interrupt is triggered by PC13 */
	if(GPIO_Pin == GPIO_PIN_13){
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	019b      	lsls	r3, r3, #6
 8002464:	429a      	cmp	r2, r3
 8002466:	d10d      	bne.n	8002484 <HAL_GPIO_EXTI_Callback+0x34>
		/* Toggle LED */
		// HAL_GPIO_TogglePin(out_port, out_pin);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002468:	23a0      	movs	r3, #160	; 0xa0
 800246a:	05db      	lsls	r3, r3, #23
 800246c:	2201      	movs	r2, #1
 800246e:	2120      	movs	r1, #32
 8002470:	0018      	movs	r0, r3
 8002472:	f001 f977 	bl	8003764 <HAL_GPIO_WritePin>
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		// HAL_Delay(pest_spray);
		// pest_spray = 0;
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002476:	23a0      	movs	r3, #160	; 0xa0
 8002478:	05db      	lsls	r3, r3, #23
 800247a:	2200      	movs	r2, #0
 800247c:	2120      	movs	r1, #32
 800247e:	0018      	movs	r0, r3
 8002480:	f001 f970 	bl	8003764 <HAL_GPIO_WritePin>
	}
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	e7fe      	b.n	8002494 <Error_Handler+0x8>
	...

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_MspInit+0x24>)
 800249e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x24>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	430a      	orrs	r2, r1
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_MspInit+0x24>)
 80024aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_MspInit+0x24>)
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0549      	lsls	r1, r1, #21
 80024b2:	430a      	orrs	r2, r1
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000

080024c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	2414      	movs	r4, #20
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	0018      	movs	r0, r3
 80024ce:	2314      	movs	r3, #20
 80024d0:	001a      	movs	r2, r3
 80024d2:	2100      	movs	r1, #0
 80024d4:	f003 f878 	bl	80055c8 <memset>
  if(hadc->Instance==ADC1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a22      	ldr	r2, [pc, #136]	; (8002568 <HAL_ADC_MspInit+0xa8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d13d      	bne.n	800255e <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_ADC_MspInit+0xac>)
 80024e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_ADC_MspInit+0xac>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0089      	lsls	r1, r1, #2
 80024ec:	430a      	orrs	r2, r1
 80024ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_ADC_MspInit+0xac>)
 80024f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_ADC_MspInit+0xac>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_ADC_MspInit+0xac>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_ADC_MspInit+0xac>)
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_ADC_MspInit+0xac>)
 800250e:	2102      	movs	r1, #2
 8002510:	430a      	orrs	r2, r1
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_ADC_MspInit+0xac>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2202      	movs	r2, #2
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002520:	193b      	adds	r3, r7, r4
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002526:	193b      	adds	r3, r7, r4
 8002528:	2203      	movs	r2, #3
 800252a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	193b      	adds	r3, r7, r4
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	193a      	adds	r2, r7, r4
 8002534:	23a0      	movs	r3, #160	; 0xa0
 8002536:	05db      	lsls	r3, r3, #23
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f000 ff94 	bl	8003468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002540:	193b      	adds	r3, r7, r4
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002546:	193b      	adds	r3, r7, r4
 8002548:	2203      	movs	r2, #3
 800254a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	193b      	adds	r3, r7, r4
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	193b      	adds	r3, r7, r4
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_ADC_MspInit+0xb0>)
 8002556:	0019      	movs	r1, r3
 8002558:	0010      	movs	r0, r2
 800255a:	f000 ff85 	bl	8003468 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b00b      	add	sp, #44	; 0x2c
 8002564:	bd90      	pop	{r4, r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	40012400 	.word	0x40012400
 800256c:	40021000 	.word	0x40021000
 8002570:	50000400 	.word	0x50000400

08002574 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_RTC_MspInit+0x38>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10e      	bne.n	80025a4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RTC_MspInit+0x3c>)
 8002588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RTC_MspInit+0x3c>)
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	02c9      	lsls	r1, r1, #11
 8002590:	430a      	orrs	r2, r1
 8002592:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002594:	2200      	movs	r2, #0
 8002596:	2100      	movs	r1, #0
 8002598:	2002      	movs	r0, #2
 800259a:	f000 ff33 	bl	8003404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800259e:	2002      	movs	r0, #2
 80025a0:	f000 ff45 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40002800 	.word	0x40002800
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	240c      	movs	r4, #12
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	0018      	movs	r0, r3
 80025c2:	2314      	movs	r3, #20
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f002 fffe 	bl	80055c8 <memset>
  if(huart->Instance==USART2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_UART_MspInit+0x80>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d129      	bne.n	800262a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_UART_MspInit+0x84>)
 80025d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_UART_MspInit+0x84>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0289      	lsls	r1, r1, #10
 80025e0:	430a      	orrs	r2, r1
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_UART_MspInit+0x84>)
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_UART_MspInit+0x84>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_UART_MspInit+0x84>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2201      	movs	r2, #1
 80025f6:	4013      	ands	r3, r2
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025fc:	0021      	movs	r1, r4
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	220c      	movs	r2, #12
 8002602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2202      	movs	r2, #2
 8002608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2203      	movs	r2, #3
 8002614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2204      	movs	r2, #4
 800261a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	187a      	adds	r2, r7, r1
 800261e:	23a0      	movs	r3, #160	; 0xa0
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 ff1f 	bl	8003468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b009      	add	sp, #36	; 0x24
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40004400 	.word	0x40004400
 8002638:	40021000 	.word	0x40021000

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002660:	f000 f89e 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <RTC_IRQHandler+0x14>)
 8002672:	0018      	movs	r0, r3
 8002674:	f002 fa9e 	bl	8004bb4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	2000008c 	.word	0x2000008c

08002684 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	019b      	lsls	r3, r3, #6
 800268c:	0018      	movs	r0, r3
 800268e:	f001 f887 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80026a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480d      	ldr	r0, [pc, #52]	; (80026e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490e      	ldr	r1, [pc, #56]	; (80026e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0b      	ldr	r4, [pc, #44]	; (80026f0 <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026ce:	f7ff ffe3 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f002 ff55 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff fb57 	bl	8001d88 <main>

080026da <LoopForever>:

LoopForever:
    b LoopForever
 80026da:	e7fe      	b.n	80026da <LoopForever>
   ldr   r0, =_estack
 80026dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026e8:	080056ac 	.word	0x080056ac
  ldr r2, =_sbss
 80026ec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026f0:	2000014c 	.word	0x2000014c

080026f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC1_COMP_IRQHandler>
	...

080026f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_Init+0x3c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_Init+0x3c>)
 800270a:	2140      	movs	r1, #64	; 0x40
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002710:	2000      	movs	r0, #0
 8002712:	f000 f811 	bl	8002738 <HAL_InitTick>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d003      	beq.n	8002722 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e001      	b.n	8002726 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002722:	f7ff feb9 	bl	8002498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	781b      	ldrb	r3, [r3, #0]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40022000 	.word	0x40022000

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_InitTick+0x5c>)
 8002742:	681c      	ldr	r4, [r3, #0]
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_InitTick+0x60>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	0019      	movs	r1, r3
 800274a:	23fa      	movs	r3, #250	; 0xfa
 800274c:	0098      	lsls	r0, r3, #2
 800274e:	f7fd fcdb 	bl	8000108 <__udivsi3>
 8002752:	0003      	movs	r3, r0
 8002754:	0019      	movs	r1, r3
 8002756:	0020      	movs	r0, r4
 8002758:	f7fd fcd6 	bl	8000108 <__udivsi3>
 800275c:	0003      	movs	r3, r0
 800275e:	0018      	movs	r0, r3
 8002760:	f000 fe75 	bl	800344e <HAL_SYSTICK_Config>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e00f      	b.n	800278c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d80b      	bhi.n	800278a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	2301      	movs	r3, #1
 8002776:	425b      	negs	r3, r3
 8002778:	2200      	movs	r2, #0
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fe42 	bl	8003404 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_InitTick+0x64>)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b003      	add	sp, #12
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	20000008 	.word	0x20000008
 8002798:	20000010 	.word	0x20000010
 800279c:	2000000c 	.word	0x2000000c

080027a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_IncTick+0x1c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	001a      	movs	r2, r3
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_IncTick+0x20>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	18d2      	adds	r2, r2, r3
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_IncTick+0x20>)
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	20000010 	.word	0x20000010
 80027c0:	20000148 	.word	0x20000148

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b02      	ldr	r3, [pc, #8]	; (80027d4 <HAL_GetTick+0x10>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	20000148 	.word	0x20000148

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	001a      	movs	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	f7ff ffe0 	bl	80027c4 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	20000010 	.word	0x20000010

08002820 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <HAL_SuspendTick+0x18>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_SuspendTick+0x18>)
 800282a:	2102      	movs	r1, #2
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_ResumeTick+0x18>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_ResumeTick+0x18>)
 8002846:	2102      	movs	r1, #2
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e159      	b.n	8002b1e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2250      	movs	r2, #80	; 0x50
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff fe1c 	bl	80024c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	2210      	movs	r2, #16
 800288e:	4013      	ands	r3, r2
 8002890:	2b10      	cmp	r3, #16
 8002892:	d005      	beq.n	80028a0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2204      	movs	r2, #4
 800289c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800289e:	d00b      	beq.n	80028b8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	2210      	movs	r2, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2250      	movs	r2, #80	; 0x50
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e132      	b.n	8002b1e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	4a9a      	ldr	r2, [pc, #616]	; (8002b28 <HAL_ADC_Init+0x2d0>)
 80028be:	4013      	ands	r3, r2
 80028c0:	2202      	movs	r2, #2
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2203      	movs	r2, #3
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_ADC_Init+0x90>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_Init+0x90>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_ADC_Init+0x92>
 80028e8:	2300      	movs	r3, #0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d149      	bne.n	8002982 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	23c0      	movs	r3, #192	; 0xc0
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d00b      	beq.n	8002912 <HAL_ADC_Init+0xba>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	05db      	lsls	r3, r3, #23
 8002902:	429a      	cmp	r2, r3
 8002904:	d005      	beq.n	8002912 <HAL_ADC_Init+0xba>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	429a      	cmp	r2, r3
 8002910:	d111      	bne.n	8002936 <HAL_ADC_Init+0xde>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	0892      	lsrs	r2, r2, #2
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6919      	ldr	r1, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	611a      	str	r2, [r3, #16]
 8002934:	e014      	b.n	8002960 <HAL_ADC_Init+0x108>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	0892      	lsrs	r2, r2, #2
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b78      	ldr	r3, [pc, #480]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 800294c:	4978      	ldr	r1, [pc, #480]	; (8002b30 <HAL_ADC_Init+0x2d8>)
 800294e:	400a      	ands	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2118      	movs	r1, #24
 800296c:	438a      	bics	r2, r1
 800296e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68d9      	ldr	r1, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002982:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b69      	ldr	r3, [pc, #420]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 8002988:	496a      	ldr	r1, [pc, #424]	; (8002b34 <HAL_ADC_Init+0x2dc>)
 800298a:	400a      	ands	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	065a      	lsls	r2, r3, #25
 8002998:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <HAL_ADC_Init+0x2d4>)
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	055b      	lsls	r3, r3, #21
 80029a8:	4013      	ands	r3, r2
 80029aa:	d108      	bne.n	80029be <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	0549      	lsls	r1, r1, #21
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	495b      	ldr	r1, [pc, #364]	; (8002b38 <HAL_ADC_Init+0x2e0>)
 80029ca:	400a      	ands	r2, r1
 80029cc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_Init+0x18c>
 80029e0:	2304      	movs	r3, #4
 80029e2:	e000      	b.n	80029e6 <HAL_ADC_Init+0x18e>
 80029e4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029e6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2020      	movs	r0, #32
 80029ec:	5c1b      	ldrb	r3, [r3, r0]
 80029ee:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029f0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	202c      	movs	r0, #44	; 0x2c
 80029f6:	5c1b      	ldrb	r3, [r3, r0]
 80029f8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029fa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a00:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002a08:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002a10:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1e:	23c2      	movs	r3, #194	; 0xc2
 8002a20:	33ff      	adds	r3, #255	; 0xff
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d00b      	beq.n	8002a3e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d11a      	bne.n	8002a7e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	0249      	lsls	r1, r1, #9
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	e00b      	b.n	8002a7e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	2201      	movs	r2, #1
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d11f      	bne.n	8002ac6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	492a      	ldr	r1, [pc, #168]	; (8002b3c <HAL_ADC_Init+0x2e4>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6919      	ldr	r1, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002aa4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002aaa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	611a      	str	r2, [r3, #16]
 8002ac4:	e00e      	b.n	8002ae4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2201      	movs	r2, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2107      	movs	r1, #7
 8002af0:	438a      	bics	r2, r1
 8002af2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6959      	ldr	r1, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	2203      	movs	r2, #3
 8002b12:	4393      	bics	r3, r2
 8002b14:	2201      	movs	r2, #1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	fffffefd 	.word	0xfffffefd
 8002b2c:	40012708 	.word	0x40012708
 8002b30:	ffc3ffff 	.word	0xffc3ffff
 8002b34:	fdffffff 	.word	0xfdffffff
 8002b38:	fffe0219 	.word	0xfffe0219
 8002b3c:	fffffc03 	.word	0xfffffc03

08002b40 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2204      	movs	r2, #4
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d138      	bne.n	8002bce <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2250      	movs	r2, #80	; 0x50
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Start+0x2a>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e038      	b.n	8002bdc <HAL_ADC_Start+0x9c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2250      	movs	r2, #80	; 0x50
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d007      	beq.n	8002b8a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	18fc      	adds	r4, r7, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f9b9 	bl	8002ef8 <ADC_Enable>
 8002b86:	0003      	movs	r3, r0
 8002b88:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b8a:	230f      	movs	r3, #15
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d120      	bne.n	8002bd6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <HAL_ADC_Start+0xa4>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0052      	lsls	r2, r2, #1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2250      	movs	r2, #80	; 0x50
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	221c      	movs	r2, #28
 8002bba:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e003      	b.n	8002bd6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	781b      	ldrb	r3, [r3, #0]
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b005      	add	sp, #20
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	fffff0fe 	.word	0xfffff0fe

08002be8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2250      	movs	r2, #80	; 0x50
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Stop+0x1e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e029      	b.n	8002c5a <HAL_ADC_Stop+0x72>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2250      	movs	r2, #80	; 0x50
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c0e:	250f      	movs	r5, #15
 8002c10:	197c      	adds	r4, r7, r5
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f000 fa3e 	bl	8003096 <ADC_ConversionStop>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c1e:	197b      	adds	r3, r7, r5
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c26:	197c      	adds	r4, r7, r5
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f9cc 	bl	8002fc8 <ADC_Disable>
 8002c30:	0003      	movs	r3, r0
 8002c32:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c34:	197b      	adds	r3, r7, r5
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_ADC_Stop+0x7c>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	2201      	movs	r2, #1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2250      	movs	r2, #80	; 0x50
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c54:	230f      	movs	r3, #15
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bdb0      	pop	{r4, r5, r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	fffffefe 	.word	0xfffffefe

08002c68 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d102      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002c82:	2308      	movs	r3, #8
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e014      	b.n	8002cb2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d10b      	bne.n	8002cae <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2250      	movs	r2, #80	; 0x50
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e072      	b.n	8002d94 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002cae:	230c      	movs	r3, #12
 8002cb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cb2:	f7ff fd87 	bl	80027c4 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cba:	e01f      	b.n	8002cfc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	d01c      	beq.n	8002cfc <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_ADC_PollForConversion+0x70>
 8002cc8:	f7ff fd7c 	bl	80027c4 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d211      	bcs.n	8002cfc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	2204      	movs	r2, #4
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2250      	movs	r2, #80	; 0x50
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e04b      	b.n	8002d94 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	d0d9      	beq.n	8002cbc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	23c0      	movs	r3, #192	; 0xc0
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	d12e      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d129      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2208      	movs	r2, #8
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d122      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	d110      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	210c      	movs	r1, #12
 8002d54:	438a      	bics	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <HAL_ADC_PollForConversion+0x134>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2201      	movs	r2, #1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
 8002d68:	e00b      	b.n	8002d82 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	2220      	movs	r2, #32
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	fffffefe 	.word	0xfffffefe

08002da0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2250      	movs	r2, #80	; 0x50
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e085      	b.n	8002edc <HAL_ADC_ConfigChannel+0x124>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2250      	movs	r2, #80	; 0x50
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2204      	movs	r2, #4
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	2220      	movs	r2, #32
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2250      	movs	r2, #80	; 0x50
 8002df4:	2100      	movs	r1, #0
 8002df6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e06f      	b.n	8002edc <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_ADC_ConfigChannel+0x12c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d035      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	035b      	lsls	r3, r3, #13
 8002e12:	0b5a      	lsrs	r2, r3, #13
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	02db      	lsls	r3, r3, #11
 8002e24:	4013      	ands	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0409      	lsls	r1, r1, #16
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002e36:	200a      	movs	r0, #10
 8002e38:	f000 f97a 	bl	8003130 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	029b      	lsls	r3, r3, #10
 8002e44:	4013      	ands	r3, r2
 8002e46:	d006      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	03c9      	lsls	r1, r1, #15
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d037      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	0449      	lsls	r1, r1, #17
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e02f      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	035b      	lsls	r3, r3, #13
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	43d9      	mvns	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	400a      	ands	r2, r1
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	02db      	lsls	r3, r3, #11
 8002e92:	4013      	ands	r3, r2
 8002e94:	d005      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002e9c:	4913      	ldr	r1, [pc, #76]	; (8002eec <HAL_ADC_ConfigChannel+0x134>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d005      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_ADC_ConfigChannel+0x138>)
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	025b      	lsls	r3, r3, #9
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d005      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_ADC_ConfigChannel+0x130>)
 8002ecc:	4909      	ldr	r1, [pc, #36]	; (8002ef4 <HAL_ADC_ConfigChannel+0x13c>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2250      	movs	r2, #80	; 0x50
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	00001001 	.word	0x00001001
 8002ee8:	40012708 	.word	0x40012708
 8002eec:	ff7fffff 	.word	0xff7fffff
 8002ef0:	ffbfffff 	.word	0xffbfffff
 8002ef4:	feffffff 	.word	0xfeffffff

08002ef8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <ADC_Enable+0x2c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <ADC_Enable+0x2c>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <ADC_Enable+0x2e>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d146      	bne.n	8002fb8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <ADC_Enable+0xcc>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	d00d      	beq.n	8002f52 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	2201      	movs	r2, #1
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e033      	b.n	8002fba <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 f8e4 	bl	8003130 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f68:	f7ff fc2c 	bl	80027c4 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f70:	e01b      	b.n	8002faa <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f72:	f7ff fc27 	bl	80027c4 <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b0a      	cmp	r3, #10
 8002f7e:	d914      	bls.n	8002faa <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d00d      	beq.n	8002faa <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	2210      	movs	r2, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d1dc      	bne.n	8002f72 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	80000017 	.word	0x80000017

08002fc8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <ADC_Disable+0x2c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <ADC_Disable+0x2c>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <ADC_Disable+0x2e>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d048      	beq.n	800308c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2205      	movs	r2, #5
 8003002:	4013      	ands	r3, r2
 8003004:	2b01      	cmp	r3, #1
 8003006:	d110      	bne.n	800302a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2102      	movs	r1, #2
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2203      	movs	r2, #3
 800301e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003020:	f7ff fbd0 	bl	80027c4 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003028:	e029      	b.n	800307e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	2210      	movs	r2, #16
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	2201      	movs	r2, #1
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e023      	b.n	800308e <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003046:	f7ff fbbd 	bl	80027c4 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b0a      	cmp	r3, #10
 8003052:	d914      	bls.n	800307e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10d      	bne.n	800307e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	2210      	movs	r2, #16
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	2201      	movs	r2, #1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2201      	movs	r2, #1
 8003086:	4013      	ands	r3, r2
 8003088:	2b01      	cmp	r3, #1
 800308a:	d0dc      	beq.n	8003046 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}

08003096 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2204      	movs	r2, #4
 80030aa:	4013      	ands	r3, r2
 80030ac:	d03a      	beq.n	8003124 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2204      	movs	r2, #4
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d10d      	bne.n	80030d8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80030c6:	d107      	bne.n	80030d8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2110      	movs	r1, #16
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030d8:	f7ff fb74 	bl	80027c4 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030e0:	e01a      	b.n	8003118 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030e2:	f7ff fb6f 	bl	80027c4 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d913      	bls.n	8003118 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2204      	movs	r2, #4
 80030f8:	4013      	ands	r3, r2
 80030fa:	d00d      	beq.n	8003118 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	2210      	movs	r2, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	2201      	movs	r2, #1
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e006      	b.n	8003126 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2204      	movs	r2, #4
 8003120:	4013      	ands	r3, r2
 8003122:	d1de      	bne.n	80030e2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <ADC_DelayMicroSecond+0x38>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	490b      	ldr	r1, [pc, #44]	; (800316c <ADC_DelayMicroSecond+0x3c>)
 800313e:	0018      	movs	r0, r3
 8003140:	f7fc ffe2 	bl	8000108 <__udivsi3>
 8003144:	0003      	movs	r3, r0
 8003146:	001a      	movs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4353      	muls	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800314e:	e002      	b.n	8003156 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f9      	bne.n	8003150 <ADC_DelayMicroSecond+0x20>
  } 
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000008 	.word	0x20000008
 800316c:	000f4240 	.word	0x000f4240

08003170 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317a:	2317      	movs	r3, #23
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2250      	movs	r2, #80	; 0x50
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_ADCEx_Calibration_Start+0x28>
 8003194:	2302      	movs	r3, #2
 8003196:	e083      	b.n	80032a0 <HAL_ADCEx_Calibration_Start+0x130>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2250      	movs	r2, #80	; 0x50
 800319c:	2101      	movs	r1, #1
 800319e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2203      	movs	r2, #3
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d108      	bne.n	80031c0 <HAL_ADCEx_Calibration_Start+0x50>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_ADCEx_Calibration_Start+0x50>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_ADCEx_Calibration_Start+0x52>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d15b      	bne.n	800327e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	4a37      	ldr	r2, [pc, #220]	; (80032a8 <HAL_ADCEx_Calibration_Start+0x138>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	2202      	movs	r2, #2
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2203      	movs	r2, #3
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2103      	movs	r1, #3
 80031ee:	438a      	bics	r2, r1
 80031f0:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	0609      	lsls	r1, r1, #24
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003204:	f7ff fade 	bl	80027c4 <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800320c:	e01d      	b.n	800324a <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800320e:	f7ff fad9 	bl	80027c4 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b0a      	cmp	r3, #10
 800321a:	d916      	bls.n	800324a <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0fdb      	lsrs	r3, r3, #31
 8003224:	07da      	lsls	r2, r3, #31
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	429a      	cmp	r2, r3
 800322c:	d10d      	bne.n	800324a <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	2212      	movs	r2, #18
 8003234:	4393      	bics	r3, r2
 8003236:	2210      	movs	r2, #16
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2250      	movs	r2, #80	; 0x50
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e02a      	b.n	80032a0 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	0fdb      	lsrs	r3, r3, #31
 8003252:	07da      	lsls	r2, r3, #31
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	429a      	cmp	r2, r3
 800325a:	d0d8      	beq.n	800320e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	2203      	movs	r2, #3
 8003272:	4393      	bics	r3, r2
 8003274:	2201      	movs	r2, #1
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
 800327c:	e009      	b.n	8003292 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	2220      	movs	r2, #32
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800328a:	2317      	movs	r3, #23
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2250      	movs	r2, #80	; 0x50
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800329a:	2317      	movs	r3, #23
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b006      	add	sp, #24
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	fffffefd 	.word	0xfffffefd

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	0002      	movs	r2, r0
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b7f      	cmp	r3, #127	; 0x7f
 80032be:	d809      	bhi.n	80032d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	001a      	movs	r2, r3
 80032c6:	231f      	movs	r3, #31
 80032c8:	401a      	ands	r2, r3
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <__NVIC_EnableIRQ+0x30>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	4091      	lsls	r1, r2
 80032d0:	000a      	movs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
  }
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	0002      	movs	r2, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b7f      	cmp	r3, #127	; 0x7f
 80032f4:	d828      	bhi.n	8003348 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f6:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <__NVIC_SetPriority+0xd4>)
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	33c0      	adds	r3, #192	; 0xc0
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	589b      	ldr	r3, [r3, r2]
 8003306:	1dfa      	adds	r2, r7, #7
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	0011      	movs	r1, r2
 800330c:	2203      	movs	r2, #3
 800330e:	400a      	ands	r2, r1
 8003310:	00d2      	lsls	r2, r2, #3
 8003312:	21ff      	movs	r1, #255	; 0xff
 8003314:	4091      	lsls	r1, r2
 8003316:	000a      	movs	r2, r1
 8003318:	43d2      	mvns	r2, r2
 800331a:	401a      	ands	r2, r3
 800331c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	22ff      	movs	r2, #255	; 0xff
 8003324:	401a      	ands	r2, r3
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	0018      	movs	r0, r3
 800332c:	2303      	movs	r3, #3
 800332e:	4003      	ands	r3, r0
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003334:	481f      	ldr	r0, [pc, #124]	; (80033b4 <__NVIC_SetPriority+0xd4>)
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b25b      	sxtb	r3, r3
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	430a      	orrs	r2, r1
 8003340:	33c0      	adds	r3, #192	; 0xc0
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003346:	e031      	b.n	80033ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <__NVIC_SetPriority+0xd8>)
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	0019      	movs	r1, r3
 8003350:	230f      	movs	r3, #15
 8003352:	400b      	ands	r3, r1
 8003354:	3b08      	subs	r3, #8
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3306      	adds	r3, #6
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	3304      	adds	r3, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1dfa      	adds	r2, r7, #7
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	0011      	movs	r1, r2
 8003368:	2203      	movs	r2, #3
 800336a:	400a      	ands	r2, r1
 800336c:	00d2      	lsls	r2, r2, #3
 800336e:	21ff      	movs	r1, #255	; 0xff
 8003370:	4091      	lsls	r1, r2
 8003372:	000a      	movs	r2, r1
 8003374:	43d2      	mvns	r2, r2
 8003376:	401a      	ands	r2, r3
 8003378:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	401a      	ands	r2, r3
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	0018      	movs	r0, r3
 8003388:	2303      	movs	r3, #3
 800338a:	4003      	ands	r3, r0
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <__NVIC_SetPriority+0xd8>)
 8003392:	1dfb      	adds	r3, r7, #7
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	001c      	movs	r4, r3
 8003398:	230f      	movs	r3, #15
 800339a:	4023      	ands	r3, r4
 800339c:	3b08      	subs	r3, #8
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	430a      	orrs	r2, r1
 80033a2:	3306      	adds	r3, #6
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	18c3      	adds	r3, r0, r3
 80033a8:	3304      	adds	r3, #4
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b003      	add	sp, #12
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	e000e100 	.word	0xe000e100
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	045b      	lsls	r3, r3, #17
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d301      	bcc.n	80033d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d0:	2301      	movs	r3, #1
 80033d2:	e010      	b.n	80033f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <SysTick_Config+0x44>)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	3a01      	subs	r2, #1
 80033da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033dc:	2301      	movs	r3, #1
 80033de:	425b      	negs	r3, r3
 80033e0:	2103      	movs	r1, #3
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff7c 	bl	80032e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <SysTick_Config+0x44>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SysTick_Config+0x44>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	210f      	movs	r1, #15
 8003410:	187b      	adds	r3, r7, r1
 8003412:	1c02      	adds	r2, r0, #0
 8003414:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	187b      	adds	r3, r7, r1
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b25b      	sxtb	r3, r3
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff ff5d 	bl	80032e0 <__NVIC_SetPriority>
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	0002      	movs	r2, r0
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b25b      	sxtb	r3, r3
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ff33 	bl	80032ac <__NVIC_EnableIRQ>
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff ffaf 	bl	80033bc <SysTick_Config>
 800345e:	0003      	movs	r3, r0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800347e:	e155      	b.n	800372c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4091      	lsls	r1, r2
 800348a:	000a      	movs	r2, r1
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d100      	bne.n	8003498 <HAL_GPIO_Init+0x30>
 8003496:	e146      	b.n	8003726 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d005      	beq.n	80034b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d130      	bne.n	8003512 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	409a      	lsls	r2, r3
 80034be:	0013      	movs	r3, r2
 80034c0:	43da      	mvns	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	409a      	lsls	r2, r3
 80034d2:	0013      	movs	r3, r2
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e6:	2201      	movs	r2, #1
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
 80034ec:	0013      	movs	r3, r2
 80034ee:	43da      	mvns	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	2201      	movs	r2, #1
 80034fe:	401a      	ands	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	409a      	lsls	r2, r3
 8003504:	0013      	movs	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	4013      	ands	r3, r2
 800351a:	2b03      	cmp	r3, #3
 800351c:	d017      	beq.n	800354e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	409a      	lsls	r2, r3
 800352c:	0013      	movs	r3, r2
 800352e:	43da      	mvns	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	409a      	lsls	r2, r3
 8003540:	0013      	movs	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	4013      	ands	r3, r2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d123      	bne.n	80035a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	08da      	lsrs	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3208      	adds	r2, #8
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	58d3      	ldr	r3, [r2, r3]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2207      	movs	r2, #7
 800356c:	4013      	ands	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	220f      	movs	r2, #15
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	43da      	mvns	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2107      	movs	r1, #7
 8003586:	400b      	ands	r3, r1
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	08da      	lsrs	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3208      	adds	r2, #8
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	2203      	movs	r2, #3
 80035ae:	409a      	lsls	r2, r3
 80035b0:	0013      	movs	r3, r2
 80035b2:	43da      	mvns	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2203      	movs	r2, #3
 80035c0:	401a      	ands	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	23c0      	movs	r3, #192	; 0xc0
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	4013      	ands	r3, r2
 80035e0:	d100      	bne.n	80035e4 <HAL_GPIO_Init+0x17c>
 80035e2:	e0a0      	b.n	8003726 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e4:	4b57      	ldr	r3, [pc, #348]	; (8003744 <HAL_GPIO_Init+0x2dc>)
 80035e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e8:	4b56      	ldr	r3, [pc, #344]	; (8003744 <HAL_GPIO_Init+0x2dc>)
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f0:	4a55      	ldr	r2, [pc, #340]	; (8003748 <HAL_GPIO_Init+0x2e0>)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	589b      	ldr	r3, [r3, r2]
 80035fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2203      	movs	r2, #3
 8003602:	4013      	ands	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	409a      	lsls	r2, r3
 800360a:	0013      	movs	r3, r2
 800360c:	43da      	mvns	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	23a0      	movs	r3, #160	; 0xa0
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	429a      	cmp	r2, r3
 800361c:	d01f      	beq.n	800365e <HAL_GPIO_Init+0x1f6>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_GPIO_Init+0x2e4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d019      	beq.n	800365a <HAL_GPIO_Init+0x1f2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a49      	ldr	r2, [pc, #292]	; (8003750 <HAL_GPIO_Init+0x2e8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x1ee>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a48      	ldr	r2, [pc, #288]	; (8003754 <HAL_GPIO_Init+0x2ec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_GPIO_Init+0x1ea>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_GPIO_Init+0x2f0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <HAL_GPIO_Init+0x1e6>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a46      	ldr	r2, [pc, #280]	; (800375c <HAL_GPIO_Init+0x2f4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_GPIO_Init+0x1e2>
 8003646:	2305      	movs	r3, #5
 8003648:	e00a      	b.n	8003660 <HAL_GPIO_Init+0x1f8>
 800364a:	2306      	movs	r3, #6
 800364c:	e008      	b.n	8003660 <HAL_GPIO_Init+0x1f8>
 800364e:	2304      	movs	r3, #4
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x1f8>
 8003652:	2303      	movs	r3, #3
 8003654:	e004      	b.n	8003660 <HAL_GPIO_Init+0x1f8>
 8003656:	2302      	movs	r3, #2
 8003658:	e002      	b.n	8003660 <HAL_GPIO_Init+0x1f8>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_GPIO_Init+0x1f8>
 800365e:	2300      	movs	r3, #0
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	2103      	movs	r1, #3
 8003664:	400a      	ands	r2, r1
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	4093      	lsls	r3, r2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003670:	4935      	ldr	r1, [pc, #212]	; (8003748 <HAL_GPIO_Init+0x2e0>)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	3302      	adds	r3, #2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800367e:	4b38      	ldr	r3, [pc, #224]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	43da      	mvns	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	025b      	lsls	r3, r3, #9
 8003696:	4013      	ands	r3, r2
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	43da      	mvns	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	4013      	ands	r3, r2
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43da      	mvns	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	035b      	lsls	r3, r3, #13
 80036ea:	4013      	ands	r3, r2
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43da      	mvns	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	039b      	lsls	r3, r3, #14
 8003714:	4013      	ands	r3, r2
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <HAL_GPIO_Init+0x2f8>)
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3301      	adds	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	40da      	lsrs	r2, r3
 8003734:	1e13      	subs	r3, r2, #0
 8003736:	d000      	beq.n	800373a <HAL_GPIO_Init+0x2d2>
 8003738:	e6a2      	b.n	8003480 <HAL_GPIO_Init+0x18>
  }
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b006      	add	sp, #24
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	40010000 	.word	0x40010000
 800374c:	50000400 	.word	0x50000400
 8003750:	50000800 	.word	0x50000800
 8003754:	50000c00 	.word	0x50000c00
 8003758:	50001000 	.word	0x50001000
 800375c:	50001c00 	.word	0x50001c00
 8003760:	40010400 	.word	0x40010400

08003764 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	0008      	movs	r0, r1
 800376e:	0011      	movs	r1, r2
 8003770:	1cbb      	adds	r3, r7, #2
 8003772:	1c02      	adds	r2, r0, #0
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	1c7b      	adds	r3, r7, #1
 8003778:	1c0a      	adds	r2, r1, #0
 800377a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800377c:	1c7b      	adds	r3, r7, #1
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800378c:	e003      	b.n	8003796 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800378e:	1cbb      	adds	r3, r7, #2
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b002      	add	sp, #8
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	0002      	movs	r2, r0
 80037a8:	1dbb      	adds	r3, r7, #6
 80037aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	1dba      	adds	r2, r7, #6
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	4013      	ands	r3, r2
 80037b6:	d008      	beq.n	80037ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037ba:	1dba      	adds	r2, r7, #6
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7fe fe43 	bl	8002450 <HAL_GPIO_EXTI_Callback>
  }
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	0049      	lsls	r1, r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40007000 	.word	0x40007000

080037f4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	000a      	movs	r2, r1
 80037fe:	1cfb      	adds	r3, r7, #3
 8003800:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_PWR_EnterSTOPMode+0xac>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	2201      	movs	r2, #1
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_PWR_EnterSTOPMode+0x40>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 800382e:	491d      	ldr	r1, [pc, #116]	; (80038a4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003830:	400a      	ands	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2203      	movs	r2, #3
 800383e:	4393      	bics	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800384a:	4b14      	ldr	r3, [pc, #80]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003856:	2104      	movs	r1, #4
 8003858:	430a      	orrs	r2, r1
 800385a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800385c:	1cfb      	adds	r3, r7, #3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003864:	bf30      	wfi
 8003866:	e002      	b.n	800386e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003868:	bf40      	sev
    __WFE();
 800386a:	bf20      	wfe
    __WFE();
 800386c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003874:	2104      	movs	r1, #4
 8003876:	438a      	bics	r2, r1
 8003878:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_PWR_EnterSTOPMode+0xa0>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_PWR_EnterSTOPMode+0xa8>)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0089      	lsls	r1, r1, #2
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
  }
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b006      	add	sp, #24
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40007000 	.word	0x40007000
 80038a0:	40010000 	.word	0x40010000
 80038a4:	fffffdff 	.word	0xfffffdff
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b5b0      	push	{r4, r5, r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f000 fbbf 	bl	800403e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c0:	4bc9      	ldr	r3, [pc, #804]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	220c      	movs	r2, #12
 80038c6:	4013      	ands	r3, r2
 80038c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ca:	4bc7      	ldr	r3, [pc, #796]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	025b      	lsls	r3, r3, #9
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	d100      	bne.n	80038e2 <HAL_RCC_OscConfig+0x36>
 80038e0:	e07e      	b.n	80039e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d007      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d112      	bne.n	8003914 <HAL_RCC_OscConfig+0x68>
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d10d      	bne.n	8003914 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4bbb      	ldr	r3, [pc, #748]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	4013      	ands	r3, r2
 8003902:	d100      	bne.n	8003906 <HAL_RCC_OscConfig+0x5a>
 8003904:	e06b      	b.n	80039de <HAL_RCC_OscConfig+0x132>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d167      	bne.n	80039de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f000 fb95 	bl	800403e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	025b      	lsls	r3, r3, #9
 800391c:	429a      	cmp	r2, r3
 800391e:	d107      	bne.n	8003930 <HAL_RCC_OscConfig+0x84>
 8003920:	4bb1      	ldr	r3, [pc, #708]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4bb0      	ldr	r3, [pc, #704]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	0249      	lsls	r1, r1, #9
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e027      	b.n	8003980 <HAL_RCC_OscConfig+0xd4>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	23a0      	movs	r3, #160	; 0xa0
 8003936:	02db      	lsls	r3, r3, #11
 8003938:	429a      	cmp	r2, r3
 800393a:	d10e      	bne.n	800395a <HAL_RCC_OscConfig+0xae>
 800393c:	4baa      	ldr	r3, [pc, #680]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4ba9      	ldr	r3, [pc, #676]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	02c9      	lsls	r1, r1, #11
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	4ba7      	ldr	r3, [pc, #668]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4ba6      	ldr	r3, [pc, #664]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0249      	lsls	r1, r1, #9
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e012      	b.n	8003980 <HAL_RCC_OscConfig+0xd4>
 800395a:	4ba3      	ldr	r3, [pc, #652]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4ba2      	ldr	r3, [pc, #648]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003960:	49a2      	ldr	r1, [pc, #648]	; (8003bec <HAL_RCC_OscConfig+0x340>)
 8003962:	400a      	ands	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4ba0      	ldr	r3, [pc, #640]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	025b      	lsls	r3, r3, #9
 800396e:	4013      	ands	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4b9c      	ldr	r3, [pc, #624]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b9b      	ldr	r3, [pc, #620]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 800397a:	499d      	ldr	r1, [pc, #628]	; (8003bf0 <HAL_RCC_OscConfig+0x344>)
 800397c:	400a      	ands	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe ff1c 	bl	80027c4 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003990:	e009      	b.n	80039a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003992:	f7fe ff17 	bl	80027c4 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d902      	bls.n	80039a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	f000 fb4c 	bl	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a6:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	029b      	lsls	r3, r3, #10
 80039ae:	4013      	ands	r3, r2
 80039b0:	d0ef      	beq.n	8003992 <HAL_RCC_OscConfig+0xe6>
 80039b2:	e015      	b.n	80039e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fe ff06 	bl	80027c4 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039be:	f7fe ff01 	bl	80027c4 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	; 0x64
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e336      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039d0:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	029b      	lsls	r3, r3, #10
 80039d8:	4013      	ands	r3, r2
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x112>
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d100      	bne.n	80039ec <HAL_RCC_OscConfig+0x140>
 80039ea:	e099      	b.n	8003b20 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80039fa:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a00:	2120      	movs	r1, #32
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2220      	movs	r2, #32
 8003a0a:	4393      	bics	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d13e      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d13b      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003a20:	4b71      	ldr	r3, [pc, #452]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2204      	movs	r2, #4
 8003a26:	4013      	ands	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_RCC_OscConfig+0x188>
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e304      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a6e      	ldr	r2, [pc, #440]	; (8003bf4 <HAL_RCC_OscConfig+0x348>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2209      	movs	r2, #9
 8003a50:	4393      	bics	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5c:	f000 fc42 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8003a60:	0001      	movs	r1, r0
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	220f      	movs	r2, #15
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	4a62      	ldr	r2, [pc, #392]	; (8003bf8 <HAL_RCC_OscConfig+0x34c>)
 8003a6e:	5cd3      	ldrb	r3, [r2, r3]
 8003a70:	000a      	movs	r2, r1
 8003a72:	40da      	lsrs	r2, r3
 8003a74:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <HAL_RCC_OscConfig+0x350>)
 8003a76:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_OscConfig+0x354>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2513      	movs	r5, #19
 8003a7e:	197c      	adds	r4, r7, r5
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7fe fe59 	bl	8002738 <HAL_InitTick>
 8003a86:	0003      	movs	r3, r0
 8003a88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003a8a:	197b      	adds	r3, r7, r5
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d046      	beq.n	8003b20 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003a92:	197b      	adds	r3, r7, r5
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	e2d2      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d027      	beq.n	8003aee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2209      	movs	r2, #9
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fe88 	bl	80027c4 <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe fe83 	bl	80027c4 <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e2b8      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d0f1      	beq.n	8003aba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad6:	4b44      	ldr	r3, [pc, #272]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4a46      	ldr	r2, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x348>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	021a      	lsls	r2, r3, #8
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	e018      	b.n	8003b20 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003af4:	2101      	movs	r1, #1
 8003af6:	438a      	bics	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fe fe63 	bl	80027c4 <HAL_GetTick>
 8003afe:	0003      	movs	r3, r0
 8003b00:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fe fe5e 	bl	80027c4 <HAL_GetTick>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e293      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d1f1      	bne.n	8003b04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	d100      	bne.n	8003b2c <HAL_RCC_OscConfig+0x280>
 8003b2a:	e0a2      	b.n	8003c72 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d140      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x29e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e279      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <HAL_RCC_OscConfig+0x358>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	0a19      	lsrs	r1, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	061a      	lsls	r2, r3, #24
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	0b5b      	lsrs	r3, r3, #13
 8003b78:	3301      	adds	r3, #1
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	0212      	lsls	r2, r2, #8
 8003b7e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	210f      	movs	r1, #15
 8003b88:	400b      	ands	r3, r1
 8003b8a:	491b      	ldr	r1, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x34c>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_RCC_OscConfig+0x350>)
 8003b92:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_OscConfig+0x354>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2513      	movs	r5, #19
 8003b9a:	197c      	adds	r4, r7, r5
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7fe fdcb 	bl	8002738 <HAL_InitTick>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003ba6:	197b      	adds	r3, r7, r5
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d061      	beq.n	8003c72 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	e244      	b.n	800403e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d040      	beq.n	8003c3e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0049      	lsls	r1, r1, #1
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe fdfb 	bl	80027c4 <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003bd2:	e019      	b.n	8003c08 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd4:	f7fe fdf6 	bl	80027c4 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d912      	bls.n	8003c08 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e22b      	b.n	800403e <HAL_RCC_OscConfig+0x792>
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	40021000 	.word	0x40021000
 8003bec:	fffeffff 	.word	0xfffeffff
 8003bf0:	fffbffff 	.word	0xfffbffff
 8003bf4:	ffffe0ff 	.word	0xffffe0ff
 8003bf8:	08005630 	.word	0x08005630
 8003bfc:	20000008 	.word	0x20000008
 8003c00:	2000000c 	.word	0x2000000c
 8003c04:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c08:	4bca      	ldr	r3, [pc, #808]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4013      	ands	r3, r2
 8003c12:	d0df      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c14:	4bc7      	ldr	r3, [pc, #796]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4ac7      	ldr	r2, [pc, #796]	; (8003f38 <HAL_RCC_OscConfig+0x68c>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c22:	4bc4      	ldr	r3, [pc, #784]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c28:	4bc2      	ldr	r3, [pc, #776]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	0a19      	lsrs	r1, r3, #8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	061a      	lsls	r2, r3, #24
 8003c36:	4bbf      	ldr	r3, [pc, #764]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	e019      	b.n	8003c72 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c3e:	4bbd      	ldr	r3, [pc, #756]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4bbc      	ldr	r3, [pc, #752]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c44:	49bd      	ldr	r1, [pc, #756]	; (8003f3c <HAL_RCC_OscConfig+0x690>)
 8003c46:	400a      	ands	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fe fdbb 	bl	80027c4 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c54:	f7fe fdb6 	bl	80027c4 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1eb      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c66:	4bb3      	ldr	r3, [pc, #716]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2208      	movs	r2, #8
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d036      	beq.n	8003cea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d019      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c84:	4bab      	ldr	r3, [pc, #684]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c88:	4baa      	ldr	r3, [pc, #680]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c90:	f7fe fd98 	bl	80027c4 <HAL_GetTick>
 8003c94:	0003      	movs	r3, r0
 8003c96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fd93 	bl	80027c4 <HAL_GetTick>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1c8      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cac:	4ba1      	ldr	r3, [pc, #644]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d0f1      	beq.n	8003c9a <HAL_RCC_OscConfig+0x3ee>
 8003cb6:	e018      	b.n	8003cea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb8:	4b9e      	ldr	r3, [pc, #632]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cbc:	4b9d      	ldr	r3, [pc, #628]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fd7e 	bl	80027c4 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fe fd79 	bl	80027c4 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e1ae      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ce0:	4b94      	ldr	r3, [pc, #592]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d1f1      	bne.n	8003cce <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x44a>
 8003cf4:	e0ae      	b.n	8003e54 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2023      	movs	r0, #35	; 0x23
 8003cf8:	183b      	adds	r3, r7, r0
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	055b      	lsls	r3, r3, #21
 8003d06:	4013      	ands	r3, r2
 8003d08:	d109      	bne.n	8003d1e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b8a      	ldr	r3, [pc, #552]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0e:	4b89      	ldr	r3, [pc, #548]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	0549      	lsls	r1, r1, #21
 8003d14:	430a      	orrs	r2, r1
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <HAL_RCC_OscConfig+0x694>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4013      	ands	r3, r2
 8003d28:	d11a      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <HAL_RCC_OscConfig+0x694>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <HAL_RCC_OscConfig+0x694>)
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	0049      	lsls	r1, r1, #1
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fd44 	bl	80027c4 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fe fd3f 	bl	80027c4 <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	; 0x64
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e174      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b7a      	ldr	r3, [pc, #488]	; (8003f40 <HAL_RCC_OscConfig+0x694>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4d0>
 8003d6c:	4b71      	ldr	r3, [pc, #452]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d70:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	0049      	lsls	r1, r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	651a      	str	r2, [r3, #80]	; 0x50
 8003d7a:	e031      	b.n	8003de0 <HAL_RCC_OscConfig+0x534>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x4f2>
 8003d84:	4b6b      	ldr	r3, [pc, #428]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d88:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d8a:	496c      	ldr	r1, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x690>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d90:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d94:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003d96:	496b      	ldr	r1, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x698>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d9c:	e020      	b.n	8003de0 <HAL_RCC_OscConfig+0x534>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	23a0      	movs	r3, #160	; 0xa0
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d10e      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x51c>
 8003daa:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dae:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	00c9      	lsls	r1, r1, #3
 8003db4:	430a      	orrs	r2, r1
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
 8003db8:	4b5e      	ldr	r3, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dbc:	4b5d      	ldr	r3, [pc, #372]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	0049      	lsls	r1, r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x534>
 8003dc8:	4b5a      	ldr	r3, [pc, #360]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dce:	495b      	ldr	r1, [pc, #364]	; (8003f3c <HAL_RCC_OscConfig+0x690>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dd8:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003dda:	495a      	ldr	r1, [pc, #360]	; (8003f44 <HAL_RCC_OscConfig+0x698>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de8:	f7fe fcec 	bl	80027c4 <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df0:	e009      	b.n	8003e06 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe fce7 	bl	80027c4 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <HAL_RCC_OscConfig+0x69c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e11b      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e06:	4b4b      	ldr	r3, [pc, #300]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d0ef      	beq.n	8003df2 <HAL_RCC_OscConfig+0x546>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fe fcd6 	bl	80027c4 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e1c:	e009      	b.n	8003e32 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe fcd1 	bl	80027c4 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	4a47      	ldr	r2, [pc, #284]	; (8003f48 <HAL_RCC_OscConfig+0x69c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e105      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e32:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d1ef      	bne.n	8003e1e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e3e:	2323      	movs	r3, #35	; 0x23
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d105      	bne.n	8003e54 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e48:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e4e:	493f      	ldr	r1, [pc, #252]	; (8003f4c <HAL_RCC_OscConfig+0x6a0>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d049      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d026      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7e:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <HAL_RCC_OscConfig+0x6a4>)
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <HAL_RCC_OscConfig+0x6a4>)
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	0189      	lsls	r1, r1, #6
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fc9a 	bl	80027c4 <HAL_GetTick>
 8003e90:	0003      	movs	r3, r0
 8003e92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e96:	f7fe fc95 	bl	80027c4 <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0ca      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2202      	movs	r2, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d0f1      	beq.n	8003e96 <HAL_RCC_OscConfig+0x5ea>
 8003eb2:	e01e      	b.n	8003ef2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_RCC_OscConfig+0x6a4>)
 8003ec2:	6a1a      	ldr	r2, [r3, #32]
 8003ec4:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RCC_OscConfig+0x6a4>)
 8003ec6:	4923      	ldr	r1, [pc, #140]	; (8003f54 <HAL_RCC_OscConfig+0x6a8>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fc7a 	bl	80027c4 <HAL_GetTick>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed6:	f7fe fc75 	bl	80027c4 <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e0aa      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d1f1      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d100      	bne.n	8003efc <HAL_RCC_OscConfig+0x650>
 8003efa:	e09f      	b.n	800403c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d100      	bne.n	8003f04 <HAL_RCC_OscConfig+0x658>
 8003f02:	e078      	b.n	8003ff6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d159      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_RCC_OscConfig+0x688>)
 8003f12:	4911      	ldr	r1, [pc, #68]	; (8003f58 <HAL_RCC_OscConfig+0x6ac>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe fc54 	bl	80027c4 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f20:	e01c      	b.n	8003f5c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fe fc4f 	bl	80027c4 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d915      	bls.n	8003f5c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e084      	b.n	800403e <HAL_RCC_OscConfig+0x792>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	ffff1fff 	.word	0xffff1fff
 8003f3c:	fffffeff 	.word	0xfffffeff
 8003f40:	40007000 	.word	0x40007000
 8003f44:	fffffbff 	.word	0xfffffbff
 8003f48:	00001388 	.word	0x00001388
 8003f4c:	efffffff 	.word	0xefffffff
 8003f50:	40010000 	.word	0x40010000
 8003f54:	ffffdfff 	.word	0xffffdfff
 8003f58:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	049b      	lsls	r3, r3, #18
 8003f64:	4013      	ands	r3, r2
 8003f66:	d1dc      	bne.n	8003f22 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a37      	ldr	r2, [pc, #220]	; (800404c <HAL_RCC_OscConfig+0x7a0>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	431a      	orrs	r2, r3
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	0449      	lsls	r1, r1, #17
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fe fc15 	bl	80027c4 <HAL_GetTick>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe fc10 	bl	80027c4 <HAL_GetTick>
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e045      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003fb2:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	049b      	lsls	r3, r3, #18
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x6f4>
 8003fbe:	e03d      	b.n	800403c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003fc6:	4922      	ldr	r1, [pc, #136]	; (8004050 <HAL_RCC_OscConfig+0x7a4>)
 8003fc8:	400a      	ands	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fbfa 	bl	80027c4 <HAL_GetTick>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe fbf5 	bl	80027c4 <HAL_GetTick>
 8003fda:	0002      	movs	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e02a      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	049b      	lsls	r3, r3, #18
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x72a>
 8003ff4:	e022      	b.n	800403c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e01d      	b.n	800403e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_OscConfig+0x79c>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	025b      	lsls	r3, r3, #9
 800400e:	401a      	ands	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	429a      	cmp	r2, r3
 8004016:	d10f      	bne.n	8004038 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	23f0      	movs	r3, #240	; 0xf0
 800401c:	039b      	lsls	r3, r3, #14
 800401e:	401a      	ands	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	23c0      	movs	r3, #192	; 0xc0
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	401a      	ands	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b00a      	add	sp, #40	; 0x28
 8004044:	bdb0      	pop	{r4, r5, r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	40021000 	.word	0x40021000
 800404c:	ff02ffff 	.word	0xff02ffff
 8004050:	feffffff 	.word	0xfeffffff

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e128      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b96      	ldr	r3, [pc, #600]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	4013      	ands	r3, r2
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d91e      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b93      	ldr	r3, [pc, #588]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	4393      	bics	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	4b90      	ldr	r3, [pc, #576]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004088:	f7fe fb9c 	bl	80027c4 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004090:	e009      	b.n	80040a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004092:	f7fe fb97 	bl	80027c4 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	4a8a      	ldr	r2, [pc, #552]	; (80042c8 <HAL_RCC_ClockConfig+0x274>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e109      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b87      	ldr	r3, [pc, #540]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040be:	4b83      	ldr	r3, [pc, #524]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	22f0      	movs	r2, #240	; 0xf0
 80040c4:	4393      	bics	r3, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b7f      	ldr	r3, [pc, #508]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 80040ce:	430a      	orrs	r2, r1
 80040d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	4013      	ands	r3, r2
 80040da:	d100      	bne.n	80040de <HAL_RCC_ClockConfig+0x8a>
 80040dc:	e089      	b.n	80041f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e6:	4b79      	ldr	r3, [pc, #484]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	029b      	lsls	r3, r3, #10
 80040ee:	4013      	ands	r3, r2
 80040f0:	d120      	bne.n	8004134 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0e1      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040fe:	4b73      	ldr	r3, [pc, #460]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	049b      	lsls	r3, r3, #18
 8004106:	4013      	ands	r3, r2
 8004108:	d114      	bne.n	8004134 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0d5      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d106      	bne.n	8004124 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2204      	movs	r2, #4
 800411c:	4013      	ands	r3, r2
 800411e:	d109      	bne.n	8004134 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0ca      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004124:	4b69      	ldr	r3, [pc, #420]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4013      	ands	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0c2      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004134:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2203      	movs	r2, #3
 800413a:	4393      	bics	r3, r2
 800413c:	0019      	movs	r1, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b62      	ldr	r3, [pc, #392]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004144:	430a      	orrs	r2, r1
 8004146:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004148:	f7fe fb3c 	bl	80027c4 <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d111      	bne.n	800417c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004158:	e009      	b.n	800416e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415a:	f7fe fb33 	bl	80027c4 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x274>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0a5      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800416e:	4b57      	ldr	r3, [pc, #348]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	220c      	movs	r2, #12
 8004174:	4013      	ands	r3, r2
 8004176:	2b08      	cmp	r3, #8
 8004178:	d1ef      	bne.n	800415a <HAL_RCC_ClockConfig+0x106>
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d111      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004184:	e009      	b.n	800419a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fe fb1d 	bl	80027c4 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	4a4d      	ldr	r2, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x274>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e08f      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419a:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	220c      	movs	r2, #12
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_ClockConfig+0x132>
 80041a6:	e024      	b.n	80041f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d11b      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b0:	e009      	b.n	80041c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b2:	f7fe fb07 	bl	80027c4 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	4a42      	ldr	r2, [pc, #264]	; (80042c8 <HAL_RCC_ClockConfig+0x274>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e079      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c6:	4b41      	ldr	r3, [pc, #260]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	220c      	movs	r2, #12
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d1ef      	bne.n	80041b2 <HAL_RCC_ClockConfig+0x15e>
 80041d2:	e00e      	b.n	80041f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d4:	f7fe faf6 	bl	80027c4 <HAL_GetTick>
 80041d8:	0002      	movs	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_RCC_ClockConfig+0x274>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e068      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041e8:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	220c      	movs	r2, #12
 80041ee:	4013      	ands	r3, r2
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f2:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d21e      	bcs.n	800423e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	4393      	bics	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004212:	f7fe fad7 	bl	80027c4 <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	e009      	b.n	8004230 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fe fad2 	bl	80027c4 <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <HAL_RCC_ClockConfig+0x274>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e044      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_ClockConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2201      	movs	r2, #1
 8004236:	4013      	ands	r3, r2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d1ee      	bne.n	800421c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2204      	movs	r2, #4
 8004244:	4013      	ands	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <HAL_RCC_ClockConfig+0x27c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	4013      	ands	r3, r2
 8004264:	d00a      	beq.n	800427c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004266:	4b19      	ldr	r3, [pc, #100]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <HAL_RCC_ClockConfig+0x280>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00da      	lsls	r2, r3, #3
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004278:	430a      	orrs	r2, r1
 800427a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427c:	f000 f832 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8004280:	0001      	movs	r1, r0
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_RCC_ClockConfig+0x278>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	220f      	movs	r2, #15
 800428a:	4013      	ands	r3, r2
 800428c:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <HAL_RCC_ClockConfig+0x284>)
 800428e:	5cd3      	ldrb	r3, [r2, r3]
 8004290:	000a      	movs	r2, r1
 8004292:	40da      	lsrs	r2, r3
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_RCC_ClockConfig+0x288>)
 8004296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_RCC_ClockConfig+0x28c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	250b      	movs	r5, #11
 800429e:	197c      	adds	r4, r7, r5
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fe fa49 	bl	8002738 <HAL_InitTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80042aa:	197b      	adds	r3, r7, r5
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80042b2:	197b      	adds	r3, r7, r5
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	e000      	b.n	80042ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bdb0      	pop	{r4, r5, r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	40022000 	.word	0x40022000
 80042c8:	00001388 	.word	0x00001388
 80042cc:	40021000 	.word	0x40021000
 80042d0:	fffff8ff 	.word	0xfffff8ff
 80042d4:	ffffc7ff 	.word	0xffffc7ff
 80042d8:	08005630 	.word	0x08005630
 80042dc:	20000008 	.word	0x20000008
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80042ea:	4b4c      	ldr	r3, [pc, #304]	; (800441c <HAL_RCC_GetSysClockFreq+0x138>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f2:	230c      	movs	r3, #12
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d014      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 80042fa:	d900      	bls.n	80042fe <HAL_RCC_GetSysClockFreq+0x1a>
 80042fc:	e07b      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x112>
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d002      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x24>
 8004302:	2b08      	cmp	r3, #8
 8004304:	d00b      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004306:	e076      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004308:	4b44      	ldr	r3, [pc, #272]	; (800441c <HAL_RCC_GetSysClockFreq+0x138>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2210      	movs	r2, #16
 800430e:	4013      	ands	r3, r2
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004312:	4b43      	ldr	r3, [pc, #268]	; (8004420 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004316:	e07c      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <HAL_RCC_GetSysClockFreq+0x140>)
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800431c:	e079      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_RCC_GetSysClockFreq+0x144>)
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004322:	e076      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	0c9a      	lsrs	r2, r3, #18
 8004328:	230f      	movs	r3, #15
 800432a:	401a      	ands	r2, r3
 800432c:	4b3f      	ldr	r3, [pc, #252]	; (800442c <HAL_RCC_GetSysClockFreq+0x148>)
 800432e:	5c9b      	ldrb	r3, [r3, r2]
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	0d9a      	lsrs	r2, r3, #22
 8004336:	2303      	movs	r3, #3
 8004338:	4013      	ands	r3, r2
 800433a:	3301      	adds	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCC_GetSysClockFreq+0x138>)
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	025b      	lsls	r3, r3, #9
 8004346:	4013      	ands	r3, r2
 8004348:	d01a      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	4a35      	ldr	r2, [pc, #212]	; (8004428 <HAL_RCC_GetSysClockFreq+0x144>)
 8004354:	2300      	movs	r3, #0
 8004356:	69b8      	ldr	r0, [r7, #24]
 8004358:	69f9      	ldr	r1, [r7, #28]
 800435a:	f7fb ffbb 	bl	80002d4 <__aeabi_lmul>
 800435e:	0002      	movs	r2, r0
 8004360:	000b      	movs	r3, r1
 8004362:	0010      	movs	r0, r2
 8004364:	0019      	movs	r1, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f7fb ff8f 	bl	8000294 <__aeabi_uldivmod>
 8004376:	0002      	movs	r2, r0
 8004378:	000b      	movs	r3, r1
 800437a:	0013      	movs	r3, r2
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	e037      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004380:	4b26      	ldr	r3, [pc, #152]	; (800441c <HAL_RCC_GetSysClockFreq+0x138>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	4013      	ands	r3, r2
 8004388:	d01a      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4a23      	ldr	r2, [pc, #140]	; (8004420 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004394:	2300      	movs	r3, #0
 8004396:	68b8      	ldr	r0, [r7, #8]
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	f7fb ff9b 	bl	80002d4 <__aeabi_lmul>
 800439e:	0002      	movs	r2, r0
 80043a0:	000b      	movs	r3, r1
 80043a2:	0010      	movs	r0, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f7fb ff6f 	bl	8000294 <__aeabi_uldivmod>
 80043b6:	0002      	movs	r2, r0
 80043b8:	000b      	movs	r3, r1
 80043ba:	0013      	movs	r3, r2
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
 80043be:	e017      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	0018      	movs	r0, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	0019      	movs	r1, r3
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_RCC_GetSysClockFreq+0x140>)
 80043ca:	2300      	movs	r3, #0
 80043cc:	f7fb ff82 	bl	80002d4 <__aeabi_lmul>
 80043d0:	0002      	movs	r2, r0
 80043d2:	000b      	movs	r3, r1
 80043d4:	0010      	movs	r0, r2
 80043d6:	0019      	movs	r1, r3
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	001c      	movs	r4, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	001d      	movs	r5, r3
 80043e0:	0022      	movs	r2, r4
 80043e2:	002b      	movs	r3, r5
 80043e4:	f7fb ff56 	bl	8000294 <__aeabi_uldivmod>
 80043e8:	0002      	movs	r2, r0
 80043ea:	000b      	movs	r3, r1
 80043ec:	0013      	movs	r3, r2
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043f4:	e00d      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_GetSysClockFreq+0x138>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0b5b      	lsrs	r3, r3, #13
 80043fc:	2207      	movs	r2, #7
 80043fe:	4013      	ands	r3, r2
 8004400:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	3301      	adds	r3, #1
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	0212      	lsls	r2, r2, #8
 800440a:	409a      	lsls	r2, r3
 800440c:	0013      	movs	r3, r2
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004410:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b00e      	add	sp, #56	; 0x38
 800441a:	bdb0      	pop	{r4, r5, r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	003d0900 	.word	0x003d0900
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200
 800442c:	08005648 	.word	0x08005648

08004430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <HAL_RCC_GetHCLKFreq+0x10>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000008 	.word	0x20000008

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004448:	f7ff fff2 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800444c:	0001      	movs	r1, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	2207      	movs	r2, #7
 8004456:	4013      	ands	r3, r2
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <HAL_RCC_GetPCLK1Freq+0x28>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	40d9      	lsrs	r1, r3
 800445e:	000b      	movs	r3, r1
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	40021000 	.word	0x40021000
 800446c:	08005640 	.word	0x08005640

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004474:	f7ff ffdc 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004478:	0001      	movs	r1, r0
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	0adb      	lsrs	r3, r3, #11
 8004480:	2207      	movs	r2, #7
 8004482:	4013      	ands	r3, r2
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	40d9      	lsrs	r1, r3
 800448a:	000b      	movs	r3, r1
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	40021000 	.word	0x40021000
 8004498:	08005640 	.word	0x08005640

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80044a4:	2317      	movs	r3, #23
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2220      	movs	r2, #32
 80044b2:	4013      	ands	r3, r2
 80044b4:	d106      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	4013      	ands	r3, r2
 80044c0:	d100      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80044c2:	e0d9      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c4:	4ba4      	ldr	r3, [pc, #656]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	055b      	lsls	r3, r3, #21
 80044cc:	4013      	ands	r3, r2
 80044ce:	d10a      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d0:	4ba1      	ldr	r3, [pc, #644]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d4:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	0549      	lsls	r1, r1, #21
 80044da:	430a      	orrs	r2, r1
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80044de:	2317      	movs	r3, #23
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b9d      	ldr	r3, [pc, #628]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d11a      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f2:	4b9a      	ldr	r3, [pc, #616]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b99      	ldr	r3, [pc, #612]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	0049      	lsls	r1, r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004500:	f7fe f960 	bl	80027c4 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fe f95b 	bl	80027c4 <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e118      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b8f      	ldr	r3, [pc, #572]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4013      	ands	r3, r2
 8004526:	d0f0      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004528:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	23c0      	movs	r3, #192	; 0xc0
 800452e:	039b      	lsls	r3, r3, #14
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	23c0      	movs	r3, #192	; 0xc0
 800453a:	039b      	lsls	r3, r3, #14
 800453c:	4013      	ands	r3, r2
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	039b      	lsls	r3, r3, #14
 800454c:	4013      	ands	r3, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d013      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	23c0      	movs	r3, #192	; 0xc0
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	401a      	ands	r2, r3
 800455e:	23c0      	movs	r3, #192	; 0xc0
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	429a      	cmp	r2, r3
 8004564:	d10a      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004566:	4b7c      	ldr	r3, [pc, #496]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	029b      	lsls	r3, r3, #10
 800456e:	401a      	ands	r2, r3
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	429a      	cmp	r2, r3
 8004576:	d101      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0e8      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800457c:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800457e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004580:	23c0      	movs	r3, #192	; 0xc0
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d049      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	23c0      	movs	r3, #192	; 0xc0
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	4013      	ands	r3, r2
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	429a      	cmp	r2, r3
 800459c:	d004      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2220      	movs	r2, #32
 80045a4:	4013      	ands	r3, r2
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	23c0      	movs	r3, #192	; 0xc0
 80045ae:	029b      	lsls	r3, r3, #10
 80045b0:	4013      	ands	r3, r2
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d034      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	4013      	ands	r3, r2
 80045c2:	d02e      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80045c4:	4b64      	ldr	r3, [pc, #400]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	4a65      	ldr	r2, [pc, #404]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ce:	4b62      	ldr	r3, [pc, #392]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d2:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	0309      	lsls	r1, r1, #12
 80045d8:	430a      	orrs	r2, r1
 80045da:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045dc:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045e0:	4b5d      	ldr	r3, [pc, #372]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045e2:	4960      	ldr	r1, [pc, #384]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4013      	ands	r3, r2
 80045f6:	d014      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fe f8e4 	bl	80027c4 <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004600:	e009      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fe f8df 	bl	80027c4 <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	4a56      	ldr	r2, [pc, #344]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e09b      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004616:	4b50      	ldr	r3, [pc, #320]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4013      	ands	r3, r2
 8004620:	d0ef      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	23c0      	movs	r3, #192	; 0xc0
 8004628:	029b      	lsls	r3, r3, #10
 800462a:	401a      	ands	r2, r3
 800462c:	23c0      	movs	r3, #192	; 0xc0
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	429a      	cmp	r2, r3
 8004632:	d10c      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004634:	4b48      	ldr	r3, [pc, #288]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a4c      	ldr	r2, [pc, #304]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	23c0      	movs	r3, #192	; 0xc0
 8004644:	039b      	lsls	r3, r3, #14
 8004646:	401a      	ands	r2, r3
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	4b42      	ldr	r3, [pc, #264]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	23c0      	movs	r3, #192	; 0xc0
 8004658:	029b      	lsls	r3, r3, #10
 800465a:	401a      	ands	r2, r3
 800465c:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800465e:	430a      	orrs	r2, r1
 8004660:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004662:	2317      	movs	r3, #23
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800466e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004670:	4b39      	ldr	r3, [pc, #228]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004672:	493f      	ldr	r1, [pc, #252]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004674:	400a      	ands	r2, r1
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	4013      	ands	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004682:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004686:	2203      	movs	r2, #3
 8004688:	4393      	bics	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004692:	430a      	orrs	r2, r1
 8004694:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2202      	movs	r2, #2
 800469c:	4013      	ands	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a0:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a4:	220c      	movs	r2, #12
 80046a6:	4393      	bics	r3, r2
 80046a8:	0019      	movs	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046b0:	430a      	orrs	r2, r1
 80046b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2204      	movs	r2, #4
 80046ba:	4013      	ands	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	4a2c      	ldr	r2, [pc, #176]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	0019      	movs	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ce:	430a      	orrs	r2, r1
 80046d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2208      	movs	r2, #8
 80046d8:	4013      	ands	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	4a25      	ldr	r2, [pc, #148]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4013      	ands	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046fc:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004702:	4013      	ands	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800470c:	430a      	orrs	r2, r1
 800470e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2240      	movs	r2, #64	; 0x40
 8004716:	4013      	ands	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800472a:	430a      	orrs	r2, r1
 800472c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2280      	movs	r2, #128	; 0x80
 8004734:	4013      	ands	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	4a10      	ldr	r2, [pc, #64]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004748:	430a      	orrs	r2, r1
 800474a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b006      	add	sp, #24
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	fffcffff 	.word	0xfffcffff
 8004764:	fff7ffff 	.word	0xfff7ffff
 8004768:	00001388 	.word	0x00001388
 800476c:	ffcfffff 	.word	0xffcfffff
 8004770:	efffffff 	.word	0xefffffff
 8004774:	fffff3ff 	.word	0xfffff3ff
 8004778:	ffffcfff 	.word	0xffffcfff
 800477c:	fbffffff 	.word	0xfbffffff
 8004780:	fff3ffff 	.word	0xfff3ffff

08004784 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e08e      	b.n	80048b4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	5c9b      	ldrb	r3, [r3, r2]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	2100      	movs	r1, #0
 80047a8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fd fee1 	bl	8002574 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	2102      	movs	r1, #2
 80047b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	22ca      	movs	r2, #202	; 0xca
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2253      	movs	r2, #83	; 0x53
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f89e 	bl	800490e <RTC_EnterInitMode>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	2104      	movs	r1, #4
 80047e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e064      	b.n	80048b4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4931      	ldr	r1, [pc, #196]	; (80048bc <HAL_RTC_Init+0x138>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68d2      	ldr	r2, [r2, #12]
 8004820:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6919      	ldr	r1, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	041a      	lsls	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	438a      	bics	r2, r1
 8004844:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2103      	movs	r1, #3
 8004852:	438a      	bics	r2, r1
 8004854:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2220      	movs	r2, #32
 8004876:	4013      	ands	r3, r2
 8004878:	d113      	bne.n	80048a2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f81f 	bl	80048c0 <HAL_RTC_WaitForSynchro>
 8004882:	1e03      	subs	r3, r0, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2221      	movs	r2, #33	; 0x21
 8004892:	2104      	movs	r1, #4
 8004894:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e008      	b.n	80048b4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	22ff      	movs	r2, #255	; 0xff
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2221      	movs	r2, #33	; 0x21
 80048ae:	2101      	movs	r1, #1
 80048b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
  }
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	ff8fffbf 	.word	0xff8fffbf

080048c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	21a0      	movs	r1, #160	; 0xa0
 80048d4:	438a      	bics	r2, r1
 80048d6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048d8:	f7fd ff74 	bl	80027c4 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048e0:	e00a      	b.n	80048f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048e2:	f7fd ff6f 	bl	80027c4 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	23fa      	movs	r3, #250	; 0xfa
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d901      	bls.n	80048f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e006      	b.n	8004906 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	4013      	ands	r3, r2
 8004902:	d0ee      	beq.n	80048e2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	0018      	movs	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}

0800490e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2240      	movs	r2, #64	; 0x40
 800491e:	4013      	ands	r3, r2
 8004920:	d11a      	bne.n	8004958 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	4252      	negs	r2, r2
 800492a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800492c:	f7fd ff4a 	bl	80027c4 <HAL_GetTick>
 8004930:	0003      	movs	r3, r0
 8004932:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004934:	e00a      	b.n	800494c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004936:	f7fd ff45 	bl	80027c4 <HAL_GetTick>
 800493a:	0002      	movs	r2, r0
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	23fa      	movs	r3, #250	; 0xfa
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	429a      	cmp	r2, r3
 8004946:	d901      	bls.n	800494c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e006      	b.n	800495a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	4013      	ands	r3, r2
 8004956:	d0ee      	beq.n	8004936 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b004      	add	sp, #16
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	5c9b      	ldrb	r3, [r3, r2]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800497a:	2302      	movs	r3, #2
 800497c:	e0ad      	b.n	8004ada <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2221      	movs	r2, #33	; 0x21
 800498a:	2102      	movs	r1, #2
 800498c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	22ca      	movs	r2, #202	; 0xca
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2253      	movs	r2, #83	; 0x53
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	d021      	beq.n	80049f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80049ac:	f7fd ff0a 	bl	80027c4 <HAL_GetTick>
 80049b0:	0003      	movs	r3, r0
 80049b2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80049b4:	e016      	b.n	80049e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049b6:	f7fd ff05 	bl	80027c4 <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	23fa      	movs	r3, #250	; 0xfa
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d90d      	bls.n	80049e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	2103      	movs	r1, #3
 80049d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e07a      	b.n	8004ada <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2204      	movs	r2, #4
 80049ec:	4013      	ands	r3, r2
 80049ee:	d1e2      	bne.n	80049b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	493a      	ldr	r1, [pc, #232]	; (8004ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80049fc:	400a      	ands	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	401a      	ands	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4936      	ldr	r1, [pc, #216]	; (8004ae8 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a14:	f7fd fed6 	bl	80027c4 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a1c:	e016      	b.n	8004a4c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a1e:	f7fd fed1 	bl	80027c4 <HAL_GetTick>
 8004a22:	0002      	movs	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad2      	subs	r2, r2, r3
 8004a28:	23fa      	movs	r3, #250	; 0xfa
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d90d      	bls.n	8004a4c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2221      	movs	r2, #33	; 0x21
 8004a3c:	2103      	movs	r1, #3
 8004a3e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e046      	b.n	8004ada <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2204      	movs	r2, #4
 8004a54:	4013      	ands	r3, r2
 8004a56:	d0e2      	beq.n	8004a1e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2107      	movs	r1, #7
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	0349      	lsls	r1, r1, #13
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	0349      	lsls	r1, r1, #13
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	01c9      	lsls	r1, r1, #7
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	00c9      	lsls	r1, r1, #3
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	22ff      	movs	r2, #255	; 0xff
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2221      	movs	r2, #33	; 0x21
 8004acc:	2101      	movs	r1, #1
 8004ace:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b006      	add	sp, #24
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	fffffbff 	.word	0xfffffbff
 8004ae8:	fffffb7f 	.word	0xfffffb7f
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e04e      	b.n	8004ba4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2221      	movs	r2, #33	; 0x21
 8004b12:	2102      	movs	r1, #2
 8004b14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	22ca      	movs	r2, #202	; 0xca
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2253      	movs	r2, #83	; 0x53
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	491e      	ldr	r1, [pc, #120]	; (8004bac <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8004b32:	400a      	ands	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	491b      	ldr	r1, [pc, #108]	; (8004bb0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8004b42:	400a      	ands	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004b46:	f7fd fe3d 	bl	80027c4 <HAL_GetTick>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004b4e:	e016      	b.n	8004b7e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b50:	f7fd fe38 	bl	80027c4 <HAL_GetTick>
 8004b54:	0002      	movs	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad2      	subs	r2, r2, r3
 8004b5a:	23fa      	movs	r3, #250	; 0xfa
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d90d      	bls.n	8004b7e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	22ff      	movs	r2, #255	; 0xff
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2221      	movs	r2, #33	; 0x21
 8004b6e:	2103      	movs	r1, #3
 8004b70:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	2100      	movs	r1, #0
 8004b78:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e012      	b.n	8004ba4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2204      	movs	r2, #4
 8004b86:	4013      	ands	r3, r2
 8004b88:	d0e2      	beq.n	8004b50 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ff      	movs	r2, #255	; 0xff
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2221      	movs	r2, #33	; 0x21
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b004      	add	sp, #16
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	fffffbff 	.word	0xfffffbff
 8004bb0:	ffffbfff 	.word	0xffffbfff

08004bb4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d00d      	beq.n	8004be6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f81b 	bl	8004c08 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	22ff      	movs	r2, #255	; 0xff
 8004bda:	401a      	ands	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8004be2:	430a      	orrs	r2, r1
 8004be4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	0352      	lsls	r2, r2, #13
 8004bec:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2221      	movs	r2, #33	; 0x21
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	fffffb7f 	.word	0xfffffb7f
 8004c04:	40010400 	.word	0x40010400

08004c08 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e044      	b.n	8004cb4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d107      	bne.n	8004c42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2274      	movs	r2, #116	; 0x74
 8004c36:	2100      	movs	r1, #0
 8004c38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fd fcb9 	bl	80025b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2224      	movs	r2, #36	; 0x24
 8004c46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2101      	movs	r1, #1
 8004c54:	438a      	bics	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 f830 	bl	8004cc0 <UART_SetConfig>
 8004c60:	0003      	movs	r3, r0
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e024      	b.n	8004cb4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 fac3 	bl	8005200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	490d      	ldr	r1, [pc, #52]	; (8004cbc <HAL_UART_Init+0xa4>)
 8004c86:	400a      	ands	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	212a      	movs	r1, #42	; 0x2a
 8004c96:	438a      	bics	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 fb5b 	bl	8005368 <UART_CheckIdleState>
 8004cb2:	0003      	movs	r3, r0
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	ffffb7ff 	.word	0xffffb7ff

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b08e      	sub	sp, #56	; 0x38
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc8:	231a      	movs	r3, #26
 8004cca:	2218      	movs	r2, #24
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	19db      	adds	r3, r3, r7
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4ac3      	ldr	r2, [pc, #780]	; (8005000 <UART_SetConfig+0x340>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4abe      	ldr	r2, [pc, #760]	; (8005004 <UART_SetConfig+0x344>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4ab8      	ldr	r2, [pc, #736]	; (8005008 <UART_SetConfig+0x348>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d30:	4313      	orrs	r3, r2
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4ab4      	ldr	r2, [pc, #720]	; (800500c <UART_SetConfig+0x34c>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	0019      	movs	r1, r3
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4ab0      	ldr	r2, [pc, #704]	; (8005010 <UART_SetConfig+0x350>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d131      	bne.n	8004db8 <UART_SetConfig+0xf8>
 8004d54:	4baf      	ldr	r3, [pc, #700]	; (8005014 <UART_SetConfig+0x354>)
 8004d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d58:	2203      	movs	r2, #3
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d01d      	beq.n	8004d9c <UART_SetConfig+0xdc>
 8004d60:	d823      	bhi.n	8004daa <UART_SetConfig+0xea>
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d00c      	beq.n	8004d80 <UART_SetConfig+0xc0>
 8004d66:	d820      	bhi.n	8004daa <UART_SetConfig+0xea>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <UART_SetConfig+0xb2>
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d00e      	beq.n	8004d8e <UART_SetConfig+0xce>
 8004d70:	e01b      	b.n	8004daa <UART_SetConfig+0xea>
 8004d72:	231b      	movs	r3, #27
 8004d74:	2218      	movs	r2, #24
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	19db      	adds	r3, r3, r7
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e0b4      	b.n	8004eea <UART_SetConfig+0x22a>
 8004d80:	231b      	movs	r3, #27
 8004d82:	2218      	movs	r2, #24
 8004d84:	189b      	adds	r3, r3, r2
 8004d86:	19db      	adds	r3, r3, r7
 8004d88:	2202      	movs	r2, #2
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e0ad      	b.n	8004eea <UART_SetConfig+0x22a>
 8004d8e:	231b      	movs	r3, #27
 8004d90:	2218      	movs	r2, #24
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	19db      	adds	r3, r3, r7
 8004d96:	2204      	movs	r2, #4
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e0a6      	b.n	8004eea <UART_SetConfig+0x22a>
 8004d9c:	231b      	movs	r3, #27
 8004d9e:	2218      	movs	r2, #24
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	19db      	adds	r3, r3, r7
 8004da4:	2208      	movs	r2, #8
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e09f      	b.n	8004eea <UART_SetConfig+0x22a>
 8004daa:	231b      	movs	r3, #27
 8004dac:	2218      	movs	r2, #24
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	19db      	adds	r3, r3, r7
 8004db2:	2210      	movs	r2, #16
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e098      	b.n	8004eea <UART_SetConfig+0x22a>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a96      	ldr	r2, [pc, #600]	; (8005018 <UART_SetConfig+0x358>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d131      	bne.n	8004e26 <UART_SetConfig+0x166>
 8004dc2:	4b94      	ldr	r3, [pc, #592]	; (8005014 <UART_SetConfig+0x354>)
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	220c      	movs	r2, #12
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d01d      	beq.n	8004e0a <UART_SetConfig+0x14a>
 8004dce:	d823      	bhi.n	8004e18 <UART_SetConfig+0x158>
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d00c      	beq.n	8004dee <UART_SetConfig+0x12e>
 8004dd4:	d820      	bhi.n	8004e18 <UART_SetConfig+0x158>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <UART_SetConfig+0x120>
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d00e      	beq.n	8004dfc <UART_SetConfig+0x13c>
 8004dde:	e01b      	b.n	8004e18 <UART_SetConfig+0x158>
 8004de0:	231b      	movs	r3, #27
 8004de2:	2218      	movs	r2, #24
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	19db      	adds	r3, r3, r7
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e07d      	b.n	8004eea <UART_SetConfig+0x22a>
 8004dee:	231b      	movs	r3, #27
 8004df0:	2218      	movs	r2, #24
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	19db      	adds	r3, r3, r7
 8004df6:	2202      	movs	r2, #2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e076      	b.n	8004eea <UART_SetConfig+0x22a>
 8004dfc:	231b      	movs	r3, #27
 8004dfe:	2218      	movs	r2, #24
 8004e00:	189b      	adds	r3, r3, r2
 8004e02:	19db      	adds	r3, r3, r7
 8004e04:	2204      	movs	r2, #4
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e06f      	b.n	8004eea <UART_SetConfig+0x22a>
 8004e0a:	231b      	movs	r3, #27
 8004e0c:	2218      	movs	r2, #24
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	19db      	adds	r3, r3, r7
 8004e12:	2208      	movs	r2, #8
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e068      	b.n	8004eea <UART_SetConfig+0x22a>
 8004e18:	231b      	movs	r3, #27
 8004e1a:	2218      	movs	r2, #24
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	2210      	movs	r2, #16
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e061      	b.n	8004eea <UART_SetConfig+0x22a>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a7c      	ldr	r2, [pc, #496]	; (800501c <UART_SetConfig+0x35c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d106      	bne.n	8004e3e <UART_SetConfig+0x17e>
 8004e30:	231b      	movs	r3, #27
 8004e32:	2218      	movs	r2, #24
 8004e34:	189b      	adds	r3, r3, r2
 8004e36:	19db      	adds	r3, r3, r7
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e055      	b.n	8004eea <UART_SetConfig+0x22a>
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a77      	ldr	r2, [pc, #476]	; (8005020 <UART_SetConfig+0x360>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d106      	bne.n	8004e56 <UART_SetConfig+0x196>
 8004e48:	231b      	movs	r3, #27
 8004e4a:	2218      	movs	r2, #24
 8004e4c:	189b      	adds	r3, r3, r2
 8004e4e:	19db      	adds	r3, r3, r7
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e049      	b.n	8004eea <UART_SetConfig+0x22a>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6b      	ldr	r2, [pc, #428]	; (8005008 <UART_SetConfig+0x348>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d13e      	bne.n	8004ede <UART_SetConfig+0x21e>
 8004e60:	4b6c      	ldr	r3, [pc, #432]	; (8005014 <UART_SetConfig+0x354>)
 8004e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e64:	23c0      	movs	r3, #192	; 0xc0
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4013      	ands	r3, r2
 8004e6a:	22c0      	movs	r2, #192	; 0xc0
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d027      	beq.n	8004ec2 <UART_SetConfig+0x202>
 8004e72:	22c0      	movs	r2, #192	; 0xc0
 8004e74:	0112      	lsls	r2, r2, #4
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d82a      	bhi.n	8004ed0 <UART_SetConfig+0x210>
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d011      	beq.n	8004ea6 <UART_SetConfig+0x1e6>
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	0112      	lsls	r2, r2, #4
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d822      	bhi.n	8004ed0 <UART_SetConfig+0x210>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <UART_SetConfig+0x1d8>
 8004e8e:	2280      	movs	r2, #128	; 0x80
 8004e90:	00d2      	lsls	r2, r2, #3
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <UART_SetConfig+0x1f4>
 8004e96:	e01b      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e98:	231b      	movs	r3, #27
 8004e9a:	2218      	movs	r2, #24
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	19db      	adds	r3, r3, r7
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	e021      	b.n	8004eea <UART_SetConfig+0x22a>
 8004ea6:	231b      	movs	r3, #27
 8004ea8:	2218      	movs	r2, #24
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	19db      	adds	r3, r3, r7
 8004eae:	2202      	movs	r2, #2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e01a      	b.n	8004eea <UART_SetConfig+0x22a>
 8004eb4:	231b      	movs	r3, #27
 8004eb6:	2218      	movs	r2, #24
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	19db      	adds	r3, r3, r7
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	e013      	b.n	8004eea <UART_SetConfig+0x22a>
 8004ec2:	231b      	movs	r3, #27
 8004ec4:	2218      	movs	r2, #24
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	2208      	movs	r2, #8
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e00c      	b.n	8004eea <UART_SetConfig+0x22a>
 8004ed0:	231b      	movs	r3, #27
 8004ed2:	2218      	movs	r2, #24
 8004ed4:	189b      	adds	r3, r3, r2
 8004ed6:	19db      	adds	r3, r3, r7
 8004ed8:	2210      	movs	r2, #16
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e005      	b.n	8004eea <UART_SetConfig+0x22a>
 8004ede:	231b      	movs	r3, #27
 8004ee0:	2218      	movs	r2, #24
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	19db      	adds	r3, r3, r7
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a46      	ldr	r2, [pc, #280]	; (8005008 <UART_SetConfig+0x348>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d000      	beq.n	8004ef6 <UART_SetConfig+0x236>
 8004ef4:	e09a      	b.n	800502c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ef6:	231b      	movs	r3, #27
 8004ef8:	2218      	movs	r2, #24
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	19db      	adds	r3, r3, r7
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d01d      	beq.n	8004f40 <UART_SetConfig+0x280>
 8004f04:	dc20      	bgt.n	8004f48 <UART_SetConfig+0x288>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d015      	beq.n	8004f36 <UART_SetConfig+0x276>
 8004f0a:	dc1d      	bgt.n	8004f48 <UART_SetConfig+0x288>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <UART_SetConfig+0x256>
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d005      	beq.n	8004f20 <UART_SetConfig+0x260>
 8004f14:	e018      	b.n	8004f48 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f16:	f7ff fa95 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f1e:	e01c      	b.n	8004f5a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f20:	4b3c      	ldr	r3, [pc, #240]	; (8005014 <UART_SetConfig+0x354>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2210      	movs	r2, #16
 8004f26:	4013      	ands	r3, r2
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <UART_SetConfig+0x364>)
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f2e:	e014      	b.n	8004f5a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <UART_SetConfig+0x368>)
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f34:	e011      	b.n	8004f5a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7ff f9d5 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f3e:	e00c      	b.n	8004f5a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f46:	e008      	b.n	8004f5a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f4c:	231a      	movs	r3, #26
 8004f4e:	2218      	movs	r2, #24
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	19db      	adds	r3, r3, r7
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
        break;
 8004f58:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d100      	bne.n	8004f62 <UART_SetConfig+0x2a2>
 8004f60:	e134      	b.n	80051cc <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	0013      	movs	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d305      	bcc.n	8004f7e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d906      	bls.n	8004f8c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004f7e:	231a      	movs	r3, #26
 8004f80:	2218      	movs	r2, #24
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	19db      	adds	r3, r3, r7
 8004f86:	2201      	movs	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e11f      	b.n	80051cc <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	6939      	ldr	r1, [r7, #16]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	000b      	movs	r3, r1
 8004f9a:	0e1b      	lsrs	r3, r3, #24
 8004f9c:	0010      	movs	r0, r2
 8004f9e:	0205      	lsls	r5, r0, #8
 8004fa0:	431d      	orrs	r5, r3
 8004fa2:	000b      	movs	r3, r1
 8004fa4:	021c      	lsls	r4, r3, #8
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	1900      	adds	r0, r0, r4
 8004fb8:	4169      	adcs	r1, r5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f7fb f964 	bl	8000294 <__aeabi_uldivmod>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	000b      	movs	r3, r1
 8004fd0:	0013      	movs	r3, r2
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd6:	23c0      	movs	r3, #192	; 0xc0
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d309      	bcc.n	8004ff2 <UART_SetConfig+0x332>
 8004fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	035b      	lsls	r3, r3, #13
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d204      	bcs.n	8004ff2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	e0ec      	b.n	80051cc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ff2:	231a      	movs	r3, #26
 8004ff4:	2218      	movs	r2, #24
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	19db      	adds	r3, r3, r7
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e0e5      	b.n	80051cc <UART_SetConfig+0x50c>
 8005000:	efff69f3 	.word	0xefff69f3
 8005004:	ffffcfff 	.word	0xffffcfff
 8005008:	40004800 	.word	0x40004800
 800500c:	fffff4ff 	.word	0xfffff4ff
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40004400 	.word	0x40004400
 800501c:	40004c00 	.word	0x40004c00
 8005020:	40005000 	.word	0x40005000
 8005024:	003d0900 	.word	0x003d0900
 8005028:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	429a      	cmp	r2, r3
 8005036:	d000      	beq.n	800503a <UART_SetConfig+0x37a>
 8005038:	e071      	b.n	800511e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800503a:	231b      	movs	r3, #27
 800503c:	2218      	movs	r2, #24
 800503e:	189b      	adds	r3, r3, r2
 8005040:	19db      	adds	r3, r3, r7
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d822      	bhi.n	800508e <UART_SetConfig+0x3ce>
 8005048:	009a      	lsls	r2, r3, #2
 800504a:	4b68      	ldr	r3, [pc, #416]	; (80051ec <UART_SetConfig+0x52c>)
 800504c:	18d3      	adds	r3, r2, r3
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7ff f9f7 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005056:	0003      	movs	r3, r0
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800505a:	e021      	b.n	80050a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505c:	f7ff fa08 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005060:	0003      	movs	r3, r0
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005064:	e01c      	b.n	80050a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005066:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <UART_SetConfig+0x530>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2210      	movs	r2, #16
 800506c:	4013      	ands	r3, r2
 800506e:	d002      	beq.n	8005076 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005070:	4b60      	ldr	r3, [pc, #384]	; (80051f4 <UART_SetConfig+0x534>)
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005074:	e014      	b.n	80050a0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005076:	4b60      	ldr	r3, [pc, #384]	; (80051f8 <UART_SetConfig+0x538>)
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800507a:	e011      	b.n	80050a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507c:	f7ff f932 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8005080:	0003      	movs	r3, r0
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005084:	e00c      	b.n	80050a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800508c:	e008      	b.n	80050a0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005092:	231a      	movs	r3, #26
 8005094:	2218      	movs	r2, #24
 8005096:	189b      	adds	r3, r3, r2
 8005098:	19db      	adds	r3, r3, r7
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
        break;
 800509e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d100      	bne.n	80050a8 <UART_SetConfig+0x3e8>
 80050a6:	e091      	b.n	80051cc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	005a      	lsls	r2, r3, #1
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	18d2      	adds	r2, r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	0019      	movs	r1, r3
 80050ba:	0010      	movs	r0, r2
 80050bc:	f7fb f824 	bl	8000108 <__udivsi3>
 80050c0:	0003      	movs	r3, r0
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d921      	bls.n	8005110 <UART_SetConfig+0x450>
 80050cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d21c      	bcs.n	8005110 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	b29a      	uxth	r2, r3
 80050da:	200e      	movs	r0, #14
 80050dc:	2418      	movs	r4, #24
 80050de:	1903      	adds	r3, r0, r4
 80050e0:	19db      	adds	r3, r3, r7
 80050e2:	210f      	movs	r1, #15
 80050e4:	438a      	bics	r2, r1
 80050e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2207      	movs	r2, #7
 80050f0:	4013      	ands	r3, r2
 80050f2:	b299      	uxth	r1, r3
 80050f4:	1903      	adds	r3, r0, r4
 80050f6:	19db      	adds	r3, r3, r7
 80050f8:	1902      	adds	r2, r0, r4
 80050fa:	19d2      	adds	r2, r2, r7
 80050fc:	8812      	ldrh	r2, [r2, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1902      	adds	r2, r0, r4
 8005108:	19d2      	adds	r2, r2, r7
 800510a:	8812      	ldrh	r2, [r2, #0]
 800510c:	60da      	str	r2, [r3, #12]
 800510e:	e05d      	b.n	80051cc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005110:	231a      	movs	r3, #26
 8005112:	2218      	movs	r2, #24
 8005114:	189b      	adds	r3, r3, r2
 8005116:	19db      	adds	r3, r3, r7
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e056      	b.n	80051cc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800511e:	231b      	movs	r3, #27
 8005120:	2218      	movs	r2, #24
 8005122:	189b      	adds	r3, r3, r2
 8005124:	19db      	adds	r3, r3, r7
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d822      	bhi.n	8005172 <UART_SetConfig+0x4b2>
 800512c:	009a      	lsls	r2, r3, #2
 800512e:	4b33      	ldr	r3, [pc, #204]	; (80051fc <UART_SetConfig+0x53c>)
 8005130:	18d3      	adds	r3, r2, r3
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005136:	f7ff f985 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 800513a:	0003      	movs	r3, r0
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800513e:	e021      	b.n	8005184 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7ff f996 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005144:	0003      	movs	r3, r0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005148:	e01c      	b.n	8005184 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514a:	4b29      	ldr	r3, [pc, #164]	; (80051f0 <UART_SetConfig+0x530>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2210      	movs	r2, #16
 8005150:	4013      	ands	r3, r2
 8005152:	d002      	beq.n	800515a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005154:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <UART_SetConfig+0x534>)
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005158:	e014      	b.n	8005184 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800515a:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <UART_SetConfig+0x538>)
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800515e:	e011      	b.n	8005184 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005160:	f7ff f8c0 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8005164:	0003      	movs	r3, r0
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005168:	e00c      	b.n	8005184 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005170:	e008      	b.n	8005184 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005176:	231a      	movs	r3, #26
 8005178:	2218      	movs	r2, #24
 800517a:	189b      	adds	r3, r3, r2
 800517c:	19db      	adds	r3, r3, r7
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
        break;
 8005182:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	085a      	lsrs	r2, r3, #1
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	18d2      	adds	r2, r2, r3
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	0019      	movs	r1, r3
 800519a:	0010      	movs	r0, r2
 800519c:	f7fa ffb4 	bl	8000108 <__udivsi3>
 80051a0:	0003      	movs	r3, r0
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d909      	bls.n	80051c0 <UART_SetConfig+0x500>
 80051ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	025b      	lsls	r3, r3, #9
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d204      	bcs.n	80051c0 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	e005      	b.n	80051cc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80051c0:	231a      	movs	r3, #26
 80051c2:	2218      	movs	r2, #24
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	19db      	adds	r3, r3, r7
 80051c8:	2201      	movs	r2, #1
 80051ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2200      	movs	r2, #0
 80051d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051d8:	231a      	movs	r3, #26
 80051da:	2218      	movs	r2, #24
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	781b      	ldrb	r3, [r3, #0]
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b00e      	add	sp, #56	; 0x38
 80051e8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	08005654 	.word	0x08005654
 80051f0:	40021000 	.word	0x40021000
 80051f4:	003d0900 	.word	0x003d0900
 80051f8:	00f42400 	.word	0x00f42400
 80051fc:	08005678 	.word	0x08005678

08005200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2201      	movs	r2, #1
 800520e:	4013      	ands	r3, r2
 8005210:	d00b      	beq.n	800522a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4a4a      	ldr	r2, [pc, #296]	; (8005344 <UART_AdvFeatureConfig+0x144>)
 800521a:	4013      	ands	r3, r2
 800521c:	0019      	movs	r1, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2202      	movs	r2, #2
 8005230:	4013      	ands	r3, r2
 8005232:	d00b      	beq.n	800524c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4a43      	ldr	r2, [pc, #268]	; (8005348 <UART_AdvFeatureConfig+0x148>)
 800523c:	4013      	ands	r3, r2
 800523e:	0019      	movs	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2204      	movs	r2, #4
 8005252:	4013      	ands	r3, r2
 8005254:	d00b      	beq.n	800526e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a3b      	ldr	r2, [pc, #236]	; (800534c <UART_AdvFeatureConfig+0x14c>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2208      	movs	r2, #8
 8005274:	4013      	ands	r3, r2
 8005276:	d00b      	beq.n	8005290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a34      	ldr	r2, [pc, #208]	; (8005350 <UART_AdvFeatureConfig+0x150>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2210      	movs	r2, #16
 8005296:	4013      	ands	r3, r2
 8005298:	d00b      	beq.n	80052b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a2c      	ldr	r2, [pc, #176]	; (8005354 <UART_AdvFeatureConfig+0x154>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2220      	movs	r2, #32
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4a25      	ldr	r2, [pc, #148]	; (8005358 <UART_AdvFeatureConfig+0x158>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	4013      	ands	r3, r2
 80052dc:	d01d      	beq.n	800531a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a1d      	ldr	r2, [pc, #116]	; (800535c <UART_AdvFeatureConfig+0x15c>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	0019      	movs	r1, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	035b      	lsls	r3, r3, #13
 80052fe:	429a      	cmp	r2, r3
 8005300:	d10b      	bne.n	800531a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <UART_AdvFeatureConfig+0x160>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	4013      	ands	r3, r2
 8005322:	d00b      	beq.n	800533c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <UART_AdvFeatureConfig+0x164>)
 800532c:	4013      	ands	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	46bd      	mov	sp, r7
 8005340:	b002      	add	sp, #8
 8005342:	bd80      	pop	{r7, pc}
 8005344:	fffdffff 	.word	0xfffdffff
 8005348:	fffeffff 	.word	0xfffeffff
 800534c:	fffbffff 	.word	0xfffbffff
 8005350:	ffff7fff 	.word	0xffff7fff
 8005354:	ffffefff 	.word	0xffffefff
 8005358:	ffffdfff 	.word	0xffffdfff
 800535c:	ffefffff 	.word	0xffefffff
 8005360:	ff9fffff 	.word	0xff9fffff
 8005364:	fff7ffff 	.word	0xfff7ffff

08005368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2280      	movs	r2, #128	; 0x80
 8005374:	2100      	movs	r1, #0
 8005376:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005378:	f7fd fa24 	bl	80027c4 <HAL_GetTick>
 800537c:	0003      	movs	r3, r0
 800537e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2208      	movs	r2, #8
 8005388:	4013      	ands	r3, r2
 800538a:	2b08      	cmp	r3, #8
 800538c:	d10c      	bne.n	80053a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2280      	movs	r2, #128	; 0x80
 8005392:	0391      	lsls	r1, r2, #14
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <UART_CheckIdleState+0x8c>)
 8005398:	9200      	str	r2, [sp, #0]
 800539a:	2200      	movs	r2, #0
 800539c:	f000 f82c 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 80053a0:	1e03      	subs	r3, r0, #0
 80053a2:	d001      	beq.n	80053a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e021      	b.n	80053ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2204      	movs	r2, #4
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d10c      	bne.n	80053d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	03d1      	lsls	r1, r2, #15
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4a0d      	ldr	r2, [pc, #52]	; (80053f4 <UART_CheckIdleState+0x8c>)
 80053c0:	9200      	str	r2, [sp, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f000 f818 	bl	80053f8 <UART_WaitOnFlagUntilTimeout>
 80053c8:	1e03      	subs	r3, r0, #0
 80053ca:	d001      	beq.n	80053d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e00d      	b.n	80053ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2274      	movs	r2, #116	; 0x74
 80053e6:	2100      	movs	r1, #0
 80053e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	01ffffff 	.word	0x01ffffff

080053f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b094      	sub	sp, #80	; 0x50
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	1dfb      	adds	r3, r7, #7
 8005406:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005408:	e0a3      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800540c:	3301      	adds	r3, #1
 800540e:	d100      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005410:	e09f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fd f9d7 	bl	80027c4 <HAL_GetTick>
 8005416:	0002      	movs	r2, r0
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <UART_WaitOnFlagUntilTimeout+0x30>
 8005422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005424:	2b00      	cmp	r3, #0
 8005426:	d13d      	bne.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005430:	647b      	str	r3, [r7, #68]	; 0x44
 8005432:	2301      	movs	r3, #1
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	494c      	ldr	r1, [pc, #304]	; (800557c <UART_WaitOnFlagUntilTimeout+0x184>)
 800544a:	400a      	ands	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005450:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
 8005464:	2301      	movs	r3, #1
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	438a      	bics	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2220      	movs	r2, #32
 8005496:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2274      	movs	r2, #116	; 0x74
 800549c:	2100      	movs	r1, #0
 800549e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e067      	b.n	8005574 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2204      	movs	r2, #4
 80054ac:	4013      	ands	r3, r2
 80054ae:	d050      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	401a      	ands	r2, r3
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d146      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2280      	movs	r2, #128	; 0x80
 80054ca:	0112      	lsls	r2, r2, #4
 80054cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	613b      	str	r3, [r7, #16]
  return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4923      	ldr	r1, [pc, #140]	; (800557c <UART_WaitOnFlagUntilTimeout+0x184>)
 80054f0:	400a      	ands	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005500:	f3ef 8310 	mrs	r3, PRIMASK
 8005504:	61fb      	str	r3, [r7, #28]
  return(result);
 8005506:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
 800550a:	2301      	movs	r3, #1
 800550c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	f383 8810 	msr	PRIMASK, r3
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2101      	movs	r1, #1
 8005522:	438a      	bics	r2, r1
 8005524:	609a      	str	r2, [r3, #8]
 8005526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	f383 8810 	msr	PRIMASK, r3
}
 8005530:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	2120      	movs	r1, #32
 8005544:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2274      	movs	r2, #116	; 0x74
 800554a:	2100      	movs	r1, #0
 800554c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e010      	b.n	8005574 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	425a      	negs	r2, r3
 8005562:	4153      	adcs	r3, r2
 8005564:	b2db      	uxtb	r3, r3
 8005566:	001a      	movs	r2, r3
 8005568:	1dfb      	adds	r3, r7, #7
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d100      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005570:	e74b      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	b014      	add	sp, #80	; 0x50
 800557a:	bd80      	pop	{r7, pc}
 800557c:	fffffe5f 	.word	0xfffffe5f

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	2600      	movs	r6, #0
 8005584:	4d0c      	ldr	r5, [pc, #48]	; (80055b8 <__libc_init_array+0x38>)
 8005586:	4c0d      	ldr	r4, [pc, #52]	; (80055bc <__libc_init_array+0x3c>)
 8005588:	1b64      	subs	r4, r4, r5
 800558a:	10a4      	asrs	r4, r4, #2
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	2600      	movs	r6, #0
 8005592:	f000 f821 	bl	80055d8 <_init>
 8005596:	4d0a      	ldr	r5, [pc, #40]	; (80055c0 <__libc_init_array+0x40>)
 8005598:	4c0a      	ldr	r4, [pc, #40]	; (80055c4 <__libc_init_array+0x44>)
 800559a:	1b64      	subs	r4, r4, r5
 800559c:	10a4      	asrs	r4, r4, #2
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	00b3      	lsls	r3, r6, #2
 80055a6:	58eb      	ldr	r3, [r5, r3]
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	00b3      	lsls	r3, r6, #2
 80055b0:	58eb      	ldr	r3, [r5, r3]
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	080056a4 	.word	0x080056a4
 80055bc:	080056a4 	.word	0x080056a4
 80055c0:	080056a4 	.word	0x080056a4
 80055c4:	080056a8 	.word	0x080056a8

080055c8 <memset>:
 80055c8:	0003      	movs	r3, r0
 80055ca:	1882      	adds	r2, r0, r2
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d100      	bne.n	80055d2 <memset+0xa>
 80055d0:	4770      	bx	lr
 80055d2:	7019      	strb	r1, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	e7f9      	b.n	80055cc <memset+0x4>

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr


DataLogFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08015078  08015078  00025078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e00  08015e00  000302e0  2**0
                  CONTENTS
  4 .ARM          00000008  08015e00  08015e00  00025e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e08  08015e08  000302e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e08  08015e08  00025e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e0c  08015e0c  00025e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08015e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  200002e0  080160f0  000302e0  2**2
                  ALLOC
 10 ._user_heap_stack 00002800  20001628  080160f0  00031628  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a0de  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000544a  00000000  00000000  0006a3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fd0  00000000  00000000  0006f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d80  00000000  00000000  00072800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4bb  00000000  00000000  00075580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7f1  00000000  00000000  0008fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099db3  00000000  00000000  000ba22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  00153fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc6c  00000000  00000000  00154084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e0 	.word	0x200002e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08015060 	.word	0x08015060

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e4 	.word	0x200002e4
 8000104:	08015060 	.word	0x08015060

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fc87 	bl	8000d24 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fc13 	bl	8000c4c <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fc79 	bl	8000d24 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fc6f 	bl	8000d24 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fc1f 	bl	8000c98 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fc15 	bl	8000c98 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	; (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	ffffff65 	.word	0xffffff65
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f84c 	bl	8000548 <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_lmul>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	46ce      	mov	lr, r9
 80004c0:	4647      	mov	r7, r8
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0007      	movs	r7, r0
 80004c6:	4699      	mov	r9, r3
 80004c8:	0c3b      	lsrs	r3, r7, #16
 80004ca:	469c      	mov	ip, r3
 80004cc:	0413      	lsls	r3, r2, #16
 80004ce:	0c1b      	lsrs	r3, r3, #16
 80004d0:	001d      	movs	r5, r3
 80004d2:	000e      	movs	r6, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	0400      	lsls	r0, r0, #16
 80004d8:	0c14      	lsrs	r4, r2, #16
 80004da:	0c00      	lsrs	r0, r0, #16
 80004dc:	4345      	muls	r5, r0
 80004de:	434b      	muls	r3, r1
 80004e0:	4360      	muls	r0, r4
 80004e2:	4361      	muls	r1, r4
 80004e4:	18c0      	adds	r0, r0, r3
 80004e6:	0c2c      	lsrs	r4, r5, #16
 80004e8:	1820      	adds	r0, r4, r0
 80004ea:	468c      	mov	ip, r1
 80004ec:	4283      	cmp	r3, r0
 80004ee:	d903      	bls.n	80004f8 <__aeabi_lmul+0x3c>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	025b      	lsls	r3, r3, #9
 80004f4:	4698      	mov	r8, r3
 80004f6:	44c4      	add	ip, r8
 80004f8:	4649      	mov	r1, r9
 80004fa:	4379      	muls	r1, r7
 80004fc:	4372      	muls	r2, r6
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	4463      	add	r3, ip
 8000502:	042d      	lsls	r5, r5, #16
 8000504:	0c2d      	lsrs	r5, r5, #16
 8000506:	18c9      	adds	r1, r1, r3
 8000508:	0400      	lsls	r0, r0, #16
 800050a:	1940      	adds	r0, r0, r5
 800050c:	1889      	adds	r1, r1, r2
 800050e:	bcc0      	pop	{r6, r7}
 8000510:	46b9      	mov	r9, r7
 8000512:	46b0      	mov	r8, r6
 8000514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	; 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f7ff ffa2 	bl	8000468 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 ff29 	bl	8001380 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fd5f 	bl	8000ff8 <__aeabi_fsub>
 800053a:	f000 ff21 	bl	8001380 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__udivmoddi4>:
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	4657      	mov	r7, sl
 800054c:	464e      	mov	r6, r9
 800054e:	4645      	mov	r5, r8
 8000550:	46de      	mov	lr, fp
 8000552:	b5e0      	push	{r5, r6, r7, lr}
 8000554:	0004      	movs	r4, r0
 8000556:	000d      	movs	r5, r1
 8000558:	4692      	mov	sl, r2
 800055a:	4699      	mov	r9, r3
 800055c:	b083      	sub	sp, #12
 800055e:	428b      	cmp	r3, r1
 8000560:	d830      	bhi.n	80005c4 <__udivmoddi4+0x7c>
 8000562:	d02d      	beq.n	80005c0 <__udivmoddi4+0x78>
 8000564:	4649      	mov	r1, r9
 8000566:	4650      	mov	r0, sl
 8000568:	f000 ffd8 	bl	800151c <__clzdi2>
 800056c:	0029      	movs	r1, r5
 800056e:	0006      	movs	r6, r0
 8000570:	0020      	movs	r0, r4
 8000572:	f000 ffd3 	bl	800151c <__clzdi2>
 8000576:	1a33      	subs	r3, r6, r0
 8000578:	4698      	mov	r8, r3
 800057a:	3b20      	subs	r3, #32
 800057c:	469b      	mov	fp, r3
 800057e:	d433      	bmi.n	80005e8 <__udivmoddi4+0xa0>
 8000580:	465a      	mov	r2, fp
 8000582:	4653      	mov	r3, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	4642      	mov	r2, r8
 8000588:	001f      	movs	r7, r3
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d83a      	bhi.n	800060a <__udivmoddi4+0xc2>
 8000594:	42af      	cmp	r7, r5
 8000596:	d100      	bne.n	800059a <__udivmoddi4+0x52>
 8000598:	e078      	b.n	800068c <__udivmoddi4+0x144>
 800059a:	465b      	mov	r3, fp
 800059c:	1ba4      	subs	r4, r4, r6
 800059e:	41bd      	sbcs	r5, r7
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da00      	bge.n	80005a6 <__udivmoddi4+0x5e>
 80005a4:	e075      	b.n	8000692 <__udivmoddi4+0x14a>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	465a      	mov	r2, fp
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4642      	mov	r2, r8
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	e028      	b.n	8000612 <__udivmoddi4+0xca>
 80005c0:	4282      	cmp	r2, r0
 80005c2:	d9cf      	bls.n	8000564 <__udivmoddi4+0x1c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <__udivmoddi4+0x8e>
 80005d2:	601c      	str	r4, [r3, #0]
 80005d4:	605d      	str	r5, [r3, #4]
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	b003      	add	sp, #12
 80005dc:	bcf0      	pop	{r4, r5, r6, r7}
 80005de:	46bb      	mov	fp, r7
 80005e0:	46b2      	mov	sl, r6
 80005e2:	46a9      	mov	r9, r5
 80005e4:	46a0      	mov	r8, r4
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4642      	mov	r2, r8
 80005ea:	2320      	movs	r3, #32
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	4652      	mov	r2, sl
 80005f0:	40da      	lsrs	r2, r3
 80005f2:	4641      	mov	r1, r8
 80005f4:	0013      	movs	r3, r2
 80005f6:	464a      	mov	r2, r9
 80005f8:	408a      	lsls	r2, r1
 80005fa:	0017      	movs	r7, r2
 80005fc:	4642      	mov	r2, r8
 80005fe:	431f      	orrs	r7, r3
 8000600:	4653      	mov	r3, sl
 8000602:	4093      	lsls	r3, r2
 8000604:	001e      	movs	r6, r3
 8000606:	42af      	cmp	r7, r5
 8000608:	d9c4      	bls.n	8000594 <__udivmoddi4+0x4c>
 800060a:	2200      	movs	r2, #0
 800060c:	2300      	movs	r3, #0
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4643      	mov	r3, r8
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0d9      	beq.n	80005cc <__udivmoddi4+0x84>
 8000618:	07fb      	lsls	r3, r7, #31
 800061a:	0872      	lsrs	r2, r6, #1
 800061c:	431a      	orrs	r2, r3
 800061e:	4646      	mov	r6, r8
 8000620:	087b      	lsrs	r3, r7, #1
 8000622:	e00e      	b.n	8000642 <__udivmoddi4+0xfa>
 8000624:	42ab      	cmp	r3, r5
 8000626:	d101      	bne.n	800062c <__udivmoddi4+0xe4>
 8000628:	42a2      	cmp	r2, r4
 800062a:	d80c      	bhi.n	8000646 <__udivmoddi4+0xfe>
 800062c:	1aa4      	subs	r4, r4, r2
 800062e:	419d      	sbcs	r5, r3
 8000630:	2001      	movs	r0, #1
 8000632:	1924      	adds	r4, r4, r4
 8000634:	416d      	adcs	r5, r5
 8000636:	2100      	movs	r1, #0
 8000638:	3e01      	subs	r6, #1
 800063a:	1824      	adds	r4, r4, r0
 800063c:	414d      	adcs	r5, r1
 800063e:	2e00      	cmp	r6, #0
 8000640:	d006      	beq.n	8000650 <__udivmoddi4+0x108>
 8000642:	42ab      	cmp	r3, r5
 8000644:	d9ee      	bls.n	8000624 <__udivmoddi4+0xdc>
 8000646:	3e01      	subs	r6, #1
 8000648:	1924      	adds	r4, r4, r4
 800064a:	416d      	adcs	r5, r5
 800064c:	2e00      	cmp	r6, #0
 800064e:	d1f8      	bne.n	8000642 <__udivmoddi4+0xfa>
 8000650:	9800      	ldr	r0, [sp, #0]
 8000652:	9901      	ldr	r1, [sp, #4]
 8000654:	465b      	mov	r3, fp
 8000656:	1900      	adds	r0, r0, r4
 8000658:	4169      	adcs	r1, r5
 800065a:	2b00      	cmp	r3, #0
 800065c:	db24      	blt.n	80006a8 <__udivmoddi4+0x160>
 800065e:	002b      	movs	r3, r5
 8000660:	465a      	mov	r2, fp
 8000662:	4644      	mov	r4, r8
 8000664:	40d3      	lsrs	r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	40e2      	lsrs	r2, r4
 800066a:	001c      	movs	r4, r3
 800066c:	465b      	mov	r3, fp
 800066e:	0015      	movs	r5, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	db2a      	blt.n	80006ca <__udivmoddi4+0x182>
 8000674:	0026      	movs	r6, r4
 8000676:	409e      	lsls	r6, r3
 8000678:	0033      	movs	r3, r6
 800067a:	0026      	movs	r6, r4
 800067c:	4647      	mov	r7, r8
 800067e:	40be      	lsls	r6, r7
 8000680:	0032      	movs	r2, r6
 8000682:	1a80      	subs	r0, r0, r2
 8000684:	4199      	sbcs	r1, r3
 8000686:	9000      	str	r0, [sp, #0]
 8000688:	9101      	str	r1, [sp, #4]
 800068a:	e79f      	b.n	80005cc <__udivmoddi4+0x84>
 800068c:	42a3      	cmp	r3, r4
 800068e:	d8bc      	bhi.n	800060a <__udivmoddi4+0xc2>
 8000690:	e783      	b.n	800059a <__udivmoddi4+0x52>
 8000692:	4642      	mov	r2, r8
 8000694:	2320      	movs	r3, #32
 8000696:	2100      	movs	r1, #0
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	2200      	movs	r2, #0
 800069c:	9100      	str	r1, [sp, #0]
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	2201      	movs	r2, #1
 80006a2:	40da      	lsrs	r2, r3
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	e786      	b.n	80005b6 <__udivmoddi4+0x6e>
 80006a8:	4642      	mov	r2, r8
 80006aa:	2320      	movs	r3, #32
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	4646      	mov	r6, r8
 80006b2:	409a      	lsls	r2, r3
 80006b4:	0023      	movs	r3, r4
 80006b6:	40f3      	lsrs	r3, r6
 80006b8:	4644      	mov	r4, r8
 80006ba:	4313      	orrs	r3, r2
 80006bc:	002a      	movs	r2, r5
 80006be:	40e2      	lsrs	r2, r4
 80006c0:	001c      	movs	r4, r3
 80006c2:	465b      	mov	r3, fp
 80006c4:	0015      	movs	r5, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dad4      	bge.n	8000674 <__udivmoddi4+0x12c>
 80006ca:	4642      	mov	r2, r8
 80006cc:	002f      	movs	r7, r5
 80006ce:	2320      	movs	r3, #32
 80006d0:	0026      	movs	r6, r4
 80006d2:	4097      	lsls	r7, r2
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	40de      	lsrs	r6, r3
 80006d8:	003b      	movs	r3, r7
 80006da:	4333      	orrs	r3, r6
 80006dc:	e7cd      	b.n	800067a <__udivmoddi4+0x132>
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__aeabi_fadd>:
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	46c6      	mov	lr, r8
 80006e4:	0243      	lsls	r3, r0, #9
 80006e6:	0a5b      	lsrs	r3, r3, #9
 80006e8:	024e      	lsls	r6, r1, #9
 80006ea:	0045      	lsls	r5, r0, #1
 80006ec:	004f      	lsls	r7, r1, #1
 80006ee:	00da      	lsls	r2, r3, #3
 80006f0:	0fc4      	lsrs	r4, r0, #31
 80006f2:	469c      	mov	ip, r3
 80006f4:	0a70      	lsrs	r0, r6, #9
 80006f6:	4690      	mov	r8, r2
 80006f8:	b500      	push	{lr}
 80006fa:	0e2d      	lsrs	r5, r5, #24
 80006fc:	0e3f      	lsrs	r7, r7, #24
 80006fe:	0fc9      	lsrs	r1, r1, #31
 8000700:	09b6      	lsrs	r6, r6, #6
 8000702:	428c      	cmp	r4, r1
 8000704:	d04b      	beq.n	800079e <__aeabi_fadd+0xbe>
 8000706:	1bea      	subs	r2, r5, r7
 8000708:	2a00      	cmp	r2, #0
 800070a:	dd36      	ble.n	800077a <__aeabi_fadd+0x9a>
 800070c:	2f00      	cmp	r7, #0
 800070e:	d061      	beq.n	80007d4 <__aeabi_fadd+0xf4>
 8000710:	2dff      	cmp	r5, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x36>
 8000714:	e0ad      	b.n	8000872 <__aeabi_fadd+0x192>
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	04db      	lsls	r3, r3, #19
 800071a:	431e      	orrs	r6, r3
 800071c:	2a1b      	cmp	r2, #27
 800071e:	dc00      	bgt.n	8000722 <__aeabi_fadd+0x42>
 8000720:	e0d3      	b.n	80008ca <__aeabi_fadd+0x1ea>
 8000722:	2001      	movs	r0, #1
 8000724:	4643      	mov	r3, r8
 8000726:	1a18      	subs	r0, r3, r0
 8000728:	0143      	lsls	r3, r0, #5
 800072a:	d400      	bmi.n	800072e <__aeabi_fadd+0x4e>
 800072c:	e08c      	b.n	8000848 <__aeabi_fadd+0x168>
 800072e:	0180      	lsls	r0, r0, #6
 8000730:	0987      	lsrs	r7, r0, #6
 8000732:	0038      	movs	r0, r7
 8000734:	f000 fed4 	bl	80014e0 <__clzsi2>
 8000738:	3805      	subs	r0, #5
 800073a:	4087      	lsls	r7, r0
 800073c:	4285      	cmp	r5, r0
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fadd+0x62>
 8000740:	e0b6      	b.n	80008b0 <__aeabi_fadd+0x1d0>
 8000742:	1a2d      	subs	r5, r5, r0
 8000744:	48b3      	ldr	r0, [pc, #716]	; (8000a14 <__aeabi_fadd+0x334>)
 8000746:	4038      	ands	r0, r7
 8000748:	0743      	lsls	r3, r0, #29
 800074a:	d004      	beq.n	8000756 <__aeabi_fadd+0x76>
 800074c:	230f      	movs	r3, #15
 800074e:	4003      	ands	r3, r0
 8000750:	2b04      	cmp	r3, #4
 8000752:	d000      	beq.n	8000756 <__aeabi_fadd+0x76>
 8000754:	3004      	adds	r0, #4
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x7c>
 800075a:	e078      	b.n	800084e <__aeabi_fadd+0x16e>
 800075c:	1c6a      	adds	r2, r5, #1
 800075e:	2dfe      	cmp	r5, #254	; 0xfe
 8000760:	d065      	beq.n	800082e <__aeabi_fadd+0x14e>
 8000762:	0180      	lsls	r0, r0, #6
 8000764:	0a43      	lsrs	r3, r0, #9
 8000766:	469c      	mov	ip, r3
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	4663      	mov	r3, ip
 800076c:	05d0      	lsls	r0, r2, #23
 800076e:	4318      	orrs	r0, r3
 8000770:	07e4      	lsls	r4, r4, #31
 8000772:	4320      	orrs	r0, r4
 8000774:	bc80      	pop	{r7}
 8000776:	46b8      	mov	r8, r7
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	2a00      	cmp	r2, #0
 800077c:	d035      	beq.n	80007ea <__aeabi_fadd+0x10a>
 800077e:	1b7a      	subs	r2, r7, r5
 8000780:	2d00      	cmp	r5, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0xa6>
 8000784:	e0af      	b.n	80008e6 <__aeabi_fadd+0x206>
 8000786:	4643      	mov	r3, r8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0xae>
 800078c:	e0a7      	b.n	80008de <__aeabi_fadd+0x1fe>
 800078e:	1e53      	subs	r3, r2, #1
 8000790:	2a01      	cmp	r2, #1
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0xb6>
 8000794:	e12f      	b.n	80009f6 <__aeabi_fadd+0x316>
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d069      	beq.n	800086e <__aeabi_fadd+0x18e>
 800079a:	001a      	movs	r2, r3
 800079c:	e0aa      	b.n	80008f4 <__aeabi_fadd+0x214>
 800079e:	1be9      	subs	r1, r5, r7
 80007a0:	2900      	cmp	r1, #0
 80007a2:	dd70      	ble.n	8000886 <__aeabi_fadd+0x1a6>
 80007a4:	2f00      	cmp	r7, #0
 80007a6:	d037      	beq.n	8000818 <__aeabi_fadd+0x138>
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d062      	beq.n	8000872 <__aeabi_fadd+0x192>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	04db      	lsls	r3, r3, #19
 80007b0:	431e      	orrs	r6, r3
 80007b2:	291b      	cmp	r1, #27
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_fadd+0xd8>
 80007b6:	e0b0      	b.n	800091a <__aeabi_fadd+0x23a>
 80007b8:	2001      	movs	r0, #1
 80007ba:	4440      	add	r0, r8
 80007bc:	0143      	lsls	r3, r0, #5
 80007be:	d543      	bpl.n	8000848 <__aeabi_fadd+0x168>
 80007c0:	3501      	adds	r5, #1
 80007c2:	2dff      	cmp	r5, #255	; 0xff
 80007c4:	d033      	beq.n	800082e <__aeabi_fadd+0x14e>
 80007c6:	2301      	movs	r3, #1
 80007c8:	4a93      	ldr	r2, [pc, #588]	; (8000a18 <__aeabi_fadd+0x338>)
 80007ca:	4003      	ands	r3, r0
 80007cc:	0840      	lsrs	r0, r0, #1
 80007ce:	4010      	ands	r0, r2
 80007d0:	4318      	orrs	r0, r3
 80007d2:	e7b9      	b.n	8000748 <__aeabi_fadd+0x68>
 80007d4:	2e00      	cmp	r6, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0xfa>
 80007d8:	e083      	b.n	80008e2 <__aeabi_fadd+0x202>
 80007da:	1e51      	subs	r1, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x102>
 80007e0:	e0d8      	b.n	8000994 <__aeabi_fadd+0x2b4>
 80007e2:	2aff      	cmp	r2, #255	; 0xff
 80007e4:	d045      	beq.n	8000872 <__aeabi_fadd+0x192>
 80007e6:	000a      	movs	r2, r1
 80007e8:	e798      	b.n	800071c <__aeabi_fadd+0x3c>
 80007ea:	27fe      	movs	r7, #254	; 0xfe
 80007ec:	1c6a      	adds	r2, r5, #1
 80007ee:	4217      	tst	r7, r2
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x114>
 80007f2:	e086      	b.n	8000902 <__aeabi_fadd+0x222>
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_fadd+0x11a>
 80007f8:	e0b7      	b.n	800096a <__aeabi_fadd+0x28a>
 80007fa:	4643      	mov	r3, r8
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x122>
 8000800:	e0f3      	b.n	80009ea <__aeabi_fadd+0x30a>
 8000802:	2200      	movs	r2, #0
 8000804:	2e00      	cmp	r6, #0
 8000806:	d0b0      	beq.n	800076a <__aeabi_fadd+0x8a>
 8000808:	1b98      	subs	r0, r3, r6
 800080a:	0143      	lsls	r3, r0, #5
 800080c:	d400      	bmi.n	8000810 <__aeabi_fadd+0x130>
 800080e:	e0fa      	b.n	8000a06 <__aeabi_fadd+0x326>
 8000810:	4643      	mov	r3, r8
 8000812:	000c      	movs	r4, r1
 8000814:	1af0      	subs	r0, r6, r3
 8000816:	e797      	b.n	8000748 <__aeabi_fadd+0x68>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x13e>
 800081c:	e0c8      	b.n	80009b0 <__aeabi_fadd+0x2d0>
 800081e:	1e4a      	subs	r2, r1, #1
 8000820:	2901      	cmp	r1, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x146>
 8000824:	e0ae      	b.n	8000984 <__aeabi_fadd+0x2a4>
 8000826:	29ff      	cmp	r1, #255	; 0xff
 8000828:	d023      	beq.n	8000872 <__aeabi_fadd+0x192>
 800082a:	0011      	movs	r1, r2
 800082c:	e7c1      	b.n	80007b2 <__aeabi_fadd+0xd2>
 800082e:	2300      	movs	r3, #0
 8000830:	22ff      	movs	r2, #255	; 0xff
 8000832:	469c      	mov	ip, r3
 8000834:	e799      	b.n	800076a <__aeabi_fadd+0x8a>
 8000836:	21fe      	movs	r1, #254	; 0xfe
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	4211      	tst	r1, r2
 800083c:	d077      	beq.n	800092e <__aeabi_fadd+0x24e>
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d0f5      	beq.n	800082e <__aeabi_fadd+0x14e>
 8000842:	0015      	movs	r5, r2
 8000844:	4446      	add	r6, r8
 8000846:	0870      	lsrs	r0, r6, #1
 8000848:	0743      	lsls	r3, r0, #29
 800084a:	d000      	beq.n	800084e <__aeabi_fadd+0x16e>
 800084c:	e77e      	b.n	800074c <__aeabi_fadd+0x6c>
 800084e:	08c3      	lsrs	r3, r0, #3
 8000850:	2dff      	cmp	r5, #255	; 0xff
 8000852:	d00e      	beq.n	8000872 <__aeabi_fadd+0x192>
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	0a5b      	lsrs	r3, r3, #9
 8000858:	469c      	mov	ip, r3
 800085a:	b2ea      	uxtb	r2, r5
 800085c:	e785      	b.n	800076a <__aeabi_fadd+0x8a>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d007      	beq.n	8000872 <__aeabi_fadd+0x192>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	03d2      	lsls	r2, r2, #15
 8000866:	4213      	tst	r3, r2
 8000868:	d003      	beq.n	8000872 <__aeabi_fadd+0x192>
 800086a:	4210      	tst	r0, r2
 800086c:	d101      	bne.n	8000872 <__aeabi_fadd+0x192>
 800086e:	000c      	movs	r4, r1
 8000870:	0003      	movs	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0db      	beq.n	800082e <__aeabi_fadd+0x14e>
 8000876:	2080      	movs	r0, #128	; 0x80
 8000878:	03c0      	lsls	r0, r0, #15
 800087a:	4318      	orrs	r0, r3
 800087c:	0240      	lsls	r0, r0, #9
 800087e:	0a43      	lsrs	r3, r0, #9
 8000880:	469c      	mov	ip, r3
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	e771      	b.n	800076a <__aeabi_fadd+0x8a>
 8000886:	2900      	cmp	r1, #0
 8000888:	d0d5      	beq.n	8000836 <__aeabi_fadd+0x156>
 800088a:	1b7a      	subs	r2, r7, r5
 800088c:	2d00      	cmp	r5, #0
 800088e:	d160      	bne.n	8000952 <__aeabi_fadd+0x272>
 8000890:	4643      	mov	r3, r8
 8000892:	2b00      	cmp	r3, #0
 8000894:	d024      	beq.n	80008e0 <__aeabi_fadd+0x200>
 8000896:	1e53      	subs	r3, r2, #1
 8000898:	2a01      	cmp	r2, #1
 800089a:	d073      	beq.n	8000984 <__aeabi_fadd+0x2a4>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d0e7      	beq.n	8000870 <__aeabi_fadd+0x190>
 80008a0:	001a      	movs	r2, r3
 80008a2:	2a1b      	cmp	r2, #27
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_fadd+0x1c8>
 80008a6:	e085      	b.n	80009b4 <__aeabi_fadd+0x2d4>
 80008a8:	2001      	movs	r0, #1
 80008aa:	003d      	movs	r5, r7
 80008ac:	1980      	adds	r0, r0, r6
 80008ae:	e785      	b.n	80007bc <__aeabi_fadd+0xdc>
 80008b0:	2320      	movs	r3, #32
 80008b2:	003a      	movs	r2, r7
 80008b4:	1b45      	subs	r5, r0, r5
 80008b6:	0038      	movs	r0, r7
 80008b8:	3501      	adds	r5, #1
 80008ba:	40ea      	lsrs	r2, r5
 80008bc:	1b5d      	subs	r5, r3, r5
 80008be:	40a8      	lsls	r0, r5
 80008c0:	1e43      	subs	r3, r0, #1
 80008c2:	4198      	sbcs	r0, r3
 80008c4:	2500      	movs	r5, #0
 80008c6:	4310      	orrs	r0, r2
 80008c8:	e73e      	b.n	8000748 <__aeabi_fadd+0x68>
 80008ca:	2320      	movs	r3, #32
 80008cc:	0030      	movs	r0, r6
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	0031      	movs	r1, r6
 80008d2:	4098      	lsls	r0, r3
 80008d4:	40d1      	lsrs	r1, r2
 80008d6:	1e43      	subs	r3, r0, #1
 80008d8:	4198      	sbcs	r0, r3
 80008da:	4308      	orrs	r0, r1
 80008dc:	e722      	b.n	8000724 <__aeabi_fadd+0x44>
 80008de:	000c      	movs	r4, r1
 80008e0:	0003      	movs	r3, r0
 80008e2:	0015      	movs	r5, r2
 80008e4:	e7b4      	b.n	8000850 <__aeabi_fadd+0x170>
 80008e6:	2fff      	cmp	r7, #255	; 0xff
 80008e8:	d0c1      	beq.n	800086e <__aeabi_fadd+0x18e>
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	4640      	mov	r0, r8
 80008ee:	04db      	lsls	r3, r3, #19
 80008f0:	4318      	orrs	r0, r3
 80008f2:	4680      	mov	r8, r0
 80008f4:	2a1b      	cmp	r2, #27
 80008f6:	dd51      	ble.n	800099c <__aeabi_fadd+0x2bc>
 80008f8:	2001      	movs	r0, #1
 80008fa:	000c      	movs	r4, r1
 80008fc:	003d      	movs	r5, r7
 80008fe:	1a30      	subs	r0, r6, r0
 8000900:	e712      	b.n	8000728 <__aeabi_fadd+0x48>
 8000902:	4643      	mov	r3, r8
 8000904:	1b9f      	subs	r7, r3, r6
 8000906:	017b      	lsls	r3, r7, #5
 8000908:	d42b      	bmi.n	8000962 <__aeabi_fadd+0x282>
 800090a:	2f00      	cmp	r7, #0
 800090c:	d000      	beq.n	8000910 <__aeabi_fadd+0x230>
 800090e:	e710      	b.n	8000732 <__aeabi_fadd+0x52>
 8000910:	2300      	movs	r3, #0
 8000912:	2400      	movs	r4, #0
 8000914:	2200      	movs	r2, #0
 8000916:	469c      	mov	ip, r3
 8000918:	e727      	b.n	800076a <__aeabi_fadd+0x8a>
 800091a:	2320      	movs	r3, #32
 800091c:	0032      	movs	r2, r6
 800091e:	0030      	movs	r0, r6
 8000920:	40ca      	lsrs	r2, r1
 8000922:	1a59      	subs	r1, r3, r1
 8000924:	4088      	lsls	r0, r1
 8000926:	1e43      	subs	r3, r0, #1
 8000928:	4198      	sbcs	r0, r3
 800092a:	4310      	orrs	r0, r2
 800092c:	e745      	b.n	80007ba <__aeabi_fadd+0xda>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d14a      	bne.n	80009c8 <__aeabi_fadd+0x2e8>
 8000932:	4643      	mov	r3, r8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d063      	beq.n	8000a00 <__aeabi_fadd+0x320>
 8000938:	2200      	movs	r2, #0
 800093a:	2e00      	cmp	r6, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x260>
 800093e:	e714      	b.n	800076a <__aeabi_fadd+0x8a>
 8000940:	0030      	movs	r0, r6
 8000942:	4440      	add	r0, r8
 8000944:	0143      	lsls	r3, r0, #5
 8000946:	d400      	bmi.n	800094a <__aeabi_fadd+0x26a>
 8000948:	e77e      	b.n	8000848 <__aeabi_fadd+0x168>
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <__aeabi_fadd+0x334>)
 800094c:	3501      	adds	r5, #1
 800094e:	4018      	ands	r0, r3
 8000950:	e77a      	b.n	8000848 <__aeabi_fadd+0x168>
 8000952:	2fff      	cmp	r7, #255	; 0xff
 8000954:	d08c      	beq.n	8000870 <__aeabi_fadd+0x190>
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	4641      	mov	r1, r8
 800095a:	04db      	lsls	r3, r3, #19
 800095c:	4319      	orrs	r1, r3
 800095e:	4688      	mov	r8, r1
 8000960:	e79f      	b.n	80008a2 <__aeabi_fadd+0x1c2>
 8000962:	4643      	mov	r3, r8
 8000964:	000c      	movs	r4, r1
 8000966:	1af7      	subs	r7, r6, r3
 8000968:	e6e3      	b.n	8000732 <__aeabi_fadd+0x52>
 800096a:	4642      	mov	r2, r8
 800096c:	2a00      	cmp	r2, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_fadd+0x292>
 8000970:	e775      	b.n	800085e <__aeabi_fadd+0x17e>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d000      	beq.n	8000978 <__aeabi_fadd+0x298>
 8000976:	e77a      	b.n	800086e <__aeabi_fadd+0x18e>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	03db      	lsls	r3, r3, #15
 800097c:	2400      	movs	r4, #0
 800097e:	469c      	mov	ip, r3
 8000980:	22ff      	movs	r2, #255	; 0xff
 8000982:	e6f2      	b.n	800076a <__aeabi_fadd+0x8a>
 8000984:	0030      	movs	r0, r6
 8000986:	4440      	add	r0, r8
 8000988:	2501      	movs	r5, #1
 800098a:	0143      	lsls	r3, r0, #5
 800098c:	d400      	bmi.n	8000990 <__aeabi_fadd+0x2b0>
 800098e:	e75b      	b.n	8000848 <__aeabi_fadd+0x168>
 8000990:	2502      	movs	r5, #2
 8000992:	e718      	b.n	80007c6 <__aeabi_fadd+0xe6>
 8000994:	4643      	mov	r3, r8
 8000996:	2501      	movs	r5, #1
 8000998:	1b98      	subs	r0, r3, r6
 800099a:	e6c5      	b.n	8000728 <__aeabi_fadd+0x48>
 800099c:	2320      	movs	r3, #32
 800099e:	4644      	mov	r4, r8
 80009a0:	4640      	mov	r0, r8
 80009a2:	40d4      	lsrs	r4, r2
 80009a4:	1a9a      	subs	r2, r3, r2
 80009a6:	4090      	lsls	r0, r2
 80009a8:	1e43      	subs	r3, r0, #1
 80009aa:	4198      	sbcs	r0, r3
 80009ac:	4320      	orrs	r0, r4
 80009ae:	e7a4      	b.n	80008fa <__aeabi_fadd+0x21a>
 80009b0:	000d      	movs	r5, r1
 80009b2:	e74d      	b.n	8000850 <__aeabi_fadd+0x170>
 80009b4:	2320      	movs	r3, #32
 80009b6:	4641      	mov	r1, r8
 80009b8:	4640      	mov	r0, r8
 80009ba:	40d1      	lsrs	r1, r2
 80009bc:	1a9a      	subs	r2, r3, r2
 80009be:	4090      	lsls	r0, r2
 80009c0:	1e43      	subs	r3, r0, #1
 80009c2:	4198      	sbcs	r0, r3
 80009c4:	4308      	orrs	r0, r1
 80009c6:	e770      	b.n	80008aa <__aeabi_fadd+0x1ca>
 80009c8:	4642      	mov	r2, r8
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fadd+0x2f0>
 80009ce:	e74f      	b.n	8000870 <__aeabi_fadd+0x190>
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fadd+0x2f6>
 80009d4:	e74d      	b.n	8000872 <__aeabi_fadd+0x192>
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	03d2      	lsls	r2, r2, #15
 80009da:	4213      	tst	r3, r2
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x300>
 80009de:	e748      	b.n	8000872 <__aeabi_fadd+0x192>
 80009e0:	4210      	tst	r0, r2
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fadd+0x306>
 80009e4:	e745      	b.n	8000872 <__aeabi_fadd+0x192>
 80009e6:	0003      	movs	r3, r0
 80009e8:	e743      	b.n	8000872 <__aeabi_fadd+0x192>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d090      	beq.n	8000910 <__aeabi_fadd+0x230>
 80009ee:	000c      	movs	r4, r1
 80009f0:	4684      	mov	ip, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	e6b9      	b.n	800076a <__aeabi_fadd+0x8a>
 80009f6:	4643      	mov	r3, r8
 80009f8:	000c      	movs	r4, r1
 80009fa:	1af0      	subs	r0, r6, r3
 80009fc:	3501      	adds	r5, #1
 80009fe:	e693      	b.n	8000728 <__aeabi_fadd+0x48>
 8000a00:	4684      	mov	ip, r0
 8000a02:	2200      	movs	r2, #0
 8000a04:	e6b1      	b.n	800076a <__aeabi_fadd+0x8a>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fadd+0x32c>
 8000a0a:	e71d      	b.n	8000848 <__aeabi_fadd+0x168>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2400      	movs	r4, #0
 8000a10:	469c      	mov	ip, r3
 8000a12:	e6aa      	b.n	800076a <__aeabi_fadd+0x8a>
 8000a14:	fbffffff 	.word	0xfbffffff
 8000a18:	7dffffff 	.word	0x7dffffff

08000a1c <__aeabi_fdiv>:
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	464f      	mov	r7, r9
 8000a20:	4646      	mov	r6, r8
 8000a22:	46d6      	mov	lr, sl
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	b5c0      	push	{r6, r7, lr}
 8000a28:	0047      	lsls	r7, r0, #1
 8000a2a:	1c0c      	adds	r4, r1, #0
 8000a2c:	0a6d      	lsrs	r5, r5, #9
 8000a2e:	0e3f      	lsrs	r7, r7, #24
 8000a30:	0fc6      	lsrs	r6, r0, #31
 8000a32:	2f00      	cmp	r7, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fdiv+0x1c>
 8000a36:	e070      	b.n	8000b1a <__aeabi_fdiv+0xfe>
 8000a38:	2fff      	cmp	r7, #255	; 0xff
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fdiv+0x22>
 8000a3c:	e075      	b.n	8000b2a <__aeabi_fdiv+0x10e>
 8000a3e:	00eb      	lsls	r3, r5, #3
 8000a40:	2580      	movs	r5, #128	; 0x80
 8000a42:	04ed      	lsls	r5, r5, #19
 8000a44:	431d      	orrs	r5, r3
 8000a46:	2300      	movs	r3, #0
 8000a48:	4699      	mov	r9, r3
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3f7f      	subs	r7, #127	; 0x7f
 8000a4e:	0260      	lsls	r0, r4, #9
 8000a50:	0a43      	lsrs	r3, r0, #9
 8000a52:	4698      	mov	r8, r3
 8000a54:	0063      	lsls	r3, r4, #1
 8000a56:	0e1b      	lsrs	r3, r3, #24
 8000a58:	0fe4      	lsrs	r4, r4, #31
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d04e      	beq.n	8000afc <__aeabi_fdiv+0xe0>
 8000a5e:	2bff      	cmp	r3, #255	; 0xff
 8000a60:	d046      	beq.n	8000af0 <__aeabi_fdiv+0xd4>
 8000a62:	4642      	mov	r2, r8
 8000a64:	00d0      	lsls	r0, r2, #3
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	04d2      	lsls	r2, r2, #19
 8000a6a:	4302      	orrs	r2, r0
 8000a6c:	4690      	mov	r8, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	3b7f      	subs	r3, #127	; 0x7f
 8000a72:	0031      	movs	r1, r6
 8000a74:	1aff      	subs	r7, r7, r3
 8000a76:	464b      	mov	r3, r9
 8000a78:	4061      	eors	r1, r4
 8000a7a:	b2c9      	uxtb	r1, r1
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d900      	bls.n	8000a84 <__aeabi_fdiv+0x68>
 8000a82:	e0b5      	b.n	8000bf0 <__aeabi_fdiv+0x1d4>
 8000a84:	486e      	ldr	r0, [pc, #440]	; (8000c40 <__aeabi_fdiv+0x224>)
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	58c3      	ldr	r3, [r0, r3]
 8000a8a:	469f      	mov	pc, r3
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	4698      	mov	r8, r3
 8000a90:	0026      	movs	r6, r4
 8000a92:	4645      	mov	r5, r8
 8000a94:	4692      	mov	sl, r2
 8000a96:	4653      	mov	r3, sl
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fdiv+0x82>
 8000a9c:	e089      	b.n	8000bb2 <__aeabi_fdiv+0x196>
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fdiv+0x88>
 8000aa2:	e09e      	b.n	8000be2 <__aeabi_fdiv+0x1c6>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d018      	beq.n	8000ada <__aeabi_fdiv+0xbe>
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	337f      	adds	r3, #127	; 0x7f
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd69      	ble.n	8000b84 <__aeabi_fdiv+0x168>
 8000ab0:	076a      	lsls	r2, r5, #29
 8000ab2:	d004      	beq.n	8000abe <__aeabi_fdiv+0xa2>
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	402a      	ands	r2, r5
 8000ab8:	2a04      	cmp	r2, #4
 8000aba:	d000      	beq.n	8000abe <__aeabi_fdiv+0xa2>
 8000abc:	3504      	adds	r5, #4
 8000abe:	012a      	lsls	r2, r5, #4
 8000ac0:	d503      	bpl.n	8000aca <__aeabi_fdiv+0xae>
 8000ac2:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <__aeabi_fdiv+0x228>)
 8000ac4:	401d      	ands	r5, r3
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	3380      	adds	r3, #128	; 0x80
 8000aca:	2bfe      	cmp	r3, #254	; 0xfe
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_fdiv+0xb4>
 8000ace:	e070      	b.n	8000bb2 <__aeabi_fdiv+0x196>
 8000ad0:	01ad      	lsls	r5, r5, #6
 8000ad2:	0a6d      	lsrs	r5, r5, #9
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	e002      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2000      	movs	r0, #0
 8000adc:	2500      	movs	r5, #0
 8000ade:	05c0      	lsls	r0, r0, #23
 8000ae0:	4328      	orrs	r0, r5
 8000ae2:	07f6      	lsls	r6, r6, #31
 8000ae4:	4330      	orrs	r0, r6
 8000ae6:	bce0      	pop	{r5, r6, r7}
 8000ae8:	46ba      	mov	sl, r7
 8000aea:	46b1      	mov	r9, r6
 8000aec:	46a8      	mov	r8, r5
 8000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af0:	4643      	mov	r3, r8
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d13f      	bne.n	8000b76 <__aeabi_fdiv+0x15a>
 8000af6:	2202      	movs	r2, #2
 8000af8:	3fff      	subs	r7, #255	; 0xff
 8000afa:	e003      	b.n	8000b04 <__aeabi_fdiv+0xe8>
 8000afc:	4643      	mov	r3, r8
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d12d      	bne.n	8000b5e <__aeabi_fdiv+0x142>
 8000b02:	2201      	movs	r2, #1
 8000b04:	0031      	movs	r1, r6
 8000b06:	464b      	mov	r3, r9
 8000b08:	4061      	eors	r1, r4
 8000b0a:	b2c9      	uxtb	r1, r1
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d834      	bhi.n	8000b7c <__aeabi_fdiv+0x160>
 8000b12:	484d      	ldr	r0, [pc, #308]	; (8000c48 <__aeabi_fdiv+0x22c>)
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	58c3      	ldr	r3, [r0, r3]
 8000b18:	469f      	mov	pc, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d113      	bne.n	8000b46 <__aeabi_fdiv+0x12a>
 8000b1e:	2304      	movs	r3, #4
 8000b20:	4699      	mov	r9, r3
 8000b22:	3b03      	subs	r3, #3
 8000b24:	2700      	movs	r7, #0
 8000b26:	469a      	mov	sl, r3
 8000b28:	e791      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d105      	bne.n	8000b3a <__aeabi_fdiv+0x11e>
 8000b2e:	2308      	movs	r3, #8
 8000b30:	4699      	mov	r9, r3
 8000b32:	3b06      	subs	r3, #6
 8000b34:	27ff      	movs	r7, #255	; 0xff
 8000b36:	469a      	mov	sl, r3
 8000b38:	e789      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	3b09      	subs	r3, #9
 8000b40:	27ff      	movs	r7, #255	; 0xff
 8000b42:	469a      	mov	sl, r3
 8000b44:	e783      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b46:	0028      	movs	r0, r5
 8000b48:	f000 fcca 	bl	80014e0 <__clzsi2>
 8000b4c:	2776      	movs	r7, #118	; 0x76
 8000b4e:	1f43      	subs	r3, r0, #5
 8000b50:	409d      	lsls	r5, r3
 8000b52:	2300      	movs	r3, #0
 8000b54:	427f      	negs	r7, r7
 8000b56:	4699      	mov	r9, r3
 8000b58:	469a      	mov	sl, r3
 8000b5a:	1a3f      	subs	r7, r7, r0
 8000b5c:	e777      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b5e:	4640      	mov	r0, r8
 8000b60:	f000 fcbe 	bl	80014e0 <__clzsi2>
 8000b64:	4642      	mov	r2, r8
 8000b66:	1f43      	subs	r3, r0, #5
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	2376      	movs	r3, #118	; 0x76
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	4690      	mov	r8, r2
 8000b70:	1a1b      	subs	r3, r3, r0
 8000b72:	2200      	movs	r2, #0
 8000b74:	e77d      	b.n	8000a72 <__aeabi_fdiv+0x56>
 8000b76:	23ff      	movs	r3, #255	; 0xff
 8000b78:	2203      	movs	r2, #3
 8000b7a:	e77a      	b.n	8000a72 <__aeabi_fdiv+0x56>
 8000b7c:	000e      	movs	r6, r1
 8000b7e:	20ff      	movs	r0, #255	; 0xff
 8000b80:	2500      	movs	r5, #0
 8000b82:	e7ac      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000b84:	2001      	movs	r0, #1
 8000b86:	1ac0      	subs	r0, r0, r3
 8000b88:	281b      	cmp	r0, #27
 8000b8a:	dca6      	bgt.n	8000ada <__aeabi_fdiv+0xbe>
 8000b8c:	379e      	adds	r7, #158	; 0x9e
 8000b8e:	002a      	movs	r2, r5
 8000b90:	40bd      	lsls	r5, r7
 8000b92:	40c2      	lsrs	r2, r0
 8000b94:	1e6b      	subs	r3, r5, #1
 8000b96:	419d      	sbcs	r5, r3
 8000b98:	4315      	orrs	r5, r2
 8000b9a:	076b      	lsls	r3, r5, #29
 8000b9c:	d004      	beq.n	8000ba8 <__aeabi_fdiv+0x18c>
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	402b      	ands	r3, r5
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_fdiv+0x18c>
 8000ba6:	3504      	adds	r5, #4
 8000ba8:	016b      	lsls	r3, r5, #5
 8000baa:	d544      	bpl.n	8000c36 <__aeabi_fdiv+0x21a>
 8000bac:	2001      	movs	r0, #1
 8000bae:	2500      	movs	r5, #0
 8000bb0:	e795      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bb2:	20ff      	movs	r0, #255	; 0xff
 8000bb4:	2500      	movs	r5, #0
 8000bb6:	e792      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bb8:	2580      	movs	r5, #128	; 0x80
 8000bba:	2600      	movs	r6, #0
 8000bbc:	20ff      	movs	r0, #255	; 0xff
 8000bbe:	03ed      	lsls	r5, r5, #15
 8000bc0:	e78d      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2080      	movs	r0, #128	; 0x80
 8000bc8:	03c0      	lsls	r0, r0, #15
 8000bca:	4205      	tst	r5, r0
 8000bcc:	d009      	beq.n	8000be2 <__aeabi_fdiv+0x1c6>
 8000bce:	4643      	mov	r3, r8
 8000bd0:	4203      	tst	r3, r0
 8000bd2:	d106      	bne.n	8000be2 <__aeabi_fdiv+0x1c6>
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	4305      	orrs	r5, r0
 8000bd8:	026d      	lsls	r5, r5, #9
 8000bda:	0026      	movs	r6, r4
 8000bdc:	20ff      	movs	r0, #255	; 0xff
 8000bde:	0a6d      	lsrs	r5, r5, #9
 8000be0:	e77d      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000be2:	2080      	movs	r0, #128	; 0x80
 8000be4:	03c0      	lsls	r0, r0, #15
 8000be6:	4305      	orrs	r5, r0
 8000be8:	026d      	lsls	r5, r5, #9
 8000bea:	20ff      	movs	r0, #255	; 0xff
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	e776      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	016b      	lsls	r3, r5, #5
 8000bf4:	0150      	lsls	r0, r2, #5
 8000bf6:	4283      	cmp	r3, r0
 8000bf8:	d219      	bcs.n	8000c2e <__aeabi_fdiv+0x212>
 8000bfa:	221b      	movs	r2, #27
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	3f01      	subs	r7, #1
 8000c00:	2601      	movs	r6, #1
 8000c02:	001c      	movs	r4, r3
 8000c04:	006d      	lsls	r5, r5, #1
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	db01      	blt.n	8000c10 <__aeabi_fdiv+0x1f4>
 8000c0c:	4298      	cmp	r0, r3
 8000c0e:	d801      	bhi.n	8000c14 <__aeabi_fdiv+0x1f8>
 8000c10:	1a1b      	subs	r3, r3, r0
 8000c12:	4335      	orrs	r5, r6
 8000c14:	3a01      	subs	r2, #1
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d1f3      	bne.n	8000c02 <__aeabi_fdiv+0x1e6>
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	4193      	sbcs	r3, r2
 8000c1e:	431d      	orrs	r5, r3
 8000c20:	003b      	movs	r3, r7
 8000c22:	337f      	adds	r3, #127	; 0x7f
 8000c24:	000e      	movs	r6, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_fdiv+0x210>
 8000c2a:	e741      	b.n	8000ab0 <__aeabi_fdiv+0x94>
 8000c2c:	e7aa      	b.n	8000b84 <__aeabi_fdiv+0x168>
 8000c2e:	221a      	movs	r2, #26
 8000c30:	2501      	movs	r5, #1
 8000c32:	1a1b      	subs	r3, r3, r0
 8000c34:	e7e4      	b.n	8000c00 <__aeabi_fdiv+0x1e4>
 8000c36:	01ad      	lsls	r5, r5, #6
 8000c38:	2000      	movs	r0, #0
 8000c3a:	0a6d      	lsrs	r5, r5, #9
 8000c3c:	e74f      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	080151b8 	.word	0x080151b8
 8000c44:	f7ffffff 	.word	0xf7ffffff
 8000c48:	080151f8 	.word	0x080151f8

08000c4c <__eqsf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	0245      	lsls	r5, r0, #9
 8000c52:	024e      	lsls	r6, r1, #9
 8000c54:	004c      	lsls	r4, r1, #1
 8000c56:	0fc3      	lsrs	r3, r0, #31
 8000c58:	0a6d      	lsrs	r5, r5, #9
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	0e12      	lsrs	r2, r2, #24
 8000c5e:	0a76      	lsrs	r6, r6, #9
 8000c60:	0e24      	lsrs	r4, r4, #24
 8000c62:	0fc9      	lsrs	r1, r1, #31
 8000c64:	2aff      	cmp	r2, #255	; 0xff
 8000c66:	d006      	beq.n	8000c76 <__eqsf2+0x2a>
 8000c68:	2cff      	cmp	r4, #255	; 0xff
 8000c6a:	d003      	beq.n	8000c74 <__eqsf2+0x28>
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d101      	bne.n	8000c74 <__eqsf2+0x28>
 8000c70:	42b5      	cmp	r5, r6
 8000c72:	d006      	beq.n	8000c82 <__eqsf2+0x36>
 8000c74:	bd70      	pop	{r4, r5, r6, pc}
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d1fc      	bne.n	8000c74 <__eqsf2+0x28>
 8000c7a:	2cff      	cmp	r4, #255	; 0xff
 8000c7c:	d1fa      	bne.n	8000c74 <__eqsf2+0x28>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d1f8      	bne.n	8000c74 <__eqsf2+0x28>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d006      	beq.n	8000c94 <__eqsf2+0x48>
 8000c86:	2001      	movs	r0, #1
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d1f3      	bne.n	8000c74 <__eqsf2+0x28>
 8000c8c:	0028      	movs	r0, r5
 8000c8e:	1e43      	subs	r3, r0, #1
 8000c90:	4198      	sbcs	r0, r3
 8000c92:	e7ef      	b.n	8000c74 <__eqsf2+0x28>
 8000c94:	2000      	movs	r0, #0
 8000c96:	e7ed      	b.n	8000c74 <__eqsf2+0x28>

08000c98 <__gesf2>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	0042      	lsls	r2, r0, #1
 8000c9c:	0245      	lsls	r5, r0, #9
 8000c9e:	024e      	lsls	r6, r1, #9
 8000ca0:	004c      	lsls	r4, r1, #1
 8000ca2:	0fc3      	lsrs	r3, r0, #31
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	0e12      	lsrs	r2, r2, #24
 8000ca8:	0a76      	lsrs	r6, r6, #9
 8000caa:	0e24      	lsrs	r4, r4, #24
 8000cac:	0fc8      	lsrs	r0, r1, #31
 8000cae:	2aff      	cmp	r2, #255	; 0xff
 8000cb0:	d01b      	beq.n	8000cea <__gesf2+0x52>
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d00e      	beq.n	8000cd4 <__gesf2+0x3c>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d11b      	bne.n	8000cf2 <__gesf2+0x5a>
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d101      	bne.n	8000cc2 <__gesf2+0x2a>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d01c      	beq.n	8000cfc <__gesf2+0x64>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d00c      	beq.n	8000ce0 <__gesf2+0x48>
 8000cc6:	4283      	cmp	r3, r0
 8000cc8:	d01c      	beq.n	8000d04 <__gesf2+0x6c>
 8000cca:	2102      	movs	r1, #2
 8000ccc:	1e58      	subs	r0, r3, #1
 8000cce:	4008      	ands	r0, r1
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d122      	bne.n	8000d1e <__gesf2+0x86>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d1f4      	bne.n	8000cc6 <__gesf2+0x2e>
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d1f2      	bne.n	8000cc6 <__gesf2+0x2e>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d1f6      	bne.n	8000cd2 <__gesf2+0x3a>
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	e7f3      	b.n	8000cd2 <__gesf2+0x3a>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d117      	bne.n	8000d1e <__gesf2+0x86>
 8000cee:	2cff      	cmp	r4, #255	; 0xff
 8000cf0:	d0f0      	beq.n	8000cd4 <__gesf2+0x3c>
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d1e7      	bne.n	8000cc6 <__gesf2+0x2e>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d1e5      	bne.n	8000cc6 <__gesf2+0x2e>
 8000cfa:	e7e6      	b.n	8000cca <__gesf2+0x32>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e7      	beq.n	8000cd2 <__gesf2+0x3a>
 8000d02:	e7e2      	b.n	8000cca <__gesf2+0x32>
 8000d04:	42a2      	cmp	r2, r4
 8000d06:	dc05      	bgt.n	8000d14 <__gesf2+0x7c>
 8000d08:	dbea      	blt.n	8000ce0 <__gesf2+0x48>
 8000d0a:	42b5      	cmp	r5, r6
 8000d0c:	d802      	bhi.n	8000d14 <__gesf2+0x7c>
 8000d0e:	d3e7      	bcc.n	8000ce0 <__gesf2+0x48>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e7de      	b.n	8000cd2 <__gesf2+0x3a>
 8000d14:	4243      	negs	r3, r0
 8000d16:	4158      	adcs	r0, r3
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	3801      	subs	r0, #1
 8000d1c:	e7d9      	b.n	8000cd2 <__gesf2+0x3a>
 8000d1e:	2002      	movs	r0, #2
 8000d20:	4240      	negs	r0, r0
 8000d22:	e7d6      	b.n	8000cd2 <__gesf2+0x3a>

08000d24 <__lesf2>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	0042      	lsls	r2, r0, #1
 8000d28:	0245      	lsls	r5, r0, #9
 8000d2a:	024e      	lsls	r6, r1, #9
 8000d2c:	004c      	lsls	r4, r1, #1
 8000d2e:	0fc3      	lsrs	r3, r0, #31
 8000d30:	0a6d      	lsrs	r5, r5, #9
 8000d32:	0e12      	lsrs	r2, r2, #24
 8000d34:	0a76      	lsrs	r6, r6, #9
 8000d36:	0e24      	lsrs	r4, r4, #24
 8000d38:	0fc8      	lsrs	r0, r1, #31
 8000d3a:	2aff      	cmp	r2, #255	; 0xff
 8000d3c:	d00b      	beq.n	8000d56 <__lesf2+0x32>
 8000d3e:	2cff      	cmp	r4, #255	; 0xff
 8000d40:	d00d      	beq.n	8000d5e <__lesf2+0x3a>
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d11f      	bne.n	8000d86 <__lesf2+0x62>
 8000d46:	2c00      	cmp	r4, #0
 8000d48:	d116      	bne.n	8000d78 <__lesf2+0x54>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d114      	bne.n	8000d78 <__lesf2+0x54>
 8000d4e:	2000      	movs	r0, #0
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d010      	beq.n	8000d76 <__lesf2+0x52>
 8000d54:	e009      	b.n	8000d6a <__lesf2+0x46>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d10c      	bne.n	8000d74 <__lesf2+0x50>
 8000d5a:	2cff      	cmp	r4, #255	; 0xff
 8000d5c:	d113      	bne.n	8000d86 <__lesf2+0x62>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d108      	bne.n	8000d74 <__lesf2+0x50>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d008      	beq.n	8000d78 <__lesf2+0x54>
 8000d66:	4283      	cmp	r3, r0
 8000d68:	d012      	beq.n	8000d90 <__lesf2+0x6c>
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	1e58      	subs	r0, r3, #1
 8000d6e:	4008      	ands	r0, r1
 8000d70:	3801      	subs	r0, #1
 8000d72:	e000      	b.n	8000d76 <__lesf2+0x52>
 8000d74:	2002      	movs	r0, #2
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d1f4      	bne.n	8000d66 <__lesf2+0x42>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d1fa      	bne.n	8000d76 <__lesf2+0x52>
 8000d80:	2001      	movs	r0, #1
 8000d82:	4240      	negs	r0, r0
 8000d84:	e7f7      	b.n	8000d76 <__lesf2+0x52>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d1ed      	bne.n	8000d66 <__lesf2+0x42>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d1eb      	bne.n	8000d66 <__lesf2+0x42>
 8000d8e:	e7ec      	b.n	8000d6a <__lesf2+0x46>
 8000d90:	42a2      	cmp	r2, r4
 8000d92:	dc05      	bgt.n	8000da0 <__lesf2+0x7c>
 8000d94:	dbf2      	blt.n	8000d7c <__lesf2+0x58>
 8000d96:	42b5      	cmp	r5, r6
 8000d98:	d802      	bhi.n	8000da0 <__lesf2+0x7c>
 8000d9a:	d3ef      	bcc.n	8000d7c <__lesf2+0x58>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e7ea      	b.n	8000d76 <__lesf2+0x52>
 8000da0:	4243      	negs	r3, r0
 8000da2:	4158      	adcs	r0, r3
 8000da4:	0040      	lsls	r0, r0, #1
 8000da6:	3801      	subs	r0, #1
 8000da8:	e7e5      	b.n	8000d76 <__lesf2+0x52>
 8000daa:	46c0      	nop			; (mov r8, r8)

08000dac <__aeabi_fmul>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	464f      	mov	r7, r9
 8000db0:	4646      	mov	r6, r8
 8000db2:	46d6      	mov	lr, sl
 8000db4:	0244      	lsls	r4, r0, #9
 8000db6:	0045      	lsls	r5, r0, #1
 8000db8:	b5c0      	push	{r6, r7, lr}
 8000dba:	0a64      	lsrs	r4, r4, #9
 8000dbc:	1c0f      	adds	r7, r1, #0
 8000dbe:	0e2d      	lsrs	r5, r5, #24
 8000dc0:	0fc6      	lsrs	r6, r0, #31
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fmul+0x1c>
 8000dc6:	e08d      	b.n	8000ee4 <__aeabi_fmul+0x138>
 8000dc8:	2dff      	cmp	r5, #255	; 0xff
 8000dca:	d100      	bne.n	8000dce <__aeabi_fmul+0x22>
 8000dcc:	e092      	b.n	8000ef4 <__aeabi_fmul+0x148>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	00e4      	lsls	r4, r4, #3
 8000dd8:	04c0      	lsls	r0, r0, #19
 8000dda:	4304      	orrs	r4, r0
 8000ddc:	3d7f      	subs	r5, #127	; 0x7f
 8000dde:	0278      	lsls	r0, r7, #9
 8000de0:	0a43      	lsrs	r3, r0, #9
 8000de2:	4698      	mov	r8, r3
 8000de4:	007b      	lsls	r3, r7, #1
 8000de6:	0e1b      	lsrs	r3, r3, #24
 8000de8:	0fff      	lsrs	r7, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fmul+0x44>
 8000dee:	e070      	b.n	8000ed2 <__aeabi_fmul+0x126>
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fmul+0x4a>
 8000df4:	e086      	b.n	8000f04 <__aeabi_fmul+0x158>
 8000df6:	4642      	mov	r2, r8
 8000df8:	00d0      	lsls	r0, r2, #3
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	3b7f      	subs	r3, #127	; 0x7f
 8000dfe:	18ed      	adds	r5, r5, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	04d2      	lsls	r2, r2, #19
 8000e04:	4302      	orrs	r2, r0
 8000e06:	4690      	mov	r8, r2
 8000e08:	469c      	mov	ip, r3
 8000e0a:	0031      	movs	r1, r6
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	4079      	eors	r1, r7
 8000e10:	1c68      	adds	r0, r5, #1
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	d81c      	bhi.n	8000e50 <__aeabi_fmul+0xa4>
 8000e16:	4a76      	ldr	r2, [pc, #472]	; (8000ff0 <__aeabi_fmul+0x244>)
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	58d3      	ldr	r3, [r2, r3]
 8000e1c:	469f      	mov	pc, r3
 8000e1e:	0039      	movs	r1, r7
 8000e20:	4644      	mov	r4, r8
 8000e22:	46e2      	mov	sl, ip
 8000e24:	4653      	mov	r3, sl
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d00f      	beq.n	8000e4a <__aeabi_fmul+0x9e>
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fmul+0x84>
 8000e2e:	e0d7      	b.n	8000fe0 <__aeabi_fmul+0x234>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d137      	bne.n	8000ea4 <__aeabi_fmul+0xf8>
 8000e34:	2000      	movs	r0, #0
 8000e36:	2400      	movs	r4, #0
 8000e38:	05c0      	lsls	r0, r0, #23
 8000e3a:	4320      	orrs	r0, r4
 8000e3c:	07c9      	lsls	r1, r1, #31
 8000e3e:	4308      	orrs	r0, r1
 8000e40:	bce0      	pop	{r5, r6, r7}
 8000e42:	46ba      	mov	sl, r7
 8000e44:	46b1      	mov	r9, r6
 8000e46:	46a8      	mov	r8, r5
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	20ff      	movs	r0, #255	; 0xff
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	e7f3      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000e50:	0c26      	lsrs	r6, r4, #16
 8000e52:	0424      	lsls	r4, r4, #16
 8000e54:	0c22      	lsrs	r2, r4, #16
 8000e56:	4644      	mov	r4, r8
 8000e58:	0424      	lsls	r4, r4, #16
 8000e5a:	0c24      	lsrs	r4, r4, #16
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	0027      	movs	r7, r4
 8000e60:	0c1b      	lsrs	r3, r3, #16
 8000e62:	4357      	muls	r7, r2
 8000e64:	4374      	muls	r4, r6
 8000e66:	435a      	muls	r2, r3
 8000e68:	435e      	muls	r6, r3
 8000e6a:	1912      	adds	r2, r2, r4
 8000e6c:	0c3b      	lsrs	r3, r7, #16
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d903      	bls.n	8000e7c <__aeabi_fmul+0xd0>
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0252      	lsls	r2, r2, #9
 8000e78:	4694      	mov	ip, r2
 8000e7a:	4466      	add	r6, ip
 8000e7c:	043f      	lsls	r7, r7, #16
 8000e7e:	041a      	lsls	r2, r3, #16
 8000e80:	0c3f      	lsrs	r7, r7, #16
 8000e82:	19d2      	adds	r2, r2, r7
 8000e84:	0194      	lsls	r4, r2, #6
 8000e86:	1e67      	subs	r7, r4, #1
 8000e88:	41bc      	sbcs	r4, r7
 8000e8a:	0c1b      	lsrs	r3, r3, #16
 8000e8c:	0e92      	lsrs	r2, r2, #26
 8000e8e:	199b      	adds	r3, r3, r6
 8000e90:	4314      	orrs	r4, r2
 8000e92:	019b      	lsls	r3, r3, #6
 8000e94:	431c      	orrs	r4, r3
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	d400      	bmi.n	8000e9c <__aeabi_fmul+0xf0>
 8000e9a:	e09b      	b.n	8000fd4 <__aeabi_fmul+0x228>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	0862      	lsrs	r2, r4, #1
 8000ea0:	401c      	ands	r4, r3
 8000ea2:	4314      	orrs	r4, r2
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	327f      	adds	r2, #127	; 0x7f
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	dd64      	ble.n	8000f76 <__aeabi_fmul+0x1ca>
 8000eac:	0763      	lsls	r3, r4, #29
 8000eae:	d004      	beq.n	8000eba <__aeabi_fmul+0x10e>
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	4023      	ands	r3, r4
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fmul+0x10e>
 8000eb8:	3404      	adds	r4, #4
 8000eba:	0123      	lsls	r3, r4, #4
 8000ebc:	d503      	bpl.n	8000ec6 <__aeabi_fmul+0x11a>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <__aeabi_fmul+0x248>)
 8000ec2:	3280      	adds	r2, #128	; 0x80
 8000ec4:	401c      	ands	r4, r3
 8000ec6:	2afe      	cmp	r2, #254	; 0xfe
 8000ec8:	dcbf      	bgt.n	8000e4a <__aeabi_fmul+0x9e>
 8000eca:	01a4      	lsls	r4, r4, #6
 8000ecc:	0a64      	lsrs	r4, r4, #9
 8000ece:	b2d0      	uxtb	r0, r2
 8000ed0:	e7b2      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d13d      	bne.n	8000f54 <__aeabi_fmul+0x1a8>
 8000ed8:	464a      	mov	r2, r9
 8000eda:	3301      	adds	r3, #1
 8000edc:	431a      	orrs	r2, r3
 8000ede:	4691      	mov	r9, r2
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	e792      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000ee4:	2c00      	cmp	r4, #0
 8000ee6:	d129      	bne.n	8000f3c <__aeabi_fmul+0x190>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	4699      	mov	r9, r3
 8000eec:	3b03      	subs	r3, #3
 8000eee:	2500      	movs	r5, #0
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	e774      	b.n	8000dde <__aeabi_fmul+0x32>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d11b      	bne.n	8000f30 <__aeabi_fmul+0x184>
 8000ef8:	2308      	movs	r3, #8
 8000efa:	4699      	mov	r9, r3
 8000efc:	3b06      	subs	r3, #6
 8000efe:	25ff      	movs	r5, #255	; 0xff
 8000f00:	469a      	mov	sl, r3
 8000f02:	e76c      	b.n	8000dde <__aeabi_fmul+0x32>
 8000f04:	4643      	mov	r3, r8
 8000f06:	35ff      	adds	r5, #255	; 0xff
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10b      	bne.n	8000f24 <__aeabi_fmul+0x178>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	464a      	mov	r2, r9
 8000f10:	431a      	orrs	r2, r3
 8000f12:	4691      	mov	r9, r2
 8000f14:	469c      	mov	ip, r3
 8000f16:	e778      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000f18:	4653      	mov	r3, sl
 8000f1a:	0031      	movs	r1, r6
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fmul+0x176>
 8000f20:	e783      	b.n	8000e2a <__aeabi_fmul+0x7e>
 8000f22:	e792      	b.n	8000e4a <__aeabi_fmul+0x9e>
 8000f24:	2303      	movs	r3, #3
 8000f26:	464a      	mov	r2, r9
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	469c      	mov	ip, r3
 8000f2e:	e76c      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000f30:	230c      	movs	r3, #12
 8000f32:	4699      	mov	r9, r3
 8000f34:	3b09      	subs	r3, #9
 8000f36:	25ff      	movs	r5, #255	; 0xff
 8000f38:	469a      	mov	sl, r3
 8000f3a:	e750      	b.n	8000dde <__aeabi_fmul+0x32>
 8000f3c:	0020      	movs	r0, r4
 8000f3e:	f000 facf 	bl	80014e0 <__clzsi2>
 8000f42:	2576      	movs	r5, #118	; 0x76
 8000f44:	1f43      	subs	r3, r0, #5
 8000f46:	409c      	lsls	r4, r3
 8000f48:	2300      	movs	r3, #0
 8000f4a:	426d      	negs	r5, r5
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	469a      	mov	sl, r3
 8000f50:	1a2d      	subs	r5, r5, r0
 8000f52:	e744      	b.n	8000dde <__aeabi_fmul+0x32>
 8000f54:	4640      	mov	r0, r8
 8000f56:	f000 fac3 	bl	80014e0 <__clzsi2>
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	1f43      	subs	r3, r0, #5
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	2300      	movs	r3, #0
 8000f62:	1a2d      	subs	r5, r5, r0
 8000f64:	4690      	mov	r8, r2
 8000f66:	469c      	mov	ip, r3
 8000f68:	3d76      	subs	r5, #118	; 0x76
 8000f6a:	e74e      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000f6c:	2480      	movs	r4, #128	; 0x80
 8000f6e:	2100      	movs	r1, #0
 8000f70:	20ff      	movs	r0, #255	; 0xff
 8000f72:	03e4      	lsls	r4, r4, #15
 8000f74:	e760      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000f76:	2301      	movs	r3, #1
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	2b1b      	cmp	r3, #27
 8000f7c:	dd00      	ble.n	8000f80 <__aeabi_fmul+0x1d4>
 8000f7e:	e759      	b.n	8000e34 <__aeabi_fmul+0x88>
 8000f80:	0022      	movs	r2, r4
 8000f82:	309e      	adds	r0, #158	; 0x9e
 8000f84:	40da      	lsrs	r2, r3
 8000f86:	4084      	lsls	r4, r0
 8000f88:	0013      	movs	r3, r2
 8000f8a:	1e62      	subs	r2, r4, #1
 8000f8c:	4194      	sbcs	r4, r2
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0763      	lsls	r3, r4, #29
 8000f92:	d004      	beq.n	8000f9e <__aeabi_fmul+0x1f2>
 8000f94:	230f      	movs	r3, #15
 8000f96:	4023      	ands	r3, r4
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fmul+0x1f2>
 8000f9c:	3404      	adds	r4, #4
 8000f9e:	0163      	lsls	r3, r4, #5
 8000fa0:	d51a      	bpl.n	8000fd8 <__aeabi_fmul+0x22c>
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	e747      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	03c0      	lsls	r0, r0, #15
 8000fac:	4204      	tst	r4, r0
 8000fae:	d009      	beq.n	8000fc4 <__aeabi_fmul+0x218>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	4203      	tst	r3, r0
 8000fb4:	d106      	bne.n	8000fc4 <__aeabi_fmul+0x218>
 8000fb6:	4644      	mov	r4, r8
 8000fb8:	4304      	orrs	r4, r0
 8000fba:	0264      	lsls	r4, r4, #9
 8000fbc:	0039      	movs	r1, r7
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a64      	lsrs	r4, r4, #9
 8000fc2:	e739      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fc4:	2080      	movs	r0, #128	; 0x80
 8000fc6:	03c0      	lsls	r0, r0, #15
 8000fc8:	4304      	orrs	r4, r0
 8000fca:	0264      	lsls	r4, r4, #9
 8000fcc:	0031      	movs	r1, r6
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	0a64      	lsrs	r4, r4, #9
 8000fd2:	e731      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	e765      	b.n	8000ea4 <__aeabi_fmul+0xf8>
 8000fd8:	01a4      	lsls	r4, r4, #6
 8000fda:	2000      	movs	r0, #0
 8000fdc:	0a64      	lsrs	r4, r4, #9
 8000fde:	e72b      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	03c0      	lsls	r0, r0, #15
 8000fe4:	4304      	orrs	r4, r0
 8000fe6:	0264      	lsls	r4, r4, #9
 8000fe8:	20ff      	movs	r0, #255	; 0xff
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	e724      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	08015238 	.word	0x08015238
 8000ff4:	f7ffffff 	.word	0xf7ffffff

08000ff8 <__aeabi_fsub>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	46ce      	mov	lr, r9
 8000ffc:	4647      	mov	r7, r8
 8000ffe:	0243      	lsls	r3, r0, #9
 8001000:	0a5b      	lsrs	r3, r3, #9
 8001002:	024e      	lsls	r6, r1, #9
 8001004:	00da      	lsls	r2, r3, #3
 8001006:	4694      	mov	ip, r2
 8001008:	0a72      	lsrs	r2, r6, #9
 800100a:	4691      	mov	r9, r2
 800100c:	0045      	lsls	r5, r0, #1
 800100e:	004a      	lsls	r2, r1, #1
 8001010:	b580      	push	{r7, lr}
 8001012:	0e2d      	lsrs	r5, r5, #24
 8001014:	001f      	movs	r7, r3
 8001016:	0fc4      	lsrs	r4, r0, #31
 8001018:	0e12      	lsrs	r2, r2, #24
 800101a:	0fc9      	lsrs	r1, r1, #31
 800101c:	09b6      	lsrs	r6, r6, #6
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d05b      	beq.n	80010da <__aeabi_fsub+0xe2>
 8001022:	2001      	movs	r0, #1
 8001024:	4041      	eors	r1, r0
 8001026:	428c      	cmp	r4, r1
 8001028:	d039      	beq.n	800109e <__aeabi_fsub+0xa6>
 800102a:	1aa8      	subs	r0, r5, r2
 800102c:	2800      	cmp	r0, #0
 800102e:	dd5a      	ble.n	80010e6 <__aeabi_fsub+0xee>
 8001030:	2a00      	cmp	r2, #0
 8001032:	d06a      	beq.n	800110a <__aeabi_fsub+0x112>
 8001034:	2dff      	cmp	r5, #255	; 0xff
 8001036:	d100      	bne.n	800103a <__aeabi_fsub+0x42>
 8001038:	e0d9      	b.n	80011ee <__aeabi_fsub+0x1f6>
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	04d2      	lsls	r2, r2, #19
 800103e:	4316      	orrs	r6, r2
 8001040:	281b      	cmp	r0, #27
 8001042:	dc00      	bgt.n	8001046 <__aeabi_fsub+0x4e>
 8001044:	e0e9      	b.n	800121a <__aeabi_fsub+0x222>
 8001046:	2001      	movs	r0, #1
 8001048:	4663      	mov	r3, ip
 800104a:	1a18      	subs	r0, r3, r0
 800104c:	0143      	lsls	r3, r0, #5
 800104e:	d400      	bmi.n	8001052 <__aeabi_fsub+0x5a>
 8001050:	e0b4      	b.n	80011bc <__aeabi_fsub+0x1c4>
 8001052:	0180      	lsls	r0, r0, #6
 8001054:	0987      	lsrs	r7, r0, #6
 8001056:	0038      	movs	r0, r7
 8001058:	f000 fa42 	bl	80014e0 <__clzsi2>
 800105c:	3805      	subs	r0, #5
 800105e:	4087      	lsls	r7, r0
 8001060:	4285      	cmp	r5, r0
 8001062:	dc00      	bgt.n	8001066 <__aeabi_fsub+0x6e>
 8001064:	e0cc      	b.n	8001200 <__aeabi_fsub+0x208>
 8001066:	1a2d      	subs	r5, r5, r0
 8001068:	48b5      	ldr	r0, [pc, #724]	; (8001340 <__aeabi_fsub+0x348>)
 800106a:	4038      	ands	r0, r7
 800106c:	0743      	lsls	r3, r0, #29
 800106e:	d004      	beq.n	800107a <__aeabi_fsub+0x82>
 8001070:	230f      	movs	r3, #15
 8001072:	4003      	ands	r3, r0
 8001074:	2b04      	cmp	r3, #4
 8001076:	d000      	beq.n	800107a <__aeabi_fsub+0x82>
 8001078:	3004      	adds	r0, #4
 800107a:	0143      	lsls	r3, r0, #5
 800107c:	d400      	bmi.n	8001080 <__aeabi_fsub+0x88>
 800107e:	e0a0      	b.n	80011c2 <__aeabi_fsub+0x1ca>
 8001080:	1c6a      	adds	r2, r5, #1
 8001082:	2dfe      	cmp	r5, #254	; 0xfe
 8001084:	d100      	bne.n	8001088 <__aeabi_fsub+0x90>
 8001086:	e08d      	b.n	80011a4 <__aeabi_fsub+0x1ac>
 8001088:	0180      	lsls	r0, r0, #6
 800108a:	0a47      	lsrs	r7, r0, #9
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	05d0      	lsls	r0, r2, #23
 8001090:	4338      	orrs	r0, r7
 8001092:	07e4      	lsls	r4, r4, #31
 8001094:	4320      	orrs	r0, r4
 8001096:	bcc0      	pop	{r6, r7}
 8001098:	46b9      	mov	r9, r7
 800109a:	46b0      	mov	r8, r6
 800109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800109e:	1aa8      	subs	r0, r5, r2
 80010a0:	4680      	mov	r8, r0
 80010a2:	2800      	cmp	r0, #0
 80010a4:	dd45      	ble.n	8001132 <__aeabi_fsub+0x13a>
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d070      	beq.n	800118c <__aeabi_fsub+0x194>
 80010aa:	2dff      	cmp	r5, #255	; 0xff
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0xb8>
 80010ae:	e09e      	b.n	80011ee <__aeabi_fsub+0x1f6>
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	04db      	lsls	r3, r3, #19
 80010b4:	431e      	orrs	r6, r3
 80010b6:	4643      	mov	r3, r8
 80010b8:	2b1b      	cmp	r3, #27
 80010ba:	dc00      	bgt.n	80010be <__aeabi_fsub+0xc6>
 80010bc:	e0d2      	b.n	8001264 <__aeabi_fsub+0x26c>
 80010be:	2001      	movs	r0, #1
 80010c0:	4460      	add	r0, ip
 80010c2:	0143      	lsls	r3, r0, #5
 80010c4:	d57a      	bpl.n	80011bc <__aeabi_fsub+0x1c4>
 80010c6:	3501      	adds	r5, #1
 80010c8:	2dff      	cmp	r5, #255	; 0xff
 80010ca:	d06b      	beq.n	80011a4 <__aeabi_fsub+0x1ac>
 80010cc:	2301      	movs	r3, #1
 80010ce:	4a9d      	ldr	r2, [pc, #628]	; (8001344 <__aeabi_fsub+0x34c>)
 80010d0:	4003      	ands	r3, r0
 80010d2:	0840      	lsrs	r0, r0, #1
 80010d4:	4010      	ands	r0, r2
 80010d6:	4318      	orrs	r0, r3
 80010d8:	e7c8      	b.n	800106c <__aeabi_fsub+0x74>
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d020      	beq.n	8001120 <__aeabi_fsub+0x128>
 80010de:	428c      	cmp	r4, r1
 80010e0:	d023      	beq.n	800112a <__aeabi_fsub+0x132>
 80010e2:	0028      	movs	r0, r5
 80010e4:	38ff      	subs	r0, #255	; 0xff
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d039      	beq.n	800115e <__aeabi_fsub+0x166>
 80010ea:	1b57      	subs	r7, r2, r5
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	d000      	beq.n	80010f2 <__aeabi_fsub+0xfa>
 80010f0:	e09d      	b.n	800122e <__aeabi_fsub+0x236>
 80010f2:	4663      	mov	r3, ip
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x102>
 80010f8:	e0db      	b.n	80012b2 <__aeabi_fsub+0x2ba>
 80010fa:	1e7b      	subs	r3, r7, #1
 80010fc:	2f01      	cmp	r7, #1
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x10a>
 8001100:	e10d      	b.n	800131e <__aeabi_fsub+0x326>
 8001102:	2fff      	cmp	r7, #255	; 0xff
 8001104:	d071      	beq.n	80011ea <__aeabi_fsub+0x1f2>
 8001106:	001f      	movs	r7, r3
 8001108:	e098      	b.n	800123c <__aeabi_fsub+0x244>
 800110a:	2e00      	cmp	r6, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x118>
 800110e:	e0a7      	b.n	8001260 <__aeabi_fsub+0x268>
 8001110:	1e42      	subs	r2, r0, #1
 8001112:	2801      	cmp	r0, #1
 8001114:	d100      	bne.n	8001118 <__aeabi_fsub+0x120>
 8001116:	e0e6      	b.n	80012e6 <__aeabi_fsub+0x2ee>
 8001118:	28ff      	cmp	r0, #255	; 0xff
 800111a:	d068      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 800111c:	0010      	movs	r0, r2
 800111e:	e78f      	b.n	8001040 <__aeabi_fsub+0x48>
 8001120:	2001      	movs	r0, #1
 8001122:	4041      	eors	r1, r0
 8001124:	42a1      	cmp	r1, r4
 8001126:	d000      	beq.n	800112a <__aeabi_fsub+0x132>
 8001128:	e77f      	b.n	800102a <__aeabi_fsub+0x32>
 800112a:	20ff      	movs	r0, #255	; 0xff
 800112c:	4240      	negs	r0, r0
 800112e:	4680      	mov	r8, r0
 8001130:	44a8      	add	r8, r5
 8001132:	4640      	mov	r0, r8
 8001134:	2800      	cmp	r0, #0
 8001136:	d038      	beq.n	80011aa <__aeabi_fsub+0x1b2>
 8001138:	1b51      	subs	r1, r2, r5
 800113a:	2d00      	cmp	r5, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x148>
 800113e:	e0ae      	b.n	800129e <__aeabi_fsub+0x2a6>
 8001140:	2aff      	cmp	r2, #255	; 0xff
 8001142:	d100      	bne.n	8001146 <__aeabi_fsub+0x14e>
 8001144:	e0df      	b.n	8001306 <__aeabi_fsub+0x30e>
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	4660      	mov	r0, ip
 800114a:	04db      	lsls	r3, r3, #19
 800114c:	4318      	orrs	r0, r3
 800114e:	4684      	mov	ip, r0
 8001150:	291b      	cmp	r1, #27
 8001152:	dc00      	bgt.n	8001156 <__aeabi_fsub+0x15e>
 8001154:	e0d9      	b.n	800130a <__aeabi_fsub+0x312>
 8001156:	2001      	movs	r0, #1
 8001158:	0015      	movs	r5, r2
 800115a:	1980      	adds	r0, r0, r6
 800115c:	e7b1      	b.n	80010c2 <__aeabi_fsub+0xca>
 800115e:	20fe      	movs	r0, #254	; 0xfe
 8001160:	1c6a      	adds	r2, r5, #1
 8001162:	4210      	tst	r0, r2
 8001164:	d171      	bne.n	800124a <__aeabi_fsub+0x252>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x174>
 800116a:	e0a6      	b.n	80012ba <__aeabi_fsub+0x2c2>
 800116c:	4663      	mov	r3, ip
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <__aeabi_fsub+0x17c>
 8001172:	e0d9      	b.n	8001328 <__aeabi_fsub+0x330>
 8001174:	2200      	movs	r2, #0
 8001176:	2e00      	cmp	r6, #0
 8001178:	d100      	bne.n	800117c <__aeabi_fsub+0x184>
 800117a:	e788      	b.n	800108e <__aeabi_fsub+0x96>
 800117c:	1b98      	subs	r0, r3, r6
 800117e:	0143      	lsls	r3, r0, #5
 8001180:	d400      	bmi.n	8001184 <__aeabi_fsub+0x18c>
 8001182:	e0e1      	b.n	8001348 <__aeabi_fsub+0x350>
 8001184:	4663      	mov	r3, ip
 8001186:	000c      	movs	r4, r1
 8001188:	1af0      	subs	r0, r6, r3
 800118a:	e76f      	b.n	800106c <__aeabi_fsub+0x74>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_fsub+0x19a>
 8001190:	e0b7      	b.n	8001302 <__aeabi_fsub+0x30a>
 8001192:	0002      	movs	r2, r0
 8001194:	3a01      	subs	r2, #1
 8001196:	2801      	cmp	r0, #1
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x1a4>
 800119a:	e09c      	b.n	80012d6 <__aeabi_fsub+0x2de>
 800119c:	28ff      	cmp	r0, #255	; 0xff
 800119e:	d026      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011a0:	4690      	mov	r8, r2
 80011a2:	e788      	b.n	80010b6 <__aeabi_fsub+0xbe>
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	2700      	movs	r7, #0
 80011a8:	e771      	b.n	800108e <__aeabi_fsub+0x96>
 80011aa:	20fe      	movs	r0, #254	; 0xfe
 80011ac:	1c6a      	adds	r2, r5, #1
 80011ae:	4210      	tst	r0, r2
 80011b0:	d064      	beq.n	800127c <__aeabi_fsub+0x284>
 80011b2:	2aff      	cmp	r2, #255	; 0xff
 80011b4:	d0f6      	beq.n	80011a4 <__aeabi_fsub+0x1ac>
 80011b6:	0015      	movs	r5, r2
 80011b8:	4466      	add	r6, ip
 80011ba:	0870      	lsrs	r0, r6, #1
 80011bc:	0743      	lsls	r3, r0, #29
 80011be:	d000      	beq.n	80011c2 <__aeabi_fsub+0x1ca>
 80011c0:	e756      	b.n	8001070 <__aeabi_fsub+0x78>
 80011c2:	08c3      	lsrs	r3, r0, #3
 80011c4:	2dff      	cmp	r5, #255	; 0xff
 80011c6:	d012      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011c8:	025b      	lsls	r3, r3, #9
 80011ca:	0a5f      	lsrs	r7, r3, #9
 80011cc:	b2ea      	uxtb	r2, r5
 80011ce:	e75e      	b.n	800108e <__aeabi_fsub+0x96>
 80011d0:	4662      	mov	r2, ip
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_fsub+0x1e0>
 80011d6:	e096      	b.n	8001306 <__aeabi_fsub+0x30e>
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d008      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	03d2      	lsls	r2, r2, #15
 80011e0:	4213      	tst	r3, r2
 80011e2:	d004      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011e4:	4648      	mov	r0, r9
 80011e6:	4210      	tst	r0, r2
 80011e8:	d101      	bne.n	80011ee <__aeabi_fsub+0x1f6>
 80011ea:	000c      	movs	r4, r1
 80011ec:	464b      	mov	r3, r9
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0d8      	beq.n	80011a4 <__aeabi_fsub+0x1ac>
 80011f2:	2780      	movs	r7, #128	; 0x80
 80011f4:	03ff      	lsls	r7, r7, #15
 80011f6:	431f      	orrs	r7, r3
 80011f8:	027f      	lsls	r7, r7, #9
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	0a7f      	lsrs	r7, r7, #9
 80011fe:	e746      	b.n	800108e <__aeabi_fsub+0x96>
 8001200:	2320      	movs	r3, #32
 8001202:	003a      	movs	r2, r7
 8001204:	1b45      	subs	r5, r0, r5
 8001206:	0038      	movs	r0, r7
 8001208:	3501      	adds	r5, #1
 800120a:	40ea      	lsrs	r2, r5
 800120c:	1b5d      	subs	r5, r3, r5
 800120e:	40a8      	lsls	r0, r5
 8001210:	1e43      	subs	r3, r0, #1
 8001212:	4198      	sbcs	r0, r3
 8001214:	2500      	movs	r5, #0
 8001216:	4310      	orrs	r0, r2
 8001218:	e728      	b.n	800106c <__aeabi_fsub+0x74>
 800121a:	2320      	movs	r3, #32
 800121c:	1a1b      	subs	r3, r3, r0
 800121e:	0032      	movs	r2, r6
 8001220:	409e      	lsls	r6, r3
 8001222:	40c2      	lsrs	r2, r0
 8001224:	0030      	movs	r0, r6
 8001226:	1e43      	subs	r3, r0, #1
 8001228:	4198      	sbcs	r0, r3
 800122a:	4310      	orrs	r0, r2
 800122c:	e70c      	b.n	8001048 <__aeabi_fsub+0x50>
 800122e:	2aff      	cmp	r2, #255	; 0xff
 8001230:	d0db      	beq.n	80011ea <__aeabi_fsub+0x1f2>
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	4660      	mov	r0, ip
 8001236:	04db      	lsls	r3, r3, #19
 8001238:	4318      	orrs	r0, r3
 800123a:	4684      	mov	ip, r0
 800123c:	2f1b      	cmp	r7, #27
 800123e:	dd56      	ble.n	80012ee <__aeabi_fsub+0x2f6>
 8001240:	2001      	movs	r0, #1
 8001242:	000c      	movs	r4, r1
 8001244:	0015      	movs	r5, r2
 8001246:	1a30      	subs	r0, r6, r0
 8001248:	e700      	b.n	800104c <__aeabi_fsub+0x54>
 800124a:	4663      	mov	r3, ip
 800124c:	1b9f      	subs	r7, r3, r6
 800124e:	017b      	lsls	r3, r7, #5
 8001250:	d43d      	bmi.n	80012ce <__aeabi_fsub+0x2d6>
 8001252:	2f00      	cmp	r7, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x260>
 8001256:	e6fe      	b.n	8001056 <__aeabi_fsub+0x5e>
 8001258:	2400      	movs	r4, #0
 800125a:	2200      	movs	r2, #0
 800125c:	2700      	movs	r7, #0
 800125e:	e716      	b.n	800108e <__aeabi_fsub+0x96>
 8001260:	0005      	movs	r5, r0
 8001262:	e7af      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 8001264:	0032      	movs	r2, r6
 8001266:	4643      	mov	r3, r8
 8001268:	4641      	mov	r1, r8
 800126a:	40da      	lsrs	r2, r3
 800126c:	2320      	movs	r3, #32
 800126e:	1a5b      	subs	r3, r3, r1
 8001270:	409e      	lsls	r6, r3
 8001272:	0030      	movs	r0, r6
 8001274:	1e43      	subs	r3, r0, #1
 8001276:	4198      	sbcs	r0, r3
 8001278:	4310      	orrs	r0, r2
 800127a:	e721      	b.n	80010c0 <__aeabi_fsub+0xc8>
 800127c:	2d00      	cmp	r5, #0
 800127e:	d1a7      	bne.n	80011d0 <__aeabi_fsub+0x1d8>
 8001280:	4663      	mov	r3, ip
 8001282:	2b00      	cmp	r3, #0
 8001284:	d059      	beq.n	800133a <__aeabi_fsub+0x342>
 8001286:	2200      	movs	r2, #0
 8001288:	2e00      	cmp	r6, #0
 800128a:	d100      	bne.n	800128e <__aeabi_fsub+0x296>
 800128c:	e6ff      	b.n	800108e <__aeabi_fsub+0x96>
 800128e:	0030      	movs	r0, r6
 8001290:	4460      	add	r0, ip
 8001292:	0143      	lsls	r3, r0, #5
 8001294:	d592      	bpl.n	80011bc <__aeabi_fsub+0x1c4>
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <__aeabi_fsub+0x348>)
 8001298:	3501      	adds	r5, #1
 800129a:	4018      	ands	r0, r3
 800129c:	e78e      	b.n	80011bc <__aeabi_fsub+0x1c4>
 800129e:	4663      	mov	r3, ip
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d047      	beq.n	8001334 <__aeabi_fsub+0x33c>
 80012a4:	1e4b      	subs	r3, r1, #1
 80012a6:	2901      	cmp	r1, #1
 80012a8:	d015      	beq.n	80012d6 <__aeabi_fsub+0x2de>
 80012aa:	29ff      	cmp	r1, #255	; 0xff
 80012ac:	d02b      	beq.n	8001306 <__aeabi_fsub+0x30e>
 80012ae:	0019      	movs	r1, r3
 80012b0:	e74e      	b.n	8001150 <__aeabi_fsub+0x158>
 80012b2:	000c      	movs	r4, r1
 80012b4:	464b      	mov	r3, r9
 80012b6:	003d      	movs	r5, r7
 80012b8:	e784      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 80012ba:	4662      	mov	r2, ip
 80012bc:	2a00      	cmp	r2, #0
 80012be:	d18b      	bne.n	80011d8 <__aeabi_fsub+0x1e0>
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d192      	bne.n	80011ea <__aeabi_fsub+0x1f2>
 80012c4:	2780      	movs	r7, #128	; 0x80
 80012c6:	2400      	movs	r4, #0
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	03ff      	lsls	r7, r7, #15
 80012cc:	e6df      	b.n	800108e <__aeabi_fsub+0x96>
 80012ce:	4663      	mov	r3, ip
 80012d0:	000c      	movs	r4, r1
 80012d2:	1af7      	subs	r7, r6, r3
 80012d4:	e6bf      	b.n	8001056 <__aeabi_fsub+0x5e>
 80012d6:	0030      	movs	r0, r6
 80012d8:	4460      	add	r0, ip
 80012da:	2501      	movs	r5, #1
 80012dc:	0143      	lsls	r3, r0, #5
 80012de:	d400      	bmi.n	80012e2 <__aeabi_fsub+0x2ea>
 80012e0:	e76c      	b.n	80011bc <__aeabi_fsub+0x1c4>
 80012e2:	2502      	movs	r5, #2
 80012e4:	e6f2      	b.n	80010cc <__aeabi_fsub+0xd4>
 80012e6:	4663      	mov	r3, ip
 80012e8:	2501      	movs	r5, #1
 80012ea:	1b98      	subs	r0, r3, r6
 80012ec:	e6ae      	b.n	800104c <__aeabi_fsub+0x54>
 80012ee:	2320      	movs	r3, #32
 80012f0:	4664      	mov	r4, ip
 80012f2:	4660      	mov	r0, ip
 80012f4:	40fc      	lsrs	r4, r7
 80012f6:	1bdf      	subs	r7, r3, r7
 80012f8:	40b8      	lsls	r0, r7
 80012fa:	1e43      	subs	r3, r0, #1
 80012fc:	4198      	sbcs	r0, r3
 80012fe:	4320      	orrs	r0, r4
 8001300:	e79f      	b.n	8001242 <__aeabi_fsub+0x24a>
 8001302:	0005      	movs	r5, r0
 8001304:	e75e      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 8001306:	464b      	mov	r3, r9
 8001308:	e771      	b.n	80011ee <__aeabi_fsub+0x1f6>
 800130a:	2320      	movs	r3, #32
 800130c:	4665      	mov	r5, ip
 800130e:	4660      	mov	r0, ip
 8001310:	40cd      	lsrs	r5, r1
 8001312:	1a59      	subs	r1, r3, r1
 8001314:	4088      	lsls	r0, r1
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	4198      	sbcs	r0, r3
 800131a:	4328      	orrs	r0, r5
 800131c:	e71c      	b.n	8001158 <__aeabi_fsub+0x160>
 800131e:	4663      	mov	r3, ip
 8001320:	000c      	movs	r4, r1
 8001322:	2501      	movs	r5, #1
 8001324:	1af0      	subs	r0, r6, r3
 8001326:	e691      	b.n	800104c <__aeabi_fsub+0x54>
 8001328:	2e00      	cmp	r6, #0
 800132a:	d095      	beq.n	8001258 <__aeabi_fsub+0x260>
 800132c:	000c      	movs	r4, r1
 800132e:	464f      	mov	r7, r9
 8001330:	2200      	movs	r2, #0
 8001332:	e6ac      	b.n	800108e <__aeabi_fsub+0x96>
 8001334:	464b      	mov	r3, r9
 8001336:	000d      	movs	r5, r1
 8001338:	e744      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 800133a:	464f      	mov	r7, r9
 800133c:	2200      	movs	r2, #0
 800133e:	e6a6      	b.n	800108e <__aeabi_fsub+0x96>
 8001340:	fbffffff 	.word	0xfbffffff
 8001344:	7dffffff 	.word	0x7dffffff
 8001348:	2800      	cmp	r0, #0
 800134a:	d000      	beq.n	800134e <__aeabi_fsub+0x356>
 800134c:	e736      	b.n	80011bc <__aeabi_fsub+0x1c4>
 800134e:	2400      	movs	r4, #0
 8001350:	2700      	movs	r7, #0
 8001352:	e69c      	b.n	800108e <__aeabi_fsub+0x96>

08001354 <__aeabi_fcmpun>:
 8001354:	0243      	lsls	r3, r0, #9
 8001356:	024a      	lsls	r2, r1, #9
 8001358:	0040      	lsls	r0, r0, #1
 800135a:	0049      	lsls	r1, r1, #1
 800135c:	0a5b      	lsrs	r3, r3, #9
 800135e:	0a52      	lsrs	r2, r2, #9
 8001360:	0e09      	lsrs	r1, r1, #24
 8001362:	0e00      	lsrs	r0, r0, #24
 8001364:	28ff      	cmp	r0, #255	; 0xff
 8001366:	d006      	beq.n	8001376 <__aeabi_fcmpun+0x22>
 8001368:	2000      	movs	r0, #0
 800136a:	29ff      	cmp	r1, #255	; 0xff
 800136c:	d102      	bne.n	8001374 <__aeabi_fcmpun+0x20>
 800136e:	1e53      	subs	r3, r2, #1
 8001370:	419a      	sbcs	r2, r3
 8001372:	0010      	movs	r0, r2
 8001374:	4770      	bx	lr
 8001376:	38fe      	subs	r0, #254	; 0xfe
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1fb      	bne.n	8001374 <__aeabi_fcmpun+0x20>
 800137c:	e7f4      	b.n	8001368 <__aeabi_fcmpun+0x14>
 800137e:	46c0      	nop			; (mov r8, r8)

08001380 <__aeabi_f2iz>:
 8001380:	0241      	lsls	r1, r0, #9
 8001382:	0042      	lsls	r2, r0, #1
 8001384:	0fc3      	lsrs	r3, r0, #31
 8001386:	0a49      	lsrs	r1, r1, #9
 8001388:	2000      	movs	r0, #0
 800138a:	0e12      	lsrs	r2, r2, #24
 800138c:	2a7e      	cmp	r2, #126	; 0x7e
 800138e:	dd03      	ble.n	8001398 <__aeabi_f2iz+0x18>
 8001390:	2a9d      	cmp	r2, #157	; 0x9d
 8001392:	dd02      	ble.n	800139a <__aeabi_f2iz+0x1a>
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <__aeabi_f2iz+0x3c>)
 8001396:	1898      	adds	r0, r3, r2
 8001398:	4770      	bx	lr
 800139a:	2080      	movs	r0, #128	; 0x80
 800139c:	0400      	lsls	r0, r0, #16
 800139e:	4301      	orrs	r1, r0
 80013a0:	2a95      	cmp	r2, #149	; 0x95
 80013a2:	dc07      	bgt.n	80013b4 <__aeabi_f2iz+0x34>
 80013a4:	2096      	movs	r0, #150	; 0x96
 80013a6:	1a82      	subs	r2, r0, r2
 80013a8:	40d1      	lsrs	r1, r2
 80013aa:	4248      	negs	r0, r1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f3      	bne.n	8001398 <__aeabi_f2iz+0x18>
 80013b0:	0008      	movs	r0, r1
 80013b2:	e7f1      	b.n	8001398 <__aeabi_f2iz+0x18>
 80013b4:	3a96      	subs	r2, #150	; 0x96
 80013b6:	4091      	lsls	r1, r2
 80013b8:	e7f7      	b.n	80013aa <__aeabi_f2iz+0x2a>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	7fffffff 	.word	0x7fffffff

080013c0 <__aeabi_i2f>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d013      	beq.n	80013ee <__aeabi_i2f+0x2e>
 80013c6:	17c3      	asrs	r3, r0, #31
 80013c8:	18c6      	adds	r6, r0, r3
 80013ca:	405e      	eors	r6, r3
 80013cc:	0fc4      	lsrs	r4, r0, #31
 80013ce:	0030      	movs	r0, r6
 80013d0:	f000 f886 	bl	80014e0 <__clzsi2>
 80013d4:	239e      	movs	r3, #158	; 0x9e
 80013d6:	0005      	movs	r5, r0
 80013d8:	1a1b      	subs	r3, r3, r0
 80013da:	2b96      	cmp	r3, #150	; 0x96
 80013dc:	dc0f      	bgt.n	80013fe <__aeabi_i2f+0x3e>
 80013de:	2808      	cmp	r0, #8
 80013e0:	dd01      	ble.n	80013e6 <__aeabi_i2f+0x26>
 80013e2:	3d08      	subs	r5, #8
 80013e4:	40ae      	lsls	r6, r5
 80013e6:	0276      	lsls	r6, r6, #9
 80013e8:	0a76      	lsrs	r6, r6, #9
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	e002      	b.n	80013f4 <__aeabi_i2f+0x34>
 80013ee:	2400      	movs	r4, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	2600      	movs	r6, #0
 80013f4:	05c0      	lsls	r0, r0, #23
 80013f6:	4330      	orrs	r0, r6
 80013f8:	07e4      	lsls	r4, r4, #31
 80013fa:	4320      	orrs	r0, r4
 80013fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013fe:	2b99      	cmp	r3, #153	; 0x99
 8001400:	dd0c      	ble.n	800141c <__aeabi_i2f+0x5c>
 8001402:	2205      	movs	r2, #5
 8001404:	0031      	movs	r1, r6
 8001406:	1a12      	subs	r2, r2, r0
 8001408:	40d1      	lsrs	r1, r2
 800140a:	000a      	movs	r2, r1
 800140c:	0001      	movs	r1, r0
 800140e:	0030      	movs	r0, r6
 8001410:	311b      	adds	r1, #27
 8001412:	4088      	lsls	r0, r1
 8001414:	1e41      	subs	r1, r0, #1
 8001416:	4188      	sbcs	r0, r1
 8001418:	4302      	orrs	r2, r0
 800141a:	0016      	movs	r6, r2
 800141c:	2d05      	cmp	r5, #5
 800141e:	dc12      	bgt.n	8001446 <__aeabi_i2f+0x86>
 8001420:	0031      	movs	r1, r6
 8001422:	4f0d      	ldr	r7, [pc, #52]	; (8001458 <__aeabi_i2f+0x98>)
 8001424:	4039      	ands	r1, r7
 8001426:	0772      	lsls	r2, r6, #29
 8001428:	d009      	beq.n	800143e <__aeabi_i2f+0x7e>
 800142a:	200f      	movs	r0, #15
 800142c:	4030      	ands	r0, r6
 800142e:	2804      	cmp	r0, #4
 8001430:	d005      	beq.n	800143e <__aeabi_i2f+0x7e>
 8001432:	3104      	adds	r1, #4
 8001434:	014a      	lsls	r2, r1, #5
 8001436:	d502      	bpl.n	800143e <__aeabi_i2f+0x7e>
 8001438:	239f      	movs	r3, #159	; 0x9f
 800143a:	4039      	ands	r1, r7
 800143c:	1b5b      	subs	r3, r3, r5
 800143e:	0189      	lsls	r1, r1, #6
 8001440:	0a4e      	lsrs	r6, r1, #9
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	e7d6      	b.n	80013f4 <__aeabi_i2f+0x34>
 8001446:	1f6a      	subs	r2, r5, #5
 8001448:	4096      	lsls	r6, r2
 800144a:	0031      	movs	r1, r6
 800144c:	4f02      	ldr	r7, [pc, #8]	; (8001458 <__aeabi_i2f+0x98>)
 800144e:	4039      	ands	r1, r7
 8001450:	0772      	lsls	r2, r6, #29
 8001452:	d0f4      	beq.n	800143e <__aeabi_i2f+0x7e>
 8001454:	e7e9      	b.n	800142a <__aeabi_i2f+0x6a>
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff

0800145c <__aeabi_ui2f>:
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	1e05      	subs	r5, r0, #0
 8001460:	d00e      	beq.n	8001480 <__aeabi_ui2f+0x24>
 8001462:	f000 f83d 	bl	80014e0 <__clzsi2>
 8001466:	239e      	movs	r3, #158	; 0x9e
 8001468:	0004      	movs	r4, r0
 800146a:	1a1b      	subs	r3, r3, r0
 800146c:	2b96      	cmp	r3, #150	; 0x96
 800146e:	dc0c      	bgt.n	800148a <__aeabi_ui2f+0x2e>
 8001470:	2808      	cmp	r0, #8
 8001472:	dd01      	ble.n	8001478 <__aeabi_ui2f+0x1c>
 8001474:	3c08      	subs	r4, #8
 8001476:	40a5      	lsls	r5, r4
 8001478:	026d      	lsls	r5, r5, #9
 800147a:	0a6d      	lsrs	r5, r5, #9
 800147c:	b2d8      	uxtb	r0, r3
 800147e:	e001      	b.n	8001484 <__aeabi_ui2f+0x28>
 8001480:	2000      	movs	r0, #0
 8001482:	2500      	movs	r5, #0
 8001484:	05c0      	lsls	r0, r0, #23
 8001486:	4328      	orrs	r0, r5
 8001488:	bd70      	pop	{r4, r5, r6, pc}
 800148a:	2b99      	cmp	r3, #153	; 0x99
 800148c:	dd09      	ble.n	80014a2 <__aeabi_ui2f+0x46>
 800148e:	0002      	movs	r2, r0
 8001490:	0029      	movs	r1, r5
 8001492:	321b      	adds	r2, #27
 8001494:	4091      	lsls	r1, r2
 8001496:	1e4a      	subs	r2, r1, #1
 8001498:	4191      	sbcs	r1, r2
 800149a:	2205      	movs	r2, #5
 800149c:	1a12      	subs	r2, r2, r0
 800149e:	40d5      	lsrs	r5, r2
 80014a0:	430d      	orrs	r5, r1
 80014a2:	2c05      	cmp	r4, #5
 80014a4:	dc12      	bgt.n	80014cc <__aeabi_ui2f+0x70>
 80014a6:	0029      	movs	r1, r5
 80014a8:	4e0c      	ldr	r6, [pc, #48]	; (80014dc <__aeabi_ui2f+0x80>)
 80014aa:	4031      	ands	r1, r6
 80014ac:	076a      	lsls	r2, r5, #29
 80014ae:	d009      	beq.n	80014c4 <__aeabi_ui2f+0x68>
 80014b0:	200f      	movs	r0, #15
 80014b2:	4028      	ands	r0, r5
 80014b4:	2804      	cmp	r0, #4
 80014b6:	d005      	beq.n	80014c4 <__aeabi_ui2f+0x68>
 80014b8:	3104      	adds	r1, #4
 80014ba:	014a      	lsls	r2, r1, #5
 80014bc:	d502      	bpl.n	80014c4 <__aeabi_ui2f+0x68>
 80014be:	239f      	movs	r3, #159	; 0x9f
 80014c0:	4031      	ands	r1, r6
 80014c2:	1b1b      	subs	r3, r3, r4
 80014c4:	0189      	lsls	r1, r1, #6
 80014c6:	0a4d      	lsrs	r5, r1, #9
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	e7db      	b.n	8001484 <__aeabi_ui2f+0x28>
 80014cc:	1f62      	subs	r2, r4, #5
 80014ce:	4095      	lsls	r5, r2
 80014d0:	0029      	movs	r1, r5
 80014d2:	4e02      	ldr	r6, [pc, #8]	; (80014dc <__aeabi_ui2f+0x80>)
 80014d4:	4031      	ands	r1, r6
 80014d6:	076a      	lsls	r2, r5, #29
 80014d8:	d0f4      	beq.n	80014c4 <__aeabi_ui2f+0x68>
 80014da:	e7e9      	b.n	80014b0 <__aeabi_ui2f+0x54>
 80014dc:	fbffffff 	.word	0xfbffffff

080014e0 <__clzsi2>:
 80014e0:	211c      	movs	r1, #28
 80014e2:	2301      	movs	r3, #1
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	4298      	cmp	r0, r3
 80014e8:	d301      	bcc.n	80014ee <__clzsi2+0xe>
 80014ea:	0c00      	lsrs	r0, r0, #16
 80014ec:	3910      	subs	r1, #16
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	4298      	cmp	r0, r3
 80014f2:	d301      	bcc.n	80014f8 <__clzsi2+0x18>
 80014f4:	0a00      	lsrs	r0, r0, #8
 80014f6:	3908      	subs	r1, #8
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d301      	bcc.n	8001502 <__clzsi2+0x22>
 80014fe:	0900      	lsrs	r0, r0, #4
 8001500:	3904      	subs	r1, #4
 8001502:	a202      	add	r2, pc, #8	; (adr r2, 800150c <__clzsi2+0x2c>)
 8001504:	5c10      	ldrb	r0, [r2, r0]
 8001506:	1840      	adds	r0, r0, r1
 8001508:	4770      	bx	lr
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	02020304 	.word	0x02020304
 8001510:	01010101 	.word	0x01010101
	...

0800151c <__clzdi2>:
 800151c:	b510      	push	{r4, lr}
 800151e:	2900      	cmp	r1, #0
 8001520:	d103      	bne.n	800152a <__clzdi2+0xe>
 8001522:	f7ff ffdd 	bl	80014e0 <__clzsi2>
 8001526:	3020      	adds	r0, #32
 8001528:	e002      	b.n	8001530 <__clzdi2+0x14>
 800152a:	0008      	movs	r0, r1
 800152c:	f7ff ffd8 	bl	80014e0 <__clzsi2>
 8001530:	bd10      	pop	{r4, pc}
 8001532:	46c0      	nop			; (mov r8, r8)

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153a:	f008 fb81 	bl	8009c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153e:	f000 f81b 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001542:	f000 f93b 	bl	80017bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001546:	f000 f91b 	bl	8001780 <MX_DMA_Init>
  MX_CRC_Init();
 800154a:	f000 f891 	bl	8001670 <MX_CRC_Init>
  MX_RTC_Init();
 800154e:	f000 f8b3 	bl	80016b8 <MX_RTC_Init>
  MX_MEMS_Init();
 8001552:	f00c fb66 	bl	800dc22 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    SD = MX_MEMS_Process();
 8001556:	4c07      	ldr	r4, [pc, #28]	; (8001574 <main+0x40>)
 8001558:	003b      	movs	r3, r7
 800155a:	0018      	movs	r0, r3
 800155c:	f00c fb68 	bl	800dc30 <MX_MEMS_Process>
 8001560:	003a      	movs	r2, r7
 8001562:	0023      	movs	r3, r4
 8001564:	ca03      	ldmia	r2!, {r0, r1}
 8001566:	c303      	stmia	r3!, {r0, r1}

    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001568:	003b      	movs	r3, r7
 800156a:	0018      	movs	r0, r3
 800156c:	f00c fb60 	bl	800dc30 <MX_MEMS_Process>
    SD = MX_MEMS_Process();
 8001570:	e7f1      	b.n	8001556 <main+0x22>
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000b04 	.word	0x20000b04

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b09f      	sub	sp, #124	; 0x7c
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	2440      	movs	r4, #64	; 0x40
 8001580:	193b      	adds	r3, r7, r4
 8001582:	0018      	movs	r0, r3
 8001584:	2338      	movs	r3, #56	; 0x38
 8001586:	001a      	movs	r2, r3
 8001588:	2100      	movs	r1, #0
 800158a:	f011 fda2 	bl	80130d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158e:	232c      	movs	r3, #44	; 0x2c
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	0018      	movs	r0, r3
 8001594:	2314      	movs	r3, #20
 8001596:	001a      	movs	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	f011 fd9a 	bl	80130d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	0018      	movs	r0, r3
 80015a2:	2328      	movs	r3, #40	; 0x28
 80015a4:	001a      	movs	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	f011 fd93 	bl	80130d2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <SystemClock_Config+0xf0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2e      	ldr	r2, [pc, #184]	; (800166c <SystemClock_Config+0xf4>)
 80015b2:	401a      	ands	r2, r3
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <SystemClock_Config+0xf0>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	0109      	lsls	r1, r1, #4
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2209      	movs	r2, #9
 80015c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	22a0      	movs	r2, #160	; 0xa0
 80015c8:	02d2      	lsls	r2, r2, #11
 80015ca:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015cc:	0021      	movs	r1, r4
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2201      	movs	r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2202      	movs	r2, #2
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0252      	lsls	r2, r2, #9
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	22c0      	movs	r2, #192	; 0xc0
 80015e6:	0312      	lsls	r2, r2, #12
 80015e8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	03d2      	lsls	r2, r2, #15
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	0018      	movs	r0, r3
 80015f6:	f00a f84d 	bl	800b694 <HAL_RCC_OscConfig>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015fe:	f000 f91f 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	187b      	adds	r3, r7, r1
 8001606:	220f      	movs	r2, #15
 8001608:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2203      	movs	r2, #3
 800160e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2101      	movs	r1, #1
 8001626:	0018      	movs	r0, r3
 8001628:	f00a fc08 	bl	800be3c <HAL_RCC_ClockConfig>
 800162c:	1e03      	subs	r3, r0, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001630:	f000 f906 	bl	8001840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	222a      	movs	r2, #42	; 0x2a
 8001638:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	0292      	lsls	r2, r2, #10
 800164c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	0018      	movs	r0, r3
 8001652:	f00a fe17 	bl	800c284 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800165a:	f000 f8f1 	bl	8001840 <Error_Handler>
  }
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b01f      	add	sp, #124	; 0x7c
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	40007000 	.word	0x40007000
 800166c:	ffffe7ff 	.word	0xffffe7ff

08001670 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_CRC_Init+0x40>)
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <MX_CRC_Init+0x44>)
 8001678:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <MX_CRC_Init+0x40>)
 800167c:	2200      	movs	r2, #0
 800167e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_CRC_Init+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_CRC_Init+0x40>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_CRC_Init+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_CRC_Init+0x40>)
 8001694:	2201      	movs	r2, #1
 8001696:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <MX_CRC_Init+0x40>)
 800169a:	0018      	movs	r0, r3
 800169c:	f008 fc42 	bl	8009f24 <HAL_CRC_Init>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016a4:	f000 f8cc 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000abc 	.word	0x20000abc
 80016b4:	40023000 	.word	0x40023000

080016b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	2314      	movs	r3, #20
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f011 fd03 	bl	80130d2 <memset>
  RTC_DateTypeDef sDate = {0};
 80016cc:	003b      	movs	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <MX_RTC_Init+0xc0>)
 80016d4:	4a29      	ldr	r2, [pc, #164]	; (800177c <MX_RTC_Init+0xc4>)
 80016d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <MX_RTC_Init+0xc0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <MX_RTC_Init+0xc0>)
 80016e0:	227f      	movs	r2, #127	; 0x7f
 80016e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <MX_RTC_Init+0xc0>)
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <MX_RTC_Init+0xc0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_RTC_Init+0xc0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <MX_RTC_Init+0xc0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_RTC_Init+0xc0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_RTC_Init+0xc0>)
 8001704:	0018      	movs	r0, r3
 8001706:	f00a ff31 	bl	800c56c <HAL_RTC_Init>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800170e:	f000 f897 	bl	8001840 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001730:	1d39      	adds	r1, r7, #4
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_RTC_Init+0xc0>)
 8001734:	2201      	movs	r2, #1
 8001736:	0018      	movs	r0, r3
 8001738:	f00a ffb6 	bl	800c6a8 <HAL_RTC_SetTime>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d001      	beq.n	8001744 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001740:	f000 f87e 	bl	8001840 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001744:	003b      	movs	r3, r7
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800174a:	003b      	movs	r3, r7
 800174c:	2201      	movs	r2, #1
 800174e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001750:	003b      	movs	r3, r7
 8001752:	2201      	movs	r2, #1
 8001754:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001756:	003b      	movs	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800175c:	0039      	movs	r1, r7
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_RTC_Init+0xc0>)
 8001760:	2201      	movs	r2, #1
 8001762:	0018      	movs	r0, r3
 8001764:	f00b f8c0 	bl	800c8e8 <HAL_RTC_SetDate>
 8001768:	1e03      	subs	r3, r0, #0
 800176a:	d001      	beq.n	8001770 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800176c:	f000 f868 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b006      	add	sp, #24
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000ae0 	.word	0x20000ae0
 800177c:	40002800 	.word	0x40002800

08001780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_DMA_Init+0x38>)
 8001788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_DMA_Init+0x38>)
 800178c:	2101      	movs	r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_DMA_Init+0x38>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	200b      	movs	r0, #11
 80017a4:	f008 fb8c 	bl	8009ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80017a8:	200b      	movs	r0, #11
 80017aa:	f008 fb9e 	bl	8009eea <HAL_NVIC_EnableIRQ>

}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40021000 	.word	0x40021000

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_GPIO_Init+0x80>)
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_GPIO_Init+0x80>)
 80017c8:	2104      	movs	r1, #4
 80017ca:	430a      	orrs	r2, r1
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_GPIO_Init+0x80>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	2204      	movs	r2, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_GPIO_Init+0x80>)
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_GPIO_Init+0x80>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_GPIO_Init+0x80>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_GPIO_Init+0x80>)
 80017f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_GPIO_Init+0x80>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_GPIO_Init+0x80>)
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_GPIO_Init+0x80>)
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_GPIO_Init+0x80>)
 8001810:	2102      	movs	r1, #2
 8001812:	430a      	orrs	r2, r1
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_GPIO_Init+0x80>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2007      	movs	r0, #7
 8001828:	f008 fb4a 	bl	8009ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800182c:	2007      	movs	r0, #7
 800182e:	f008 fb5c 	bl	8009eea <HAL_NVIC_EnableIRQ>

}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40021000 	.word	0x40021000

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_MspInit+0x24>)
 8001852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x24>)
 8001856:	2101      	movs	r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_MspInit+0x24>)
 800185e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_MspInit+0x24>)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	0549      	lsls	r1, r1, #21
 8001866:	430a      	orrs	r2, r1
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_CRC_MspInit+0x38>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10d      	bne.n	80018a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_CRC_MspInit+0x3c>)
 8001888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_CRC_MspInit+0x3c>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0149      	lsls	r1, r1, #5
 8001890:	430a      	orrs	r2, r1
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_CRC_MspInit+0x3c>)
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40023000 	.word	0x40023000
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_RTC_MspInit+0x28>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d106      	bne.n	80018d4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RTC_MspInit+0x2c>)
 80018c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RTC_MspInit+0x2c>)
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	02c9      	lsls	r1, r1, #11
 80018d0:	430a      	orrs	r2, r1
 80018d2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40002800 	.word	0x40002800
 80018e0:	40021000 	.word	0x40021000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f008 f9ee 	bl	8009ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <EXTI4_15_IRQHandler+0x14>)
 800191a:	0018      	movs	r0, r3
 800191c:	f008 fdc4 	bl	800a4a8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20000254 	.word	0x20000254

0800192c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001932:	0018      	movs	r0, r3
 8001934:	f008 fca8 	bl	800a288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20000d8c 	.word	0x20000d8c

08001944 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <BSP_I2C1_Init+0x70>)
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <BSP_I2C1_Init+0x74>)
 8001952:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <BSP_I2C1_Init+0x78>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	1c59      	adds	r1, r3, #1
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <BSP_I2C1_Init+0x78>)
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d123      	bne.n	80019aa <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <BSP_I2C1_Init+0x70>)
 8001964:	0018      	movs	r0, r3
 8001966:	f009 fb95 	bl	800b094 <HAL_I2C_GetState>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d11d      	bne.n	80019aa <BSP_I2C1_Init+0x66>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <BSP_I2C1_Init+0x70>)
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f91b 	bl	8001bac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d116      	bne.n	80019aa <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <BSP_I2C1_Init+0x70>)
 800197e:	0018      	movs	r0, r3
 8001980:	f000 f8c6 	bl	8001b10 <MX_I2C1_Init>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d003      	beq.n	8001990 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001988:	2308      	movs	r3, #8
 800198a:	425b      	negs	r3, r3
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	e00c      	b.n	80019aa <BSP_I2C1_Init+0x66>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <BSP_I2C1_Init+0x70>)
 8001992:	2100      	movs	r1, #0
 8001994:	0018      	movs	r0, r3
 8001996:	f009 fde5 	bl	800b564 <HAL_I2CEx_ConfigAnalogFilter>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d003      	beq.n	80019a6 <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800199e:	2308      	movs	r3, #8
 80019a0:	425b      	negs	r3, r3
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	e001      	b.n	80019aa <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000b0c 	.word	0x20000b0c
 80019b8:	40005400 	.word	0x40005400
 80019bc:	20000b58 	.word	0x20000b58

080019c0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <BSP_I2C1_DeInit+0x48>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <BSP_I2C1_DeInit+0x3e>
  {
    if (--I2C1InitCounter == 0)
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <BSP_I2C1_DeInit+0x48>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <BSP_I2C1_DeInit+0x48>)
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <BSP_I2C1_DeInit+0x48>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <BSP_I2C1_DeInit+0x3e>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <BSP_I2C1_DeInit+0x4c>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f92e 	bl	8001c48 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <BSP_I2C1_DeInit+0x4c>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f009 f8ae 	bl	800ab50 <HAL_I2C_DeInit>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d002      	beq.n	80019fe <BSP_I2C1_DeInit+0x3e>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80019f8:	2308      	movs	r3, #8
 80019fa:	425b      	negs	r3, r3
 80019fc:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000b58 	.word	0x20000b58
 8001a0c:	20000b0c 	.word	0x20000b0c

08001a10 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	0004      	movs	r4, r0
 8001a18:	0008      	movs	r0, r1
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	250e      	movs	r5, #14
 8001a20:	197b      	adds	r3, r7, r5
 8001a22:	1c22      	adds	r2, r4, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	240c      	movs	r4, #12
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	1c02      	adds	r2, r0, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	1dbb      	adds	r3, r7, #6
 8001a30:	1c0a      	adds	r2, r1, #0
 8001a32:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	197b      	adds	r3, r7, r5
 8001a3e:	8819      	ldrh	r1, [r3, #0]
 8001a40:	4810      	ldr	r0, [pc, #64]	; (8001a84 <BSP_I2C1_WriteReg+0x74>)
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	015b      	lsls	r3, r3, #5
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	f009 f8bc 	bl	800abd0 <HAL_I2C_Mem_Write>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d00d      	beq.n	8001a78 <BSP_I2C1_WriteReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <BSP_I2C1_WriteReg+0x74>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f009 fb24 	bl	800b0ac <HAL_I2C_GetError>
 8001a64:	0003      	movs	r3, r0
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d103      	bne.n	8001a72 <BSP_I2C1_WriteReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a6a:	2366      	movs	r3, #102	; 0x66
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e002      	b.n	8001a78 <BSP_I2C1_WriteReg+0x68>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a72:	2304      	movs	r3, #4
 8001a74:	425b      	negs	r3, r3
 8001a76:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001a78:	697b      	ldr	r3, [r7, #20]
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b006      	add	sp, #24
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000b0c 	.word	0x20000b0c

08001a88 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	0004      	movs	r4, r0
 8001a90:	0008      	movs	r0, r1
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	0019      	movs	r1, r3
 8001a96:	250e      	movs	r5, #14
 8001a98:	197b      	adds	r3, r7, r5
 8001a9a:	1c22      	adds	r2, r4, #0
 8001a9c:	801a      	strh	r2, [r3, #0]
 8001a9e:	240c      	movs	r4, #12
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	1c02      	adds	r2, r0, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	1dbb      	adds	r3, r7, #6
 8001aa8:	1c0a      	adds	r2, r1, #0
 8001aaa:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	197b      	adds	r3, r7, r5
 8001ab6:	8819      	ldrh	r1, [r3, #0]
 8001ab8:	4810      	ldr	r0, [pc, #64]	; (8001afc <BSP_I2C1_ReadReg+0x74>)
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	015b      	lsls	r3, r3, #5
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	f009 f9ae 	bl	800ae2c <HAL_I2C_Mem_Read>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d00d      	beq.n	8001af0 <BSP_I2C1_ReadReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <BSP_I2C1_ReadReg+0x74>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f009 fae8 	bl	800b0ac <HAL_I2C_GetError>
 8001adc:	0003      	movs	r3, r0
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d103      	bne.n	8001aea <BSP_I2C1_ReadReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ae2:	2366      	movs	r3, #102	; 0x66
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e002      	b.n	8001af0 <BSP_I2C1_ReadReg+0x68>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001aea:	2304      	movs	r3, #4
 8001aec:	425b      	negs	r3, r3
 8001aee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001af0:	697b      	ldr	r3, [r7, #20]
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b006      	add	sp, #24
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000b0c 	.word	0x20000b0c

08001b00 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b04:	f008 f902 	bl	8009d0c <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b18:	240f      	movs	r4, #15
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]

  hi2c->Instance = I2C1;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <MX_I2C1_Init+0x94>)
 8001b24:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00300F38;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <MX_I2C1_Init+0x98>)
 8001b2a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f008 ff63 	bl	800aa24 <HAL_I2C_Init>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d002      	beq.n	8001b68 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f009 fcf9 	bl	800b564 <HAL_I2CEx_ConfigAnalogFilter>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d003      	beq.n	8001b7e <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2100      	movs	r1, #0
 8001b82:	0018      	movs	r0, r3
 8001b84:	f009 fd3a 	bl	800b5fc <HAL_I2CEx_ConfigDigitalFilter>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d003      	beq.n	8001b94 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	781b      	ldrb	r3, [r3, #0]
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b005      	add	sp, #20
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	00300f38 	.word	0x00300f38

08001bac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <I2C1_MspInit+0x94>)
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <I2C1_MspInit+0x94>)
 8001bba:	2102      	movs	r1, #2
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <I2C1_MspInit+0x94>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001bcc:	210c      	movs	r1, #12
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd6:	000c      	movs	r4, r1
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	2212      	movs	r2, #18
 8001bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	193b      	adds	r3, r7, r4
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	193b      	adds	r3, r7, r4
 8001be6:	2203      	movs	r2, #3
 8001be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2204      	movs	r2, #4
 8001bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <I2C1_MspInit+0x98>)
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	f008 fc7a 	bl	800a4f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001bfc:	0021      	movs	r1, r4
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2212      	movs	r2, #18
 8001c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2203      	movs	r2, #3
 8001c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <I2C1_MspInit+0x98>)
 8001c22:	0019      	movs	r1, r3
 8001c24:	0010      	movs	r0, r2
 8001c26:	f008 fc63 	bl	800a4f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <I2C1_MspInit+0x94>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <I2C1_MspInit+0x94>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0389      	lsls	r1, r1, #14
 8001c34:	430a      	orrs	r2, r1
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b009      	add	sp, #36	; 0x24
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	50000400 	.word	0x50000400

08001c48 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <I2C1_MspDeInit+0x38>)
 8001c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <I2C1_MspDeInit+0x38>)
 8001c56:	490b      	ldr	r1, [pc, #44]	; (8001c84 <I2C1_MspDeInit+0x3c>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <I2C1_MspDeInit+0x40>)
 8001c62:	0019      	movs	r1, r3
 8001c64:	0010      	movs	r0, r2
 8001c66:	f008 fdc1 	bl	800a7ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <I2C1_MspDeInit+0x40>)
 8001c70:	0019      	movs	r1, r3
 8001c72:	0010      	movs	r0, r2
 8001c74:	f008 fdba 	bl	800a7ec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	ffdfffff 	.word	0xffdfffff
 8001c88:	50000400 	.word	0x50000400

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f011 f9d6 	bl	801306c <__errno>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	425b      	negs	r3, r3
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	18d2      	adds	r2, r2, r3
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b006      	add	sp, #24
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20005000 	.word	0x20005000
 8001cec:	00002000 	.word	0x00002000
 8001cf0:	20000b5c 	.word	0x20000b5c
 8001cf4:	20001628 	.word	0x20001628

08001cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001d06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490e      	ldr	r1, [pc, #56]	; (8001d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0b      	ldr	r4, [pc, #44]	; (8001d50 <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d2e:	f7ff ffe3 	bl	8001cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f011 f9a1 	bl	8013078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff fbfd 	bl	8001534 <main>

08001d3a <LoopForever>:

LoopForever:
    b LoopForever
 8001d3a:	e7fe      	b.n	8001d3a <LoopForever>
   ldr   r0, =_estack
 8001d3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001d48:	08015e10 	.word	0x08015e10
  ldr r2, =_sbss
 8001d4c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001d50:	20001628 	.word	0x20001628

08001d54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_COMP_IRQHandler>
	...

08001d58 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e031      	b.n	8001dd4 <HTS221_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	7b1a      	ldrb	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HTS221_RegisterBusIO+0x88>)
 8001dac:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HTS221_RegisterBusIO+0x8c>)
 8001db2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HTS221_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4798      	blx	r3
 8001dc8:	0003      	movs	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e002      	b.n	8001dd4 <HTS221_RegisterBusIO+0x7c>
    }
    else
    {
      ret = HTS221_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	080023ff 	.word	0x080023ff
 8001de4:	08002479 	.word	0x08002479

08001de8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2228      	movs	r2, #40	; 0x28
 8001df4:	5c9b      	ldrb	r3, [r3, r2]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d108      	bne.n	8001e0c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fa8f 	bl	8002320 <HTS221_Initialize>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d002      	beq.n	8001e0c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	425b      	negs	r3, r3
 8001e0a:	e004      	b.n	8001e16 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2228      	movs	r2, #40	; 0x28
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2228      	movs	r2, #40	; 0x28
 8001e2a:	5c9b      	ldrb	r3, [r3, r2]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d111      	bne.n	8001e54 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f874 	bl	8001f20 <HTS221_HUM_Disable>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d002      	beq.n	8001e42 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	425b      	negs	r3, r3
 8001e40:	e00d      	b.n	8001e5e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f951 	bl	80020ec <HTS221_TEMP_Disable>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d002      	beq.n	8001e54 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	425b      	negs	r3, r3
 8001e52:	e004      	b.n	8001e5e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2228      	movs	r2, #40	; 0x28
 8001e58:	2100      	movs	r1, #0
 8001e5a:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	331c      	adds	r3, #28
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fc61 	bl	8002740 <hts221_device_id_get>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d002      	beq.n	8001e88 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	425b      	negs	r3, r3
 8001e86:	e000      	b.n	8001e8a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HTS221_GetCapabilities+0x40>)
 8001eba:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HTS221_GetCapabilities+0x40>)
 8001ec0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	41480000 	.word	0x41480000

08001ed8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2229      	movs	r2, #41	; 0x29
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e014      	b.n	8001f18 <HTS221_HUM_Enable+0x40>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	222a      	movs	r2, #42	; 0x2a
 8001ef2:	5c9b      	ldrb	r3, [r3, r2]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HTS221_HUM_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	331c      	adds	r3, #28
 8001efc:	2101      	movs	r1, #1
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 fc30 	bl	8002764 <hts221_power_on_set>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d002      	beq.n	8001f0e <HTS221_HUM_Enable+0x36>
    {
      return HTS221_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	e004      	b.n	8001f18 <HTS221_HUM_Enable+0x40>
    }
  }

  pObj->hum_is_enabled = 1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2229      	movs	r2, #41	; 0x29
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2229      	movs	r2, #41	; 0x29
 8001f2c:	5c9b      	ldrb	r3, [r3, r2]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e014      	b.n	8001f60 <HTS221_HUM_Disable+0x40>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	222a      	movs	r2, #42	; 0x2a
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HTS221_HUM_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	331c      	adds	r3, #28
 8001f44:	2100      	movs	r1, #0
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fc0c 	bl	8002764 <hts221_power_on_set>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d002      	beq.n	8001f56 <HTS221_HUM_Disable+0x36>
    {
      return HTS221_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	425b      	negs	r3, r3
 8001f54:	e004      	b.n	8001f60 <HTS221_HUM_Disable+0x40>
    }
  }

  pObj->hum_is_enabled = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2229      	movs	r2, #41	; 0x29
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 f961 	bl	8002240 <HTS221_GetOutputDataRate>
 8001f7e:	0003      	movs	r3, r0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	1c11      	adds	r1, r2, #0
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f991 	bl	80022c0 <HTS221_SetOutputDataRate>
 8001f9e:	0003      	movs	r3, r0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	331c      	adds	r3, #28
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	18ba      	adds	r2, r7, r2
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 fcb7 	bl	8002930 <hts221_hum_adc_point_0_get>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d002      	beq.n	8001fcc <HTS221_HUM_GetHumidity+0x24>
  {
    return HTS221_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	425b      	negs	r3, r3
 8001fca:	e064      	b.n	8002096 <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	331c      	adds	r3, #28
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	0019      	movs	r1, r3
 8001fda:	0010      	movs	r0, r2
 8001fdc:	f000 fbf0 	bl	80027c0 <hts221_hum_rh_point_0_get>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d002      	beq.n	8001fea <HTS221_HUM_GetHumidity+0x42>
  {
    return HTS221_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	425b      	negs	r3, r3
 8001fe8:	e055      	b.n	8002096 <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	331c      	adds	r3, #28
 8001fee:	001a      	movs	r2, r3
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	f000 fcc3 	bl	8002984 <hts221_hum_adc_point_1_get>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d002      	beq.n	8002008 <HTS221_HUM_GetHumidity+0x60>
  {
    return HTS221_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	425b      	negs	r3, r3
 8002006:	e046      	b.n	8002096 <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	331c      	adds	r3, #28
 800200c:	001a      	movs	r2, r3
 800200e:	230c      	movs	r3, #12
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	330c      	adds	r3, #12
 8002014:	0019      	movs	r1, r3
 8002016:	0010      	movs	r0, r2
 8002018:	f000 fbf4 	bl	8002804 <hts221_hum_rh_point_1_get>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d002      	beq.n	8002026 <HTS221_HUM_GetHumidity+0x7e>
  {
    return HTS221_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	425b      	negs	r3, r3
 8002024:	e037      	b.n	8002096 <HTS221_HUM_GetHumidity+0xee>
 8002026:	211c      	movs	r1, #28
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	331c      	adds	r3, #28
 8002032:	187a      	adds	r2, r7, r1
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fb34 	bl	80026a4 <hts221_humidity_raw_get>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d002      	beq.n	8002046 <HTS221_HUM_GetHumidity+0x9e>
  {
    return HTS221_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	425b      	negs	r3, r3
 8002044:	e027      	b.n	8002096 <HTS221_HUM_GetHumidity+0xee>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002046:	231c      	movs	r3, #28
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2200      	movs	r2, #0
 800204c:	5e9b      	ldrsh	r3, [r3, r2]
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff f9b6 	bl	80013c0 <__aeabi_i2f>
 8002054:	1c02      	adds	r2, r0, #0
 8002056:	230c      	movs	r3, #12
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	1c11      	adds	r1, r2, #0
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f98a 	bl	8002376 <Linear_Interpolation>
 8002062:	1c02      	adds	r2, r0, #0
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2100      	movs	r1, #0
 800206e:	1c18      	adds	r0, r3, #0
 8002070:	f7fe f9dc 	bl	800042c <__aeabi_fcmplt>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d002      	beq.n	800207e <HTS221_HUM_GetHumidity+0xd6>
  {
    *Value = 0.0f;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <HTS221_HUM_GetHumidity+0xf8>)
 8002084:	1c18      	adds	r0, r3, #0
 8002086:	f7fe f9e5 	bl	8000454 <__aeabi_fcmpgt>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d002      	beq.n	8002094 <HTS221_HUM_GetHumidity+0xec>
  {
    *Value = 100.0f;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <HTS221_HUM_GetHumidity+0xf8>)
 8002092:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b008      	add	sp, #32
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	42c80000 	.word	0x42c80000

080020a4 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	222a      	movs	r2, #42	; 0x2a
 80020b0:	5c9b      	ldrb	r3, [r3, r2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e014      	b.n	80020e4 <HTS221_TEMP_Enable+0x40>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2229      	movs	r2, #41	; 0x29
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HTS221_TEMP_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	331c      	adds	r3, #28
 80020c8:	2101      	movs	r1, #1
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fb4a 	bl	8002764 <hts221_power_on_set>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d002      	beq.n	80020da <HTS221_TEMP_Enable+0x36>
    {
      return HTS221_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	425b      	negs	r3, r3
 80020d8:	e004      	b.n	80020e4 <HTS221_TEMP_Enable+0x40>
    }
  }

  pObj->temp_is_enabled = 1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	222a      	movs	r2, #42	; 0x2a
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	222a      	movs	r2, #42	; 0x2a
 80020f8:	5c9b      	ldrb	r3, [r3, r2]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e014      	b.n	800212c <HTS221_TEMP_Disable+0x40>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2229      	movs	r2, #41	; 0x29
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HTS221_TEMP_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	331c      	adds	r3, #28
 8002110:	2100      	movs	r1, #0
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fb26 	bl	8002764 <hts221_power_on_set>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d002      	beq.n	8002122 <HTS221_TEMP_Disable+0x36>
    {
      return HTS221_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	425b      	negs	r3, r3
 8002120:	e004      	b.n	800212c <HTS221_TEMP_Disable+0x40>
    }
  }

  pObj->temp_is_enabled = 0;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	222a      	movs	r2, #42	; 0x2a
 8002126:	2100      	movs	r1, #0
 8002128:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}

08002134 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f87b 	bl	8002240 <HTS221_GetOutputDataRate>
 800214a:	0003      	movs	r3, r0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1c11      	adds	r1, r2, #0
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f8ab 	bl	80022c0 <HTS221_SetOutputDataRate>
 800216a:	0003      	movs	r3, r0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}

08002174 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	331c      	adds	r3, #28
 8002182:	220c      	movs	r2, #12
 8002184:	18ba      	adds	r2, r7, r2
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fc25 	bl	80029d8 <hts221_temp_adc_point_0_get>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d002      	beq.n	8002198 <HTS221_TEMP_GetTemperature+0x24>
  {
    return HTS221_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	425b      	negs	r3, r3
 8002196:	e04e      	b.n	8002236 <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	331c      	adds	r3, #28
 800219c:	001a      	movs	r2, r3
 800219e:	230c      	movs	r3, #12
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	3304      	adds	r3, #4
 80021a4:	0019      	movs	r1, r3
 80021a6:	0010      	movs	r0, r2
 80021a8:	f000 fb4e 	bl	8002848 <hts221_temp_deg_point_0_get>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d002      	beq.n	80021b6 <HTS221_TEMP_GetTemperature+0x42>
  {
    return HTS221_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	425b      	negs	r3, r3
 80021b4:	e03f      	b.n	8002236 <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	331c      	adds	r3, #28
 80021ba:	001a      	movs	r2, r3
 80021bc:	230c      	movs	r3, #12
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	3308      	adds	r3, #8
 80021c2:	0019      	movs	r1, r3
 80021c4:	0010      	movs	r0, r2
 80021c6:	f000 fc31 	bl	8002a2c <hts221_temp_adc_point_1_get>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d002      	beq.n	80021d4 <HTS221_TEMP_GetTemperature+0x60>
  {
    return HTS221_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	425b      	negs	r3, r3
 80021d2:	e030      	b.n	8002236 <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	331c      	adds	r3, #28
 80021d8:	001a      	movs	r2, r3
 80021da:	230c      	movs	r3, #12
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	330c      	adds	r3, #12
 80021e0:	0019      	movs	r1, r3
 80021e2:	0010      	movs	r0, r2
 80021e4:	f000 fb6a 	bl	80028bc <hts221_temp_deg_point_1_get>
 80021e8:	1e03      	subs	r3, r0, #0
 80021ea:	d002      	beq.n	80021f2 <HTS221_TEMP_GetTemperature+0x7e>
  {
    return HTS221_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	425b      	negs	r3, r3
 80021f0:	e021      	b.n	8002236 <HTS221_TEMP_GetTemperature+0xc2>
 80021f2:	211c      	movs	r1, #28
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2200      	movs	r2, #0
 80021f8:	801a      	strh	r2, [r3, #0]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	331c      	adds	r3, #28
 80021fe:	187a      	adds	r2, r7, r1
 8002200:	0011      	movs	r1, r2
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fa75 	bl	80026f2 <hts221_temperature_raw_get>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d002      	beq.n	8002212 <HTS221_TEMP_GetTemperature+0x9e>
  {
    return HTS221_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	425b      	negs	r3, r3
 8002210:	e011      	b.n	8002236 <HTS221_TEMP_GetTemperature+0xc2>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002212:	231c      	movs	r3, #28
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2200      	movs	r2, #0
 8002218:	5e9b      	ldrsh	r3, [r3, r2]
 800221a:	0018      	movs	r0, r3
 800221c:	f7ff f8d0 	bl	80013c0 <__aeabi_i2f>
 8002220:	1c02      	adds	r2, r0, #0
 8002222:	230c      	movs	r3, #12
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	1c11      	adds	r1, r2, #0
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f8a4 	bl	8002376 <Linear_Interpolation>
 800222e:	1c02      	adds	r2, r0, #0
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b008      	add	sp, #32
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	331c      	adds	r3, #28
 8002252:	220b      	movs	r2, #11
 8002254:	18ba      	adds	r2, r7, r2
 8002256:	0011      	movs	r1, r2
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f9bc 	bl	80025d6 <hts221_data_rate_get>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d002      	beq.n	8002268 <HTS221_GetOutputDataRate+0x28>
  {
    return HTS221_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	425b      	negs	r3, r3
 8002266:	e023      	b.n	80022b0 <HTS221_GetOutputDataRate+0x70>
  }

  switch (odr_low_level)
 8002268:	230b      	movs	r3, #11
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d015      	beq.n	800229e <HTS221_GetOutputDataRate+0x5e>
 8002272:	dc18      	bgt.n	80022a6 <HTS221_GetOutputDataRate+0x66>
 8002274:	2b02      	cmp	r3, #2
 8002276:	d00e      	beq.n	8002296 <HTS221_GetOutputDataRate+0x56>
 8002278:	dc15      	bgt.n	80022a6 <HTS221_GetOutputDataRate+0x66>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HTS221_GetOutputDataRate+0x44>
 800227e:	2b01      	cmp	r3, #1
 8002280:	d004      	beq.n	800228c <HTS221_GetOutputDataRate+0x4c>
 8002282:	e010      	b.n	80022a6 <HTS221_GetOutputDataRate+0x66>
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
      break;
 800228a:	e010      	b.n	80022ae <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	22fe      	movs	r2, #254	; 0xfe
 8002290:	0592      	lsls	r2, r2, #22
 8002292:	601a      	str	r2, [r3, #0]
      break;
 8002294:	e00b      	b.n	80022ae <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HTS221_GetOutputDataRate+0x78>)
 800229a:	601a      	str	r2, [r3, #0]
      break;
 800229c:	e007      	b.n	80022ae <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HTS221_GetOutputDataRate+0x7c>)
 80022a2:	601a      	str	r2, [r3, #0]
      break;
 80022a4:	e003      	b.n	80022ae <HTS221_GetOutputDataRate+0x6e>

    default:
      ret = HTS221_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	425b      	negs	r3, r3
 80022aa:	60fb      	str	r3, [r7, #12]
      break;
 80022ac:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40e00000 	.word	0x40e00000
 80022bc:	41480000 	.word	0x41480000

080022c0 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80022ca:	21fe      	movs	r1, #254	; 0xfe
 80022cc:	0589      	lsls	r1, r1, #22
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f7fe f8b6 	bl	8000440 <__aeabi_fcmple>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d001      	beq.n	80022dc <HTS221_SetOutputDataRate+0x1c>
 80022d8:	2301      	movs	r3, #1
 80022da:	e008      	b.n	80022ee <HTS221_SetOutputDataRate+0x2e>
 80022dc:	490f      	ldr	r1, [pc, #60]	; (800231c <HTS221_SetOutputDataRate+0x5c>)
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	f7fe f8ae 	bl	8000440 <__aeabi_fcmple>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d001      	beq.n	80022ec <HTS221_SetOutputDataRate+0x2c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e000      	b.n	80022ee <HTS221_SetOutputDataRate+0x2e>
 80022ec:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80022ee:	210f      	movs	r1, #15
 80022f0:	187a      	adds	r2, r7, r1
 80022f2:	7013      	strb	r3, [r2, #0]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	331c      	adds	r3, #28
 80022f8:	001a      	movs	r2, r3
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	0019      	movs	r1, r3
 8002300:	0010      	movs	r0, r2
 8002302:	f000 f938 	bl	8002576 <hts221_data_rate_set>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d002      	beq.n	8002310 <HTS221_SetOutputDataRate+0x50>
  {
    return HTS221_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	425b      	negs	r3, r3
 800230e:	e000      	b.n	8002312 <HTS221_SetOutputDataRate+0x52>
  }

  return HTS221_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	40e00000 	.word	0x40e00000

08002320 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	331c      	adds	r3, #28
 800232c:	2100      	movs	r1, #0
 800232e:	0018      	movs	r0, r3
 8002330:	f000 fa18 	bl	8002764 <hts221_power_on_set>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d002      	beq.n	800233e <HTS221_Initialize+0x1e>
  {
    return HTS221_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	425b      	negs	r3, r3
 800233c:	e017      	b.n	800236e <HTS221_Initialize+0x4e>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	331c      	adds	r3, #28
 8002342:	2101      	movs	r1, #1
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f97d 	bl	8002644 <hts221_block_data_update_set>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d002      	beq.n	8002354 <HTS221_Initialize+0x34>
  {
    return HTS221_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	425b      	negs	r3, r3
 8002352:	e00c      	b.n	800236e <HTS221_Initialize+0x4e>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002354:	22fe      	movs	r2, #254	; 0xfe
 8002356:	0592      	lsls	r2, r2, #22
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1c11      	adds	r1, r2, #0
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff ffaf 	bl	80022c0 <HTS221_SetOutputDataRate>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d002      	beq.n	800236c <HTS221_Initialize+0x4c>
  {
    return HTS221_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	425b      	negs	r3, r3
 800236a:	e000      	b.n	800236e <HTS221_Initialize+0x4e>
  }

  return HTS221_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}

08002376 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002376:	b5b0      	push	{r4, r5, r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	1c19      	adds	r1, r3, #0
 800238a:	1c10      	adds	r0, r2, #0
 800238c:	f7fe fe34 	bl	8000ff8 <__aeabi_fsub>
 8002390:	1c03      	adds	r3, r0, #0
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	1c18      	adds	r0, r3, #0
 8002396:	f7fe fd09 	bl	8000dac <__aeabi_fmul>
 800239a:	1c03      	adds	r3, r0, #0
 800239c:	1c1c      	adds	r4, r3, #0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	1c19      	adds	r1, r3, #0
 80023a8:	1c10      	adds	r0, r2, #0
 80023aa:	f7fe fcff 	bl	8000dac <__aeabi_fmul>
 80023ae:	1c03      	adds	r3, r0, #0
 80023b0:	1c1d      	adds	r5, r3, #0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	1c19      	adds	r1, r3, #0
 80023bc:	1c10      	adds	r0, r2, #0
 80023be:	f7fe fcf5 	bl	8000dac <__aeabi_fmul>
 80023c2:	1c03      	adds	r3, r0, #0
 80023c4:	1c19      	adds	r1, r3, #0
 80023c6:	1c28      	adds	r0, r5, #0
 80023c8:	f7fe fe16 	bl	8000ff8 <__aeabi_fsub>
 80023cc:	1c03      	adds	r3, r0, #0
 80023ce:	1c19      	adds	r1, r3, #0
 80023d0:	1c20      	adds	r0, r4, #0
 80023d2:	f7fe f985 	bl	80006e0 <__aeabi_fadd>
 80023d6:	1c03      	adds	r3, r0, #0
 80023d8:	1c1c      	adds	r4, r3, #0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c19      	adds	r1, r3, #0
 80023e4:	1c10      	adds	r0, r2, #0
 80023e6:	f7fe fe07 	bl	8000ff8 <__aeabi_fsub>
 80023ea:	1c03      	adds	r3, r0, #0
 80023ec:	1c19      	adds	r1, r3, #0
 80023ee:	1c20      	adds	r0, r4, #0
 80023f0:	f7fe fb14 	bl	8000a1c <__aeabi_fdiv>
 80023f4:	1c03      	adds	r3, r0, #0
}
 80023f6:	1c18      	adds	r0, r3, #0
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}

080023fe <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	0008      	movs	r0, r1
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	0019      	movs	r1, r3
 800240c:	250b      	movs	r5, #11
 800240e:	197b      	adds	r3, r7, r5
 8002410:	1c02      	adds	r2, r0, #0
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	2608      	movs	r6, #8
 8002416:	19bb      	adds	r3, r7, r6
 8002418:	1c0a      	adds	r2, r1, #0
 800241a:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <ReadRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	695c      	ldr	r4, [r3, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	7b1b      	ldrb	r3, [r3, #12]
 8002430:	b298      	uxth	r0, r3
 8002432:	197b      	adds	r3, r7, r5
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	4252      	negs	r2, r2
 800243a:	4313      	orrs	r3, r2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	b299      	uxth	r1, r3
 8002440:	19bb      	adds	r3, r7, r6
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	47a0      	blx	r4
 8002448:	0003      	movs	r3, r0
 800244a:	e011      	b.n	8002470 <ReadRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	695c      	ldr	r4, [r3, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	7b1b      	ldrb	r3, [r3, #12]
 8002454:	b298      	uxth	r0, r3
 8002456:	230b      	movs	r3, #11
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	4313      	orrs	r3, r2
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b299      	uxth	r1, r3
 8002464:	2308      	movs	r3, #8
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	47a0      	blx	r4
 800246e:	0003      	movs	r3, r0
  }
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b007      	add	sp, #28
 8002476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002478 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	0008      	movs	r0, r1
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	0019      	movs	r1, r3
 8002486:	250b      	movs	r5, #11
 8002488:	197b      	adds	r3, r7, r5
 800248a:	1c02      	adds	r2, r0, #0
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	2608      	movs	r6, #8
 8002490:	19bb      	adds	r3, r7, r6
 8002492:	1c0a      	adds	r2, r1, #0
 8002494:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d111      	bne.n	80024c6 <WriteRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	691c      	ldr	r4, [r3, #16]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	7b1b      	ldrb	r3, [r3, #12]
 80024aa:	b298      	uxth	r0, r3
 80024ac:	197b      	adds	r3, r7, r5
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	4252      	negs	r2, r2
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	b299      	uxth	r1, r3
 80024ba:	19bb      	adds	r3, r7, r6
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	47a0      	blx	r4
 80024c2:	0003      	movs	r3, r0
 80024c4:	e011      	b.n	80024ea <WriteRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	691c      	ldr	r4, [r3, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	7b1b      	ldrb	r3, [r3, #12]
 80024ce:	b298      	uxth	r0, r3
 80024d0:	230b      	movs	r3, #11
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	4313      	orrs	r3, r2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	b299      	uxth	r1, r3
 80024de:	2308      	movs	r3, #8
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	47a0      	blx	r4
 80024e8:	0003      	movs	r3, r0
  }
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b007      	add	sp, #28
 80024f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024f2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80024f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f4:	b087      	sub	sp, #28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	0008      	movs	r0, r1
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	0019      	movs	r1, r3
 8002500:	260b      	movs	r6, #11
 8002502:	19bb      	adds	r3, r7, r6
 8002504:	1c02      	adds	r2, r0, #0
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	2508      	movs	r5, #8
 800250a:	197b      	adds	r3, r7, r5
 800250c:	1c0a      	adds	r2, r1, #0
 800250e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685c      	ldr	r4, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	197b      	adds	r3, r7, r5
 800251a:	881d      	ldrh	r5, [r3, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	19bb      	adds	r3, r7, r6
 8002520:	7819      	ldrb	r1, [r3, #0]
 8002522:	002b      	movs	r3, r5
 8002524:	47a0      	blx	r4
 8002526:	0003      	movs	r3, r0
 8002528:	617b      	str	r3, [r7, #20]

  return ret;
 800252a:	697b      	ldr	r3, [r7, #20]
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b007      	add	sp, #28
 8002532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002534 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	0008      	movs	r0, r1
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	0019      	movs	r1, r3
 8002542:	260b      	movs	r6, #11
 8002544:	19bb      	adds	r3, r7, r6
 8002546:	1c02      	adds	r2, r0, #0
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	2508      	movs	r5, #8
 800254c:	197b      	adds	r3, r7, r5
 800254e:	1c0a      	adds	r2, r1, #0
 8002550:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681c      	ldr	r4, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6898      	ldr	r0, [r3, #8]
 800255a:	197b      	adds	r3, r7, r5
 800255c:	881d      	ldrh	r5, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	19bb      	adds	r3, r7, r6
 8002562:	7819      	ldrb	r1, [r3, #0]
 8002564:	002b      	movs	r3, r5
 8002566:	47a0      	blx	r4
 8002568:	0003      	movs	r3, r0
 800256a:	617b      	str	r3, [r7, #20]

  return ret;
 800256c:	697b      	ldr	r3, [r7, #20]
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b007      	add	sp, #28
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002576 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002576:	b590      	push	{r4, r7, lr}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	000a      	movs	r2, r1
 8002580:	1cfb      	adds	r3, r7, #3
 8002582:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002584:	2408      	movs	r4, #8
 8002586:	193a      	adds	r2, r7, r4
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	2301      	movs	r3, #1
 800258c:	2120      	movs	r1, #32
 800258e:	f7ff ffb0 	bl	80024f2 <hts221_read_reg>
 8002592:	0003      	movs	r3, r0
 8002594:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d117      	bne.n	80025cc <hts221_data_rate_set+0x56>
  {
    reg.odr = (uint8_t)val;
 800259c:	1cfb      	adds	r3, r7, #3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4013      	ands	r3, r2
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	2103      	movs	r1, #3
 80025aa:	400a      	ands	r2, r1
 80025ac:	0010      	movs	r0, r2
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	2103      	movs	r1, #3
 80025b2:	438a      	bics	r2, r1
 80025b4:	1c11      	adds	r1, r2, #0
 80025b6:	1c02      	adds	r2, r0, #0
 80025b8:	430a      	orrs	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80025bc:	193a      	adds	r2, r7, r4
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	2301      	movs	r3, #1
 80025c2:	2120      	movs	r1, #32
 80025c4:	f7ff ffb6 	bl	8002534 <hts221_write_reg>
 80025c8:	0003      	movs	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80025cc:	68fb      	ldr	r3, [r7, #12]
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b005      	add	sp, #20
 80025d4:	bd90      	pop	{r4, r7, pc}

080025d6 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80025d6:	b590      	push	{r4, r7, lr}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80025e0:	2408      	movs	r4, #8
 80025e2:	193a      	adds	r2, r7, r4
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	2301      	movs	r3, #1
 80025e8:	2120      	movs	r1, #32
 80025ea:	f7ff ff82 	bl	80024f2 <hts221_read_reg>
 80025ee:	0003      	movs	r3, r0
 80025f0:	60fb      	str	r3, [r7, #12]

  switch (reg.odr)
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	079b      	lsls	r3, r3, #30
 80025f8:	0f9b      	lsrs	r3, r3, #30
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d014      	beq.n	800262a <hts221_data_rate_get+0x54>
 8002600:	dc17      	bgt.n	8002632 <hts221_data_rate_get+0x5c>
 8002602:	2b02      	cmp	r3, #2
 8002604:	d00d      	beq.n	8002622 <hts221_data_rate_get+0x4c>
 8002606:	dc14      	bgt.n	8002632 <hts221_data_rate_get+0x5c>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <hts221_data_rate_get+0x3c>
 800260c:	2b01      	cmp	r3, #1
 800260e:	d004      	beq.n	800261a <hts221_data_rate_get+0x44>
 8002610:	e00f      	b.n	8002632 <hts221_data_rate_get+0x5c>
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
      break;
 8002618:	e00f      	b.n	800263a <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
      break;
 8002620:	e00b      	b.n	800263a <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
      break;
 8002628:	e007      	b.n	800263a <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2203      	movs	r2, #3
 800262e:	701a      	strb	r2, [r3, #0]
      break;
 8002630:	e003      	b.n	800263a <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2204      	movs	r2, #4
 8002636:	701a      	strb	r2, [r3, #0]
      break;
 8002638:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b005      	add	sp, #20
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	000a      	movs	r2, r1
 800264e:	1cfb      	adds	r3, r7, #3
 8002650:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002652:	2408      	movs	r4, #8
 8002654:	193a      	adds	r2, r7, r4
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	2301      	movs	r3, #1
 800265a:	2120      	movs	r1, #32
 800265c:	f7ff ff49 	bl	80024f2 <hts221_read_reg>
 8002660:	0003      	movs	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d117      	bne.n	800269a <hts221_block_data_update_set+0x56>
  {
    reg.bdu = val;
 800266a:	1cfb      	adds	r3, r7, #3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	4013      	ands	r3, r2
 8002672:	b2da      	uxtb	r2, r3
 8002674:	193b      	adds	r3, r7, r4
 8002676:	2101      	movs	r1, #1
 8002678:	400a      	ands	r2, r1
 800267a:	0090      	lsls	r0, r2, #2
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	2104      	movs	r1, #4
 8002680:	438a      	bics	r2, r1
 8002682:	1c11      	adds	r1, r2, #0
 8002684:	1c02      	adds	r2, r0, #0
 8002686:	430a      	orrs	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800268a:	193a      	adds	r2, r7, r4
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	2301      	movs	r3, #1
 8002690:	2120      	movs	r1, #32
 8002692:	f7ff ff4f 	bl	8002534 <hts221_write_reg>
 8002696:	0003      	movs	r3, r0
 8002698:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b005      	add	sp, #20
 80026a2:	bd90      	pop	{r4, r7, pc}

080026a4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80026ae:	2408      	movs	r4, #8
 80026b0:	193a      	adds	r2, r7, r4
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	2302      	movs	r3, #2
 80026b6:	2128      	movs	r1, #40	; 0x28
 80026b8:	f7ff ff1b 	bl	80024f2 <hts221_read_reg>
 80026bc:	0003      	movs	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80026c0:	0021      	movs	r1, r4
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	5e9b      	ldrsh	r3, [r3, r2]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80026e8:	68fb      	ldr	r3, [r7, #12]
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b005      	add	sp, #20
 80026f0:	bd90      	pop	{r4, r7, pc}

080026f2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026f2:	b590      	push	{r4, r7, lr}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80026fc:	2408      	movs	r4, #8
 80026fe:	193a      	adds	r2, r7, r4
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	2302      	movs	r3, #2
 8002704:	212a      	movs	r1, #42	; 0x2a
 8002706:	f7ff fef4 	bl	80024f2 <hts221_read_reg>
 800270a:	0003      	movs	r3, r0
 800270c:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 800270e:	0021      	movs	r1, r4
 8002710:	187b      	adds	r3, r7, r1
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	b21a      	sxth	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	5e9b      	ldrsh	r3, [r3, r2]
 8002720:	b29b      	uxth	r3, r3
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	b29a      	uxth	r2, r3
 8002726:	187b      	adds	r3, r7, r1
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21a      	sxth	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	801a      	strh	r2, [r3, #0]

  return ret;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b005      	add	sp, #20
 800273e:	bd90      	pop	{r4, r7, pc}

08002740 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	2301      	movs	r3, #1
 8002750:	210f      	movs	r1, #15
 8002752:	f7ff fece 	bl	80024f2 <hts221_read_reg>
 8002756:	0003      	movs	r3, r0
 8002758:	60fb      	str	r3, [r7, #12]

  return ret;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}

08002764 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	000a      	movs	r2, r1
 800276e:	1cfb      	adds	r3, r7, #3
 8002770:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002772:	2408      	movs	r4, #8
 8002774:	193a      	adds	r2, r7, r4
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	2301      	movs	r3, #1
 800277a:	2120      	movs	r1, #32
 800277c:	f7ff feb9 	bl	80024f2 <hts221_read_reg>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <hts221_power_on_set+0x52>
  {
    reg.pd = val;
 800278a:	1cfb      	adds	r3, r7, #3
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	b2da      	uxtb	r2, r3
 8002794:	193b      	adds	r3, r7, r4
 8002796:	01d0      	lsls	r0, r2, #7
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	217f      	movs	r1, #127	; 0x7f
 800279c:	400a      	ands	r2, r1
 800279e:	1c11      	adds	r1, r2, #0
 80027a0:	1c02      	adds	r2, r0, #0
 80027a2:	430a      	orrs	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80027a6:	193a      	adds	r2, r7, r4
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	2301      	movs	r3, #1
 80027ac:	2120      	movs	r1, #32
 80027ae:	f7ff fec1 	bl	8002534 <hts221_write_reg>
 80027b2:	0003      	movs	r3, r0
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b005      	add	sp, #20
 80027be:	bd90      	pop	{r4, r7, pc}

080027c0 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80027ca:	240b      	movs	r4, #11
 80027cc:	193a      	adds	r2, r7, r4
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	2301      	movs	r3, #1
 80027d2:	2130      	movs	r1, #48	; 0x30
 80027d4:	f7ff fe8d 	bl	80024f2 <hts221_read_reg>
 80027d8:	0003      	movs	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
  *val = coeff / 2.0f;
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fe fded 	bl	80013c0 <__aeabi_i2f>
 80027e6:	1c03      	adds	r3, r0, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	05c9      	lsls	r1, r1, #23
 80027ec:	1c18      	adds	r0, r3, #0
 80027ee:	f7fe f915 	bl	8000a1c <__aeabi_fdiv>
 80027f2:	1c03      	adds	r3, r0, #0
 80027f4:	1c1a      	adds	r2, r3, #0
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	601a      	str	r2, [r3, #0]

  return ret;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b005      	add	sp, #20
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800280e:	240b      	movs	r4, #11
 8002810:	193a      	adds	r2, r7, r4
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	2301      	movs	r3, #1
 8002816:	2131      	movs	r1, #49	; 0x31
 8002818:	f7ff fe6b 	bl	80024f2 <hts221_read_reg>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  *val = coeff / 2.0f;
 8002820:	193b      	adds	r3, r7, r4
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	0018      	movs	r0, r3
 8002826:	f7fe fdcb 	bl	80013c0 <__aeabi_i2f>
 800282a:	1c03      	adds	r3, r0, #0
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	05c9      	lsls	r1, r1, #23
 8002830:	1c18      	adds	r0, r3, #0
 8002832:	f7fe f8f3 	bl	8000a1c <__aeabi_fdiv>
 8002836:	1c03      	adds	r3, r0, #0
 8002838:	1c1a      	adds	r2, r3, #0
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]

  return ret;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b005      	add	sp, #20
 8002846:	bd90      	pop	{r4, r7, pc}

08002848 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002848:	b5b0      	push	{r4, r5, r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002852:	240f      	movs	r4, #15
 8002854:	193a      	adds	r2, r7, r4
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	2301      	movs	r3, #1
 800285a:	2132      	movs	r1, #50	; 0x32
 800285c:	f7ff fe49 	bl	80024f2 <hts221_read_reg>
 8002860:	0003      	movs	r3, r0
 8002862:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d123      	bne.n	80028b2 <hts221_temp_deg_point_0_get+0x6a>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800286a:	2510      	movs	r5, #16
 800286c:	197a      	adds	r2, r7, r5
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	2301      	movs	r3, #1
 8002872:	2135      	movs	r1, #53	; 0x35
 8002874:	f7ff fe3d 	bl	80024f2 <hts221_read_reg>
 8002878:	0003      	movs	r3, r0
 800287a:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t0_msb;
 800287c:	197b      	adds	r3, r7, r5
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	079b      	lsls	r3, r3, #30
 8002882:	0f9b      	lsrs	r3, r3, #30
 8002884:	b2da      	uxtb	r2, r3
 8002886:	2113      	movs	r1, #19
 8002888:	187b      	adds	r3, r7, r1
 800288a:	701a      	strb	r2, [r3, #0]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800288c:	187b      	adds	r3, r7, r1
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	193a      	adds	r2, r7, r4
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	189b      	adds	r3, r3, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fd91 	bl	80013c0 <__aeabi_i2f>
 800289e:	1c03      	adds	r3, r0, #0
 80028a0:	2182      	movs	r1, #130	; 0x82
 80028a2:	05c9      	lsls	r1, r1, #23
 80028a4:	1c18      	adds	r0, r3, #0
 80028a6:	f7fe f8b9 	bl	8000a1c <__aeabi_fdiv>
 80028aa:	1c03      	adds	r3, r0, #0
 80028ac:	1c1a      	adds	r2, r3, #0
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80028b2:	697b      	ldr	r3, [r7, #20]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bdb0      	pop	{r4, r5, r7, pc}

080028bc <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80028c6:	240f      	movs	r4, #15
 80028c8:	193a      	adds	r2, r7, r4
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	2301      	movs	r3, #1
 80028ce:	2133      	movs	r1, #51	; 0x33
 80028d0:	f7ff fe0f 	bl	80024f2 <hts221_read_reg>
 80028d4:	0003      	movs	r3, r0
 80028d6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d123      	bne.n	8002926 <hts221_temp_deg_point_1_get+0x6a>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80028de:	2510      	movs	r5, #16
 80028e0:	197a      	adds	r2, r7, r5
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	2301      	movs	r3, #1
 80028e6:	2135      	movs	r1, #53	; 0x35
 80028e8:	f7ff fe03 	bl	80024f2 <hts221_read_reg>
 80028ec:	0003      	movs	r3, r0
 80028ee:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t1_msb;
 80028f0:	197b      	adds	r3, r7, r5
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	071b      	lsls	r3, r3, #28
 80028f6:	0f9b      	lsrs	r3, r3, #30
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	2113      	movs	r1, #19
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	701a      	strb	r2, [r3, #0]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002900:	187b      	adds	r3, r7, r1
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	193a      	adds	r2, r7, r4
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	189b      	adds	r3, r3, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f7fe fd57 	bl	80013c0 <__aeabi_i2f>
 8002912:	1c03      	adds	r3, r0, #0
 8002914:	2182      	movs	r1, #130	; 0x82
 8002916:	05c9      	lsls	r1, r1, #23
 8002918:	1c18      	adds	r0, r3, #0
 800291a:	f7fe f87f 	bl	8000a1c <__aeabi_fdiv>
 800291e:	1c03      	adds	r3, r0, #0
 8002920:	1c1a      	adds	r2, r3, #0
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002926:	697b      	ldr	r3, [r7, #20]
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b006      	add	sp, #24
 800292e:	bdb0      	pop	{r4, r5, r7, pc}

08002930 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800293a:	2408      	movs	r4, #8
 800293c:	193a      	adds	r2, r7, r4
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	2302      	movs	r3, #2
 8002942:	2136      	movs	r1, #54	; 0x36
 8002944:	f7ff fdd5 	bl	80024f2 <hts221_read_reg>
 8002948:	0003      	movs	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800294c:	0021      	movs	r1, r4
 800294e:	187b      	adds	r3, r7, r1
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	b29b      	uxth	r3, r3
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	b29a      	uxth	r2, r3
 8002958:	187b      	adds	r3, r7, r1
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	18d3      	adds	r3, r2, r3
 8002960:	b29a      	uxth	r2, r3
 8002962:	210a      	movs	r1, #10
 8002964:	187b      	adds	r3, r7, r1
 8002966:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2200      	movs	r2, #0
 800296c:	5e9b      	ldrsh	r3, [r3, r2]
 800296e:	0018      	movs	r0, r3
 8002970:	f7fe fd26 	bl	80013c0 <__aeabi_i2f>
 8002974:	1c02      	adds	r2, r0, #0
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	601a      	str	r2, [r3, #0]

  return ret;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b005      	add	sp, #20
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800298e:	2408      	movs	r4, #8
 8002990:	193a      	adds	r2, r7, r4
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	2302      	movs	r3, #2
 8002996:	213a      	movs	r1, #58	; 0x3a
 8002998:	f7ff fdab 	bl	80024f2 <hts221_read_reg>
 800299c:	0003      	movs	r3, r0
 800299e:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80029a0:	0021      	movs	r1, r4
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	18d3      	adds	r3, r2, r3
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	210a      	movs	r1, #10
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2200      	movs	r2, #0
 80029c0:	5e9b      	ldrsh	r3, [r3, r2]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7fe fcfc 	bl	80013c0 <__aeabi_i2f>
 80029c8:	1c02      	adds	r2, r0, #0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	601a      	str	r2, [r3, #0]

  return ret;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b005      	add	sp, #20
 80029d6:	bd90      	pop	{r4, r7, pc}

080029d8 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80029e2:	2408      	movs	r4, #8
 80029e4:	193a      	adds	r2, r7, r4
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	2302      	movs	r3, #2
 80029ea:	213c      	movs	r1, #60	; 0x3c
 80029ec:	f7ff fd81 	bl	80024f2 <hts221_read_reg>
 80029f0:	0003      	movs	r3, r0
 80029f2:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80029f4:	0021      	movs	r1, r4
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	18d3      	adds	r3, r2, r3
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	210a      	movs	r1, #10
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2200      	movs	r2, #0
 8002a14:	5e9b      	ldrsh	r3, [r3, r2]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7fe fcd2 	bl	80013c0 <__aeabi_i2f>
 8002a1c:	1c02      	adds	r2, r0, #0
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]

  return ret;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b005      	add	sp, #20
 8002a2a:	bd90      	pop	{r4, r7, pc}

08002a2c <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002a36:	2408      	movs	r4, #8
 8002a38:	193a      	adds	r2, r7, r4
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	213e      	movs	r1, #62	; 0x3e
 8002a40:	f7ff fd57 	bl	80024f2 <hts221_read_reg>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002a48:	0021      	movs	r1, r4
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	210a      	movs	r1, #10
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	5e9b      	ldrsh	r3, [r3, r2]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fe fca8 	bl	80013c0 <__aeabi_i2f>
 8002a70:	1c02      	adds	r2, r0, #0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	601a      	str	r2, [r3, #0]

  return ret;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b005      	add	sp, #20
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	425b      	negs	r3, r3
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e04e      	b.n	8002b3a <LIS2DW12_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	7b1a      	ldrb	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <LIS2DW12_RegisterBusIO+0xc4>)
 8002ad8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <LIS2DW12_RegisterBusIO+0xc8>)
 8002ade:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	425b      	negs	r3, r3
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e021      	b.n	8002b3a <LIS2DW12_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4798      	blx	r3
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d003      	beq.n	8002b08 <LIS2DW12_RegisterBusIO+0x88>
    {
      ret = LIS2DW12_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	425b      	negs	r3, r3
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e018      	b.n	8002b3a <LIS2DW12_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d114      	bne.n	8002b3a <LIS2DW12_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2228      	movs	r2, #40	; 0x28
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <LIS2DW12_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002b1a:	210b      	movs	r1, #11
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2205      	movs	r2, #5
 8002b20:	701a      	strb	r2, [r3, #0]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2121      	movs	r1, #33	; 0x21
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fbf6 	bl	800331c <LIS2DW12_Write_Reg>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d002      	beq.n	8002b3a <LIS2DW12_RegisterBusIO+0xba>
          {
            ret = LIS2DW12_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	425b      	negs	r3, r3
 8002b38:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b004      	add	sp, #16
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	08003665 	.word	0x08003665
 8002b48:	080036a9 	.word	0x080036a9

08002b4c <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	331c      	adds	r3, #28
 8002b58:	2101      	movs	r1, #1
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 f8bc 	bl	8003cd8 <lis2dw12_auto_increment_set>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d002      	beq.n	8002b6a <LIS2DW12_Init+0x1e>
  {
    return LIS2DW12_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	425b      	negs	r3, r3
 8002b68:	e046      	b.n	8002bf8 <LIS2DW12_Init+0xac>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	331c      	adds	r3, #28
 8002b6e:	2101      	movs	r1, #1
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 ffb5 	bl	8003ae0 <lis2dw12_block_data_update_set>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d002      	beq.n	8002b80 <LIS2DW12_Init+0x34>
  {
    return LIS2DW12_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	e03b      	b.n	8002bf8 <LIS2DW12_Init+0xac>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	331c      	adds	r3, #28
 8002b84:	2100      	movs	r1, #0
 8002b86:	0018      	movs	r0, r3
 8002b88:	f001 f8d6 	bl	8003d38 <lis2dw12_fifo_mode_set>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d002      	beq.n	8002b96 <LIS2DW12_Init+0x4a>
  {
    return LIS2DW12_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	425b      	negs	r3, r3
 8002b94:	e030      	b.n	8002bf8 <LIS2DW12_Init+0xac>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	331c      	adds	r3, #28
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 fde7 	bl	8003770 <lis2dw12_power_mode_set>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d002      	beq.n	8002bac <LIS2DW12_Init+0x60>
  {
    return LIS2DW12_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	425b      	negs	r3, r3
 8002baa:	e025      	b.n	8002bf8 <LIS2DW12_Init+0xac>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <LIS2DW12_Init+0xb4>)
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2230      	movs	r2, #48	; 0x30
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2231      	movs	r2, #49	; 0x31
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	331c      	adds	r3, #28
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fec7 	bl	800395c <lis2dw12_data_rate_set>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d002      	beq.n	8002bd8 <LIS2DW12_Init+0x8c>
  {
    return LIS2DW12_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	425b      	negs	r3, r3
 8002bd6:	e00f      	b.n	8002bf8 <LIS2DW12_Init+0xac>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	331c      	adds	r3, #28
 8002bdc:	2100      	movs	r1, #0
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 ffae 	bl	8003b40 <lis2dw12_full_scale_set>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d002      	beq.n	8002bee <LIS2DW12_Init+0xa2>
  {
    return LIS2DW12_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	425b      	negs	r3, r3
 8002bec:	e004      	b.n	8002bf8 <LIS2DW12_Init+0xac>
  }

  pObj->is_initialized = 1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2228      	movs	r2, #40	; 0x28
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	42c80000 	.word	0x42c80000

08002c04 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f87e 	bl	8002d10 <LIS2DW12_ACC_Disable>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d002      	beq.n	8002c1e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	425b      	negs	r3, r3
 8002c1c:	e00f      	b.n	8002c3e <LIS2DW12_DeInit+0x3a>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2230      	movs	r2, #48	; 0x30
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2231      	movs	r2, #49	; 0x31
 8002c30:	2100      	movs	r1, #0
 8002c32:	5499      	strb	r1, [r3, r2]

  pObj->is_initialized = 0;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2228      	movs	r2, #40	; 0x28
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	331c      	adds	r3, #28
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	0011      	movs	r1, r2
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 f82b 	bl	8003cb4 <lis2dw12_device_id_get>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d002      	beq.n	8002c68 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	425b      	negs	r3, r3
 8002c66:	e000      	b.n	8002c6a <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <LIS2DW12_GetCapabilities+0x50>)
 8002cb2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	44c80000 	.word	0x44c80000

08002cc8 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2229      	movs	r2, #41	; 0x29
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e014      	b.n	8002d08 <LIS2DW12_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2230      	movs	r2, #48	; 0x30
 8002ce6:	5c9a      	ldrb	r2, [r3, r2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2031      	movs	r0, #49	; 0x31
 8002cec:	5c1b      	ldrb	r3, [r3, r0]
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fb34 	bl	800335c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d002      	beq.n	8002cfe <LIS2DW12_ACC_Enable+0x36>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	425b      	negs	r3, r3
 8002cfc:	e004      	b.n	8002d08 <LIS2DW12_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2229      	movs	r2, #41	; 0x29
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2229      	movs	r2, #41	; 0x29
 8002d1c:	5c9b      	ldrb	r3, [r3, r2]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e00f      	b.n	8002d46 <LIS2DW12_ACC_Disable+0x36>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	331c      	adds	r3, #28
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fe15 	bl	800395c <lis2dw12_data_rate_set>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d002      	beq.n	8002d3c <LIS2DW12_ACC_Disable+0x2c>
  {
    return LIS2DW12_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	425b      	negs	r3, r3
 8002d3a:	e004      	b.n	8002d46 <LIS2DW12_ACC_Disable+0x36>
  }

  pObj->acc_is_enabled = 0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2229      	movs	r2, #41	; 0x29
 8002d40:	2100      	movs	r1, #0
 8002d42:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	331c      	adds	r3, #28
 8002d62:	220b      	movs	r2, #11
 8002d64:	18ba      	adds	r2, r7, r2
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 ff19 	bl	8003ba0 <lis2dw12_full_scale_get>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d002      	beq.n	8002d78 <LIS2DW12_ACC_GetSensitivity+0x28>
  {
    return LIS2DW12_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	425b      	negs	r3, r3
 8002d76:	e06a      	b.n	8002e4e <LIS2DW12_ACC_GetSensitivity+0xfe>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	331c      	adds	r3, #28
 8002d7c:	220a      	movs	r2, #10
 8002d7e:	18ba      	adds	r2, r7, r2
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fd60 	bl	8003848 <lis2dw12_power_mode_get>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d002      	beq.n	8002d92 <LIS2DW12_ACC_GetSensitivity+0x42>
  {
    return LIS2DW12_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	425b      	negs	r3, r3
 8002d90:	e05d      	b.n	8002e4e <LIS2DW12_ACC_GetSensitivity+0xfe>
  }

  switch (mode)
 8002d92:	230a      	movs	r3, #10
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b1b      	cmp	r3, #27
 8002d9a:	d850      	bhi.n	8002e3e <LIS2DW12_ACC_GetSensitivity+0xee>
 8002d9c:	009a      	lsls	r2, r3, #2
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <LIS2DW12_ACC_GetSensitivity+0x108>)
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	469f      	mov	pc, r3
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002da6:	230b      	movs	r3, #11
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d014      	beq.n	8002dda <LIS2DW12_ACC_GetSensitivity+0x8a>
 8002db0:	dc17      	bgt.n	8002de2 <LIS2DW12_ACC_GetSensitivity+0x92>
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d00d      	beq.n	8002dd2 <LIS2DW12_ACC_GetSensitivity+0x82>
 8002db6:	dc14      	bgt.n	8002de2 <LIS2DW12_ACC_GetSensitivity+0x92>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <LIS2DW12_ACC_GetSensitivity+0x72>
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d004      	beq.n	8002dca <LIS2DW12_ACC_GetSensitivity+0x7a>
 8002dc0:	e00f      	b.n	8002de2 <LIS2DW12_ACC_GetSensitivity+0x92>
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <LIS2DW12_ACC_GetSensitivity+0x10c>)
 8002dc6:	601a      	str	r2, [r3, #0]
          break;
 8002dc8:	e012      	b.n	8002df0 <LIS2DW12_ACC_GetSensitivity+0xa0>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <LIS2DW12_ACC_GetSensitivity+0x110>)
 8002dce:	601a      	str	r2, [r3, #0]
          break;
 8002dd0:	e00e      	b.n	8002df0 <LIS2DW12_ACC_GetSensitivity+0xa0>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <LIS2DW12_ACC_GetSensitivity+0x114>)
 8002dd6:	601a      	str	r2, [r3, #0]
          break;
 8002dd8:	e00a      	b.n	8002df0 <LIS2DW12_ACC_GetSensitivity+0xa0>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <LIS2DW12_ACC_GetSensitivity+0x118>)
 8002dde:	601a      	str	r2, [r3, #0]
          break;
 8002de0:	e006      	b.n	8002df0 <LIS2DW12_ACC_GetSensitivity+0xa0>

        default:
          *Sensitivity = -1.0f;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002de6:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	425b      	negs	r3, r3
 8002dec:	60fb      	str	r3, [r7, #12]
          break;
 8002dee:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002df0:	e02c      	b.n	8002e4c <LIS2DW12_ACC_GetSensitivity+0xfc>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002df2:	230b      	movs	r3, #11
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d014      	beq.n	8002e26 <LIS2DW12_ACC_GetSensitivity+0xd6>
 8002dfc:	dc17      	bgt.n	8002e2e <LIS2DW12_ACC_GetSensitivity+0xde>
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d00d      	beq.n	8002e1e <LIS2DW12_ACC_GetSensitivity+0xce>
 8002e02:	dc14      	bgt.n	8002e2e <LIS2DW12_ACC_GetSensitivity+0xde>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <LIS2DW12_ACC_GetSensitivity+0xbe>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d004      	beq.n	8002e16 <LIS2DW12_ACC_GetSensitivity+0xc6>
 8002e0c:	e00f      	b.n	8002e2e <LIS2DW12_ACC_GetSensitivity+0xde>
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <LIS2DW12_ACC_GetSensitivity+0x120>)
 8002e12:	601a      	str	r2, [r3, #0]
          break;
 8002e14:	e012      	b.n	8002e3c <LIS2DW12_ACC_GetSensitivity+0xec>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <LIS2DW12_ACC_GetSensitivity+0x124>)
 8002e1a:	601a      	str	r2, [r3, #0]
          break;
 8002e1c:	e00e      	b.n	8002e3c <LIS2DW12_ACC_GetSensitivity+0xec>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <LIS2DW12_ACC_GetSensitivity+0x10c>)
 8002e22:	601a      	str	r2, [r3, #0]
          break;
 8002e24:	e00a      	b.n	8002e3c <LIS2DW12_ACC_GetSensitivity+0xec>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <LIS2DW12_ACC_GetSensitivity+0x110>)
 8002e2a:	601a      	str	r2, [r3, #0]
          break;
 8002e2c:	e006      	b.n	8002e3c <LIS2DW12_ACC_GetSensitivity+0xec>

        default:
          *Sensitivity = -1.0f;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002e32:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	425b      	negs	r3, r3
 8002e38:	60fb      	str	r3, [r7, #12]
          break;
 8002e3a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002e3c:	e006      	b.n	8002e4c <LIS2DW12_ACC_GetSensitivity+0xfc>

    default:
      *Sensitivity = -1.0f;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002e42:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	425b      	negs	r3, r3
 8002e48:	60fb      	str	r3, [r7, #12]
      break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	0801529c 	.word	0x0801529c
 8002e5c:	3f79db23 	.word	0x3f79db23
 8002e60:	3ff9db23 	.word	0x3ff9db23
 8002e64:	4079db23 	.word	0x4079db23
 8002e68:	40f9db23 	.word	0x40f9db23
 8002e6c:	bf800000 	.word	0xbf800000
 8002e70:	3e79db23 	.word	0x3e79db23
 8002e74:	3ef9db23 	.word	0x3ef9db23

08002e78 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	331c      	adds	r3, #28
 8002e8a:	220b      	movs	r2, #11
 8002e8c:	18ba      	adds	r2, r7, r2
 8002e8e:	0011      	movs	r1, r2
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 fdbb 	bl	8003a0c <lis2dw12_data_rate_get>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d002      	beq.n	8002ea0 <LIS2DW12_ACC_GetOutputDataRate+0x28>
  {
    return LIS2DW12_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	e09f      	b.n	8002fe0 <LIS2DW12_ACC_GetOutputDataRate+0x168>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	331c      	adds	r3, #28
 8002ea4:	220a      	movs	r2, #10
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fccc 	bl	8003848 <lis2dw12_power_mode_get>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d002      	beq.n	8002eba <LIS2DW12_ACC_GetOutputDataRate+0x42>
  {
    return LIS2DW12_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	425b      	negs	r3, r3
 8002eb8:	e092      	b.n	8002fe0 <LIS2DW12_ACC_GetOutputDataRate+0x168>
  }

  switch (odr_low_level)
 8002eba:	230b      	movs	r3, #11
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b32      	cmp	r3, #50	; 0x32
 8002ec2:	d900      	bls.n	8002ec6 <LIS2DW12_ACC_GetOutputDataRate+0x4e>
 8002ec4:	e084      	b.n	8002fd0 <LIS2DW12_ACC_GetOutputDataRate+0x158>
 8002ec6:	009a      	lsls	r2, r3, #2
 8002ec8:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <LIS2DW12_ACC_GetOutputDataRate+0x170>)
 8002eca:	18d3      	adds	r3, r2, r3
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	469f      	mov	pc, r3
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
      break;
 8002ed6:	e082      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002ed8:	230a      	movs	r3, #10
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b1b      	cmp	r3, #27
 8002ee0:	d80c      	bhi.n	8002efc <LIS2DW12_ACC_GetOutputDataRate+0x84>
 8002ee2:	009a      	lsls	r2, r3, #2
 8002ee4:	4b41      	ldr	r3, [pc, #260]	; (8002fec <LIS2DW12_ACC_GetOutputDataRate+0x174>)
 8002ee6:	18d3      	adds	r3, r2, r3
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 8002ef0:	601a      	str	r2, [r3, #0]
          break;
 8002ef2:	e00a      	b.n	8002f0a <LIS2DW12_ACC_GetOutputDataRate+0x92>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <LIS2DW12_ACC_GetOutputDataRate+0x17c>)
 8002ef8:	601a      	str	r2, [r3, #0]
          break;
 8002efa:	e006      	b.n	8002f0a <LIS2DW12_ACC_GetOutputDataRate+0x92>

        default:
          *Odr = -1.0f;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4a3e      	ldr	r2, [pc, #248]	; (8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8002f00:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	425b      	negs	r3, r3
 8002f06:	60fb      	str	r3, [r7, #12]
          break;
 8002f08:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002f0a:	e068      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 8002f10:	601a      	str	r2, [r3, #0]
      break;
 8002f12:	e064      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4a39      	ldr	r2, [pc, #228]	; (8002ffc <LIS2DW12_ACC_GetOutputDataRate+0x184>)
 8002f18:	601a      	str	r2, [r3, #0]
      break;
 8002f1a:	e060      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4a38      	ldr	r2, [pc, #224]	; (8003000 <LIS2DW12_ACC_GetOutputDataRate+0x188>)
 8002f20:	601a      	str	r2, [r3, #0]
      break;
 8002f22:	e05c      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4a37      	ldr	r2, [pc, #220]	; (8003004 <LIS2DW12_ACC_GetOutputDataRate+0x18c>)
 8002f28:	601a      	str	r2, [r3, #0]
      break;
 8002f2a:	e058      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4a36      	ldr	r2, [pc, #216]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 8002f30:	601a      	str	r2, [r3, #0]
      break;
 8002f32:	e054      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002f34:	230a      	movs	r3, #10
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b1b      	cmp	r3, #27
 8002f3c:	d80c      	bhi.n	8002f58 <LIS2DW12_ACC_GetOutputDataRate+0xe0>
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <LIS2DW12_ACC_GetOutputDataRate+0x194>)
 8002f42:	18d3      	adds	r3, r2, r3
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4a31      	ldr	r2, [pc, #196]	; (8003010 <LIS2DW12_ACC_GetOutputDataRate+0x198>)
 8002f4c:	601a      	str	r2, [r3, #0]
          break;
 8002f4e:	e00a      	b.n	8002f66 <LIS2DW12_ACC_GetOutputDataRate+0xee>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 8002f54:	601a      	str	r2, [r3, #0]
          break;
 8002f56:	e006      	b.n	8002f66 <LIS2DW12_ACC_GetOutputDataRate+0xee>

        default:
          *Odr = -1.0f;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8002f5c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	425b      	negs	r3, r3
 8002f62:	60fb      	str	r3, [r7, #12]
          break;
 8002f64:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002f66:	e03a      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002f68:	230a      	movs	r3, #10
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b1b      	cmp	r3, #27
 8002f70:	d80c      	bhi.n	8002f8c <LIS2DW12_ACC_GetOutputDataRate+0x114>
 8002f72:	009a      	lsls	r2, r3, #2
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <LIS2DW12_ACC_GetOutputDataRate+0x19c>)
 8002f76:	18d3      	adds	r3, r2, r3
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4a26      	ldr	r2, [pc, #152]	; (8003018 <LIS2DW12_ACC_GetOutputDataRate+0x1a0>)
 8002f80:	601a      	str	r2, [r3, #0]
          break;
 8002f82:	e00a      	b.n	8002f9a <LIS2DW12_ACC_GetOutputDataRate+0x122>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4a20      	ldr	r2, [pc, #128]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 8002f88:	601a      	str	r2, [r3, #0]
          break;
 8002f8a:	e006      	b.n	8002f9a <LIS2DW12_ACC_GetOutputDataRate+0x122>

        default:
          *Odr = -1.0f;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8002f90:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	425b      	negs	r3, r3
 8002f96:	60fb      	str	r3, [r7, #12]
          break;
 8002f98:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002f9a:	e020      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b1b      	cmp	r3, #27
 8002fa4:	d80c      	bhi.n	8002fc0 <LIS2DW12_ACC_GetOutputDataRate+0x148>
 8002fa6:	009a      	lsls	r2, r3, #2
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <LIS2DW12_ACC_GetOutputDataRate+0x1a4>)
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8002fb4:	601a      	str	r2, [r3, #0]
          break;
 8002fb6:	e00a      	b.n	8002fce <LIS2DW12_ACC_GetOutputDataRate+0x156>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 8002fbc:	601a      	str	r2, [r3, #0]
          break;
 8002fbe:	e006      	b.n	8002fce <LIS2DW12_ACC_GetOutputDataRate+0x156>

        default:
          *Odr = -1.0f;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8002fc4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	425b      	negs	r3, r3
 8002fca:	60fb      	str	r3, [r7, #12]
          break;
 8002fcc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002fce:	e006      	b.n	8002fde <LIS2DW12_ACC_GetOutputDataRate+0x166>

    default:
      *Odr = -1.0f;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8002fd4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	425b      	negs	r3, r3
 8002fda:	60fb      	str	r3, [r7, #12]
      break;
 8002fdc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8002fde:	68fb      	ldr	r3, [r7, #12]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b004      	add	sp, #16
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	0801530c 	.word	0x0801530c
 8002fec:	080153d8 	.word	0x080153d8
 8002ff0:	41480000 	.word	0x41480000
 8002ff4:	3fcccccd 	.word	0x3fcccccd
 8002ff8:	bf800000 	.word	0xbf800000
 8002ffc:	41c80000 	.word	0x41c80000
 8003000:	42480000 	.word	0x42480000
 8003004:	42c80000 	.word	0x42c80000
 8003008:	43480000 	.word	0x43480000
 800300c:	08015448 	.word	0x08015448
 8003010:	43c80000 	.word	0x43c80000
 8003014:	080154b8 	.word	0x080154b8
 8003018:	44480000 	.word	0x44480000
 800301c:	08015528 	.word	0x08015528
 8003020:	44c80000 	.word	0x44c80000

08003024 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	2300      	movs	r3, #0
 8003034:	2200      	movs	r2, #0
 8003036:	f000 f805 	bl	8003044 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800303a:	0003      	movs	r3, r0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	0019      	movs	r1, r3
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	1c0a      	adds	r2, r1, #0
 8003058:	701a      	strb	r2, [r3, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2229      	movs	r2, #41	; 0x29
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10a      	bne.n	800307a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x36>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003064:	1dbb      	adds	r3, r7, #6
 8003066:	781c      	ldrb	r4, [r3, #0]
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	0023      	movs	r3, r4
 8003072:	f000 f973 	bl	800335c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003076:	0003      	movs	r3, r0
 8003078:	e009      	b.n	800308e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x4a>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800307a:	1dbb      	adds	r3, r7, #6
 800307c:	781c      	ldrb	r4, [r3, #0]
 800307e:	1dfb      	adds	r3, r7, #7
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	0023      	movs	r3, r4
 8003088:	f000 fa7c 	bl	8003584 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800308c:	0003      	movs	r3, r0
  }
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b005      	add	sp, #20
 8003094:	bd90      	pop	{r4, r7, pc}

08003096 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	331c      	adds	r3, #28
 80030a8:	220b      	movs	r2, #11
 80030aa:	18ba      	adds	r2, r7, r2
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 fd76 	bl	8003ba0 <lis2dw12_full_scale_get>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d002      	beq.n	80030be <LIS2DW12_ACC_GetFullScale+0x28>
  {
    return LIS2DW12_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	425b      	negs	r3, r3
 80030bc:	e026      	b.n	800310c <LIS2DW12_ACC_GetFullScale+0x76>
  }

  switch (fs_low_level)
 80030be:	230b      	movs	r3, #11
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d014      	beq.n	80030f2 <LIS2DW12_ACC_GetFullScale+0x5c>
 80030c8:	dc17      	bgt.n	80030fa <LIS2DW12_ACC_GetFullScale+0x64>
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d00d      	beq.n	80030ea <LIS2DW12_ACC_GetFullScale+0x54>
 80030ce:	dc14      	bgt.n	80030fa <LIS2DW12_ACC_GetFullScale+0x64>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <LIS2DW12_ACC_GetFullScale+0x44>
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d004      	beq.n	80030e2 <LIS2DW12_ACC_GetFullScale+0x4c>
 80030d8:	e00f      	b.n	80030fa <LIS2DW12_ACC_GetFullScale+0x64>
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
      break;
 80030e0:	e013      	b.n	800310a <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_4g:
      *FullScale =  4;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2204      	movs	r2, #4
 80030e6:	601a      	str	r2, [r3, #0]
      break;
 80030e8:	e00f      	b.n	800310a <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_8g:
      *FullScale =  8;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2208      	movs	r2, #8
 80030ee:	601a      	str	r2, [r3, #0]
      break;
 80030f0:	e00b      	b.n	800310a <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_16g:
      *FullScale = 16;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2210      	movs	r2, #16
 80030f6:	601a      	str	r2, [r3, #0]
      break;
 80030f8:	e007      	b.n	800310a <LIS2DW12_ACC_GetFullScale+0x74>

    default:
      *FullScale = -1;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4252      	negs	r2, r2
 8003100:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	425b      	negs	r3, r3
 8003106:	60fb      	str	r3, [r7, #12]
      break;
 8003108:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}

08003114 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b02      	cmp	r3, #2
 8003122:	dd0b      	ble.n	800313c <LIS2DW12_ACC_SetFullScale+0x28>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b04      	cmp	r3, #4
 8003128:	dd06      	ble.n	8003138 <LIS2DW12_ACC_SetFullScale+0x24>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	dc01      	bgt.n	8003134 <LIS2DW12_ACC_SetFullScale+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e004      	b.n	800313e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003134:	2303      	movs	r3, #3
 8003136:	e002      	b.n	800313e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LIS2DW12_ACC_SetFullScale+0x2a>
 800313c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800313e:	210f      	movs	r1, #15
 8003140:	187a      	adds	r2, r7, r1
 8003142:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	331c      	adds	r3, #28
 8003148:	001a      	movs	r2, r3
 800314a:	187b      	adds	r3, r7, r1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	0019      	movs	r1, r3
 8003150:	0010      	movs	r0, r2
 8003152:	f000 fcf5 	bl	8003b40 <lis2dw12_full_scale_set>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d002      	beq.n	8003160 <LIS2DW12_ACC_SetFullScale+0x4c>
  {
    return LIS2DW12_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	425b      	negs	r3, r3
 800315e:	e000      	b.n	8003162 <LIS2DW12_ACC_SetFullScale+0x4e>
  }

  return LIS2DW12_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	331c      	adds	r3, #28
 800317e:	220b      	movs	r2, #11
 8003180:	18ba      	adds	r2, r7, r2
 8003182:	0011      	movs	r1, r2
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fb5f 	bl	8003848 <lis2dw12_power_mode_get>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d002      	beq.n	8003194 <LIS2DW12_ACC_GetAxesRaw+0x28>
  {
    return LIS2DW12_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	425b      	negs	r3, r3
 8003192:	e05f      	b.n	8003254 <LIS2DW12_ACC_GetAxesRaw+0xe8>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	331c      	adds	r3, #28
 8003198:	220c      	movs	r2, #12
 800319a:	18ba      	adds	r2, r7, r2
 800319c:	0011      	movs	r1, r2
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fd35 	bl	8003c0e <lis2dw12_acceleration_raw_get>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d002      	beq.n	80031ae <LIS2DW12_ACC_GetAxesRaw+0x42>
  {
    return LIS2DW12_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	425b      	negs	r3, r3
 80031ac:	e052      	b.n	8003254 <LIS2DW12_ACC_GetAxesRaw+0xe8>
  }

  switch (mode)
 80031ae:	230b      	movs	r3, #11
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b1b      	cmp	r3, #27
 80031b6:	d848      	bhi.n	800324a <LIS2DW12_ACC_GetAxesRaw+0xde>
 80031b8:	009a      	lsls	r2, r3, #2
 80031ba:	4b28      	ldr	r3, [pc, #160]	; (800325c <LIS2DW12_ACC_GetAxesRaw+0xf0>)
 80031bc:	18d3      	adds	r3, r2, r3
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	469f      	mov	pc, r3
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80031c2:	230c      	movs	r3, #12
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	5e9b      	ldrsh	r3, [r3, r2]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da00      	bge.n	80031d0 <LIS2DW12_ACC_GetAxesRaw+0x64>
 80031ce:	330f      	adds	r3, #15
 80031d0:	111b      	asrs	r3, r3, #4
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80031d8:	230c      	movs	r3, #12
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2202      	movs	r2, #2
 80031de:	5e9b      	ldrsh	r3, [r3, r2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da00      	bge.n	80031e6 <LIS2DW12_ACC_GetAxesRaw+0x7a>
 80031e4:	330f      	adds	r3, #15
 80031e6:	111b      	asrs	r3, r3, #4
 80031e8:	b21a      	sxth	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80031ee:	230c      	movs	r3, #12
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2204      	movs	r2, #4
 80031f4:	5e9b      	ldrsh	r3, [r3, r2]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	da00      	bge.n	80031fc <LIS2DW12_ACC_GetAxesRaw+0x90>
 80031fa:	330f      	adds	r3, #15
 80031fc:	111b      	asrs	r3, r3, #4
 80031fe:	b21a      	sxth	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	809a      	strh	r2, [r3, #4]
      break;
 8003204:	e025      	b.n	8003252 <LIS2DW12_ACC_GetAxesRaw+0xe6>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003206:	230c      	movs	r3, #12
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2200      	movs	r2, #0
 800320c:	5e9b      	ldrsh	r3, [r3, r2]
 800320e:	2b00      	cmp	r3, #0
 8003210:	da00      	bge.n	8003214 <LIS2DW12_ACC_GetAxesRaw+0xa8>
 8003212:	3303      	adds	r3, #3
 8003214:	109b      	asrs	r3, r3, #2
 8003216:	b21a      	sxth	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800321c:	230c      	movs	r3, #12
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2202      	movs	r2, #2
 8003222:	5e9b      	ldrsh	r3, [r3, r2]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da00      	bge.n	800322a <LIS2DW12_ACC_GetAxesRaw+0xbe>
 8003228:	3303      	adds	r3, #3
 800322a:	109b      	asrs	r3, r3, #2
 800322c:	b21a      	sxth	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003232:	230c      	movs	r3, #12
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2204      	movs	r2, #4
 8003238:	5e9b      	ldrsh	r3, [r3, r2]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da00      	bge.n	8003240 <LIS2DW12_ACC_GetAxesRaw+0xd4>
 800323e:	3303      	adds	r3, #3
 8003240:	109b      	asrs	r3, r3, #2
 8003242:	b21a      	sxth	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	809a      	strh	r2, [r3, #4]
      break;
 8003248:	e003      	b.n	8003252 <LIS2DW12_ACC_GetAxesRaw+0xe6>

    default:
      ret = LIS2DW12_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	425b      	negs	r3, r3
 800324e:	617b      	str	r3, [r7, #20]
      break;
 8003250:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003252:	697b      	ldr	r3, [r7, #20]
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b006      	add	sp, #24
 800325a:	bd80      	pop	{r7, pc}
 800325c:	08015598 	.word	0x08015598

08003260 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800326e:	2310      	movs	r3, #16
 8003270:	18fa      	adds	r2, r7, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0011      	movs	r1, r2
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff ff78 	bl	800316c <LIS2DW12_ACC_GetAxesRaw>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d002      	beq.n	8003286 <LIS2DW12_ACC_GetAxes+0x26>
  {
    return LIS2DW12_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	425b      	negs	r3, r3
 8003284:	e046      	b.n	8003314 <LIS2DW12_ACC_GetAxes+0xb4>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003286:	230c      	movs	r3, #12
 8003288:	18fa      	adds	r2, r7, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0011      	movs	r1, r2
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff fd5e 	bl	8002d50 <LIS2DW12_ACC_GetSensitivity>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d002      	beq.n	800329e <LIS2DW12_ACC_GetAxes+0x3e>
  {
    return LIS2DW12_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	425b      	negs	r3, r3
 800329c:	e03a      	b.n	8003314 <LIS2DW12_ACC_GetAxes+0xb4>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800329e:	2410      	movs	r4, #16
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	2200      	movs	r2, #0
 80032a4:	5e9b      	ldrsh	r3, [r3, r2]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fe f88a 	bl	80013c0 <__aeabi_i2f>
 80032ac:	1c02      	adds	r2, r0, #0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1c19      	adds	r1, r3, #0
 80032b2:	1c10      	adds	r0, r2, #0
 80032b4:	f7fd fd7a 	bl	8000dac <__aeabi_fmul>
 80032b8:	1c03      	adds	r3, r0, #0
 80032ba:	1c18      	adds	r0, r3, #0
 80032bc:	f7fe f860 	bl	8001380 <__aeabi_f2iz>
 80032c0:	0002      	movs	r2, r0
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	2202      	movs	r2, #2
 80032ca:	5e9b      	ldrsh	r3, [r3, r2]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fe f877 	bl	80013c0 <__aeabi_i2f>
 80032d2:	1c02      	adds	r2, r0, #0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1c19      	adds	r1, r3, #0
 80032d8:	1c10      	adds	r0, r2, #0
 80032da:	f7fd fd67 	bl	8000dac <__aeabi_fmul>
 80032de:	1c03      	adds	r3, r0, #0
 80032e0:	1c18      	adds	r0, r3, #0
 80032e2:	f7fe f84d 	bl	8001380 <__aeabi_f2iz>
 80032e6:	0002      	movs	r2, r0
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	2204      	movs	r2, #4
 80032f0:	5e9b      	ldrsh	r3, [r3, r2]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fe f864 	bl	80013c0 <__aeabi_i2f>
 80032f8:	1c02      	adds	r2, r0, #0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1c19      	adds	r1, r3, #0
 80032fe:	1c10      	adds	r0, r2, #0
 8003300:	f7fd fd54 	bl	8000dac <__aeabi_fmul>
 8003304:	1c03      	adds	r3, r0, #0
 8003306:	1c18      	adds	r0, r3, #0
 8003308:	f7fe f83a 	bl	8001380 <__aeabi_f2iz>
 800330c:	0002      	movs	r2, r0
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b007      	add	sp, #28
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	0008      	movs	r0, r1
 8003326:	0011      	movs	r1, r2
 8003328:	1cfb      	adds	r3, r7, #3
 800332a:	1c02      	adds	r2, r0, #0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	1cbb      	adds	r3, r7, #2
 8003330:	1c0a      	adds	r2, r1, #0
 8003332:	701a      	strb	r2, [r3, #0]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	331c      	adds	r3, #28
 8003338:	0018      	movs	r0, r3
 800333a:	1cba      	adds	r2, r7, #2
 800333c:	1cfb      	adds	r3, r7, #3
 800333e:	7819      	ldrb	r1, [r3, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	f000 f9f4 	bl	800372e <lis2dw12_write_reg>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d002      	beq.n	8003350 <LIS2DW12_Write_Reg+0x34>
  {
    return LIS2DW12_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	425b      	negs	r3, r3
 800334e:	e000      	b.n	8003352 <LIS2DW12_Write_Reg+0x36>
  }

  return LIS2DW12_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b002      	add	sp, #8
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	0019      	movs	r1, r3
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	1dbb      	adds	r3, r7, #6
 800336e:	1c0a      	adds	r2, r1, #0
 8003370:	701a      	strb	r2, [r3, #0]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d100      	bne.n	800337c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20>
 800337a:	e067      	b.n	800344c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
 800337c:	dc06      	bgt.n	800338c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x30>
 800337e:	2b03      	cmp	r3, #3
 8003380:	d04c      	beq.n	800341c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003382:	dc03      	bgt.n	800338c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x30>
 8003384:	2b01      	cmp	r3, #1
 8003386:	d019      	beq.n	80033bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003388:	2b02      	cmp	r3, #2
 800338a:	d02f      	beq.n	80033ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 800338c:	1dbb      	adds	r3, r7, #6
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d004      	beq.n	800339e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x42>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003394:	2317      	movs	r3, #23
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2204      	movs	r2, #4
 800339a:	701a      	strb	r2, [r3, #0]
          break;
 800339c:	e004      	b.n	80033a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x4c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800339e:	2317      	movs	r3, #23
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2214      	movs	r2, #20
 80033a4:	701a      	strb	r2, [r3, #0]
          break;
 80033a6:	46c0      	nop			; (mov r8, r8)
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80033a8:	496e      	ldr	r1, [pc, #440]	; (8003564 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 80033aa:	68b8      	ldr	r0, [r7, #8]
 80033ac:	f7fd f83e 	bl	800042c <__aeabi_fcmplt>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d100      	bne.n	80033b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80033b4:	e062      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 12.5f;
 80033b6:	4b6b      	ldr	r3, [pc, #428]	; (8003564 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 80033b8:	60bb      	str	r3, [r7, #8]
      break;
 80033ba:	e05f      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80033bc:	1dbb      	adds	r3, r7, #6
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d004      	beq.n	80033ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80033c4:	2317      	movs	r3, #23
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2203      	movs	r2, #3
 80033ca:	701a      	strb	r2, [r3, #0]
          break;
 80033cc:	e004      	b.n	80033d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80033ce:	2317      	movs	r3, #23
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2213      	movs	r2, #19
 80033d4:	701a      	strb	r2, [r3, #0]
          break;
 80033d6:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80033d8:	4963      	ldr	r1, [pc, #396]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 80033da:	68b8      	ldr	r0, [r7, #8]
 80033dc:	f7fd f83a 	bl	8000454 <__aeabi_fcmpgt>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d100      	bne.n	80033e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x8a>
      {
        Odr = 200.0f;
      }
      break;
 80033e4:	e04a      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 80033e6:	4b60      	ldr	r3, [pc, #384]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 80033e8:	60bb      	str	r3, [r7, #8]
      break;
 80033ea:	e047      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80033ec:	1dbb      	adds	r3, r7, #6
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d004      	beq.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa2>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80033f4:	2317      	movs	r3, #23
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
          break;
 80033fc:	e004      	b.n	8003408 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xac>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80033fe:	2317      	movs	r3, #23
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2212      	movs	r2, #18
 8003404:	701a      	strb	r2, [r3, #0]
          break;
 8003406:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003408:	4957      	ldr	r1, [pc, #348]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 800340a:	68b8      	ldr	r0, [r7, #8]
 800340c:	f7fd f822 	bl	8000454 <__aeabi_fcmpgt>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d100      	bne.n	8003416 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xba>
      {
        Odr = 200.0f;
      }
      break;
 8003414:	e032      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003418:	60bb      	str	r3, [r7, #8]
      break;
 800341a:	e02f      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d004      	beq.n	800342e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xd2>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003424:	2317      	movs	r3, #23
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
          break;
 800342c:	e004      	b.n	8003438 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xdc>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800342e:	2317      	movs	r3, #23
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	2211      	movs	r2, #17
 8003434:	701a      	strb	r2, [r3, #0]
          break;
 8003436:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003438:	494b      	ldr	r1, [pc, #300]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 800343a:	68b8      	ldr	r0, [r7, #8]
 800343c:	f7fd f80a 	bl	8000454 <__aeabi_fcmpgt>
 8003440:	1e03      	subs	r3, r0, #0
 8003442:	d100      	bne.n	8003446 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xea>
      {
        Odr = 200.0f;
      }
      break;
 8003444:	e01a      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8003446:	4b48      	ldr	r3, [pc, #288]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003448:	60bb      	str	r3, [r7, #8]
      break;
 800344a:	e017      	b.n	800347c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d004      	beq.n	800345e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x102>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8003454:	2317      	movs	r3, #23
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
          break;
 800345c:	e004      	b.n	8003468 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800345e:	2317      	movs	r3, #23
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2210      	movs	r2, #16
 8003464:	701a      	strb	r2, [r3, #0]
          break;
 8003466:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003468:	493f      	ldr	r1, [pc, #252]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f7fc fff2 	bl	8000454 <__aeabi_fcmpgt>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d100      	bne.n	8003476 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11a>
      {
        Odr = 200.0f;
      }
      break;
 8003474:	e001      	b.n	800347a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11e>
        Odr = 200.0f;
 8003476:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003478:	60bb      	str	r3, [r7, #8]
      break;
 800347a:	46c0      	nop			; (mov r8, r8)
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800347c:	493b      	ldr	r1, [pc, #236]	; (800356c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>)
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f7fc ffde 	bl	8000440 <__aeabi_fcmple>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d001      	beq.n	800348c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x130>
 8003488:	2301      	movs	r3, #1
 800348a:	e038      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 800348c:	4935      	ldr	r1, [pc, #212]	; (8003564 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 800348e:	68b8      	ldr	r0, [r7, #8]
 8003490:	f7fc ffd6 	bl	8000440 <__aeabi_fcmple>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d001      	beq.n	800349c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x140>
 8003498:	2302      	movs	r3, #2
 800349a:	e030      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 800349c:	4934      	ldr	r1, [pc, #208]	; (8003570 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x214>)
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	f7fc ffce 	bl	8000440 <__aeabi_fcmple>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d001      	beq.n	80034ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x150>
 80034a8:	2303      	movs	r3, #3
 80034aa:	e028      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80034ac:	4931      	ldr	r1, [pc, #196]	; (8003574 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80034ae:	68b8      	ldr	r0, [r7, #8]
 80034b0:	f7fc ffc6 	bl	8000440 <__aeabi_fcmple>
 80034b4:	1e03      	subs	r3, r0, #0
 80034b6:	d001      	beq.n	80034bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
 80034b8:	2304      	movs	r3, #4
 80034ba:	e020      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80034bc:	492e      	ldr	r1, [pc, #184]	; (8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>)
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f7fc ffbe 	bl	8000440 <__aeabi_fcmple>
 80034c4:	1e03      	subs	r3, r0, #0
 80034c6:	d001      	beq.n	80034cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x170>
 80034c8:	2305      	movs	r3, #5
 80034ca:	e018      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80034cc:	4926      	ldr	r1, [pc, #152]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 80034ce:	68b8      	ldr	r0, [r7, #8]
 80034d0:	f7fc ffb6 	bl	8000440 <__aeabi_fcmple>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x180>
 80034d8:	2306      	movs	r3, #6
 80034da:	e010      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80034dc:	4927      	ldr	r1, [pc, #156]	; (800357c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80034de:	68b8      	ldr	r0, [r7, #8]
 80034e0:	f7fc ffae 	bl	8000440 <__aeabi_fcmple>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80034e8:	2307      	movs	r3, #7
 80034ea:	e008      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80034ec:	4924      	ldr	r1, [pc, #144]	; (8003580 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>)
 80034ee:	68b8      	ldr	r0, [r7, #8]
 80034f0:	f7fc ffa6 	bl	8000440 <__aeabi_fcmple>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 80034f8:	2308      	movs	r3, #8
 80034fa:	e000      	b.n	80034fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80034fc:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80034fe:	2116      	movs	r1, #22
 8003500:	187a      	adds	r2, r7, r1
 8003502:	7013      	strb	r3, [r2, #0]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	331c      	adds	r3, #28
 8003508:	001a      	movs	r2, r3
 800350a:	187b      	adds	r3, r7, r1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	0019      	movs	r1, r3
 8003510:	0010      	movs	r0, r2
 8003512:	f000 fa23 	bl	800395c <lis2dw12_data_rate_set>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d002      	beq.n	8003520 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	425b      	negs	r3, r3
 800351e:	e01c      	b.n	800355a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fe>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	331c      	adds	r3, #28
 8003524:	001a      	movs	r2, r3
 8003526:	2317      	movs	r3, #23
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	0019      	movs	r1, r3
 800352e:	0010      	movs	r0, r2
 8003530:	f000 f91e 	bl	8003770 <lis2dw12_power_mode_set>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d002      	beq.n	800353e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e2>
  {
    return LIS2DW12_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	425b      	negs	r3, r3
 800353c:	e00d      	b.n	800355a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fe>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1dfa      	adds	r2, r7, #7
 8003548:	2130      	movs	r1, #48	; 0x30
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	545a      	strb	r2, [r3, r1]
  pObj->acc_low_noise = Noise;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1dba      	adds	r2, r7, #6
 8003552:	2131      	movs	r1, #49	; 0x31
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	545a      	strb	r2, [r3, r1]

  return LIS2DW12_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b006      	add	sp, #24
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	41480000 	.word	0x41480000
 8003568:	43480000 	.word	0x43480000
 800356c:	3fcccccd 	.word	0x3fcccccd
 8003570:	41c80000 	.word	0x41c80000
 8003574:	42480000 	.word	0x42480000
 8003578:	42c80000 	.word	0x42c80000
 800357c:	43c80000 	.word	0x43c80000
 8003580:	44480000 	.word	0x44480000

08003584 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	0019      	movs	r1, r3
 8003590:	1dfb      	adds	r3, r7, #7
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	1dbb      	adds	r3, r7, #6
 8003596:	1c0a      	adds	r2, r1, #0
 8003598:	701a      	strb	r2, [r3, #0]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1dfa      	adds	r2, r7, #7
 800359e:	2130      	movs	r1, #48	; 0x30
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	545a      	strb	r2, [r3, r1]
  pObj->acc_low_noise = Noise;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1dba      	adds	r2, r7, #6
 80035a8:	2131      	movs	r1, #49	; 0x31
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	545a      	strb	r2, [r3, r1]

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80035ae:	4924      	ldr	r1, [pc, #144]	; (8003640 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 80035b0:	68b8      	ldr	r0, [r7, #8]
 80035b2:	f7fc ff45 	bl	8000440 <__aeabi_fcmple>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 80035bc:	e038      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=   25.0f) ?   25.0f
 80035be:	4921      	ldr	r1, [pc, #132]	; (8003644 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80035c0:	68b8      	ldr	r0, [r7, #8]
 80035c2:	f7fc ff3d 	bl	8000440 <__aeabi_fcmple>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d001      	beq.n	80035ce <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80035cc:	e030      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=   50.0f) ?   50.0f
 80035ce:	491e      	ldr	r1, [pc, #120]	; (8003648 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80035d0:	68b8      	ldr	r0, [r7, #8]
 80035d2:	f7fc ff35 	bl	8000440 <__aeabi_fcmple>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5a>
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80035dc:	e028      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  100.0f) ?  100.0f
 80035de:	491b      	ldr	r1, [pc, #108]	; (800364c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80035e0:	68b8      	ldr	r0, [r7, #8]
 80035e2:	f7fc ff2d 	bl	8000440 <__aeabi_fcmple>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d001      	beq.n	80035ee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6a>
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80035ec:	e020      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  200.0f) ?  200.0f
 80035ee:	4918      	ldr	r1, [pc, #96]	; (8003650 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80035f0:	68b8      	ldr	r0, [r7, #8]
 80035f2:	f7fc ff25 	bl	8000440 <__aeabi_fcmple>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d001      	beq.n	80035fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80035fc:	e018      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  400.0f) ?  400.0f
 80035fe:	4915      	ldr	r1, [pc, #84]	; (8003654 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8003600:	68b8      	ldr	r0, [r7, #8]
 8003602:	f7fc ff1d 	bl	8000440 <__aeabi_fcmple>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d001      	beq.n	800360e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8a>
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 800360c:	e010      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  800.0f) ?  800.0f
 800360e:	4912      	ldr	r1, [pc, #72]	; (8003658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8003610:	68b8      	ldr	r0, [r7, #8]
 8003612:	f7fc ff15 	bl	8000440 <__aeabi_fcmple>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d001      	beq.n	800361e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 800361c:	e008      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  :                    1600.0f;
 800361e:	490f      	ldr	r1, [pc, #60]	; (800365c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8003620:	68b8      	ldr	r0, [r7, #8]
 8003622:	f7fc ff0d 	bl	8000440 <__aeabi_fcmple>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xaa>
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 800362c:	e000      	b.n	8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	3fcccccd 	.word	0x3fcccccd
 8003644:	41480000 	.word	0x41480000
 8003648:	41c80000 	.word	0x41c80000
 800364c:	42480000 	.word	0x42480000
 8003650:	42c80000 	.word	0x42c80000
 8003654:	43480000 	.word	0x43480000
 8003658:	43c80000 	.word	0x43c80000
 800365c:	44480000 	.word	0x44480000
 8003660:	44c80000 	.word	0x44c80000

08003664 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	0008      	movs	r0, r1
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	0019      	movs	r1, r3
 8003672:	250b      	movs	r5, #11
 8003674:	197b      	adds	r3, r7, r5
 8003676:	1c02      	adds	r2, r0, #0
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	2608      	movs	r6, #8
 800367c:	19bb      	adds	r3, r7, r6
 800367e:	1c0a      	adds	r2, r1, #0
 8003680:	801a      	strh	r2, [r3, #0]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	695c      	ldr	r4, [r3, #20]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	7b1b      	ldrb	r3, [r3, #12]
 800368e:	b298      	uxth	r0, r3
 8003690:	197b      	adds	r3, r7, r5
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b299      	uxth	r1, r3
 8003696:	19bb      	adds	r3, r7, r6
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	47a0      	blx	r4
 800369e:	0003      	movs	r3, r0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b007      	add	sp, #28
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	0008      	movs	r0, r1
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	0019      	movs	r1, r3
 80036b6:	250b      	movs	r5, #11
 80036b8:	197b      	adds	r3, r7, r5
 80036ba:	1c02      	adds	r2, r0, #0
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	2608      	movs	r6, #8
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c0a      	adds	r2, r1, #0
 80036c4:	801a      	strh	r2, [r3, #0]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	691c      	ldr	r4, [r3, #16]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	7b1b      	ldrb	r3, [r3, #12]
 80036d2:	b298      	uxth	r0, r3
 80036d4:	197b      	adds	r3, r7, r5
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b299      	uxth	r1, r3
 80036da:	19bb      	adds	r3, r7, r6
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	47a0      	blx	r4
 80036e2:	0003      	movs	r3, r0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b007      	add	sp, #28
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ec <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	0008      	movs	r0, r1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	0019      	movs	r1, r3
 80036fa:	260b      	movs	r6, #11
 80036fc:	19bb      	adds	r3, r7, r6
 80036fe:	1c02      	adds	r2, r0, #0
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	2508      	movs	r5, #8
 8003704:	197b      	adds	r3, r7, r5
 8003706:	1c0a      	adds	r2, r1, #0
 8003708:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685c      	ldr	r4, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6898      	ldr	r0, [r3, #8]
 8003712:	197b      	adds	r3, r7, r5
 8003714:	881d      	ldrh	r5, [r3, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	19bb      	adds	r3, r7, r6
 800371a:	7819      	ldrb	r1, [r3, #0]
 800371c:	002b      	movs	r3, r5
 800371e:	47a0      	blx	r4
 8003720:	0003      	movs	r3, r0
 8003722:	617b      	str	r3, [r7, #20]

  return ret;
 8003724:	697b      	ldr	r3, [r7, #20]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b007      	add	sp, #28
 800372c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800372e <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800372e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003730:	b087      	sub	sp, #28
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	0008      	movs	r0, r1
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	0019      	movs	r1, r3
 800373c:	260b      	movs	r6, #11
 800373e:	19bb      	adds	r3, r7, r6
 8003740:	1c02      	adds	r2, r0, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	2508      	movs	r5, #8
 8003746:	197b      	adds	r3, r7, r5
 8003748:	1c0a      	adds	r2, r1, #0
 800374a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681c      	ldr	r4, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6898      	ldr	r0, [r3, #8]
 8003754:	197b      	adds	r3, r7, r5
 8003756:	881d      	ldrh	r5, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	19bb      	adds	r3, r7, r6
 800375c:	7819      	ldrb	r1, [r3, #0]
 800375e:	002b      	movs	r3, r5
 8003760:	47a0      	blx	r4
 8003762:	0003      	movs	r3, r0
 8003764:	617b      	str	r3, [r7, #20]

  return ret;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b007      	add	sp, #28
 800376e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003770 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	000a      	movs	r2, r1
 800377a:	1cfb      	adds	r3, r7, #3
 800377c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800377e:	2410      	movs	r4, #16
 8003780:	193a      	adds	r2, r7, r4
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	2301      	movs	r3, #1
 8003786:	2120      	movs	r1, #32
 8003788:	f7ff ffb0 	bl	80036ec <lis2dw12_read_reg>
 800378c:	0003      	movs	r3, r0
 800378e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d129      	bne.n	80037ea <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003796:	1cfb      	adds	r3, r7, #3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	1c1a      	adds	r2, r3, #0
 800379e:	2303      	movs	r3, #3
 80037a0:	4013      	ands	r3, r2
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	2103      	movs	r1, #3
 80037a8:	400a      	ands	r2, r1
 80037aa:	0090      	lsls	r0, r2, #2
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	210c      	movs	r1, #12
 80037b0:	438a      	bics	r2, r1
 80037b2:	1c11      	adds	r1, r2, #0
 80037b4:	1c02      	adds	r2, r0, #0
 80037b6:	430a      	orrs	r2, r1
 80037b8:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2203      	movs	r2, #3
 80037c0:	4013      	ands	r3, r2
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2103      	movs	r1, #3
 80037c8:	400a      	ands	r2, r1
 80037ca:	0010      	movs	r0, r2
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	2103      	movs	r1, #3
 80037d0:	438a      	bics	r2, r1
 80037d2:	1c11      	adds	r1, r2, #0
 80037d4:	1c02      	adds	r2, r0, #0
 80037d6:	430a      	orrs	r2, r1
 80037d8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80037da:	193a      	adds	r2, r7, r4
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	2301      	movs	r3, #1
 80037e0:	2120      	movs	r1, #32
 80037e2:	f7ff ffa4 	bl	800372e <lis2dw12_write_reg>
 80037e6:	0003      	movs	r3, r0
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80037f0:	230c      	movs	r3, #12
 80037f2:	18fa      	adds	r2, r7, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	2301      	movs	r3, #1
 80037f8:	2125      	movs	r1, #37	; 0x25
 80037fa:	f7ff ff77 	bl	80036ec <lis2dw12_read_reg>
 80037fe:	0003      	movs	r3, r0
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11a      	bne.n	800383e <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003808:	1cfb      	adds	r3, r7, #3
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	1c1a      	adds	r2, r3, #0
 8003810:	2301      	movs	r3, #1
 8003812:	4013      	ands	r3, r2
 8003814:	b2da      	uxtb	r2, r3
 8003816:	240c      	movs	r4, #12
 8003818:	193b      	adds	r3, r7, r4
 800381a:	2101      	movs	r1, #1
 800381c:	400a      	ands	r2, r1
 800381e:	0090      	lsls	r0, r2, #2
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	2104      	movs	r1, #4
 8003824:	438a      	bics	r2, r1
 8003826:	1c11      	adds	r1, r2, #0
 8003828:	1c02      	adds	r2, r0, #0
 800382a:	430a      	orrs	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800382e:	193a      	adds	r2, r7, r4
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	2301      	movs	r3, #1
 8003834:	2125      	movs	r1, #37	; 0x25
 8003836:	f7ff ff7a 	bl	800372e <lis2dw12_write_reg>
 800383a:	0003      	movs	r3, r0
 800383c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800383e:	697b      	ldr	r3, [r7, #20]
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b007      	add	sp, #28
 8003846:	bd90      	pop	{r4, r7, pc}

08003848 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003852:	2410      	movs	r4, #16
 8003854:	193a      	adds	r2, r7, r4
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	2301      	movs	r3, #1
 800385a:	2120      	movs	r1, #32
 800385c:	f7ff ff46 	bl	80036ec <lis2dw12_read_reg>
 8003860:	0003      	movs	r3, r0
 8003862:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d000      	beq.n	800386c <lis2dw12_power_mode_get+0x24>
 800386a:	e06e      	b.n	800394a <lis2dw12_power_mode_get+0x102>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800386c:	250c      	movs	r5, #12
 800386e:	197a      	adds	r2, r7, r5
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	2301      	movs	r3, #1
 8003874:	2125      	movs	r1, #37	; 0x25
 8003876:	f7ff ff39 	bl	80036ec <lis2dw12_read_reg>
 800387a:	0003      	movs	r3, r0
 800387c:	617b      	str	r3, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800387e:	197b      	adds	r3, r7, r5
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	075b      	lsls	r3, r3, #29
 8003884:	0fdb      	lsrs	r3, r3, #31
 8003886:	b2db      	uxtb	r3, r3
 8003888:	011a      	lsls	r2, r3, #4
 800388a:	193b      	adds	r3, r7, r4
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	071b      	lsls	r3, r3, #28
 8003890:	0f9b      	lsrs	r3, r3, #30
 8003892:	b2db      	uxtb	r3, r3
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	18d3      	adds	r3, r2, r3
             ctrl1.lp_mode))
 8003898:	193a      	adds	r2, r7, r4
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	0792      	lsls	r2, r2, #30
 800389e:	0f92      	lsrs	r2, r2, #30
 80038a0:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	2b1b      	cmp	r3, #27
 80038a6:	d84c      	bhi.n	8003942 <lis2dw12_power_mode_get+0xfa>
 80038a8:	009a      	lsls	r2, r3, #2
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <lis2dw12_power_mode_get+0x110>)
 80038ac:	18d3      	adds	r3, r2, r3
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	469f      	mov	pc, r3
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
        break;
 80038b8:	e048      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2203      	movs	r2, #3
 80038be:	701a      	strb	r2, [r3, #0]
        break;
 80038c0:	e044      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2202      	movs	r2, #2
 80038c6:	701a      	strb	r2, [r3, #0]
        break;
 80038c8:	e040      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
        break;
 80038d0:	e03c      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
        break;
 80038d8:	e038      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	220b      	movs	r2, #11
 80038de:	701a      	strb	r2, [r3, #0]
        break;
 80038e0:	e034      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	220a      	movs	r2, #10
 80038e6:	701a      	strb	r2, [r3, #0]
        break;
 80038e8:	e030      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2209      	movs	r2, #9
 80038ee:	701a      	strb	r2, [r3, #0]
        break;
 80038f0:	e02c      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2208      	movs	r2, #8
 80038f6:	701a      	strb	r2, [r3, #0]
        break;
 80038f8:	e028      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2214      	movs	r2, #20
 80038fe:	701a      	strb	r2, [r3, #0]
        break;
 8003900:	e024      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2213      	movs	r2, #19
 8003906:	701a      	strb	r2, [r3, #0]
        break;
 8003908:	e020      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2212      	movs	r2, #18
 800390e:	701a      	strb	r2, [r3, #0]
        break;
 8003910:	e01c      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2211      	movs	r2, #17
 8003916:	701a      	strb	r2, [r3, #0]
        break;
 8003918:	e018      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	701a      	strb	r2, [r3, #0]
        break;
 8003920:	e014      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	221b      	movs	r2, #27
 8003926:	701a      	strb	r2, [r3, #0]
        break;
 8003928:	e010      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	221a      	movs	r2, #26
 800392e:	701a      	strb	r2, [r3, #0]
        break;
 8003930:	e00c      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2219      	movs	r2, #25
 8003936:	701a      	strb	r2, [r3, #0]
        break;
 8003938:	e008      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2218      	movs	r2, #24
 800393e:	701a      	strb	r2, [r3, #0]
        break;
 8003940:	e004      	b.n	800394c <lis2dw12_power_mode_get+0x104>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2204      	movs	r2, #4
 8003946:	701a      	strb	r2, [r3, #0]
        break;
 8003948:	e000      	b.n	800394c <lis2dw12_power_mode_get+0x104>
    }
  }
 800394a:	46c0      	nop			; (mov r8, r8)

  return ret;
 800394c:	697b      	ldr	r3, [r7, #20]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b006      	add	sp, #24
 8003954:	bdb0      	pop	{r4, r5, r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	08015608 	.word	0x08015608

0800395c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	000a      	movs	r2, r1
 8003966:	1cfb      	adds	r3, r7, #3
 8003968:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800396a:	2410      	movs	r4, #16
 800396c:	193a      	adds	r2, r7, r4
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	2301      	movs	r3, #1
 8003972:	2120      	movs	r1, #32
 8003974:	f7ff feba 	bl	80036ec <lis2dw12_read_reg>
 8003978:	0003      	movs	r3, r0
 800397a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d115      	bne.n	80039ae <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8003982:	1cfb      	adds	r3, r7, #3
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	220f      	movs	r2, #15
 8003988:	4013      	ands	r3, r2
 800398a:	b2da      	uxtb	r2, r3
 800398c:	193b      	adds	r3, r7, r4
 800398e:	0110      	lsls	r0, r2, #4
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	210f      	movs	r1, #15
 8003994:	400a      	ands	r2, r1
 8003996:	1c11      	adds	r1, r2, #0
 8003998:	1c02      	adds	r2, r0, #0
 800399a:	430a      	orrs	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800399e:	193a      	adds	r2, r7, r4
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	2301      	movs	r3, #1
 80039a4:	2120      	movs	r1, #32
 80039a6:	f7ff fec2 	bl	800372e <lis2dw12_write_reg>
 80039aa:	0003      	movs	r3, r0
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d108      	bne.n	80039c6 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80039b4:	230c      	movs	r3, #12
 80039b6:	18fa      	adds	r2, r7, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	2301      	movs	r3, #1
 80039bc:	2122      	movs	r1, #34	; 0x22
 80039be:	f7ff fe95 	bl	80036ec <lis2dw12_read_reg>
 80039c2:	0003      	movs	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11a      	bne.n	8003a02 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80039cc:	1cfb      	adds	r3, r7, #3
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	1c1a      	adds	r2, r3, #0
 80039d4:	2303      	movs	r3, #3
 80039d6:	4013      	ands	r3, r2
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	240c      	movs	r4, #12
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	2103      	movs	r1, #3
 80039e0:	400a      	ands	r2, r1
 80039e2:	0010      	movs	r0, r2
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	2103      	movs	r1, #3
 80039e8:	438a      	bics	r2, r1
 80039ea:	1c11      	adds	r1, r2, #0
 80039ec:	1c02      	adds	r2, r0, #0
 80039ee:	430a      	orrs	r2, r1
 80039f0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80039f2:	193a      	adds	r2, r7, r4
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	2301      	movs	r3, #1
 80039f8:	2122      	movs	r1, #34	; 0x22
 80039fa:	f7ff fe98 	bl	800372e <lis2dw12_write_reg>
 80039fe:	0003      	movs	r3, r0
 8003a00:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a02:	697b      	ldr	r3, [r7, #20]
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b007      	add	sp, #28
 8003a0a:	bd90      	pop	{r4, r7, pc}

08003a0c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003a16:	2410      	movs	r4, #16
 8003a18:	193a      	adds	r2, r7, r4
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	2120      	movs	r1, #32
 8003a20:	f7ff fe64 	bl	80036ec <lis2dw12_read_reg>
 8003a24:	0003      	movs	r3, r0
 8003a26:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d14f      	bne.n	8003ace <lis2dw12_data_rate_get+0xc2>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003a2e:	250c      	movs	r5, #12
 8003a30:	197a      	adds	r2, r7, r5
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	2301      	movs	r3, #1
 8003a36:	2122      	movs	r1, #34	; 0x22
 8003a38:	f7ff fe58 	bl	80036ec <lis2dw12_read_reg>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	617b      	str	r3, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003a40:	197b      	adds	r3, r7, r5
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	079b      	lsls	r3, r3, #30
 8003a46:	0f9b      	lsrs	r3, r3, #30
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	193a      	adds	r2, r7, r4
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	0612      	lsls	r2, r2, #24
 8003a52:	0f12      	lsrs	r2, r2, #28
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	2b32      	cmp	r3, #50	; 0x32
 8003a5a:	d834      	bhi.n	8003ac6 <lis2dw12_data_rate_get+0xba>
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <lis2dw12_data_rate_get+0xd0>)
 8003a60:	18d3      	adds	r3, r2, r3
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	469f      	mov	pc, r3
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
        break;
 8003a6c:	e030      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
        break;
 8003a74:	e02c      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]
        break;
 8003a7c:	e028      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2203      	movs	r2, #3
 8003a82:	701a      	strb	r2, [r3, #0]
        break;
 8003a84:	e024      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	701a      	strb	r2, [r3, #0]
        break;
 8003a8c:	e020      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2205      	movs	r2, #5
 8003a92:	701a      	strb	r2, [r3, #0]
        break;
 8003a94:	e01c      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2206      	movs	r2, #6
 8003a9a:	701a      	strb	r2, [r3, #0]
        break;
 8003a9c:	e018      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	701a      	strb	r2, [r3, #0]
        break;
 8003aa4:	e014      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	701a      	strb	r2, [r3, #0]
        break;
 8003aac:	e010      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2209      	movs	r2, #9
 8003ab2:	701a      	strb	r2, [r3, #0]
        break;
 8003ab4:	e00c      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2232      	movs	r2, #50	; 0x32
 8003aba:	701a      	strb	r2, [r3, #0]
        break;
 8003abc:	e008      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2212      	movs	r2, #18
 8003ac2:	701a      	strb	r2, [r3, #0]
        break;
 8003ac4:	e004      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
        break;
 8003acc:	e000      	b.n	8003ad0 <lis2dw12_data_rate_get+0xc4>
    }
  }
 8003ace:	46c0      	nop			; (mov r8, r8)

  return ret;
 8003ad0:	697b      	ldr	r3, [r7, #20]
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b006      	add	sp, #24
 8003ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	08015678 	.word	0x08015678

08003ae0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	000a      	movs	r2, r1
 8003aea:	1cfb      	adds	r3, r7, #3
 8003aec:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003aee:	2408      	movs	r4, #8
 8003af0:	193a      	adds	r2, r7, r4
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	2301      	movs	r3, #1
 8003af6:	2121      	movs	r1, #33	; 0x21
 8003af8:	f7ff fdf8 	bl	80036ec <lis2dw12_read_reg>
 8003afc:	0003      	movs	r3, r0
 8003afe:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d117      	bne.n	8003b36 <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8003b06:	1cfb      	adds	r3, r7, #3
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	193b      	adds	r3, r7, r4
 8003b12:	2101      	movs	r1, #1
 8003b14:	400a      	ands	r2, r1
 8003b16:	00d0      	lsls	r0, r2, #3
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	1c11      	adds	r1, r2, #0
 8003b20:	1c02      	adds	r2, r0, #0
 8003b22:	430a      	orrs	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003b26:	193a      	adds	r2, r7, r4
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2121      	movs	r1, #33	; 0x21
 8003b2e:	f7ff fdfe 	bl	800372e <lis2dw12_write_reg>
 8003b32:	0003      	movs	r3, r0
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b005      	add	sp, #20
 8003b3e:	bd90      	pop	{r4, r7, pc}

08003b40 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	000a      	movs	r2, r1
 8003b4a:	1cfb      	adds	r3, r7, #3
 8003b4c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003b4e:	2408      	movs	r4, #8
 8003b50:	193a      	adds	r2, r7, r4
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	2301      	movs	r3, #1
 8003b56:	2125      	movs	r1, #37	; 0x25
 8003b58:	f7ff fdc8 	bl	80036ec <lis2dw12_read_reg>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d117      	bne.n	8003b96 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8003b66:	1cfb      	adds	r3, r7, #3
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	193b      	adds	r3, r7, r4
 8003b72:	2103      	movs	r1, #3
 8003b74:	400a      	ands	r2, r1
 8003b76:	0110      	lsls	r0, r2, #4
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	2130      	movs	r1, #48	; 0x30
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	1c11      	adds	r1, r2, #0
 8003b80:	1c02      	adds	r2, r0, #0
 8003b82:	430a      	orrs	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003b86:	193a      	adds	r2, r7, r4
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	2125      	movs	r1, #37	; 0x25
 8003b8e:	f7ff fdce 	bl	800372e <lis2dw12_write_reg>
 8003b92:	0003      	movs	r3, r0
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b005      	add	sp, #20
 8003b9e:	bd90      	pop	{r4, r7, pc}

08003ba0 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003baa:	2408      	movs	r4, #8
 8003bac:	193a      	adds	r2, r7, r4
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	2125      	movs	r1, #37	; 0x25
 8003bb4:	f7ff fd9a 	bl	80036ec <lis2dw12_read_reg>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	60fb      	str	r3, [r7, #12]

  switch (reg.fs)
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	069b      	lsls	r3, r3, #26
 8003bc2:	0f9b      	lsrs	r3, r3, #30
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d014      	beq.n	8003bf4 <lis2dw12_full_scale_get+0x54>
 8003bca:	dc17      	bgt.n	8003bfc <lis2dw12_full_scale_get+0x5c>
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d00d      	beq.n	8003bec <lis2dw12_full_scale_get+0x4c>
 8003bd0:	dc14      	bgt.n	8003bfc <lis2dw12_full_scale_get+0x5c>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <lis2dw12_full_scale_get+0x3c>
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d004      	beq.n	8003be4 <lis2dw12_full_scale_get+0x44>
 8003bda:	e00f      	b.n	8003bfc <lis2dw12_full_scale_get+0x5c>
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
      break;
 8003be2:	e00f      	b.n	8003c04 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
      break;
 8003bea:	e00b      	b.n	8003c04 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]
      break;
 8003bf2:	e007      	b.n	8003c04 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	e003      	b.n	8003c04 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
      break;
 8003c02:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003c04:	68fb      	ldr	r3, [r7, #12]
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b005      	add	sp, #20
 8003c0c:	bd90      	pop	{r4, r7, pc}

08003c0e <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c0e:	b590      	push	{r4, r7, lr}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003c18:	240c      	movs	r4, #12
 8003c1a:	193a      	adds	r2, r7, r4
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	2306      	movs	r3, #6
 8003c20:	2128      	movs	r1, #40	; 0x28
 8003c22:	f7ff fd63 	bl	80036ec <lis2dw12_read_reg>
 8003c26:	0003      	movs	r3, r0
 8003c28:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c2a:	0021      	movs	r1, r4
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	b21a      	sxth	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	5e9b      	ldrsh	r3, [r3, r2]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	78da      	ldrb	r2, [r3, #3]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	b212      	sxth	r2, r2
 8003c5c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3302      	adds	r3, #2
 8003c62:	2200      	movs	r2, #0
 8003c64:	5e9b      	ldrsh	r3, [r3, r2]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	789b      	ldrb	r3, [r3, #2]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	18d3      	adds	r3, r2, r3
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3302      	adds	r3, #2
 8003c7a:	b212      	sxth	r2, r2
 8003c7c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	795a      	ldrb	r2, [r3, #5]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	b212      	sxth	r2, r2
 8003c88:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2200      	movs	r2, #0
 8003c90:	5e9b      	ldrsh	r3, [r3, r2]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	791b      	ldrb	r3, [r3, #4]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	18d3      	adds	r3, r2, r3
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	b212      	sxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]

  return ret;
 8003caa:	697b      	ldr	r3, [r7, #20]
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b007      	add	sp, #28
 8003cb2:	bd90      	pop	{r4, r7, pc}

08003cb4 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	210f      	movs	r1, #15
 8003cc6:	f7ff fd11 	bl	80036ec <lis2dw12_read_reg>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	60fb      	str	r3, [r7, #12]

  return ret;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	000a      	movs	r2, r1
 8003ce2:	1cfb      	adds	r3, r7, #3
 8003ce4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003ce6:	2408      	movs	r4, #8
 8003ce8:	193a      	adds	r2, r7, r4
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	2301      	movs	r3, #1
 8003cee:	2121      	movs	r1, #33	; 0x21
 8003cf0:	f7ff fcfc 	bl	80036ec <lis2dw12_read_reg>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d117      	bne.n	8003d2e <lis2dw12_auto_increment_set+0x56>
  {
    reg.if_add_inc = val;
 8003cfe:	1cfb      	adds	r3, r7, #3
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2201      	movs	r2, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	0090      	lsls	r0, r2, #2
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	2104      	movs	r1, #4
 8003d14:	438a      	bics	r2, r1
 8003d16:	1c11      	adds	r1, r2, #0
 8003d18:	1c02      	adds	r2, r0, #0
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003d1e:	193a      	adds	r2, r7, r4
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	2301      	movs	r3, #1
 8003d24:	2121      	movs	r1, #33	; 0x21
 8003d26:	f7ff fd02 	bl	800372e <lis2dw12_write_reg>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b005      	add	sp, #20
 8003d36:	bd90      	pop	{r4, r7, pc}

08003d38 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	000a      	movs	r2, r1
 8003d42:	1cfb      	adds	r3, r7, #3
 8003d44:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003d46:	2408      	movs	r4, #8
 8003d48:	193a      	adds	r2, r7, r4
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	212e      	movs	r1, #46	; 0x2e
 8003d50:	f7ff fccc 	bl	80036ec <lis2dw12_read_reg>
 8003d54:	0003      	movs	r3, r0
 8003d56:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d115      	bne.n	8003d8a <lis2dw12_fifo_mode_set+0x52>
  {
    reg.fmode = (uint8_t) val;
 8003d5e:	1cfb      	adds	r3, r7, #3
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2207      	movs	r2, #7
 8003d64:	4013      	ands	r3, r2
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	193b      	adds	r3, r7, r4
 8003d6a:	0150      	lsls	r0, r2, #5
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	211f      	movs	r1, #31
 8003d70:	400a      	ands	r2, r1
 8003d72:	1c11      	adds	r1, r2, #0
 8003d74:	1c02      	adds	r2, r0, #0
 8003d76:	430a      	orrs	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003d7a:	193a      	adds	r2, r7, r4
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	2301      	movs	r3, #1
 8003d80:	212e      	movs	r1, #46	; 0x2e
 8003d82:	f7ff fcd4 	bl	800372e <lis2dw12_write_reg>
 8003d86:	0003      	movs	r3, r0
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b005      	add	sp, #20
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	425b      	negs	r3, r3
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e063      	b.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	7b1a      	ldrb	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <LIS2MDL_RegisterBusIO+0xf0>)
 8003dec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <LIS2MDL_RegisterBusIO+0xf4>)
 8003df2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	425b      	negs	r3, r3
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e036      	b.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4798      	blx	r3
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d003      	beq.n	8003e1c <LIS2MDL_RegisterBusIO+0x88>
    {
      ret = LIS2MDL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	425b      	negs	r3, r3
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e02d      	b.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d029      	beq.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2228      	movs	r2, #40	; 0x28
 8003e28:	5c9b      	ldrb	r3, [r3, r2]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d124      	bne.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d10f      	bne.n	8003e56 <LIS2MDL_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003e36:	210b      	movs	r1, #11
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	2234      	movs	r2, #52	; 0x34
 8003e3c:	701a      	strb	r2, [r3, #0]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2162      	movs	r1, #98	; 0x62
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fb2a 	bl	80044a0 <LIS2MDL_Write_Reg>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d013      	beq.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	425b      	negs	r3, r3
 8003e54:	e011      	b.n	8003e7a <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d101      	bne.n	8003e62 <LIS2MDL_RegisterBusIO+0xce>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	e00b      	b.n	8003e7a <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	331c      	adds	r3, #28
 8003e66:	2101      	movs	r1, #1
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f001 f831 	bl	8004ed0 <lis2mdl_i2c_interface_set>
 8003e6e:	1e03      	subs	r3, r0, #0
 8003e70:	d002      	beq.n	8003e78 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	425b      	negs	r3, r3
 8003e76:	e000      	b.n	8003e7a <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003e78:	68fb      	ldr	r3, [r7, #12]
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	080044ff 	.word	0x080044ff
 8003e88:	080045a1 	.word	0x080045a1

08003e8c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d147      	bne.n	8003f2c <LIS2MDL_Init+0xa0>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	18fa      	adds	r2, r7, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	2162      	movs	r1, #98	; 0x62
 8003ea6:	f000 fbcc 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003eaa:	1e03      	subs	r3, r0, #0
 8003eac:	d002      	beq.n	8003eb4 <LIS2MDL_Init+0x28>
    {
      return LIS2MDL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	e06c      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	18fa      	adds	r2, r7, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	2301      	movs	r3, #1
 8003ebc:	2160      	movs	r1, #96	; 0x60
 8003ebe:	f000 fbc0 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d002      	beq.n	8003ecc <LIS2MDL_Init+0x40>
    {
      return LIS2MDL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	425b      	negs	r3, r3
 8003eca:	e060      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003ecc:	2008      	movs	r0, #8
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	701a      	strb	r2, [r3, #0]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	2102      	movs	r1, #2
 8003ede:	438a      	bics	r2, r1
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003ee2:	240c      	movs	r4, #12
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	2103      	movs	r1, #3
 8003eea:	438a      	bics	r2, r1
 8003eec:	1c11      	adds	r1, r2, #0
 8003eee:	2202      	movs	r2, #2
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003ef4:	193b      	adds	r3, r7, r4
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	210c      	movs	r1, #12
 8003efa:	430a      	orrs	r2, r1
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003efe:	183a      	adds	r2, r7, r0
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	2301      	movs	r3, #1
 8003f04:	2162      	movs	r1, #98	; 0x62
 8003f06:	f000 fd03 	bl	8004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d002      	beq.n	8003f14 <LIS2MDL_Init+0x88>
    {
      return LIS2MDL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	425b      	negs	r3, r3
 8003f12:	e03c      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003f14:	230c      	movs	r3, #12
 8003f16:	18fa      	adds	r2, r7, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	2160      	movs	r1, #96	; 0x60
 8003f1e:	f000 fcf7 	bl	8004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d02e      	beq.n	8003f84 <LIS2MDL_Init+0xf8>
    {
      return LIS2MDL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	425b      	negs	r3, r3
 8003f2a:	e030      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	331c      	adds	r3, #28
 8003f30:	2101      	movs	r1, #1
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 ff07 	bl	8004d46 <lis2mdl_block_data_update_set>
 8003f38:	1e03      	subs	r3, r0, #0
 8003f3a:	d002      	beq.n	8003f42 <LIS2MDL_Init+0xb6>
    {
      return LIS2MDL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	425b      	negs	r3, r3
 8003f40:	e025      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	331c      	adds	r3, #28
 8003f46:	2102      	movs	r1, #2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 fe65 	bl	8004c18 <lis2mdl_operating_mode_set>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d002      	beq.n	8003f58 <LIS2MDL_Init+0xcc>
    {
      return LIS2MDL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	425b      	negs	r3, r3
 8003f56:	e01a      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	331c      	adds	r3, #28
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 fe8a 	bl	8004c78 <lis2mdl_data_rate_set>
 8003f64:	1e03      	subs	r3, r0, #0
 8003f66:	d002      	beq.n	8003f6e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	e00f      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	331c      	adds	r3, #28
 8003f72:	2100      	movs	r1, #0
 8003f74:	0018      	movs	r0, r3
 8003f76:	f000 ff7b 	bl	8004e70 <lis2mdl_self_test_set>
 8003f7a:	1e03      	subs	r3, r0, #0
 8003f7c:	d002      	beq.n	8003f84 <LIS2MDL_Init+0xf8>
    {
      return LIS2MDL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	425b      	negs	r3, r3
 8003f82:	e004      	b.n	8003f8e <LIS2MDL_Init+0x102>
    }
  }

  pObj->is_initialized = 1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2228      	movs	r2, #40	; 0x28
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b005      	add	sp, #20
 8003f94:	bd90      	pop	{r4, r7, pc}

08003f96 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f89d 	bl	80040e0 <LIS2MDL_MAG_Disable>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d002      	beq.n	8003fb0 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	425b      	negs	r3, r3
 8003fae:	e004      	b.n	8003fba <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2228      	movs	r2, #40	; 0x28
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b002      	add	sp, #8
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d10a      	bne.n	8003fea <LIS2MDL_ReadID+0x28>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	214f      	movs	r1, #79	; 0x4f
 8003fdc:	f000 fb31 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d00e      	beq.n	8004002 <LIS2MDL_ReadID+0x40>
    {
      return LIS2MDL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	425b      	negs	r3, r3
 8003fe8:	e00c      	b.n	8004004 <LIS2MDL_ReadID+0x42>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	331c      	adds	r3, #28
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	0011      	movs	r1, r2
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 ff2a 	bl	8004e4c <lis2mdl_device_id_get>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d002      	beq.n	8004002 <LIS2MDL_ReadID+0x40>
    {
      return LIS2MDL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	425b      	negs	r3, r3
 8004000:	e000      	b.n	8004004 <LIS2MDL_ReadID+0x42>
    }
  }

  return LIS2MDL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b002      	add	sp, #8
 800400a:	bd80      	pop	{r7, pc}

0800400c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2232      	movs	r2, #50	; 0x32
 800403e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4a03      	ldr	r2, [pc, #12]	; (800405c <LIS2MDL_GetCapabilities+0x50>)
 8004050:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	42c80000 	.word	0x42c80000

08004060 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2229      	movs	r2, #41	; 0x29
 800406c:	5c9b      	ldrb	r3, [r3, r2]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e030      	b.n	80040d8 <LIS2MDL_MAG_Enable+0x78>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d11c      	bne.n	80040b8 <LIS2MDL_MAG_Enable+0x58>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800407e:	230c      	movs	r3, #12
 8004080:	18fa      	adds	r2, r7, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	2301      	movs	r3, #1
 8004086:	2160      	movs	r1, #96	; 0x60
 8004088:	f000 fadb 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d002      	beq.n	8004096 <LIS2MDL_MAG_Enable+0x36>
    {
      return LIS2MDL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	425b      	negs	r3, r3
 8004094:	e020      	b.n	80040d8 <LIS2MDL_MAG_Enable+0x78>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004096:	200c      	movs	r0, #12
 8004098:	183b      	adds	r3, r7, r0
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	2103      	movs	r1, #3
 800409e:	438a      	bics	r2, r1
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80040a2:	183a      	adds	r2, r7, r0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	2301      	movs	r3, #1
 80040a8:	2160      	movs	r1, #96	; 0x60
 80040aa:	f000 fc31 	bl	8004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d00d      	beq.n	80040ce <LIS2MDL_MAG_Enable+0x6e>
    {
      return LIS2MDL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	425b      	negs	r3, r3
 80040b6:	e00f      	b.n	80040d8 <LIS2MDL_MAG_Enable+0x78>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	331c      	adds	r3, #28
 80040bc:	2100      	movs	r1, #0
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 fdaa 	bl	8004c18 <lis2mdl_operating_mode_set>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d002      	beq.n	80040ce <LIS2MDL_MAG_Enable+0x6e>
    {
      return LIS2MDL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	425b      	negs	r3, r3
 80040cc:	e004      	b.n	80040d8 <LIS2MDL_MAG_Enable+0x78>
    }
  }

  pObj->mag_is_enabled = 1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2229      	movs	r2, #41	; 0x29
 80040d2:	2101      	movs	r1, #1
 80040d4:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bd80      	pop	{r7, pc}

080040e0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2229      	movs	r2, #41	; 0x29
 80040ec:	5c9b      	ldrb	r3, [r3, r2]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e033      	b.n	800415e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d11f      	bne.n	800413e <LIS2MDL_MAG_Disable+0x5e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80040fe:	230c      	movs	r3, #12
 8004100:	18fa      	adds	r2, r7, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	2301      	movs	r3, #1
 8004106:	2160      	movs	r1, #96	; 0x60
 8004108:	f000 fa9b 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800410c:	1e03      	subs	r3, r0, #0
 800410e:	d002      	beq.n	8004116 <LIS2MDL_MAG_Disable+0x36>
    {
      return LIS2MDL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	425b      	negs	r3, r3
 8004114:	e023      	b.n	800415e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004116:	200c      	movs	r0, #12
 8004118:	183b      	adds	r3, r7, r0
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	2103      	movs	r1, #3
 800411e:	438a      	bics	r2, r1
 8004120:	1c11      	adds	r1, r2, #0
 8004122:	2202      	movs	r2, #2
 8004124:	430a      	orrs	r2, r1
 8004126:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004128:	183a      	adds	r2, r7, r0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	2301      	movs	r3, #1
 800412e:	2160      	movs	r1, #96	; 0x60
 8004130:	f000 fbee 	bl	8004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004134:	1e03      	subs	r3, r0, #0
 8004136:	d00d      	beq.n	8004154 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	425b      	negs	r3, r3
 800413c:	e00f      	b.n	800415e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	331c      	adds	r3, #28
 8004142:	2102      	movs	r1, #2
 8004144:	0018      	movs	r0, r3
 8004146:	f000 fd67 	bl	8004c18 <lis2mdl_operating_mode_set>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d002      	beq.n	8004154 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	425b      	negs	r3, r3
 8004152:	e004      	b.n	800415e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2229      	movs	r2, #41	; 0x29
 8004158:	2100      	movs	r1, #0
 800415a:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}

08004166 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	22ff      	movs	r2, #255	; 0xff
 8004174:	0592      	lsls	r2, r2, #22
 8004176:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b002      	add	sp, #8
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	331c      	adds	r3, #28
 8004196:	220b      	movs	r2, #11
 8004198:	18ba      	adds	r2, r7, r2
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fd9b 	bl	8004cd8 <lis2mdl_data_rate_get>
 80041a2:	1e03      	subs	r3, r0, #0
 80041a4:	d002      	beq.n	80041ac <LIS2MDL_MAG_GetOutputDataRate+0x28>
  {
    return LIS2MDL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	425b      	negs	r3, r3
 80041aa:	e022      	b.n	80041f2 <LIS2MDL_MAG_GetOutputDataRate+0x6e>
  }

  switch (odr_low_level)
 80041ac:	230b      	movs	r3, #11
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d014      	beq.n	80041e0 <LIS2MDL_MAG_GetOutputDataRate+0x5c>
 80041b6:	dc17      	bgt.n	80041e8 <LIS2MDL_MAG_GetOutputDataRate+0x64>
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d00d      	beq.n	80041d8 <LIS2MDL_MAG_GetOutputDataRate+0x54>
 80041bc:	dc14      	bgt.n	80041e8 <LIS2MDL_MAG_GetOutputDataRate+0x64>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <LIS2MDL_MAG_GetOutputDataRate+0x44>
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d004      	beq.n	80041d0 <LIS2MDL_MAG_GetOutputDataRate+0x4c>
 80041c6:	e00f      	b.n	80041e8 <LIS2MDL_MAG_GetOutputDataRate+0x64>
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <LIS2MDL_MAG_GetOutputDataRate+0x78>)
 80041cc:	601a      	str	r2, [r3, #0]
      break;
 80041ce:	e00f      	b.n	80041f0 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80041d4:	601a      	str	r2, [r3, #0]
      break;
 80041d6:	e00b      	b.n	80041f0 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80041dc:	601a      	str	r2, [r3, #0]
      break;
 80041de:	e007      	b.n	80041f0 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80041e4:	601a      	str	r2, [r3, #0]
      break;
 80041e6:	e003      	b.n	80041f0 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    default:
      ret = LIS2MDL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	425b      	negs	r3, r3
 80041ec:	60fb      	str	r3, [r7, #12]
      break;
 80041ee:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	41200000 	.word	0x41200000
 8004200:	41a00000 	.word	0x41a00000
 8004204:	42480000 	.word	0x42480000
 8004208:	42c80000 	.word	0x42c80000

0800420c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004216:	492e      	ldr	r1, [pc, #184]	; (80042d0 <LIS2MDL_MAG_SetOutputDataRate+0xc4>)
 8004218:	6838      	ldr	r0, [r7, #0]
 800421a:	f7fc f911 	bl	8000440 <__aeabi_fcmple>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <LIS2MDL_MAG_SetOutputDataRate+0x1a>
 8004222:	2300      	movs	r3, #0
 8004224:	e010      	b.n	8004248 <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8004226:	492b      	ldr	r1, [pc, #172]	; (80042d4 <LIS2MDL_MAG_SetOutputDataRate+0xc8>)
 8004228:	6838      	ldr	r0, [r7, #0]
 800422a:	f7fc f909 	bl	8000440 <__aeabi_fcmple>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d001      	beq.n	8004236 <LIS2MDL_MAG_SetOutputDataRate+0x2a>
 8004232:	2301      	movs	r3, #1
 8004234:	e008      	b.n	8004248 <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8004236:	4928      	ldr	r1, [pc, #160]	; (80042d8 <LIS2MDL_MAG_SetOutputDataRate+0xcc>)
 8004238:	6838      	ldr	r0, [r7, #0]
 800423a:	f7fc f901 	bl	8000440 <__aeabi_fcmple>
 800423e:	1e03      	subs	r3, r0, #0
 8004240:	d001      	beq.n	8004246 <LIS2MDL_MAG_SetOutputDataRate+0x3a>
 8004242:	2302      	movs	r3, #2
 8004244:	e000      	b.n	8004248 <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8004246:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004248:	220f      	movs	r2, #15
 800424a:	18ba      	adds	r2, r7, r2
 800424c:	7013      	strb	r3, [r2, #0]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d128      	bne.n	80042a8 <LIS2MDL_MAG_SetOutputDataRate+0x9c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004256:	230c      	movs	r3, #12
 8004258:	18fa      	adds	r2, r7, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	2301      	movs	r3, #1
 800425e:	2160      	movs	r1, #96	; 0x60
 8004260:	f000 f9ef 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d002      	beq.n	800426e <LIS2MDL_MAG_SetOutputDataRate+0x62>
    {
      return LIS2MDL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	425b      	negs	r3, r3
 800426c:	e02c      	b.n	80042c8 <LIS2MDL_MAG_SetOutputDataRate+0xbc>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 800426e:	230f      	movs	r3, #15
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2203      	movs	r2, #3
 8004276:	4013      	ands	r3, r2
 8004278:	b2da      	uxtb	r2, r3
 800427a:	240c      	movs	r4, #12
 800427c:	193b      	adds	r3, r7, r4
 800427e:	2103      	movs	r1, #3
 8004280:	400a      	ands	r2, r1
 8004282:	0090      	lsls	r0, r2, #2
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	210c      	movs	r1, #12
 8004288:	438a      	bics	r2, r1
 800428a:	1c11      	adds	r1, r2, #0
 800428c:	1c02      	adds	r2, r0, #0
 800428e:	430a      	orrs	r2, r1
 8004290:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004292:	193a      	adds	r2, r7, r4
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	2301      	movs	r3, #1
 8004298:	2160      	movs	r1, #96	; 0x60
 800429a:	f000 fb39 	bl	8004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d011      	beq.n	80042c6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    {
      return LIS2MDL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	425b      	negs	r3, r3
 80042a6:	e00f      	b.n	80042c8 <LIS2MDL_MAG_SetOutputDataRate+0xbc>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	331c      	adds	r3, #28
 80042ac:	001a      	movs	r2, r3
 80042ae:	230f      	movs	r3, #15
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	0019      	movs	r1, r3
 80042b6:	0010      	movs	r0, r2
 80042b8:	f000 fcde 	bl	8004c78 <lis2mdl_data_rate_set>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d002      	beq.n	80042c6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    {
      return LIS2MDL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	425b      	negs	r3, r3
 80042c4:	e000      	b.n	80042c8 <LIS2MDL_MAG_SetOutputDataRate+0xbc>
    }
  }

  return LIS2MDL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b005      	add	sp, #20
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	41200000 	.word	0x41200000
 80042d4:	41a00000 	.word	0x41a00000
 80042d8:	42480000 	.word	0x42480000

080042dc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2232      	movs	r2, #50	; 0x32
 80042ea:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	b002      	add	sp, #8
 8004308:	bd80      	pop	{r7, pc}

0800430a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	331c      	adds	r3, #28
 8004318:	2208      	movs	r2, #8
 800431a:	18ba      	adds	r2, r7, r2
 800431c:	0011      	movs	r1, r2
 800431e:	0018      	movs	r0, r3
 8004320:	f000 fd41 	bl	8004da6 <lis2mdl_magnetic_raw_get>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d002      	beq.n	800432e <LIS2MDL_MAG_GetAxesRaw+0x24>
  {
    return LIS2MDL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	425b      	negs	r3, r3
 800432c:	e010      	b.n	8004350 <LIS2MDL_MAG_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800432e:	2108      	movs	r1, #8
 8004330:	187b      	adds	r3, r7, r1
 8004332:	2200      	movs	r2, #0
 8004334:	5e9a      	ldrsh	r2, [r3, r2]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2202      	movs	r2, #2
 800433e:	5e9a      	ldrsh	r2, [r3, r2]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2204      	movs	r2, #4
 8004348:	5e9a      	ldrsh	r2, [r3, r2]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b004      	add	sp, #16
 8004356:	bd80      	pop	{r7, pc}

08004358 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d147      	bne.n	80043fa <LIS2MDL_MAG_GetAxes+0xa2>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800436a:	2318      	movs	r3, #24
 800436c:	18fa      	adds	r2, r7, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	2306      	movs	r3, #6
 8004372:	2168      	movs	r1, #104	; 0x68
 8004374:	f000 f965 	bl	8004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d002      	beq.n	8004382 <LIS2MDL_MAG_GetAxes+0x2a>
    {
      return LIS2MDL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	425b      	negs	r3, r3
 8004380:	e08a      	b.n	8004498 <LIS2MDL_MAG_GetAxes+0x140>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004382:	2018      	movs	r0, #24
 8004384:	183b      	adds	r3, r7, r0
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	b21a      	sxth	r2, r3
 800438a:	2110      	movs	r1, #16
 800438c:	187b      	adds	r3, r7, r1
 800438e:	801a      	strh	r2, [r3, #0]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004390:	187b      	adds	r3, r7, r1
 8004392:	2200      	movs	r2, #0
 8004394:	5e9b      	ldrsh	r3, [r3, r2]
 8004396:	b29b      	uxth	r3, r3
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	b29a      	uxth	r2, r3
 800439c:	183b      	adds	r3, r7, r0
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	18d3      	adds	r3, r2, r3
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	801a      	strh	r2, [r3, #0]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80043ac:	183b      	adds	r3, r7, r0
 80043ae:	78db      	ldrb	r3, [r3, #3]
 80043b0:	b21a      	sxth	r2, r3
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	805a      	strh	r2, [r3, #2]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	2202      	movs	r2, #2
 80043ba:	5e9b      	ldrsh	r3, [r3, r2]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	183b      	adds	r3, r7, r0
 80043c4:	789b      	ldrb	r3, [r3, #2]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	b21a      	sxth	r2, r3
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	805a      	strh	r2, [r3, #2]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80043d2:	183b      	adds	r3, r7, r0
 80043d4:	795b      	ldrb	r3, [r3, #5]
 80043d6:	b21a      	sxth	r2, r3
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	809a      	strh	r2, [r3, #4]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	2204      	movs	r2, #4
 80043e0:	5e9b      	ldrsh	r3, [r3, r2]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	791b      	ldrb	r3, [r3, #4]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	18d3      	adds	r3, r2, r3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	b21a      	sxth	r2, r3
 80043f4:	187b      	adds	r3, r7, r1
 80043f6:	809a      	strh	r2, [r3, #4]
 80043f8:	e00c      	b.n	8004414 <LIS2MDL_MAG_GetAxes+0xbc>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	331c      	adds	r3, #28
 80043fe:	2210      	movs	r2, #16
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f000 fcce 	bl	8004da6 <lis2mdl_magnetic_raw_get>
 800440a:	1e03      	subs	r3, r0, #0
 800440c:	d002      	beq.n	8004414 <LIS2MDL_MAG_GetAxes+0xbc>
    {
      return LIS2MDL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	425b      	negs	r3, r3
 8004412:	e041      	b.n	8004498 <LIS2MDL_MAG_GetAxes+0x140>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004414:	230c      	movs	r3, #12
 8004416:	18fa      	adds	r2, r7, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0011      	movs	r1, r2
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff fea2 	bl	8004166 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004422:	2410      	movs	r4, #16
 8004424:	193b      	adds	r3, r7, r4
 8004426:	2200      	movs	r2, #0
 8004428:	5e9b      	ldrsh	r3, [r3, r2]
 800442a:	0018      	movs	r0, r3
 800442c:	f7fc ffc8 	bl	80013c0 <__aeabi_i2f>
 8004430:	1c02      	adds	r2, r0, #0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1c19      	adds	r1, r3, #0
 8004436:	1c10      	adds	r0, r2, #0
 8004438:	f7fc fcb8 	bl	8000dac <__aeabi_fmul>
 800443c:	1c03      	adds	r3, r0, #0
 800443e:	1c18      	adds	r0, r3, #0
 8004440:	f7fc ff9e 	bl	8001380 <__aeabi_f2iz>
 8004444:	0002      	movs	r2, r0
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800444a:	193b      	adds	r3, r7, r4
 800444c:	2202      	movs	r2, #2
 800444e:	5e9b      	ldrsh	r3, [r3, r2]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fc ffb5 	bl	80013c0 <__aeabi_i2f>
 8004456:	1c02      	adds	r2, r0, #0
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1c19      	adds	r1, r3, #0
 800445c:	1c10      	adds	r0, r2, #0
 800445e:	f7fc fca5 	bl	8000dac <__aeabi_fmul>
 8004462:	1c03      	adds	r3, r0, #0
 8004464:	1c18      	adds	r0, r3, #0
 8004466:	f7fc ff8b 	bl	8001380 <__aeabi_f2iz>
 800446a:	0002      	movs	r2, r0
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004470:	193b      	adds	r3, r7, r4
 8004472:	2204      	movs	r2, #4
 8004474:	5e9b      	ldrsh	r3, [r3, r2]
 8004476:	0018      	movs	r0, r3
 8004478:	f7fc ffa2 	bl	80013c0 <__aeabi_i2f>
 800447c:	1c02      	adds	r2, r0, #0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1c19      	adds	r1, r3, #0
 8004482:	1c10      	adds	r0, r2, #0
 8004484:	f7fc fc92 	bl	8000dac <__aeabi_fmul>
 8004488:	1c03      	adds	r3, r0, #0
 800448a:	1c18      	adds	r0, r3, #0
 800448c:	f7fc ff78 	bl	8001380 <__aeabi_f2iz>
 8004490:	0002      	movs	r2, r0
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b009      	add	sp, #36	; 0x24
 800449e:	bd90      	pop	{r4, r7, pc}

080044a0 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	0008      	movs	r0, r1
 80044aa:	0011      	movs	r1, r2
 80044ac:	1cfb      	adds	r3, r7, #3
 80044ae:	1c02      	adds	r2, r0, #0
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	1cbb      	adds	r3, r7, #2
 80044b4:	1c0a      	adds	r2, r1, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d10b      	bne.n	80044d8 <LIS2MDL_Write_Reg+0x38>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80044c0:	1cba      	adds	r2, r7, #2
 80044c2:	1cfb      	adds	r3, r7, #3
 80044c4:	7819      	ldrb	r1, [r3, #0]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	2301      	movs	r3, #1
 80044ca:	f000 fa21 	bl	8004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d010      	beq.n	80044f4 <LIS2MDL_Write_Reg+0x54>
    {
      return LIS2MDL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	425b      	negs	r3, r3
 80044d6:	e00e      	b.n	80044f6 <LIS2MDL_Write_Reg+0x56>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	331c      	adds	r3, #28
 80044dc:	0018      	movs	r0, r3
 80044de:	1cba      	adds	r2, r7, #2
 80044e0:	1cfb      	adds	r3, r7, #3
 80044e2:	7819      	ldrb	r1, [r3, #0]
 80044e4:	2301      	movs	r3, #1
 80044e6:	f000 fb76 	bl	8004bd6 <lis2mdl_write_reg>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d002      	beq.n	80044f4 <LIS2MDL_Write_Reg+0x54>
    {
      return LIS2MDL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	425b      	negs	r3, r3
 80044f2:	e000      	b.n	80044f6 <LIS2MDL_Write_Reg+0x56>
    }
  }

  return LIS2MDL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	0018      	movs	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b002      	add	sp, #8
 80044fc:	bd80      	pop	{r7, pc}

080044fe <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	0008      	movs	r0, r1
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	0019      	movs	r1, r3
 800450c:	250b      	movs	r5, #11
 800450e:	197b      	adds	r3, r7, r5
 8004510:	1c02      	adds	r2, r0, #0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	2608      	movs	r6, #8
 8004516:	19bb      	adds	r3, r7, r6
 8004518:	1c0a      	adds	r2, r1, #0
 800451a:	801a      	strh	r2, [r3, #0]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <ReadMagRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	695c      	ldr	r4, [r3, #20]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	7b1b      	ldrb	r3, [r3, #12]
 8004530:	b298      	uxth	r0, r3
 8004532:	197b      	adds	r3, r7, r5
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	4252      	negs	r2, r2
 800453a:	4313      	orrs	r3, r2
 800453c:	b2db      	uxtb	r3, r3
 800453e:	b299      	uxth	r1, r3
 8004540:	19bb      	adds	r3, r7, r6
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	47a0      	blx	r4
 8004548:	0003      	movs	r3, r0
 800454a:	e025      	b.n	8004598 <ReadMagRegWrap+0x9a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d10f      	bne.n	8004574 <ReadMagRegWrap+0x76>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	695c      	ldr	r4, [r3, #20]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	7b1b      	ldrb	r3, [r3, #12]
 800455c:	b298      	uxth	r0, r3
 800455e:	230b      	movs	r3, #11
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b299      	uxth	r1, r3
 8004566:	2308      	movs	r3, #8
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	47a0      	blx	r4
 8004570:	0003      	movs	r3, r0
 8004572:	e011      	b.n	8004598 <ReadMagRegWrap+0x9a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	695c      	ldr	r4, [r3, #20]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	7b1b      	ldrb	r3, [r3, #12]
 800457c:	b298      	uxth	r0, r3
 800457e:	230b      	movs	r3, #11
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	4313      	orrs	r3, r2
 8004588:	b2db      	uxtb	r3, r3
 800458a:	b299      	uxth	r1, r3
 800458c:	2308      	movs	r3, #8
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	47a0      	blx	r4
 8004596:	0003      	movs	r3, r0
  }
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b007      	add	sp, #28
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a0 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	0008      	movs	r0, r1
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	0019      	movs	r1, r3
 80045ae:	250b      	movs	r5, #11
 80045b0:	197b      	adds	r3, r7, r5
 80045b2:	1c02      	adds	r2, r0, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	2608      	movs	r6, #8
 80045b8:	19bb      	adds	r3, r7, r6
 80045ba:	1c0a      	adds	r2, r1, #0
 80045bc:	801a      	strh	r2, [r3, #0]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d111      	bne.n	80045ee <WriteMagRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	691c      	ldr	r4, [r3, #16]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	7b1b      	ldrb	r3, [r3, #12]
 80045d2:	b298      	uxth	r0, r3
 80045d4:	197b      	adds	r3, r7, r5
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	4252      	negs	r2, r2
 80045dc:	4313      	orrs	r3, r2
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	b299      	uxth	r1, r3
 80045e2:	19bb      	adds	r3, r7, r6
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	47a0      	blx	r4
 80045ea:	0003      	movs	r3, r0
 80045ec:	e025      	b.n	800463a <WriteMagRegWrap+0x9a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d10f      	bne.n	8004616 <WriteMagRegWrap+0x76>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	691c      	ldr	r4, [r3, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	7b1b      	ldrb	r3, [r3, #12]
 80045fe:	b298      	uxth	r0, r3
 8004600:	230b      	movs	r3, #11
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	b299      	uxth	r1, r3
 8004608:	2308      	movs	r3, #8
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	47a0      	blx	r4
 8004612:	0003      	movs	r3, r0
 8004614:	e011      	b.n	800463a <WriteMagRegWrap+0x9a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	691c      	ldr	r4, [r3, #16]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	7b1b      	ldrb	r3, [r3, #12]
 800461e:	b298      	uxth	r0, r3
 8004620:	230b      	movs	r3, #11
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	4313      	orrs	r3, r2
 800462a:	b2db      	uxtb	r3, r3
 800462c:	b299      	uxth	r1, r3
 800462e:	2308      	movs	r3, #8
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	47a0      	blx	r4
 8004638:	0003      	movs	r3, r0
  }
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b007      	add	sp, #28
 8004640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004642 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004642:	b590      	push	{r4, r7, lr}
 8004644:	b08d      	sub	sp, #52	; 0x34
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	0008      	movs	r0, r1
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	0019      	movs	r1, r3
 8004650:	230b      	movs	r3, #11
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	1c02      	adds	r2, r0, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	2008      	movs	r0, #8
 800465a:	183b      	adds	r3, r7, r0
 800465c:	1c0a      	adds	r2, r1, #0
 800465e:	801a      	strh	r2, [r3, #0]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004660:	212f      	movs	r1, #47	; 0x2f
 8004662:	187b      	adds	r3, r7, r1
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_en = 0x40U;
 8004668:	2421      	movs	r4, #33	; 0x21
 800466a:	193b      	adds	r3, r7, r4
 800466c:	2240      	movs	r2, #64	; 0x40
 800466e:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_dis = 0x00U;
 8004670:	2320      	movs	r3, #32
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004678:	231f      	movs	r3, #31
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	223d      	movs	r2, #61	; 0x3d
 800467e:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_add = 0x15U;
 8004680:	232e      	movs	r3, #46	; 0x2e
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2215      	movs	r2, #21
 8004686:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_subadd = 0x16U;
 8004688:	232d      	movs	r3, #45	; 0x2d
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2216      	movs	r2, #22
 800468e:	701a      	strb	r2, [r3, #0]
  uint8_t slave0_config = 0x17U;
 8004690:	232c      	movs	r3, #44	; 0x2c
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	2217      	movs	r2, #23
 8004696:	701a      	strb	r2, [r3, #0]
  uint8_t master_config = 0x14U;
 8004698:	232b      	movs	r3, #43	; 0x2b
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2214      	movs	r2, #20
 800469e:	701a      	strb	r2, [r3, #0]
  uint8_t write_once_i2c_en = 0x44U;
 80046a0:	231e      	movs	r3, #30
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2244      	movs	r2, #68	; 0x44
 80046a6:	701a      	strb	r2, [r3, #0]
  uint8_t sensor_hub_1 = 0x02U;
 80046a8:	232a      	movs	r3, #42	; 0x2a
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	2202      	movs	r2, #2
 80046ae:	701a      	strb	r2, [r3, #0]
  uint8_t status_master_mainpage = 0x39U;
 80046b0:	2329      	movs	r3, #41	; 0x29
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2239      	movs	r2, #57	; 0x39
 80046b6:	701a      	strb	r2, [r3, #0]
  uint8_t sens_hub_endop = 0x01U;
 80046b8:	2328      	movs	r3, #40	; 0x28
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80046c0:	2327      	movs	r3, #39	; 0x27
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2229      	movs	r2, #41	; 0x29
 80046c6:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80046c8:	2326      	movs	r3, #38	; 0x26
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	221e      	movs	r2, #30
 80046ce:	701a      	strb	r2, [r3, #0]
  uint8_t xlda = 0x01U;
 80046d0:	2325      	movs	r3, #37	; 0x25
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
  uint8_t len = (uint8_t)Length;
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	231d      	movs	r3, #29
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80046e4:	2324      	movs	r3, #36	; 0x24
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2210      	movs	r2, #16
 80046ea:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80046ec:	2323      	movs	r3, #35	; 0x23
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80046f4:	2322      	movs	r3, #34	; 0x22
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	701a      	strb	r2, [r3, #0]
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	331c      	adds	r3, #28
 8004700:	0018      	movs	r0, r3
 8004702:	193a      	adds	r2, r7, r4
 8004704:	187b      	adds	r3, r7, r1
 8004706:	7819      	ldrb	r1, [r3, #0]
 8004708:	2301      	movs	r3, #1
 800470a:	f000 fa64 	bl	8004bd6 <lis2mdl_write_reg>
 800470e:	1e03      	subs	r3, r0, #0
 8004710:	d002      	beq.n	8004718 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xd6>
  {
    return LIS2MDL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	425b      	negs	r3, r3
 8004716:	e0f7      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	331c      	adds	r3, #28
 800471c:	0018      	movs	r0, r3
 800471e:	231f      	movs	r3, #31
 8004720:	18fa      	adds	r2, r7, r3
 8004722:	232e      	movs	r3, #46	; 0x2e
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	7819      	ldrb	r1, [r3, #0]
 8004728:	2301      	movs	r3, #1
 800472a:	f000 fa54 	bl	8004bd6 <lis2mdl_write_reg>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d002      	beq.n	8004738 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xf6>
  {
    return LIS2MDL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	425b      	negs	r3, r3
 8004736:	e0e7      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	331c      	adds	r3, #28
 800473c:	0018      	movs	r0, r3
 800473e:	230b      	movs	r3, #11
 8004740:	18fa      	adds	r2, r7, r3
 8004742:	232d      	movs	r3, #45	; 0x2d
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	7819      	ldrb	r1, [r3, #0]
 8004748:	2301      	movs	r3, #1
 800474a:	f000 fa44 	bl	8004bd6 <lis2mdl_write_reg>
 800474e:	1e03      	subs	r3, r0, #0
 8004750:	d002      	beq.n	8004758 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x116>
  {
    return LIS2MDL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	425b      	negs	r3, r3
 8004756:	e0d7      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	331c      	adds	r3, #28
 800475c:	0018      	movs	r0, r3
 800475e:	231d      	movs	r3, #29
 8004760:	18fa      	adds	r2, r7, r3
 8004762:	232c      	movs	r3, #44	; 0x2c
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	7819      	ldrb	r1, [r3, #0]
 8004768:	2301      	movs	r3, #1
 800476a:	f000 fa34 	bl	8004bd6 <lis2mdl_write_reg>
 800476e:	1e03      	subs	r3, r0, #0
 8004770:	d002      	beq.n	8004778 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x136>
  {
    return LIS2MDL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	425b      	negs	r3, r3
 8004776:	e0c7      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	331c      	adds	r3, #28
 800477c:	0018      	movs	r0, r3
 800477e:	231e      	movs	r3, #30
 8004780:	18fa      	adds	r2, r7, r3
 8004782:	232b      	movs	r3, #43	; 0x2b
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	7819      	ldrb	r1, [r3, #0]
 8004788:	2301      	movs	r3, #1
 800478a:	f000 fa24 	bl	8004bd6 <lis2mdl_write_reg>
 800478e:	1e03      	subs	r3, r0, #0
 8004790:	d002      	beq.n	8004798 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x156>
  {
    return LIS2MDL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	425b      	negs	r3, r3
 8004796:	e0b7      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	331c      	adds	r3, #28
 800479c:	0018      	movs	r0, r3
 800479e:	2320      	movs	r3, #32
 80047a0:	18fa      	adds	r2, r7, r3
 80047a2:	232f      	movs	r3, #47	; 0x2f
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	7819      	ldrb	r1, [r3, #0]
 80047a8:	2301      	movs	r3, #1
 80047aa:	f000 fa14 	bl	8004bd6 <lis2mdl_write_reg>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d002      	beq.n	80047b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x176>
  {
    return LIS2MDL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	425b      	negs	r3, r3
 80047b6:	e0a7      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	331c      	adds	r3, #28
 80047bc:	0018      	movs	r0, r3
 80047be:	231c      	movs	r3, #28
 80047c0:	18fa      	adds	r2, r7, r3
 80047c2:	2324      	movs	r3, #36	; 0x24
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	7819      	ldrb	r1, [r3, #0]
 80047c8:	2301      	movs	r3, #1
 80047ca:	f000 f9e3 	bl	8004b94 <lis2mdl_read_reg>
 80047ce:	1e03      	subs	r3, r0, #0
 80047d0:	d002      	beq.n	80047d8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x196>
  {
    return LIS2MDL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	425b      	negs	r3, r3
 80047d6:	e097      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80047d8:	211c      	movs	r1, #28
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2223      	movs	r2, #35	; 0x23
 80047e0:	18ba      	adds	r2, r7, r2
 80047e2:	7812      	ldrb	r2, [r2, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b0>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	2222      	movs	r2, #34	; 0x22
 80047ec:	18ba      	adds	r2, r7, r2
 80047ee:	7812      	ldrb	r2, [r2, #0]
 80047f0:	701a      	strb	r2, [r3, #0]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	331c      	adds	r3, #28
 80047f6:	0018      	movs	r0, r3
 80047f8:	231c      	movs	r3, #28
 80047fa:	18fa      	adds	r2, r7, r3
 80047fc:	2324      	movs	r3, #36	; 0x24
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	7819      	ldrb	r1, [r3, #0]
 8004802:	2301      	movs	r3, #1
 8004804:	f000 f9e7 	bl	8004bd6 <lis2mdl_write_reg>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d002      	beq.n	8004812 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d0>
  {
    return LIS2MDL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	425b      	negs	r3, r3
 8004810:	e07a      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	331c      	adds	r3, #28
 8004816:	0018      	movs	r0, r3
 8004818:	2314      	movs	r3, #20
 800481a:	18fa      	adds	r2, r7, r3
 800481c:	2327      	movs	r3, #39	; 0x27
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	7819      	ldrb	r1, [r3, #0]
 8004822:	2306      	movs	r3, #6
 8004824:	f000 f9b6 	bl	8004b94 <lis2mdl_read_reg>
 8004828:	1e03      	subs	r3, r0, #0
 800482a:	d002      	beq.n	8004832 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1f0>
  {
    return LIS2MDL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	425b      	negs	r3, r3
 8004830:	e06a      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	331c      	adds	r3, #28
 8004836:	0018      	movs	r0, r3
 8004838:	231b      	movs	r3, #27
 800483a:	18fa      	adds	r2, r7, r3
 800483c:	2326      	movs	r3, #38	; 0x26
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	7819      	ldrb	r1, [r3, #0]
 8004842:	2301      	movs	r3, #1
 8004844:	f000 f9a6 	bl	8004b94 <lis2mdl_read_reg>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d002      	beq.n	8004852 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x210>
    {
      return LIS2MDL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	425b      	negs	r3, r3
 8004850:	e05a      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
    }
  } while ((data & xlda) != xlda);
 8004852:	231b      	movs	r3, #27
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2125      	movs	r1, #37	; 0x25
 800485a:	187a      	adds	r2, r7, r1
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	4013      	ands	r3, r2
 8004860:	b2db      	uxtb	r3, r3
 8004862:	187a      	adds	r2, r7, r1
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d1e3      	bne.n	8004832 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1f0>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	331c      	adds	r3, #28
 800486e:	0018      	movs	r0, r3
 8004870:	231b      	movs	r3, #27
 8004872:	18fa      	adds	r2, r7, r3
 8004874:	2329      	movs	r3, #41	; 0x29
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	7819      	ldrb	r1, [r3, #0]
 800487a:	2301      	movs	r3, #1
 800487c:	f000 f98a 	bl	8004b94 <lis2mdl_read_reg>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d002      	beq.n	800488a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x248>
    {
      return LIS2MDL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	425b      	negs	r3, r3
 8004888:	e03e      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800488a:	231b      	movs	r3, #27
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2128      	movs	r1, #40	; 0x28
 8004892:	187a      	adds	r2, r7, r1
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	4013      	ands	r3, r2
 8004898:	b2db      	uxtb	r3, r3
 800489a:	187a      	adds	r2, r7, r1
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d1e3      	bne.n	800486a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x228>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	331c      	adds	r3, #28
 80048a6:	0018      	movs	r0, r3
 80048a8:	2321      	movs	r3, #33	; 0x21
 80048aa:	18fa      	adds	r2, r7, r3
 80048ac:	232f      	movs	r3, #47	; 0x2f
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	7819      	ldrb	r1, [r3, #0]
 80048b2:	2301      	movs	r3, #1
 80048b4:	f000 f98f 	bl	8004bd6 <lis2mdl_write_reg>
 80048b8:	1e03      	subs	r3, r0, #0
 80048ba:	d002      	beq.n	80048c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x280>
  {
    return LIS2MDL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	425b      	negs	r3, r3
 80048c0:	e022      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	331c      	adds	r3, #28
 80048c6:	0018      	movs	r0, r3
 80048c8:	2308      	movs	r3, #8
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	881c      	ldrh	r4, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	232a      	movs	r3, #42	; 0x2a
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	7819      	ldrb	r1, [r3, #0]
 80048d6:	0023      	movs	r3, r4
 80048d8:	f000 f95c 	bl	8004b94 <lis2mdl_read_reg>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d002      	beq.n	80048e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2a4>
  {
    return LIS2MDL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	425b      	negs	r3, r3
 80048e4:	e010      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	331c      	adds	r3, #28
 80048ea:	0018      	movs	r0, r3
 80048ec:	2320      	movs	r3, #32
 80048ee:	18fa      	adds	r2, r7, r3
 80048f0:	232f      	movs	r3, #47	; 0x2f
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	7819      	ldrb	r1, [r3, #0]
 80048f6:	2301      	movs	r3, #1
 80048f8:	f000 f96d 	bl	8004bd6 <lis2mdl_write_reg>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d002      	beq.n	8004906 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c4>
  {
    return LIS2MDL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	425b      	negs	r3, r3
 8004904:	e000      	b.n	8004908 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  return LIS2MDL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b00d      	add	sp, #52	; 0x34
 800490e:	bd90      	pop	{r4, r7, pc}

08004910 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b08d      	sub	sp, #52	; 0x34
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	0008      	movs	r0, r1
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	0019      	movs	r1, r3
 800491e:	230b      	movs	r3, #11
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	1c02      	adds	r2, r0, #0
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	2308      	movs	r3, #8
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	1c0a      	adds	r2, r1, #0
 800492c:	801a      	strh	r2, [r3, #0]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800492e:	212f      	movs	r1, #47	; 0x2f
 8004930:	187b      	adds	r3, r7, r1
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_en = 0x40U;
 8004936:	2421      	movs	r4, #33	; 0x21
 8004938:	193b      	adds	r3, r7, r4
 800493a:	2240      	movs	r2, #64	; 0x40
 800493c:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_dis = 0x00U;
 800493e:	2320      	movs	r3, #32
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004946:	231f      	movs	r3, #31
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	223c      	movs	r2, #60	; 0x3c
 800494c:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_add = 0x15U;
 800494e:	232e      	movs	r3, #46	; 0x2e
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2215      	movs	r2, #21
 8004954:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_subadd = 0x16U;
 8004956:	232d      	movs	r3, #45	; 0x2d
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	2216      	movs	r2, #22
 800495c:	701a      	strb	r2, [r3, #0]
  uint8_t slave0_config = 0x17U;
 800495e:	232c      	movs	r3, #44	; 0x2c
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	2217      	movs	r2, #23
 8004964:	701a      	strb	r2, [r3, #0]
  uint8_t shub_odr_104 = 0x00U;
 8004966:	231e      	movs	r3, #30
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
  uint8_t master_config = 0x14U;
 800496e:	232b      	movs	r3, #43	; 0x2b
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	2214      	movs	r2, #20
 8004974:	701a      	strb	r2, [r3, #0]
  uint8_t write_once_i2c_en = 0x44U;
 8004976:	231d      	movs	r3, #29
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	2244      	movs	r2, #68	; 0x44
 800497c:	701a      	strb	r2, [r3, #0]
  uint8_t status_master_mainpage = 0x39U;
 800497e:	232a      	movs	r3, #42	; 0x2a
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	2239      	movs	r2, #57	; 0x39
 8004984:	701a      	strb	r2, [r3, #0]
  uint8_t wr_once_done = 0x80U;
 8004986:	2329      	movs	r3, #41	; 0x29
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	2280      	movs	r2, #128	; 0x80
 800498c:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800498e:	2328      	movs	r3, #40	; 0x28
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2229      	movs	r2, #41	; 0x29
 8004994:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004996:	2327      	movs	r3, #39	; 0x27
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	221e      	movs	r2, #30
 800499c:	701a      	strb	r2, [r3, #0]
  uint8_t xlda = 0x01U;
 800499e:	2326      	movs	r3, #38	; 0x26
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80049a6:	2325      	movs	r3, #37	; 0x25
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	2210      	movs	r2, #16
 80049ac:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80049ae:	2324      	movs	r3, #36	; 0x24
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80049b6:	2323      	movs	r3, #35	; 0x23
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	701a      	strb	r2, [r3, #0]
  uint8_t datawrite_slv0 = 0x0EU;
 80049be:	2322      	movs	r3, #34	; 0x22
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	220e      	movs	r2, #14
 80049c4:	701a      	strb	r2, [r3, #0]
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	331c      	adds	r3, #28
 80049ca:	0018      	movs	r0, r3
 80049cc:	193a      	adds	r2, r7, r4
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	7819      	ldrb	r1, [r3, #0]
 80049d2:	2301      	movs	r3, #1
 80049d4:	f000 f8ff 	bl	8004bd6 <lis2mdl_write_reg>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d002      	beq.n	80049e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xd2>
  {
    return LIS2MDL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	425b      	negs	r3, r3
 80049e0:	e0d4      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	331c      	adds	r3, #28
 80049e6:	0018      	movs	r0, r3
 80049e8:	231f      	movs	r3, #31
 80049ea:	18fa      	adds	r2, r7, r3
 80049ec:	232e      	movs	r3, #46	; 0x2e
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	7819      	ldrb	r1, [r3, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	f000 f8ef 	bl	8004bd6 <lis2mdl_write_reg>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d002      	beq.n	8004a02 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xf2>
  {
    return LIS2MDL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	425b      	negs	r3, r3
 8004a00:	e0c4      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	331c      	adds	r3, #28
 8004a06:	0018      	movs	r0, r3
 8004a08:	230b      	movs	r3, #11
 8004a0a:	18fa      	adds	r2, r7, r3
 8004a0c:	232d      	movs	r3, #45	; 0x2d
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	7819      	ldrb	r1, [r3, #0]
 8004a12:	2301      	movs	r3, #1
 8004a14:	f000 f8df 	bl	8004bd6 <lis2mdl_write_reg>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d002      	beq.n	8004a22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x112>
  {
    return LIS2MDL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	425b      	negs	r3, r3
 8004a20:	e0b4      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	331c      	adds	r3, #28
 8004a26:	0018      	movs	r0, r3
 8004a28:	231e      	movs	r3, #30
 8004a2a:	18fa      	adds	r2, r7, r3
 8004a2c:	232c      	movs	r3, #44	; 0x2c
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	7819      	ldrb	r1, [r3, #0]
 8004a32:	2301      	movs	r3, #1
 8004a34:	f000 f8cf 	bl	8004bd6 <lis2mdl_write_reg>
 8004a38:	1e03      	subs	r3, r0, #0
 8004a3a:	d002      	beq.n	8004a42 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x132>
  {
    return LIS2MDL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	425b      	negs	r3, r3
 8004a40:	e0a4      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	331c      	adds	r3, #28
 8004a46:	0018      	movs	r0, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	2322      	movs	r3, #34	; 0x22
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	7819      	ldrb	r1, [r3, #0]
 8004a50:	2301      	movs	r3, #1
 8004a52:	f000 f8c0 	bl	8004bd6 <lis2mdl_write_reg>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d002      	beq.n	8004a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x150>
  {
    return LIS2MDL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	e095      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	331c      	adds	r3, #28
 8004a64:	0018      	movs	r0, r3
 8004a66:	231d      	movs	r3, #29
 8004a68:	18fa      	adds	r2, r7, r3
 8004a6a:	232b      	movs	r3, #43	; 0x2b
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	7819      	ldrb	r1, [r3, #0]
 8004a70:	2301      	movs	r3, #1
 8004a72:	f000 f8b0 	bl	8004bd6 <lis2mdl_write_reg>
 8004a76:	1e03      	subs	r3, r0, #0
 8004a78:	d002      	beq.n	8004a80 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x170>
  {
    return LIS2MDL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	425b      	negs	r3, r3
 8004a7e:	e085      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	331c      	adds	r3, #28
 8004a84:	0018      	movs	r0, r3
 8004a86:	2320      	movs	r3, #32
 8004a88:	18fa      	adds	r2, r7, r3
 8004a8a:	232f      	movs	r3, #47	; 0x2f
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	7819      	ldrb	r1, [r3, #0]
 8004a90:	2301      	movs	r3, #1
 8004a92:	f000 f8a0 	bl	8004bd6 <lis2mdl_write_reg>
 8004a96:	1e03      	subs	r3, r0, #0
 8004a98:	d002      	beq.n	8004aa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x190>
  {
    return LIS2MDL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	425b      	negs	r3, r3
 8004a9e:	e075      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	331c      	adds	r3, #28
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	231c      	movs	r3, #28
 8004aa8:	18fa      	adds	r2, r7, r3
 8004aaa:	2325      	movs	r3, #37	; 0x25
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	7819      	ldrb	r1, [r3, #0]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f000 f86f 	bl	8004b94 <lis2mdl_read_reg>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d002      	beq.n	8004ac0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1b0>
  {
    return LIS2MDL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	425b      	negs	r3, r3
 8004abe:	e065      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004ac0:	211c      	movs	r1, #28
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2224      	movs	r2, #36	; 0x24
 8004ac8:	18ba      	adds	r2, r7, r2
 8004aca:	7812      	ldrb	r2, [r2, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d104      	bne.n	8004ada <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ca>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004ad0:	187b      	adds	r3, r7, r1
 8004ad2:	2223      	movs	r2, #35	; 0x23
 8004ad4:	18ba      	adds	r2, r7, r2
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	331c      	adds	r3, #28
 8004ade:	0018      	movs	r0, r3
 8004ae0:	231c      	movs	r3, #28
 8004ae2:	18fa      	adds	r2, r7, r3
 8004ae4:	2325      	movs	r3, #37	; 0x25
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	7819      	ldrb	r1, [r3, #0]
 8004aea:	2301      	movs	r3, #1
 8004aec:	f000 f873 	bl	8004bd6 <lis2mdl_write_reg>
 8004af0:	1e03      	subs	r3, r0, #0
 8004af2:	d002      	beq.n	8004afa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ea>
  {
    return LIS2MDL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	425b      	negs	r3, r3
 8004af8:	e048      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	331c      	adds	r3, #28
 8004afe:	0018      	movs	r0, r3
 8004b00:	2314      	movs	r3, #20
 8004b02:	18fa      	adds	r2, r7, r3
 8004b04:	2328      	movs	r3, #40	; 0x28
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	7819      	ldrb	r1, [r3, #0]
 8004b0a:	2306      	movs	r3, #6
 8004b0c:	f000 f842 	bl	8004b94 <lis2mdl_read_reg>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d002      	beq.n	8004b1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x20a>
  {
    return LIS2MDL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	425b      	negs	r3, r3
 8004b18:	e038      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	331c      	adds	r3, #28
 8004b1e:	0018      	movs	r0, r3
 8004b20:	231b      	movs	r3, #27
 8004b22:	18fa      	adds	r2, r7, r3
 8004b24:	2327      	movs	r3, #39	; 0x27
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	7819      	ldrb	r1, [r3, #0]
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f000 f832 	bl	8004b94 <lis2mdl_read_reg>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d002      	beq.n	8004b3a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x22a>
    {
      return LIS2MDL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	425b      	negs	r3, r3
 8004b38:	e028      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
    }
  } while ((data & xlda) != xlda);
 8004b3a:	231b      	movs	r3, #27
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2126      	movs	r1, #38	; 0x26
 8004b42:	187a      	adds	r2, r7, r1
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	187a      	adds	r2, r7, r1
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d1e3      	bne.n	8004b1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x20a>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	331c      	adds	r3, #28
 8004b56:	0018      	movs	r0, r3
 8004b58:	231b      	movs	r3, #27
 8004b5a:	18fa      	adds	r2, r7, r3
 8004b5c:	232a      	movs	r3, #42	; 0x2a
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	2301      	movs	r3, #1
 8004b64:	f000 f816 	bl	8004b94 <lis2mdl_read_reg>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d002      	beq.n	8004b72 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x262>
    {
      return LIS2MDL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	425b      	negs	r3, r3
 8004b70:	e00c      	b.n	8004b8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004b72:	231b      	movs	r3, #27
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2129      	movs	r1, #41	; 0x29
 8004b7a:	187a      	adds	r2, r7, r1
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	187a      	adds	r2, r7, r1
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d1e3      	bne.n	8004b52 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x242>

  return LIS2MDL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b00d      	add	sp, #52	; 0x34
 8004b92:	bd90      	pop	{r4, r7, pc}

08004b94 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	0008      	movs	r0, r1
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	260b      	movs	r6, #11
 8004ba4:	19bb      	adds	r3, r7, r6
 8004ba6:	1c02      	adds	r2, r0, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	2508      	movs	r5, #8
 8004bac:	197b      	adds	r3, r7, r5
 8004bae:	1c0a      	adds	r2, r1, #0
 8004bb0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685c      	ldr	r4, [r3, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6898      	ldr	r0, [r3, #8]
 8004bba:	197b      	adds	r3, r7, r5
 8004bbc:	881d      	ldrh	r5, [r3, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	19bb      	adds	r3, r7, r6
 8004bc2:	7819      	ldrb	r1, [r3, #0]
 8004bc4:	002b      	movs	r3, r5
 8004bc6:	47a0      	blx	r4
 8004bc8:	0003      	movs	r3, r0
 8004bca:	617b      	str	r3, [r7, #20]

  return ret;
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b007      	add	sp, #28
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd6 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	0008      	movs	r0, r1
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	0019      	movs	r1, r3
 8004be4:	260b      	movs	r6, #11
 8004be6:	19bb      	adds	r3, r7, r6
 8004be8:	1c02      	adds	r2, r0, #0
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	2508      	movs	r5, #8
 8004bee:	197b      	adds	r3, r7, r5
 8004bf0:	1c0a      	adds	r2, r1, #0
 8004bf2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681c      	ldr	r4, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6898      	ldr	r0, [r3, #8]
 8004bfc:	197b      	adds	r3, r7, r5
 8004bfe:	881d      	ldrh	r5, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	19bb      	adds	r3, r7, r6
 8004c04:	7819      	ldrb	r1, [r3, #0]
 8004c06:	002b      	movs	r3, r5
 8004c08:	47a0      	blx	r4
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	617b      	str	r3, [r7, #20]

  return ret;
 8004c0e:	697b      	ldr	r3, [r7, #20]
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b007      	add	sp, #28
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c18 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	000a      	movs	r2, r1
 8004c22:	1cfb      	adds	r3, r7, #3
 8004c24:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004c26:	2408      	movs	r4, #8
 8004c28:	193a      	adds	r2, r7, r4
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	2160      	movs	r1, #96	; 0x60
 8004c30:	f7ff ffb0 	bl	8004b94 <lis2mdl_read_reg>
 8004c34:	0003      	movs	r3, r0
 8004c36:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d117      	bne.n	8004c6e <lis2mdl_operating_mode_set+0x56>
  {
    reg.md = (uint8_t)val;
 8004c3e:	1cfb      	adds	r3, r7, #3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2203      	movs	r2, #3
 8004c44:	4013      	ands	r3, r2
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	193b      	adds	r3, r7, r4
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	0010      	movs	r0, r2
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	2103      	movs	r1, #3
 8004c54:	438a      	bics	r2, r1
 8004c56:	1c11      	adds	r1, r2, #0
 8004c58:	1c02      	adds	r2, r0, #0
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004c5e:	193a      	adds	r2, r7, r4
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	2301      	movs	r3, #1
 8004c64:	2160      	movs	r1, #96	; 0x60
 8004c66:	f7ff ffb6 	bl	8004bd6 <lis2mdl_write_reg>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b005      	add	sp, #20
 8004c76:	bd90      	pop	{r4, r7, pc}

08004c78 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	000a      	movs	r2, r1
 8004c82:	1cfb      	adds	r3, r7, #3
 8004c84:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004c86:	2408      	movs	r4, #8
 8004c88:	193a      	adds	r2, r7, r4
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2160      	movs	r1, #96	; 0x60
 8004c90:	f7ff ff80 	bl	8004b94 <lis2mdl_read_reg>
 8004c94:	0003      	movs	r3, r0
 8004c96:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d117      	bne.n	8004cce <lis2mdl_data_rate_set+0x56>
  {
    reg.odr = (uint8_t)val;
 8004c9e:	1cfb      	adds	r3, r7, #3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	2103      	movs	r1, #3
 8004cac:	400a      	ands	r2, r1
 8004cae:	0090      	lsls	r0, r2, #2
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	210c      	movs	r1, #12
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	1c11      	adds	r1, r2, #0
 8004cb8:	1c02      	adds	r2, r0, #0
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004cbe:	193a      	adds	r2, r7, r4
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	2160      	movs	r1, #96	; 0x60
 8004cc6:	f7ff ff86 	bl	8004bd6 <lis2mdl_write_reg>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b005      	add	sp, #20
 8004cd6:	bd90      	pop	{r4, r7, pc}

08004cd8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004ce2:	2408      	movs	r4, #8
 8004ce4:	193a      	adds	r2, r7, r4
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	2160      	movs	r1, #96	; 0x60
 8004cec:	f7ff ff52 	bl	8004b94 <lis2mdl_read_reg>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	60fb      	str	r3, [r7, #12]

  switch (reg.odr)
 8004cf4:	193b      	adds	r3, r7, r4
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	0f9b      	lsrs	r3, r3, #30
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d014      	beq.n	8004d2c <lis2mdl_data_rate_get+0x54>
 8004d02:	dc17      	bgt.n	8004d34 <lis2mdl_data_rate_get+0x5c>
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d00d      	beq.n	8004d24 <lis2mdl_data_rate_get+0x4c>
 8004d08:	dc14      	bgt.n	8004d34 <lis2mdl_data_rate_get+0x5c>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <lis2mdl_data_rate_get+0x3c>
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d004      	beq.n	8004d1c <lis2mdl_data_rate_get+0x44>
 8004d12:	e00f      	b.n	8004d34 <lis2mdl_data_rate_get+0x5c>
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
      break;
 8004d1a:	e00f      	b.n	8004d3c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
      break;
 8004d22:	e00b      	b.n	8004d3c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2202      	movs	r2, #2
 8004d28:	701a      	strb	r2, [r3, #0]
      break;
 8004d2a:	e007      	b.n	8004d3c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	701a      	strb	r2, [r3, #0]
      break;
 8004d32:	e003      	b.n	8004d3c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
      break;
 8004d3a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b005      	add	sp, #20
 8004d44:	bd90      	pop	{r4, r7, pc}

08004d46 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d46:	b590      	push	{r4, r7, lr}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	000a      	movs	r2, r1
 8004d50:	1cfb      	adds	r3, r7, #3
 8004d52:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004d54:	2408      	movs	r4, #8
 8004d56:	193a      	adds	r2, r7, r4
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	2162      	movs	r1, #98	; 0x62
 8004d5e:	f7ff ff19 	bl	8004b94 <lis2mdl_read_reg>
 8004d62:	0003      	movs	r3, r0
 8004d64:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d117      	bne.n	8004d9c <lis2mdl_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8004d6c:	1cfb      	adds	r3, r7, #3
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	4013      	ands	r3, r2
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	2101      	movs	r1, #1
 8004d7a:	400a      	ands	r2, r1
 8004d7c:	0110      	lsls	r0, r2, #4
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	2110      	movs	r1, #16
 8004d82:	438a      	bics	r2, r1
 8004d84:	1c11      	adds	r1, r2, #0
 8004d86:	1c02      	adds	r2, r0, #0
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004d8c:	193a      	adds	r2, r7, r4
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	2301      	movs	r3, #1
 8004d92:	2162      	movs	r1, #98	; 0x62
 8004d94:	f7ff ff1f 	bl	8004bd6 <lis2mdl_write_reg>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b005      	add	sp, #20
 8004da4:	bd90      	pop	{r4, r7, pc}

08004da6 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004da6:	b590      	push	{r4, r7, lr}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004db0:	240c      	movs	r4, #12
 8004db2:	193a      	adds	r2, r7, r4
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	2306      	movs	r3, #6
 8004db8:	2168      	movs	r1, #104	; 0x68
 8004dba:	f7ff feeb 	bl	8004b94 <lis2mdl_read_reg>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004dc2:	0021      	movs	r1, r4
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	b21a      	sxth	r2, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	b21a      	sxth	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004dea:	187b      	adds	r3, r7, r1
 8004dec:	78da      	ldrb	r2, [r3, #3]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	3302      	adds	r3, #2
 8004df2:	b212      	sxth	r2, r2
 8004df4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	3302      	adds	r3, #2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	5e9b      	ldrsh	r3, [r3, r2]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	789b      	ldrb	r3, [r3, #2]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	18d3      	adds	r3, r2, r3
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	3302      	adds	r3, #2
 8004e12:	b212      	sxth	r2, r2
 8004e14:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	795a      	ldrb	r2, [r3, #5]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	b212      	sxth	r2, r2
 8004e20:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2200      	movs	r2, #0
 8004e28:	5e9b      	ldrsh	r3, [r3, r2]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	187b      	adds	r3, r7, r1
 8004e32:	791b      	ldrb	r3, [r3, #4]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	b212      	sxth	r2, r2
 8004e40:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e42:	697b      	ldr	r3, [r7, #20]
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b007      	add	sp, #28
 8004e4a:	bd90      	pop	{r4, r7, pc}

08004e4c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	214f      	movs	r1, #79	; 0x4f
 8004e5e:	f7ff fe99 	bl	8004b94 <lis2mdl_read_reg>
 8004e62:	0003      	movs	r3, r0
 8004e64:	60fb      	str	r3, [r7, #12]

  return ret;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b004      	add	sp, #16
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	000a      	movs	r2, r1
 8004e7a:	1cfb      	adds	r3, r7, #3
 8004e7c:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004e7e:	2408      	movs	r4, #8
 8004e80:	193a      	adds	r2, r7, r4
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	2301      	movs	r3, #1
 8004e86:	2162      	movs	r1, #98	; 0x62
 8004e88:	f7ff fe84 	bl	8004b94 <lis2mdl_read_reg>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d117      	bne.n	8004ec6 <lis2mdl_self_test_set+0x56>
  {
    reg.self_test = val;
 8004e96:	1cfb      	adds	r3, r7, #3
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	193b      	adds	r3, r7, r4
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	1890      	adds	r0, r2, r2
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	2102      	movs	r1, #2
 8004eac:	438a      	bics	r2, r1
 8004eae:	1c11      	adds	r1, r2, #0
 8004eb0:	1c02      	adds	r2, r0, #0
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004eb6:	193a      	adds	r2, r7, r4
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	2162      	movs	r1, #98	; 0x62
 8004ebe:	f7ff fe8a 	bl	8004bd6 <lis2mdl_write_reg>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b005      	add	sp, #20
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	000a      	movs	r2, r1
 8004eda:	1cfb      	adds	r3, r7, #3
 8004edc:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004ede:	2408      	movs	r4, #8
 8004ee0:	193a      	adds	r2, r7, r4
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	2162      	movs	r1, #98	; 0x62
 8004ee8:	f7ff fe54 	bl	8004b94 <lis2mdl_read_reg>
 8004eec:	0003      	movs	r3, r0
 8004eee:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d117      	bne.n	8004f26 <lis2mdl_i2c_interface_set+0x56>
  {
    reg.i2c_dis = (uint8_t)val;
 8004ef6:	1cfb      	adds	r3, r7, #3
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	193b      	adds	r3, r7, r4
 8004f02:	2101      	movs	r1, #1
 8004f04:	400a      	ands	r2, r1
 8004f06:	0150      	lsls	r0, r2, #5
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	2120      	movs	r1, #32
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	1c11      	adds	r1, r2, #0
 8004f10:	1c02      	adds	r2, r0, #0
 8004f12:	430a      	orrs	r2, r1
 8004f14:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004f16:	193a      	adds	r2, r7, r4
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	2162      	movs	r1, #98	; 0x62
 8004f1e:	f7ff fe5a 	bl	8004bd6 <lis2mdl_write_reg>
 8004f22:	0003      	movs	r3, r0
 8004f24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	0018      	movs	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b005      	add	sp, #20
 8004f2e:	bd90      	pop	{r4, r7, pc}

08004f30 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	425b      	negs	r3, r3
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e04e      	b.n	8004fea <LPS22HH_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	7b1a      	ldrb	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <LPS22HH_RegisterBusIO+0xc4>)
 8004f88:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <LPS22HH_RegisterBusIO+0xc8>)
 8004f8e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e021      	b.n	8004fea <LPS22HH_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4798      	blx	r3
 8004fac:	1e03      	subs	r3, r0, #0
 8004fae:	d003      	beq.n	8004fb8 <LPS22HH_RegisterBusIO+0x88>
    {
      ret = LPS22HH_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	425b      	negs	r3, r3
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e018      	b.n	8004fea <LPS22HH_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d114      	bne.n	8004fea <LPS22HH_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2228      	movs	r2, #40	; 0x28
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10f      	bne.n	8004fea <LPS22HH_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004fca:	210b      	movs	r1, #11
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2110      	movs	r1, #16
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f000 f9d5 	bl	800538a <LPS22HH_Write_Reg>
 8004fe0:	1e03      	subs	r3, r0, #0
 8004fe2:	d002      	beq.n	8004fea <LPS22HH_RegisterBusIO+0xba>
          {
            ret = LPS22HH_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	425b      	negs	r3, r3
 8004fe8:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004fea:	68fb      	ldr	r3, [r7, #12]
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b004      	add	sp, #16
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	0800565d 	.word	0x0800565d
 8004ff8:	080056a1 	.word	0x080056a1

08004ffc <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2228      	movs	r2, #40	; 0x28
 8005008:	5c9b      	ldrb	r3, [r3, r2]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d108      	bne.n	8005020 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0018      	movs	r0, r3
 8005012:	f000 fadf 	bl	80055d4 <LPS22HH_Initialize>
 8005016:	1e03      	subs	r3, r0, #0
 8005018:	d002      	beq.n	8005020 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	425b      	negs	r3, r3
 800501e:	e004      	b.n	800502a <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2228      	movs	r2, #40	; 0x28
 8005024:	2101      	movs	r1, #1
 8005026:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b002      	add	sp, #8
 8005030:	bd80      	pop	{r7, pc}

08005032 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2228      	movs	r2, #40	; 0x28
 800503e:	5c9b      	ldrb	r3, [r3, r2]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d111      	bne.n	8005068 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f873 	bl	8005132 <LPS22HH_PRESS_Disable>
 800504c:	1e03      	subs	r3, r0, #0
 800504e:	d002      	beq.n	8005056 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	425b      	negs	r3, r3
 8005054:	e00d      	b.n	8005072 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f910 	bl	800527e <LPS22HH_TEMP_Disable>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d002      	beq.n	8005068 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	425b      	negs	r3, r3
 8005066:	e004      	b.n	8005072 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2228      	movs	r2, #40	; 0x28
 800506c:	2100      	movs	r1, #0
 800506e:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b002      	add	sp, #8
 8005078:	bd80      	pop	{r7, pc}

0800507a <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	331c      	adds	r3, #28
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	0011      	movs	r1, r2
 800508c:	0018      	movs	r0, r3
 800508e:	f000 fd0e 	bl	8005aae <lps22hh_device_id_get>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d002      	beq.n	800509c <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	425b      	negs	r3, r3
 800509a:	e000      	b.n	800509e <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b002      	add	sp, #8
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2201      	movs	r2, #1
 80050bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <LPS22HH_GetCapabilities+0x40>)
 80050d4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	4a03      	ldr	r2, [pc, #12]	; (80050e8 <LPS22HH_GetCapabilities+0x40>)
 80050da:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b002      	add	sp, #8
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	43480000 	.word	0x43480000

080050ec <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2229      	movs	r2, #41	; 0x29
 80050f8:	5c9b      	ldrb	r3, [r3, r2]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e013      	b.n	800512a <LPS22HH_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	331c      	adds	r3, #28
 8005106:	001a      	movs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	212b      	movs	r1, #43	; 0x2b
 800510c:	5c5b      	ldrb	r3, [r3, r1]
 800510e:	0019      	movs	r1, r3
 8005110:	0010      	movs	r0, r2
 8005112:	f000 fb83 	bl	800581c <lps22hh_data_rate_set>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d002      	beq.n	8005120 <LPS22HH_PRESS_Enable+0x34>
  {
    return LPS22HH_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	425b      	negs	r3, r3
 800511e:	e004      	b.n	800512a <LPS22HH_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2229      	movs	r2, #41	; 0x29
 8005124:	2101      	movs	r1, #1
 8005126:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b002      	add	sp, #8
 8005130:	bd80      	pop	{r7, pc}

08005132 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2229      	movs	r2, #41	; 0x29
 800513e:	5c9b      	ldrb	r3, [r3, r2]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e022      	b.n	800518e <LPS22HH_PRESS_Disable+0x5c>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	222a      	movs	r2, #42	; 0x2a
 800514c:	5c9b      	ldrb	r3, [r3, r2]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d118      	bne.n	8005184 <LPS22HH_PRESS_Disable+0x52>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	331c      	adds	r3, #28
 8005156:	001a      	movs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	332b      	adds	r3, #43	; 0x2b
 800515c:	0019      	movs	r1, r3
 800515e:	0010      	movs	r0, r2
 8005160:	f000 fbca 	bl	80058f8 <lps22hh_data_rate_get>
 8005164:	1e03      	subs	r3, r0, #0
 8005166:	d002      	beq.n	800516e <LPS22HH_PRESS_Disable+0x3c>
    {
      return LPS22HH_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	425b      	negs	r3, r3
 800516c:	e00f      	b.n	800518e <LPS22HH_PRESS_Disable+0x5c>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	331c      	adds	r3, #28
 8005172:	2100      	movs	r1, #0
 8005174:	0018      	movs	r0, r3
 8005176:	f000 fb51 	bl	800581c <lps22hh_data_rate_set>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d002      	beq.n	8005184 <LPS22HH_PRESS_Disable+0x52>
    {
      return LPS22HH_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	425b      	negs	r3, r3
 8005182:	e004      	b.n	800518e <LPS22HH_PRESS_Disable+0x5c>
    }
  }

  pObj->press_is_enabled = 0;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2229      	movs	r2, #41	; 0x29
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	0018      	movs	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	b002      	add	sp, #8
 8005194:	bd80      	pop	{r7, pc}

08005196 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0011      	movs	r1, r2
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 f90e 	bl	80053c8 <LPS22HH_GetOutputDataRate>
 80051ac:	0003      	movs	r3, r0
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b002      	add	sp, #8
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2229      	movs	r2, #41	; 0x29
 80051c4:	5c9b      	ldrb	r3, [r3, r2]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1c11      	adds	r1, r2, #0
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 f94f 	bl	8005474 <LPS22HH_SetOutputDataRate_When_Enabled>
 80051d6:	0003      	movs	r3, r0
 80051d8:	e006      	b.n	80051e8 <LPS22HH_PRESS_SetOutputDataRate+0x32>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1c11      	adds	r1, r2, #0
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 f9ad 	bl	8005540 <LPS22HH_SetOutputDataRate_When_Disabled>
 80051e6:	0003      	movs	r3, r0
  }
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80051fa:	240c      	movs	r4, #12
 80051fc:	193b      	adds	r3, r7, r4
 80051fe:	2204      	movs	r2, #4
 8005200:	2100      	movs	r1, #0
 8005202:	0018      	movs	r0, r3
 8005204:	f00d ff65 	bl	80130d2 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	331c      	adds	r3, #28
 800520c:	193a      	adds	r2, r7, r4
 800520e:	0011      	movs	r1, r2
 8005210:	0018      	movs	r0, r3
 8005212:	f000 fbf7 	bl	8005a04 <lps22hh_pressure_raw_get>
 8005216:	1e03      	subs	r3, r0, #0
 8005218:	d002      	beq.n	8005220 <LPS22HH_PRESS_GetPressure+0x30>
  {
    return LPS22HH_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	425b      	negs	r3, r3
 800521e:	e007      	b.n	8005230 <LPS22HH_PRESS_GetPressure+0x40>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	0018      	movs	r0, r3
 8005224:	f000 faa0 	bl	8005768 <lps22hh_from_lsb_to_hpa>
 8005228:	1c02      	adds	r2, r0, #0
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b005      	add	sp, #20
 8005236:	bd90      	pop	{r4, r7, pc}

08005238 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	222a      	movs	r2, #42	; 0x2a
 8005244:	5c9b      	ldrb	r3, [r3, r2]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e013      	b.n	8005276 <LPS22HH_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	331c      	adds	r3, #28
 8005252:	001a      	movs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	212b      	movs	r1, #43	; 0x2b
 8005258:	5c5b      	ldrb	r3, [r3, r1]
 800525a:	0019      	movs	r1, r3
 800525c:	0010      	movs	r0, r2
 800525e:	f000 fadd 	bl	800581c <lps22hh_data_rate_set>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d002      	beq.n	800526c <LPS22HH_TEMP_Enable+0x34>
  {
    return LPS22HH_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	425b      	negs	r3, r3
 800526a:	e004      	b.n	8005276 <LPS22HH_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	222a      	movs	r2, #42	; 0x2a
 8005270:	2101      	movs	r1, #1
 8005272:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b002      	add	sp, #8
 800527c:	bd80      	pop	{r7, pc}

0800527e <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	222a      	movs	r2, #42	; 0x2a
 800528a:	5c9b      	ldrb	r3, [r3, r2]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e022      	b.n	80052da <LPS22HH_TEMP_Disable+0x5c>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2229      	movs	r2, #41	; 0x29
 8005298:	5c9b      	ldrb	r3, [r3, r2]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <LPS22HH_TEMP_Disable+0x52>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	331c      	adds	r3, #28
 80052a2:	001a      	movs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	332b      	adds	r3, #43	; 0x2b
 80052a8:	0019      	movs	r1, r3
 80052aa:	0010      	movs	r0, r2
 80052ac:	f000 fb24 	bl	80058f8 <lps22hh_data_rate_get>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d002      	beq.n	80052ba <LPS22HH_TEMP_Disable+0x3c>
    {
      return LPS22HH_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	425b      	negs	r3, r3
 80052b8:	e00f      	b.n	80052da <LPS22HH_TEMP_Disable+0x5c>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	331c      	adds	r3, #28
 80052be:	2100      	movs	r1, #0
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 faab 	bl	800581c <lps22hh_data_rate_set>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d002      	beq.n	80052d0 <LPS22HH_TEMP_Disable+0x52>
    {
      return LPS22HH_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	425b      	negs	r3, r3
 80052ce:	e004      	b.n	80052da <LPS22HH_TEMP_Disable+0x5c>
    }
  }

  pObj->temp_is_enabled = 0;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	222a      	movs	r2, #42	; 0x2a
 80052d4:	2100      	movs	r1, #0
 80052d6:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b002      	add	sp, #8
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	0011      	movs	r1, r2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 f868 	bl	80053c8 <LPS22HH_GetOutputDataRate>
 80052f8:	0003      	movs	r3, r0
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b002      	add	sp, #8
 8005300:	bd80      	pop	{r7, pc}

08005302 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	222a      	movs	r2, #42	; 0x2a
 8005310:	5c9b      	ldrb	r3, [r3, r2]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1c11      	adds	r1, r2, #0
 800531c:	0018      	movs	r0, r3
 800531e:	f000 f8a9 	bl	8005474 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005322:	0003      	movs	r3, r0
 8005324:	e006      	b.n	8005334 <LPS22HH_TEMP_SetOutputDataRate+0x32>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1c11      	adds	r1, r2, #0
 800532c:	0018      	movs	r0, r3
 800532e:	f000 f907 	bl	8005540 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005332:	0003      	movs	r3, r0
  }
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}

0800533c <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005346:	240c      	movs	r4, #12
 8005348:	193b      	adds	r3, r7, r4
 800534a:	2202      	movs	r2, #2
 800534c:	2100      	movs	r1, #0
 800534e:	0018      	movs	r0, r3
 8005350:	f00d febf 	bl	80130d2 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	331c      	adds	r3, #28
 8005358:	193a      	adds	r2, r7, r4
 800535a:	0011      	movs	r1, r2
 800535c:	0018      	movs	r0, r3
 800535e:	f000 fb7f 	bl	8005a60 <lps22hh_temperature_raw_get>
 8005362:	1e03      	subs	r3, r0, #0
 8005364:	d002      	beq.n	800536c <LPS22HH_TEMP_GetTemperature+0x30>
  {
    return LPS22HH_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	425b      	negs	r3, r3
 800536a:	e00a      	b.n	8005382 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 800536c:	230c      	movs	r3, #12
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	2200      	movs	r2, #0
 8005372:	5e9b      	ldrsh	r3, [r3, r2]
 8005374:	0018      	movs	r0, r3
 8005376:	f000 fa09 	bl	800578c <lps22hh_from_lsb_to_celsius>
 800537a:	1c02      	adds	r2, r0, #0
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b005      	add	sp, #20
 8005388:	bd90      	pop	{r4, r7, pc}

0800538a <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	0008      	movs	r0, r1
 8005394:	0011      	movs	r1, r2
 8005396:	1cfb      	adds	r3, r7, #3
 8005398:	1c02      	adds	r2, r0, #0
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	1cbb      	adds	r3, r7, #2
 800539e:	1c0a      	adds	r2, r1, #0
 80053a0:	701a      	strb	r2, [r3, #0]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	331c      	adds	r3, #28
 80053a6:	0018      	movs	r0, r3
 80053a8:	1cba      	adds	r2, r7, #2
 80053aa:	1cfb      	adds	r3, r7, #3
 80053ac:	7819      	ldrb	r1, [r3, #0]
 80053ae:	2301      	movs	r3, #1
 80053b0:	f000 f9b9 	bl	8005726 <lps22hh_write_reg>
 80053b4:	1e03      	subs	r3, r0, #0
 80053b6:	d002      	beq.n	80053be <LPS22HH_Write_Reg+0x34>
  {
    return LPS22HH_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	425b      	negs	r3, r3
 80053bc:	e000      	b.n	80053c0 <LPS22HH_Write_Reg+0x36>
  }

  return LPS22HH_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b002      	add	sp, #8
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	331c      	adds	r3, #28
 80053da:	220b      	movs	r2, #11
 80053dc:	18ba      	adds	r2, r7, r2
 80053de:	0011      	movs	r1, r2
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fa89 	bl	80058f8 <lps22hh_data_rate_get>
 80053e6:	1e03      	subs	r3, r0, #0
 80053e8:	d002      	beq.n	80053f0 <LPS22HH_GetOutputDataRate+0x28>
  {
    return LPS22HH_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	425b      	negs	r3, r3
 80053ee:	e02f      	b.n	8005450 <LPS22HH_GetOutputDataRate+0x88>
  }

  switch (odr_low_level)
 80053f0:	230b      	movs	r3, #11
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b07      	cmp	r3, #7
 80053f8:	d825      	bhi.n	8005446 <LPS22HH_GetOutputDataRate+0x7e>
 80053fa:	009a      	lsls	r2, r3, #2
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <LPS22HH_GetOutputDataRate+0x90>)
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	469f      	mov	pc, r3
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
      break;
 800540a:	e020      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	22fe      	movs	r2, #254	; 0xfe
 8005410:	0592      	lsls	r2, r2, #22
 8005412:	601a      	str	r2, [r3, #0]
      break;
 8005414:	e01b      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	4a10      	ldr	r2, [pc, #64]	; (800545c <LPS22HH_GetOutputDataRate+0x94>)
 800541a:	601a      	str	r2, [r3, #0]
      break;
 800541c:	e017      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	4a0f      	ldr	r2, [pc, #60]	; (8005460 <LPS22HH_GetOutputDataRate+0x98>)
 8005422:	601a      	str	r2, [r3, #0]
      break;
 8005424:	e013      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	4a0e      	ldr	r2, [pc, #56]	; (8005464 <LPS22HH_GetOutputDataRate+0x9c>)
 800542a:	601a      	str	r2, [r3, #0]
      break;
 800542c:	e00f      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <LPS22HH_GetOutputDataRate+0xa0>)
 8005432:	601a      	str	r2, [r3, #0]
      break;
 8005434:	e00b      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	4a0c      	ldr	r2, [pc, #48]	; (800546c <LPS22HH_GetOutputDataRate+0xa4>)
 800543a:	601a      	str	r2, [r3, #0]
      break;
 800543c:	e007      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	4a0b      	ldr	r2, [pc, #44]	; (8005470 <LPS22HH_GetOutputDataRate+0xa8>)
 8005442:	601a      	str	r2, [r3, #0]
      break;
 8005444:	e003      	b.n	800544e <LPS22HH_GetOutputDataRate+0x86>

    default:
      ret = LPS22HH_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	425b      	negs	r3, r3
 800544a:	60fb      	str	r3, [r7, #12]
      break;
 800544c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800544e:	68fb      	ldr	r3, [r7, #12]
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	b004      	add	sp, #16
 8005456:	bd80      	pop	{r7, pc}
 8005458:	08015744 	.word	0x08015744
 800545c:	41200000 	.word	0x41200000
 8005460:	41c80000 	.word	0x41c80000
 8005464:	42480000 	.word	0x42480000
 8005468:	42960000 	.word	0x42960000
 800546c:	42c80000 	.word	0x42c80000
 8005470:	43480000 	.word	0x43480000

08005474 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800547e:	21fe      	movs	r1, #254	; 0xfe
 8005480:	0589      	lsls	r1, r1, #22
 8005482:	6838      	ldr	r0, [r7, #0]
 8005484:	f7fa ffdc 	bl	8000440 <__aeabi_fcmple>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d001      	beq.n	8005490 <LPS22HH_SetOutputDataRate_When_Enabled+0x1c>
 800548c:	2301      	movs	r3, #1
 800548e:	e028      	b.n	80054e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 8005490:	4926      	ldr	r1, [pc, #152]	; (800552c <LPS22HH_SetOutputDataRate_When_Enabled+0xb8>)
 8005492:	6838      	ldr	r0, [r7, #0]
 8005494:	f7fa ffd4 	bl	8000440 <__aeabi_fcmple>
 8005498:	1e03      	subs	r3, r0, #0
 800549a:	d001      	beq.n	80054a0 <LPS22HH_SetOutputDataRate_When_Enabled+0x2c>
 800549c:	2302      	movs	r3, #2
 800549e:	e020      	b.n	80054e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80054a0:	4923      	ldr	r1, [pc, #140]	; (8005530 <LPS22HH_SetOutputDataRate_When_Enabled+0xbc>)
 80054a2:	6838      	ldr	r0, [r7, #0]
 80054a4:	f7fa ffcc 	bl	8000440 <__aeabi_fcmple>
 80054a8:	1e03      	subs	r3, r0, #0
 80054aa:	d001      	beq.n	80054b0 <LPS22HH_SetOutputDataRate_When_Enabled+0x3c>
 80054ac:	2303      	movs	r3, #3
 80054ae:	e018      	b.n	80054e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80054b0:	4920      	ldr	r1, [pc, #128]	; (8005534 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 80054b2:	6838      	ldr	r0, [r7, #0]
 80054b4:	f7fa ffc4 	bl	8000440 <__aeabi_fcmple>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d001      	beq.n	80054c0 <LPS22HH_SetOutputDataRate_When_Enabled+0x4c>
 80054bc:	2304      	movs	r3, #4
 80054be:	e010      	b.n	80054e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80054c0:	491d      	ldr	r1, [pc, #116]	; (8005538 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 80054c2:	6838      	ldr	r0, [r7, #0]
 80054c4:	f7fa ffbc 	bl	8000440 <__aeabi_fcmple>
 80054c8:	1e03      	subs	r3, r0, #0
 80054ca:	d001      	beq.n	80054d0 <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 80054cc:	2305      	movs	r3, #5
 80054ce:	e008      	b.n	80054e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80054d0:	491a      	ldr	r1, [pc, #104]	; (800553c <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 80054d2:	6838      	ldr	r0, [r7, #0]
 80054d4:	f7fa ffb4 	bl	8000440 <__aeabi_fcmple>
 80054d8:	1e03      	subs	r3, r0, #0
 80054da:	d001      	beq.n	80054e0 <LPS22HH_SetOutputDataRate_When_Enabled+0x6c>
 80054dc:	2306      	movs	r3, #6
 80054de:	e000      	b.n	80054e2 <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80054e0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80054e2:	210f      	movs	r1, #15
 80054e4:	187a      	adds	r2, r7, r1
 80054e6:	7013      	strb	r3, [r2, #0]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	331c      	adds	r3, #28
 80054ec:	001a      	movs	r2, r3
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	0019      	movs	r1, r3
 80054f4:	0010      	movs	r0, r2
 80054f6:	f000 f991 	bl	800581c <lps22hh_data_rate_set>
 80054fa:	1e03      	subs	r3, r0, #0
 80054fc:	d002      	beq.n	8005504 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
  {
    return LPS22HH_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	425b      	negs	r3, r3
 8005502:	e00e      	b.n	8005522 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	331c      	adds	r3, #28
 8005508:	001a      	movs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	332b      	adds	r3, #43	; 0x2b
 800550e:	0019      	movs	r1, r3
 8005510:	0010      	movs	r0, r2
 8005512:	f000 f9f1 	bl	80058f8 <lps22hh_data_rate_get>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d002      	beq.n	8005520 <LPS22HH_SetOutputDataRate_When_Enabled+0xac>
  {
    return LPS22HH_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	425b      	negs	r3, r3
 800551e:	e000      	b.n	8005522 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  }

  return LPS22HH_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	0018      	movs	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	b004      	add	sp, #16
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	41200000 	.word	0x41200000
 8005530:	41c80000 	.word	0x41c80000
 8005534:	42480000 	.word	0x42480000
 8005538:	42960000 	.word	0x42960000
 800553c:	42c80000 	.word	0x42c80000

08005540 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800554a:	21fe      	movs	r1, #254	; 0xfe
 800554c:	0589      	lsls	r1, r1, #22
 800554e:	6838      	ldr	r0, [r7, #0]
 8005550:	f7fa ff76 	bl	8000440 <__aeabi_fcmple>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d001      	beq.n	800555c <LPS22HH_SetOutputDataRate_When_Disabled+0x1c>
 8005558:	2301      	movs	r3, #1
 800555a:	e028      	b.n	80055ae <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 800555c:	4918      	ldr	r1, [pc, #96]	; (80055c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x80>)
 800555e:	6838      	ldr	r0, [r7, #0]
 8005560:	f7fa ff6e 	bl	8000440 <__aeabi_fcmple>
 8005564:	1e03      	subs	r3, r0, #0
 8005566:	d001      	beq.n	800556c <LPS22HH_SetOutputDataRate_When_Disabled+0x2c>
 8005568:	2302      	movs	r3, #2
 800556a:	e020      	b.n	80055ae <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 800556c:	4915      	ldr	r1, [pc, #84]	; (80055c4 <LPS22HH_SetOutputDataRate_When_Disabled+0x84>)
 800556e:	6838      	ldr	r0, [r7, #0]
 8005570:	f7fa ff66 	bl	8000440 <__aeabi_fcmple>
 8005574:	1e03      	subs	r3, r0, #0
 8005576:	d001      	beq.n	800557c <LPS22HH_SetOutputDataRate_When_Disabled+0x3c>
 8005578:	2303      	movs	r3, #3
 800557a:	e018      	b.n	80055ae <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 800557c:	4912      	ldr	r1, [pc, #72]	; (80055c8 <LPS22HH_SetOutputDataRate_When_Disabled+0x88>)
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	f7fa ff5e 	bl	8000440 <__aeabi_fcmple>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d001      	beq.n	800558c <LPS22HH_SetOutputDataRate_When_Disabled+0x4c>
 8005588:	2304      	movs	r3, #4
 800558a:	e010      	b.n	80055ae <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 800558c:	490f      	ldr	r1, [pc, #60]	; (80055cc <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f7fa ff56 	bl	8000440 <__aeabi_fcmple>
 8005594:	1e03      	subs	r3, r0, #0
 8005596:	d001      	beq.n	800559c <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 8005598:	2305      	movs	r3, #5
 800559a:	e008      	b.n	80055ae <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 800559c:	490c      	ldr	r1, [pc, #48]	; (80055d0 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 800559e:	6838      	ldr	r0, [r7, #0]
 80055a0:	f7fa ff4e 	bl	8000440 <__aeabi_fcmple>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d001      	beq.n	80055ac <LPS22HH_SetOutputDataRate_When_Disabled+0x6c>
 80055a8:	2306      	movs	r3, #6
 80055aa:	e000      	b.n	80055ae <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 80055ac:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	212b      	movs	r1, #43	; 0x2b
 80055b2:	5453      	strb	r3, [r2, r1]
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	0018      	movs	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b002      	add	sp, #8
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	41200000 	.word	0x41200000
 80055c4:	41c80000 	.word	0x41c80000
 80055c8:	42480000 	.word	0x42480000
 80055cc:	42960000 	.word	0x42960000
 80055d0:	42c80000 	.word	0x42c80000

080055d4 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	331c      	adds	r3, #28
 80055e0:	2111      	movs	r1, #17
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 fad5 	bl	8005b92 <lps22hh_i3c_interface_set>
 80055e8:	1e03      	subs	r3, r0, #0
 80055ea:	d002      	beq.n	80055f2 <LPS22HH_Initialize+0x1e>
  {
    return LPS22HH_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	425b      	negs	r3, r3
 80055f0:	e030      	b.n	8005654 <LPS22HH_Initialize+0x80>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	331c      	adds	r3, #28
 80055f6:	2110      	movs	r1, #16
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 f90f 	bl	800581c <lps22hh_data_rate_set>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d002      	beq.n	8005608 <LPS22HH_Initialize+0x34>
  {
    return LPS22HH_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	425b      	negs	r3, r3
 8005606:	e025      	b.n	8005654 <LPS22HH_Initialize+0x80>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	331c      	adds	r3, #28
 800560c:	2100      	movs	r1, #0
 800560e:	0018      	movs	r0, r3
 8005610:	f000 fa8f 	bl	8005b32 <lps22hh_lp_bandwidth_set>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d002      	beq.n	800561e <LPS22HH_Initialize+0x4a>
  {
    return LPS22HH_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	425b      	negs	r3, r3
 800561c:	e01a      	b.n	8005654 <LPS22HH_Initialize+0x80>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	331c      	adds	r3, #28
 8005622:	2101      	movs	r1, #1
 8005624:	0018      	movs	r0, r3
 8005626:	f000 f8c9 	bl	80057bc <lps22hh_block_data_update_set>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d002      	beq.n	8005634 <LPS22HH_Initialize+0x60>
  {
    return LPS22HH_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	425b      	negs	r3, r3
 8005632:	e00f      	b.n	8005654 <LPS22HH_Initialize+0x80>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	331c      	adds	r3, #28
 8005638:	2101      	movs	r1, #1
 800563a:	0018      	movs	r0, r3
 800563c:	f000 fa49 	bl	8005ad2 <lps22hh_auto_increment_set>
 8005640:	1e03      	subs	r3, r0, #0
 8005642:	d002      	beq.n	800564a <LPS22HH_Initialize+0x76>
  {
    return LPS22HH_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	425b      	negs	r3, r3
 8005648:	e004      	b.n	8005654 <LPS22HH_Initialize+0x80>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	222b      	movs	r2, #43	; 0x2b
 800564e:	2103      	movs	r1, #3
 8005650:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}

0800565c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	0008      	movs	r0, r1
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	0019      	movs	r1, r3
 800566a:	250b      	movs	r5, #11
 800566c:	197b      	adds	r3, r7, r5
 800566e:	1c02      	adds	r2, r0, #0
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	2608      	movs	r6, #8
 8005674:	19bb      	adds	r3, r7, r6
 8005676:	1c0a      	adds	r2, r1, #0
 8005678:	801a      	strh	r2, [r3, #0]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	695c      	ldr	r4, [r3, #20]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	7b1b      	ldrb	r3, [r3, #12]
 8005686:	b298      	uxth	r0, r3
 8005688:	197b      	adds	r3, r7, r5
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b299      	uxth	r1, r3
 800568e:	19bb      	adds	r3, r7, r6
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	47a0      	blx	r4
 8005696:	0003      	movs	r3, r0
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b007      	add	sp, #28
 800569e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056a0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	0008      	movs	r0, r1
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	0019      	movs	r1, r3
 80056ae:	250b      	movs	r5, #11
 80056b0:	197b      	adds	r3, r7, r5
 80056b2:	1c02      	adds	r2, r0, #0
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	2608      	movs	r6, #8
 80056b8:	19bb      	adds	r3, r7, r6
 80056ba:	1c0a      	adds	r2, r1, #0
 80056bc:	801a      	strh	r2, [r3, #0]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	691c      	ldr	r4, [r3, #16]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	7b1b      	ldrb	r3, [r3, #12]
 80056ca:	b298      	uxth	r0, r3
 80056cc:	197b      	adds	r3, r7, r5
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b299      	uxth	r1, r3
 80056d2:	19bb      	adds	r3, r7, r6
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	47a0      	blx	r4
 80056da:	0003      	movs	r3, r0
}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	b007      	add	sp, #28
 80056e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80056e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	0008      	movs	r0, r1
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	0019      	movs	r1, r3
 80056f2:	260b      	movs	r6, #11
 80056f4:	19bb      	adds	r3, r7, r6
 80056f6:	1c02      	adds	r2, r0, #0
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	2508      	movs	r5, #8
 80056fc:	197b      	adds	r3, r7, r5
 80056fe:	1c0a      	adds	r2, r1, #0
 8005700:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685c      	ldr	r4, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6898      	ldr	r0, [r3, #8]
 800570a:	197b      	adds	r3, r7, r5
 800570c:	881d      	ldrh	r5, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	19bb      	adds	r3, r7, r6
 8005712:	7819      	ldrb	r1, [r3, #0]
 8005714:	002b      	movs	r3, r5
 8005716:	47a0      	blx	r4
 8005718:	0003      	movs	r3, r0
 800571a:	617b      	str	r3, [r7, #20]

  return ret;
 800571c:	697b      	ldr	r3, [r7, #20]
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b007      	add	sp, #28
 8005724:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005726 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005728:	b087      	sub	sp, #28
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	0008      	movs	r0, r1
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	0019      	movs	r1, r3
 8005734:	260b      	movs	r6, #11
 8005736:	19bb      	adds	r3, r7, r6
 8005738:	1c02      	adds	r2, r0, #0
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	2508      	movs	r5, #8
 800573e:	197b      	adds	r3, r7, r5
 8005740:	1c0a      	adds	r2, r1, #0
 8005742:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681c      	ldr	r4, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6898      	ldr	r0, [r3, #8]
 800574c:	197b      	adds	r3, r7, r5
 800574e:	881d      	ldrh	r5, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	19bb      	adds	r3, r7, r6
 8005754:	7819      	ldrb	r1, [r3, #0]
 8005756:	002b      	movs	r3, r5
 8005758:	47a0      	blx	r4
 800575a:	0003      	movs	r3, r0
 800575c:	617b      	str	r3, [r7, #20]

  return ret;
 800575e:	697b      	ldr	r3, [r7, #20]
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b007      	add	sp, #28
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005768 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fb fe73 	bl	800145c <__aeabi_ui2f>
 8005776:	1c03      	adds	r3, r0, #0
 8005778:	2193      	movs	r1, #147	; 0x93
 800577a:	05c9      	lsls	r1, r1, #23
 800577c:	1c18      	adds	r0, r3, #0
 800577e:	f7fb f94d 	bl	8000a1c <__aeabi_fdiv>
 8005782:	1c03      	adds	r3, r0, #0
}
 8005784:	1c18      	adds	r0, r3, #0
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	0002      	movs	r2, r0
 8005794:	1dbb      	adds	r3, r7, #6
 8005796:	801a      	strh	r2, [r3, #0]
  return ((float_t) lsb / 100.0f);
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	2200      	movs	r2, #0
 800579c:	5e9b      	ldrsh	r3, [r3, r2]
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fb fe0e 	bl	80013c0 <__aeabi_i2f>
 80057a4:	1c03      	adds	r3, r0, #0
 80057a6:	4904      	ldr	r1, [pc, #16]	; (80057b8 <lps22hh_from_lsb_to_celsius+0x2c>)
 80057a8:	1c18      	adds	r0, r3, #0
 80057aa:	f7fb f937 	bl	8000a1c <__aeabi_fdiv>
 80057ae:	1c03      	adds	r3, r0, #0
}
 80057b0:	1c18      	adds	r0, r3, #0
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	42c80000 	.word	0x42c80000

080057bc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	000a      	movs	r2, r1
 80057c6:	1cfb      	adds	r3, r7, #3
 80057c8:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80057ca:	2408      	movs	r4, #8
 80057cc:	193a      	adds	r2, r7, r4
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	2301      	movs	r3, #1
 80057d2:	2110      	movs	r1, #16
 80057d4:	f7ff ff86 	bl	80056e4 <lps22hh_read_reg>
 80057d8:	0003      	movs	r3, r0
 80057da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d117      	bne.n	8005812 <lps22hh_block_data_update_set+0x56>
  {
    reg.bdu = val;
 80057e2:	1cfb      	adds	r3, r7, #3
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	193b      	adds	r3, r7, r4
 80057ee:	2101      	movs	r1, #1
 80057f0:	400a      	ands	r2, r1
 80057f2:	1890      	adds	r0, r2, r2
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	2102      	movs	r1, #2
 80057f8:	438a      	bics	r2, r1
 80057fa:	1c11      	adds	r1, r2, #0
 80057fc:	1c02      	adds	r2, r0, #0
 80057fe:	430a      	orrs	r2, r1
 8005800:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005802:	193a      	adds	r2, r7, r4
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	2301      	movs	r3, #1
 8005808:	2110      	movs	r1, #16
 800580a:	f7ff ff8c 	bl	8005726 <lps22hh_write_reg>
 800580e:	0003      	movs	r3, r0
 8005810:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b005      	add	sp, #20
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	000a      	movs	r2, r1
 8005826:	1cfb      	adds	r3, r7, #3
 8005828:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800582a:	2310      	movs	r3, #16
 800582c:	18fa      	adds	r2, r7, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	2301      	movs	r3, #1
 8005832:	2110      	movs	r1, #16
 8005834:	f7ff ff56 	bl	80056e4 <lps22hh_read_reg>
 8005838:	0003      	movs	r3, r0
 800583a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <lps22hh_data_rate_set+0x38>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005842:	230c      	movs	r3, #12
 8005844:	18fa      	adds	r2, r7, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	2301      	movs	r3, #1
 800584a:	2111      	movs	r1, #17
 800584c:	f7ff ff4a 	bl	80056e4 <lps22hh_read_reg>
 8005850:	0003      	movs	r3, r0
 8005852:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d118      	bne.n	800588c <lps22hh_data_rate_set+0x70>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800585a:	1cfb      	adds	r3, r7, #3
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2207      	movs	r2, #7
 8005860:	4013      	ands	r3, r2
 8005862:	b2da      	uxtb	r2, r3
 8005864:	2410      	movs	r4, #16
 8005866:	193b      	adds	r3, r7, r4
 8005868:	2107      	movs	r1, #7
 800586a:	400a      	ands	r2, r1
 800586c:	0110      	lsls	r0, r2, #4
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	2170      	movs	r1, #112	; 0x70
 8005872:	438a      	bics	r2, r1
 8005874:	1c11      	adds	r1, r2, #0
 8005876:	1c02      	adds	r2, r0, #0
 8005878:	430a      	orrs	r2, r1
 800587a:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800587c:	193a      	adds	r2, r7, r4
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	2301      	movs	r3, #1
 8005882:	2110      	movs	r1, #16
 8005884:	f7ff ff4f 	bl	8005726 <lps22hh_write_reg>
 8005888:	0003      	movs	r3, r0
 800588a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d12c      	bne.n	80058ec <lps22hh_data_rate_set+0xd0>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005892:	1cfb      	adds	r3, r7, #3
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	1c1a      	adds	r2, r3, #0
 800589a:	2301      	movs	r3, #1
 800589c:	4013      	ands	r3, r2
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	240c      	movs	r4, #12
 80058a2:	193b      	adds	r3, r7, r4
 80058a4:	2101      	movs	r1, #1
 80058a6:	400a      	ands	r2, r1
 80058a8:	1890      	adds	r0, r2, r2
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	2102      	movs	r1, #2
 80058ae:	438a      	bics	r2, r1
 80058b0:	1c11      	adds	r1, r2, #0
 80058b2:	1c02      	adds	r2, r0, #0
 80058b4:	430a      	orrs	r2, r1
 80058b6:	701a      	strb	r2, [r3, #0]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80058b8:	1cfb      	adds	r3, r7, #3
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	1c1a      	adds	r2, r3, #0
 80058c0:	2301      	movs	r3, #1
 80058c2:	4013      	ands	r3, r2
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	193b      	adds	r3, r7, r4
 80058c8:	2101      	movs	r1, #1
 80058ca:	400a      	ands	r2, r1
 80058cc:	0010      	movs	r0, r2
 80058ce:	781a      	ldrb	r2, [r3, #0]
 80058d0:	2101      	movs	r1, #1
 80058d2:	438a      	bics	r2, r1
 80058d4:	1c11      	adds	r1, r2, #0
 80058d6:	1c02      	adds	r2, r0, #0
 80058d8:	430a      	orrs	r2, r1
 80058da:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80058dc:	193a      	adds	r2, r7, r4
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	2301      	movs	r3, #1
 80058e2:	2111      	movs	r1, #17
 80058e4:	f7ff ff1f 	bl	8005726 <lps22hh_write_reg>
 80058e8:	0003      	movs	r3, r0
 80058ea:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80058ec:	697b      	ldr	r3, [r7, #20]
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b007      	add	sp, #28
 80058f4:	bd90      	pop	{r4, r7, pc}
	...

080058f8 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005902:	2310      	movs	r3, #16
 8005904:	18fa      	adds	r2, r7, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	2301      	movs	r3, #1
 800590a:	2110      	movs	r1, #16
 800590c:	f7ff feea 	bl	80056e4 <lps22hh_read_reg>
 8005910:	0003      	movs	r3, r0
 8005912:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d108      	bne.n	800592c <lps22hh_data_rate_get+0x34>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800591a:	230c      	movs	r3, #12
 800591c:	18fa      	adds	r2, r7, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	2301      	movs	r3, #1
 8005922:	2111      	movs	r1, #17
 8005924:	f7ff fede 	bl	80056e4 <lps22hh_read_reg>
 8005928:	0003      	movs	r3, r0
 800592a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d160      	bne.n	80059f4 <lps22hh_data_rate_get+0xfc>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005932:	240c      	movs	r4, #12
 8005934:	193a      	adds	r2, r7, r4
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	2301      	movs	r3, #1
 800593a:	2111      	movs	r1, #17
 800593c:	f7ff fed2 	bl	80056e4 <lps22hh_read_reg>
 8005940:	0003      	movs	r3, r0
 8005942:	617b      	str	r3, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005944:	0021      	movs	r1, r4
 8005946:	187b      	adds	r3, r7, r1
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	079b      	lsls	r3, r3, #30
 800594c:	0fdb      	lsrs	r3, r3, #31
 800594e:	b2db      	uxtb	r3, r3
 8005950:	011a      	lsls	r2, r3, #4
 8005952:	187b      	adds	r3, r7, r1
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	07db      	lsls	r3, r3, #31
 8005958:	0fdb      	lsrs	r3, r3, #31
 800595a:	b2db      	uxtb	r3, r3
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	18d3      	adds	r3, r2, r3
             ctrl_reg1.odr))
 8005960:	2210      	movs	r2, #16
 8005962:	18ba      	adds	r2, r7, r2
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	0652      	lsls	r2, r2, #25
 8005968:	0f52      	lsrs	r2, r2, #29
 800596a:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800596c:	189b      	adds	r3, r3, r2
 800596e:	2b15      	cmp	r3, #21
 8005970:	d83c      	bhi.n	80059ec <lps22hh_data_rate_get+0xf4>
 8005972:	009a      	lsls	r2, r3, #2
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <lps22hh_data_rate_get+0x108>)
 8005976:	18d3      	adds	r3, r2, r3
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	469f      	mov	pc, r3
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
        break;
 8005982:	e038      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2208      	movs	r2, #8
 8005988:	701a      	strb	r2, [r3, #0]
        break;
 800598a:	e034      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
        break;
 8005992:	e030      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2202      	movs	r2, #2
 8005998:	701a      	strb	r2, [r3, #0]
        break;
 800599a:	e02c      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2203      	movs	r2, #3
 80059a0:	701a      	strb	r2, [r3, #0]
        break;
 80059a2:	e028      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2204      	movs	r2, #4
 80059a8:	701a      	strb	r2, [r3, #0]
        break;
 80059aa:	e024      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2205      	movs	r2, #5
 80059b0:	701a      	strb	r2, [r3, #0]
        break;
 80059b2:	e020      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2211      	movs	r2, #17
 80059b8:	701a      	strb	r2, [r3, #0]
        break;
 80059ba:	e01c      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2212      	movs	r2, #18
 80059c0:	701a      	strb	r2, [r3, #0]
        break;
 80059c2:	e018      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2213      	movs	r2, #19
 80059c8:	701a      	strb	r2, [r3, #0]
        break;
 80059ca:	e014      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2214      	movs	r2, #20
 80059d0:	701a      	strb	r2, [r3, #0]
        break;
 80059d2:	e010      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2215      	movs	r2, #21
 80059d8:	701a      	strb	r2, [r3, #0]
        break;
 80059da:	e00c      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2206      	movs	r2, #6
 80059e0:	701a      	strb	r2, [r3, #0]
        break;
 80059e2:	e008      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2207      	movs	r2, #7
 80059e8:	701a      	strb	r2, [r3, #0]
        break;
 80059ea:	e004      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>

      default:
        *val = LPS22HH_POWER_DOWN;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
        break;
 80059f2:	e000      	b.n	80059f6 <lps22hh_data_rate_get+0xfe>
    }
  }
 80059f4:	46c0      	nop			; (mov r8, r8)

  return ret;
 80059f6:	697b      	ldr	r3, [r7, #20]
}
 80059f8:	0018      	movs	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b007      	add	sp, #28
 80059fe:	bd90      	pop	{r4, r7, pc}
 8005a00:	08015764 	.word	0x08015764

08005a04 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005a0e:	2408      	movs	r4, #8
 8005a10:	193a      	adds	r2, r7, r4
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	2303      	movs	r3, #3
 8005a16:	2128      	movs	r1, #40	; 0x28
 8005a18:	f7ff fe64 	bl	80056e4 <lps22hh_read_reg>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	60fb      	str	r3, [r7, #12]
  *buff = reg[2];
 8005a20:	0021      	movs	r1, r4
 8005a22:	187b      	adds	r3, r7, r1
 8005a24:	789b      	ldrb	r3, [r3, #2]
 8005a26:	001a      	movs	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	187a      	adds	r2, r7, r1
 8005a34:	7852      	ldrb	r2, [r2, #1]
 8005a36:	189a      	adds	r2, r3, r2
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	187a      	adds	r2, r7, r1
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	189a      	adds	r2, r3, r2
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	021a      	lsls	r2, r3, #8
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	601a      	str	r2, [r3, #0]

  return ret;
 8005a56:	68fb      	ldr	r3, [r7, #12]
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b005      	add	sp, #20
 8005a5e:	bd90      	pop	{r4, r7, pc}

08005a60 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005a6a:	2408      	movs	r4, #8
 8005a6c:	193a      	adds	r2, r7, r4
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	2302      	movs	r3, #2
 8005a72:	212b      	movs	r1, #43	; 0x2b
 8005a74:	f7ff fe36 	bl	80056e4 <lps22hh_read_reg>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	60fb      	str	r3, [r7, #12]
  *buff = reg[1];
 8005a7c:	0021      	movs	r1, r4
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	b21a      	sxth	r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	5e9b      	ldrsh	r3, [r3, r2]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	18d3      	adds	r3, r2, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	b21a      	sxth	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	801a      	strh	r2, [r3, #0]

  return ret;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b005      	add	sp, #20
 8005aac:	bd90      	pop	{r4, r7, pc}

08005aae <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	2301      	movs	r3, #1
 8005abe:	210f      	movs	r1, #15
 8005ac0:	f7ff fe10 	bl	80056e4 <lps22hh_read_reg>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	60fb      	str	r3, [r7, #12]

  return ret;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	0018      	movs	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b004      	add	sp, #16
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ad2:	b590      	push	{r4, r7, lr}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	000a      	movs	r2, r1
 8005adc:	1cfb      	adds	r3, r7, #3
 8005ade:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005ae0:	2408      	movs	r4, #8
 8005ae2:	193a      	adds	r2, r7, r4
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	2111      	movs	r1, #17
 8005aea:	f7ff fdfb 	bl	80056e4 <lps22hh_read_reg>
 8005aee:	0003      	movs	r3, r0
 8005af0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d117      	bne.n	8005b28 <lps22hh_auto_increment_set+0x56>
  {
    reg.if_add_inc = val;
 8005af8:	1cfb      	adds	r3, r7, #3
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	4013      	ands	r3, r2
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	193b      	adds	r3, r7, r4
 8005b04:	2101      	movs	r1, #1
 8005b06:	400a      	ands	r2, r1
 8005b08:	0110      	lsls	r0, r2, #4
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	2110      	movs	r1, #16
 8005b0e:	438a      	bics	r2, r1
 8005b10:	1c11      	adds	r1, r2, #0
 8005b12:	1c02      	adds	r2, r0, #0
 8005b14:	430a      	orrs	r2, r1
 8005b16:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005b18:	193a      	adds	r2, r7, r4
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	2111      	movs	r1, #17
 8005b20:	f7ff fe01 	bl	8005726 <lps22hh_write_reg>
 8005b24:	0003      	movs	r3, r0
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b005      	add	sp, #20
 8005b30:	bd90      	pop	{r4, r7, pc}

08005b32 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005b32:	b590      	push	{r4, r7, lr}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	000a      	movs	r2, r1
 8005b3c:	1cfb      	adds	r3, r7, #3
 8005b3e:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005b40:	2408      	movs	r4, #8
 8005b42:	193a      	adds	r2, r7, r4
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	2301      	movs	r3, #1
 8005b48:	2110      	movs	r1, #16
 8005b4a:	f7ff fdcb 	bl	80056e4 <lps22hh_read_reg>
 8005b4e:	0003      	movs	r3, r0
 8005b50:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d117      	bne.n	8005b88 <lps22hh_lp_bandwidth_set+0x56>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005b58:	1cfb      	adds	r3, r7, #3
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	4013      	ands	r3, r2
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	193b      	adds	r3, r7, r4
 8005b64:	2103      	movs	r1, #3
 8005b66:	400a      	ands	r2, r1
 8005b68:	0090      	lsls	r0, r2, #2
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	210c      	movs	r1, #12
 8005b6e:	438a      	bics	r2, r1
 8005b70:	1c11      	adds	r1, r2, #0
 8005b72:	1c02      	adds	r2, r0, #0
 8005b74:	430a      	orrs	r2, r1
 8005b76:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005b78:	193a      	adds	r2, r7, r4
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	2110      	movs	r1, #16
 8005b80:	f7ff fdd1 	bl	8005726 <lps22hh_write_reg>
 8005b84:	0003      	movs	r3, r0
 8005b86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b88:	68fb      	ldr	r3, [r7, #12]
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b005      	add	sp, #20
 8005b90:	bd90      	pop	{r4, r7, pc}

08005b92 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005b92:	b590      	push	{r4, r7, lr}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	000a      	movs	r2, r1
 8005b9c:	1cfb      	adds	r3, r7, #3
 8005b9e:	701a      	strb	r2, [r3, #0]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005ba0:	2408      	movs	r4, #8
 8005ba2:	193a      	adds	r2, r7, r4
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	210e      	movs	r1, #14
 8005baa:	f7ff fd9b 	bl	80056e4 <lps22hh_read_reg>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d127      	bne.n	8005c08 <lps22hh_i3c_interface_set+0x76>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005bb8:	1cfb      	adds	r3, r7, #3
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	193b      	adds	r3, r7, r4
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	1890      	adds	r0, r2, r2
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	2102      	movs	r1, #2
 8005bce:	438a      	bics	r2, r1
 8005bd0:	1c11      	adds	r1, r2, #0
 8005bd2:	1c02      	adds	r2, r0, #0
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	701a      	strb	r2, [r3, #0]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005bd8:	1cfb      	adds	r3, r7, #3
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	1c1a      	adds	r2, r3, #0
 8005be0:	2301      	movs	r3, #1
 8005be2:	4013      	ands	r3, r2
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	193b      	adds	r3, r7, r4
 8005be8:	01d0      	lsls	r0, r2, #7
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	217f      	movs	r1, #127	; 0x7f
 8005bee:	400a      	ands	r2, r1
 8005bf0:	1c11      	adds	r1, r2, #0
 8005bf2:	1c02      	adds	r2, r0, #0
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005bf8:	193a      	adds	r2, r7, r4
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	210e      	movs	r1, #14
 8005c00:	f7ff fd91 	bl	8005726 <lps22hh_write_reg>
 8005c04:	0003      	movs	r3, r0
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b005      	add	sp, #20
 8005c10:	bd90      	pop	{r4, r7, pc}
	...

08005c14 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	425b      	negs	r3, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e04e      	b.n	8005cce <LSM6DSO_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	7b1a      	ldrb	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <LSM6DSO_RegisterBusIO+0xc4>)
 8005c6c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <LSM6DSO_RegisterBusIO+0xc8>)
 8005c72:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	425b      	negs	r3, r3
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	e021      	b.n	8005cce <LSM6DSO_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4798      	blx	r3
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d003      	beq.n	8005c9c <LSM6DSO_RegisterBusIO+0x88>
    {
      ret = LSM6DSO_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	425b      	negs	r3, r3
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e018      	b.n	8005cce <LSM6DSO_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d114      	bne.n	8005cce <LSM6DSO_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2228      	movs	r2, #40	; 0x28
 8005ca8:	5c9b      	ldrb	r3, [r3, r2]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10f      	bne.n	8005cce <LSM6DSO_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005cae:	210b      	movs	r1, #11
 8005cb0:	187b      	adds	r3, r7, r1
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	701a      	strb	r2, [r3, #0]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005cb6:	187b      	adds	r3, r7, r1
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2112      	movs	r1, #18
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 ff16 	bl	8006af0 <LSM6DSO_Write_Reg>
 8005cc4:	1e03      	subs	r3, r0, #0
 8005cc6:	d002      	beq.n	8005cce <LSM6DSO_RegisterBusIO+0xba>
          {
            ret = LSM6DSO_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	425b      	negs	r3, r3
 8005ccc:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b004      	add	sp, #16
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	08006ed1 	.word	0x08006ed1
 8005cdc:	08006f15 	.word	0x08006f15

08005ce0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	331c      	adds	r3, #28
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f001 fecc 	bl	8007a8c <lsm6dso_i3c_disable_set>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d002      	beq.n	8005cfe <LSM6DSO_Init+0x1e>
  {
    return LSM6DSO_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	e059      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	331c      	adds	r3, #28
 8005d02:	2101      	movs	r1, #1
 8005d04:	0018      	movs	r0, r3
 8005d06:	f001 fe91 	bl	8007a2c <lsm6dso_auto_increment_set>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d002      	beq.n	8005d14 <LSM6DSO_Init+0x34>
  {
    return LSM6DSO_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	425b      	negs	r3, r3
 8005d12:	e04e      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	331c      	adds	r3, #28
 8005d18:	2101      	movs	r1, #1
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f001 fd70 	bl	8007800 <lsm6dso_block_data_update_set>
 8005d20:	1e03      	subs	r3, r0, #0
 8005d22:	d002      	beq.n	8005d2a <LSM6DSO_Init+0x4a>
  {
    return LSM6DSO_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	425b      	negs	r3, r3
 8005d28:	e043      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	331c      	adds	r3, #28
 8005d2e:	2100      	movs	r1, #0
 8005d30:	0018      	movs	r0, r3
 8005d32:	f001 ff06 	bl	8007b42 <lsm6dso_fifo_mode_set>
 8005d36:	1e03      	subs	r3, r0, #0
 8005d38:	d002      	beq.n	8005d40 <LSM6DSO_Init+0x60>
  {
    return LSM6DSO_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	425b      	negs	r3, r3
 8005d3e:	e038      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	222b      	movs	r2, #43	; 0x2b
 8005d44:	2104      	movs	r1, #4
 8005d46:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	331c      	adds	r3, #28
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f001 f9ab 	bl	80070aa <lsm6dso_xl_data_rate_set>
 8005d54:	1e03      	subs	r3, r0, #0
 8005d56:	d002      	beq.n	8005d5e <LSM6DSO_Init+0x7e>
  {
    return LSM6DSO_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	425b      	negs	r3, r3
 8005d5c:	e029      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	331c      	adds	r3, #28
 8005d62:	2100      	movs	r1, #0
 8005d64:	0018      	movs	r0, r3
 8005d66:	f001 f939 	bl	8006fdc <lsm6dso_xl_full_scale_set>
 8005d6a:	1e03      	subs	r3, r0, #0
 8005d6c:	d002      	beq.n	8005d74 <LSM6DSO_Init+0x94>
  {
    return LSM6DSO_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	425b      	negs	r3, r3
 8005d72:	e01e      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	222c      	movs	r2, #44	; 0x2c
 8005d78:	2104      	movs	r1, #4
 8005d7a:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	331c      	adds	r3, #28
 8005d80:	2100      	movs	r1, #0
 8005d82:	0018      	movs	r0, r3
 8005d84:	f001 fb9e 	bl	80074c4 <lsm6dso_gy_data_rate_set>
 8005d88:	1e03      	subs	r3, r0, #0
 8005d8a:	d002      	beq.n	8005d92 <LSM6DSO_Init+0xb2>
  {
    return LSM6DSO_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	425b      	negs	r3, r3
 8005d90:	e00f      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	331c      	adds	r3, #28
 8005d96:	2106      	movs	r1, #6
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f001 fb29 	bl	80073f0 <lsm6dso_gy_full_scale_set>
 8005d9e:	1e03      	subs	r3, r0, #0
 8005da0:	d002      	beq.n	8005da8 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	425b      	negs	r3, r3
 8005da6:	e004      	b.n	8005db2 <LSM6DSO_Init+0xd2>
  }

  pObj->is_initialized = 1;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2228      	movs	r2, #40	; 0x28
 8005dac:	2101      	movs	r1, #1
 8005dae:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b002      	add	sp, #8
 8005db8:	bd80      	pop	{r7, pc}

08005dba <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 f884 	bl	8005ed2 <LSM6DSO_ACC_Disable>
 8005dca:	1e03      	subs	r3, r0, #0
 8005dcc:	d002      	beq.n	8005dd4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	e015      	b.n	8005e00 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 fc0d 	bl	80065f6 <LSM6DSO_GYRO_Disable>
 8005ddc:	1e03      	subs	r3, r0, #0
 8005dde:	d002      	beq.n	8005de6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	425b      	negs	r3, r3
 8005de4:	e00c      	b.n	8005e00 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	222b      	movs	r2, #43	; 0x2b
 8005dea:	2100      	movs	r1, #0
 8005dec:	5499      	strb	r1, [r3, r2]
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	222c      	movs	r2, #44	; 0x2c
 8005df2:	2100      	movs	r1, #0
 8005df4:	5499      	strb	r1, [r3, r2]

  pObj->is_initialized = 0;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2228      	movs	r2, #40	; 0x28
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	0018      	movs	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b002      	add	sp, #8
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	331c      	adds	r3, #28
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	0011      	movs	r1, r2
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f001 fdf4 	bl	8007a08 <lsm6dso_device_id_get>
 8005e20:	1e03      	subs	r3, r0, #0
 8005e22:	d002      	beq.n	8005e2a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	425b      	negs	r3, r3
 8005e28:	e000      	b.n	8005e2c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2201      	movs	r2, #1
 8005e48:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	22fa      	movs	r2, #250	; 0xfa
 8005e5a:	00d2      	lsls	r2, r2, #3
 8005e5c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <LSM6DSO_GetCapabilities+0x54>)
 8005e6e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <LSM6DSO_GetCapabilities+0x54>)
 8005e74:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	0018      	movs	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b002      	add	sp, #8
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	45d02000 	.word	0x45d02000

08005e8c <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2229      	movs	r2, #41	; 0x29
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e013      	b.n	8005eca <LSM6DSO_ACC_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	331c      	adds	r3, #28
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	212b      	movs	r1, #43	; 0x2b
 8005eac:	5c5b      	ldrb	r3, [r3, r1]
 8005eae:	0019      	movs	r1, r3
 8005eb0:	0010      	movs	r0, r2
 8005eb2:	f001 f8fa 	bl	80070aa <lsm6dso_xl_data_rate_set>
 8005eb6:	1e03      	subs	r3, r0, #0
 8005eb8:	d002      	beq.n	8005ec0 <LSM6DSO_ACC_Enable+0x34>
  {
    return LSM6DSO_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	425b      	negs	r3, r3
 8005ebe:	e004      	b.n	8005eca <LSM6DSO_ACC_Enable+0x3e>
  }

  pObj->acc_is_enabled = 1;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2229      	movs	r2, #41	; 0x29
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2229      	movs	r2, #41	; 0x29
 8005ede:	5c9b      	ldrb	r3, [r3, r2]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e01d      	b.n	8005f24 <LSM6DSO_ACC_Disable+0x52>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	331c      	adds	r3, #28
 8005eec:	001a      	movs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	332b      	adds	r3, #43	; 0x2b
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	0010      	movs	r0, r2
 8005ef6:	f001 fa25 	bl	8007344 <lsm6dso_xl_data_rate_get>
 8005efa:	1e03      	subs	r3, r0, #0
 8005efc:	d002      	beq.n	8005f04 <LSM6DSO_ACC_Disable+0x32>
  {
    return LSM6DSO_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	425b      	negs	r3, r3
 8005f02:	e00f      	b.n	8005f24 <LSM6DSO_ACC_Disable+0x52>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	331c      	adds	r3, #28
 8005f08:	2100      	movs	r1, #0
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f001 f8cd 	bl	80070aa <lsm6dso_xl_data_rate_set>
 8005f10:	1e03      	subs	r3, r0, #0
 8005f12:	d002      	beq.n	8005f1a <LSM6DSO_ACC_Disable+0x48>
  {
    return LSM6DSO_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	425b      	negs	r3, r3
 8005f18:	e004      	b.n	8005f24 <LSM6DSO_ACC_Disable+0x52>
  }

  pObj->acc_is_enabled = 0;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2229      	movs	r2, #41	; 0x29
 8005f1e:	2100      	movs	r1, #0
 8005f20:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b002      	add	sp, #8
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	331c      	adds	r3, #28
 8005f3e:	220b      	movs	r2, #11
 8005f40:	18ba      	adds	r2, r7, r2
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f001 f879 	bl	800703c <lsm6dso_xl_full_scale_get>
 8005f4a:	1e03      	subs	r3, r0, #0
 8005f4c:	d002      	beq.n	8005f54 <LSM6DSO_ACC_GetSensitivity+0x28>
  {
    return LSM6DSO_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	425b      	negs	r3, r3
 8005f52:	e022      	b.n	8005f9a <LSM6DSO_ACC_GetSensitivity+0x6e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005f54:	230b      	movs	r3, #11
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d010      	beq.n	8005f80 <LSM6DSO_ACC_GetSensitivity+0x54>
 8005f5e:	dc17      	bgt.n	8005f90 <LSM6DSO_ACC_GetSensitivity+0x64>
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d009      	beq.n	8005f78 <LSM6DSO_ACC_GetSensitivity+0x4c>
 8005f64:	dc14      	bgt.n	8005f90 <LSM6DSO_ACC_GetSensitivity+0x64>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <LSM6DSO_ACC_GetSensitivity+0x44>
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d00c      	beq.n	8005f88 <LSM6DSO_ACC_GetSensitivity+0x5c>
 8005f6e:	e00f      	b.n	8005f90 <LSM6DSO_ACC_GetSensitivity+0x64>
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	4a0c      	ldr	r2, [pc, #48]	; (8005fa4 <LSM6DSO_ACC_GetSensitivity+0x78>)
 8005f74:	601a      	str	r2, [r3, #0]
      break;
 8005f76:	e00f      	b.n	8005f98 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	; (8005fa8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005f7c:	601a      	str	r2, [r3, #0]
      break;
 8005f7e:	e00b      	b.n	8005f98 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005f84:	601a      	str	r2, [r3, #0]
      break;
 8005f86:	e007      	b.n	8005f98 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005f8c:	601a      	str	r2, [r3, #0]
      break;
 8005f8e:	e003      	b.n	8005f98 <LSM6DSO_ACC_GetSensitivity+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	425b      	negs	r3, r3
 8005f94:	60fb      	str	r3, [r7, #12]
      break;
 8005f96:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005f98:	68fb      	ldr	r3, [r7, #12]
}
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b004      	add	sp, #16
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	3d79db23 	.word	0x3d79db23
 8005fa8:	3df9db23 	.word	0x3df9db23
 8005fac:	3e79db23 	.word	0x3e79db23
 8005fb0:	3ef9db23 	.word	0x3ef9db23

08005fb4 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	331c      	adds	r3, #28
 8005fc6:	220b      	movs	r2, #11
 8005fc8:	18ba      	adds	r2, r7, r2
 8005fca:	0011      	movs	r1, r2
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f001 f9b9 	bl	8007344 <lsm6dso_xl_data_rate_get>
 8005fd2:	1e03      	subs	r3, r0, #0
 8005fd4:	d002      	beq.n	8005fdc <LSM6DSO_ACC_GetOutputDataRate+0x28>
  {
    return LSM6DSO_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	425b      	negs	r3, r3
 8005fda:	e03e      	b.n	800605a <LSM6DSO_ACC_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005fdc:	230b      	movs	r3, #11
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b0b      	cmp	r3, #11
 8005fe4:	d834      	bhi.n	8006050 <LSM6DSO_ACC_GetOutputDataRate+0x9c>
 8005fe6:	009a      	lsls	r2, r3, #2
 8005fe8:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <LSM6DSO_ACC_GetOutputDataRate+0xb0>)
 8005fea:	18d3      	adds	r3, r2, r3
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	469f      	mov	pc, r3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
      break;
 8005ff6:	e02f      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	4a1b      	ldr	r2, [pc, #108]	; (8006068 <LSM6DSO_ACC_GetOutputDataRate+0xb4>)
 8005ffc:	601a      	str	r2, [r3, #0]
      break;
 8005ffe:	e02b      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	4a1a      	ldr	r2, [pc, #104]	; (800606c <LSM6DSO_ACC_GetOutputDataRate+0xb8>)
 8006004:	601a      	str	r2, [r3, #0]
      break;
 8006006:	e027      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <LSM6DSO_ACC_GetOutputDataRate+0xbc>)
 800600c:	601a      	str	r2, [r3, #0]
      break;
 800600e:	e023      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <LSM6DSO_ACC_GetOutputDataRate+0xc0>)
 8006014:	601a      	str	r2, [r3, #0]
      break;
 8006016:	e01f      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <LSM6DSO_ACC_GetOutputDataRate+0xc4>)
 800601c:	601a      	str	r2, [r3, #0]
      break;
 800601e:	e01b      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	4a16      	ldr	r2, [pc, #88]	; (800607c <LSM6DSO_ACC_GetOutputDataRate+0xc8>)
 8006024:	601a      	str	r2, [r3, #0]
      break;
 8006026:	e017      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4a15      	ldr	r2, [pc, #84]	; (8006080 <LSM6DSO_ACC_GetOutputDataRate+0xcc>)
 800602c:	601a      	str	r2, [r3, #0]
      break;
 800602e:	e013      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4a14      	ldr	r2, [pc, #80]	; (8006084 <LSM6DSO_ACC_GetOutputDataRate+0xd0>)
 8006034:	601a      	str	r2, [r3, #0]
      break;
 8006036:	e00f      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <LSM6DSO_ACC_GetOutputDataRate+0xd4>)
 800603c:	601a      	str	r2, [r3, #0]
      break;
 800603e:	e00b      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4a12      	ldr	r2, [pc, #72]	; (800608c <LSM6DSO_ACC_GetOutputDataRate+0xd8>)
 8006044:	601a      	str	r2, [r3, #0]
      break;
 8006046:	e007      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	4a11      	ldr	r2, [pc, #68]	; (8006090 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800604c:	601a      	str	r2, [r3, #0]
      break;
 800604e:	e003      	b.n	8006058 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    default:
      ret = LSM6DSO_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	425b      	negs	r3, r3
 8006054:	60fb      	str	r3, [r7, #12]
      break;
 8006056:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b004      	add	sp, #16
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	080157bc 	.word	0x080157bc
 8006068:	3fcccccd 	.word	0x3fcccccd
 800606c:	41480000 	.word	0x41480000
 8006070:	41d00000 	.word	0x41d00000
 8006074:	42500000 	.word	0x42500000
 8006078:	42d00000 	.word	0x42d00000
 800607c:	43500000 	.word	0x43500000
 8006080:	43d08000 	.word	0x43d08000
 8006084:	44504000 	.word	0x44504000
 8006088:	44d06000 	.word	0x44d06000
 800608c:	45505000 	.word	0x45505000
 8006090:	45d05800 	.word	0x45d05800

08006094 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	0018      	movs	r0, r3
 80060a6:	f000 f805 	bl	80060b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80060aa:	0003      	movs	r3, r0
}
 80060ac:	0018      	movs	r0, r3
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b002      	add	sp, #8
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b08d      	sub	sp, #52	; 0x34
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	1dfb      	adds	r3, r7, #7
 80060c0:	701a      	strb	r2, [r3, #0]
  int32_t ret = LSM6DSO_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80060ca:	1dfb      	adds	r3, r7, #7
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d100      	bne.n	80060d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
 80060d2:	e0dd      	b.n	8006290 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1dc>
 80060d4:	dd00      	ble.n	80060d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x24>
 80060d6:	e155      	b.n	8006384 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d0>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d100      	bne.n	80060e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 80060e0:	e06b      	b.n	80061ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x106>
 80060e2:	e14f      	b.n	8006384 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d0>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	331c      	adds	r3, #28
 80060e8:	0018      	movs	r0, r3
 80060ea:	2324      	movs	r3, #36	; 0x24
 80060ec:	18fa      	adds	r2, r7, r3
 80060ee:	2301      	movs	r3, #1
 80060f0:	2114      	movs	r1, #20
 80060f2:	f000 ff31 	bl	8006f58 <lsm6dso_read_reg>
 80060f6:	1e03      	subs	r3, r0, #0
 80060f8:	d002      	beq.n	8006100 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	425b      	negs	r3, r3
 80060fe:	e162      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en != 0U)
 8006100:	2324      	movs	r3, #36	; 0x24
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	227f      	movs	r2, #127	; 0x7f
 8006108:	4393      	bics	r3, r2
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d022      	beq.n	8006156 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2229      	movs	r2, #41	; 0x29
 8006114:	5c9b      	ldrb	r3, [r3, r2]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10a      	bne.n	8006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	331c      	adds	r3, #28
 800611e:	2100      	movs	r1, #0
 8006120:	0018      	movs	r0, r3
 8006122:	f000 ffc2 	bl	80070aa <lsm6dso_xl_data_rate_set>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d002      	beq.n	8006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	425b      	negs	r3, r3
 800612e:	e14a      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 0;
 8006130:	2424      	movs	r4, #36	; 0x24
 8006132:	193b      	adds	r3, r7, r4
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	217f      	movs	r1, #127	; 0x7f
 8006138:	400a      	ands	r2, r1
 800613a:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	331c      	adds	r3, #28
 8006140:	0018      	movs	r0, r3
 8006142:	193a      	adds	r2, r7, r4
 8006144:	2301      	movs	r3, #1
 8006146:	2114      	movs	r1, #20
 8006148:	f000 ff27 	bl	8006f9a <lsm6dso_write_reg>
 800614c:	1e03      	subs	r3, r0, #0
 800614e:	d002      	beq.n	8006156 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	425b      	negs	r3, r3
 8006154:	e137      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	331c      	adds	r3, #28
 800615a:	0018      	movs	r0, r3
 800615c:	2320      	movs	r3, #32
 800615e:	18fa      	adds	r2, r7, r3
 8006160:	2301      	movs	r3, #1
 8006162:	2115      	movs	r1, #21
 8006164:	f000 fef8 	bl	8006f58 <lsm6dso_read_reg>
 8006168:	1e03      	subs	r3, r0, #0
 800616a:	d002      	beq.n	8006172 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xbe>
      {
        return LSM6DSO_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	425b      	negs	r3, r3
 8006170:	e129      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode != 0U)
 8006172:	2420      	movs	r4, #32
 8006174:	193b      	adds	r3, r7, r4
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	4013      	ands	r3, r2
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d011      	beq.n	80061a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf2>
      {
        val2.xl_hm_mode = 0U;
 8006182:	193b      	adds	r3, r7, r4
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	2110      	movs	r1, #16
 8006188:	438a      	bics	r2, r1
 800618a:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	331c      	adds	r3, #28
 8006190:	0018      	movs	r0, r3
 8006192:	193a      	adds	r2, r7, r4
 8006194:	2301      	movs	r3, #1
 8006196:	2115      	movs	r1, #21
 8006198:	f000 feff 	bl	8006f9a <lsm6dso_write_reg>
 800619c:	1e03      	subs	r3, r0, #0
 800619e:	d002      	beq.n	80061a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf2>
        {
          return LSM6DSO_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	425b      	negs	r3, r3
 80061a4:	e10f      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80061a6:	498a      	ldr	r1, [pc, #552]	; (80063d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31c>)
 80061a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061aa:	f7fa f93f 	bl	800042c <__aeabi_fcmplt>
 80061ae:	1e03      	subs	r3, r0, #0
 80061b0:	d100      	bne.n	80061b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x100>
      {
        newOdr = 12.5f;
      }
      break;
 80061b2:	e0eb      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 12.5f;
 80061b4:	4b86      	ldr	r3, [pc, #536]	; (80063d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31c>)
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b8:	e0e8      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	331c      	adds	r3, #28
 80061be:	0018      	movs	r0, r3
 80061c0:	231c      	movs	r3, #28
 80061c2:	18fa      	adds	r2, r7, r3
 80061c4:	2301      	movs	r3, #1
 80061c6:	2114      	movs	r1, #20
 80061c8:	f000 fec6 	bl	8006f58 <lsm6dso_read_reg>
 80061cc:	1e03      	subs	r3, r0, #0
 80061ce:	d002      	beq.n	80061d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x122>
      {
        return LSM6DSO_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	425b      	negs	r3, r3
 80061d4:	e0f7      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en != 0U)
 80061d6:	231c      	movs	r3, #28
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	227f      	movs	r2, #127	; 0x7f
 80061de:	4393      	bics	r3, r2
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d022      	beq.n	800622c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2229      	movs	r2, #41	; 0x29
 80061ea:	5c9b      	ldrb	r3, [r3, r2]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10a      	bne.n	8006206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x152>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	331c      	adds	r3, #28
 80061f4:	2100      	movs	r1, #0
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 ff57 	bl	80070aa <lsm6dso_xl_data_rate_set>
 80061fc:	1e03      	subs	r3, r0, #0
 80061fe:	d002      	beq.n	8006206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x152>
          {
            return LSM6DSO_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	425b      	negs	r3, r3
 8006204:	e0df      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 0;
 8006206:	241c      	movs	r4, #28
 8006208:	193b      	adds	r3, r7, r4
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	217f      	movs	r1, #127	; 0x7f
 800620e:	400a      	ands	r2, r1
 8006210:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	331c      	adds	r3, #28
 8006216:	0018      	movs	r0, r3
 8006218:	193a      	adds	r2, r7, r4
 800621a:	2301      	movs	r3, #1
 800621c:	2114      	movs	r1, #20
 800621e:	f000 febc 	bl	8006f9a <lsm6dso_write_reg>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d002      	beq.n	800622c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
        {
          return LSM6DSO_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	425b      	negs	r3, r3
 800622a:	e0cc      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	331c      	adds	r3, #28
 8006230:	0018      	movs	r0, r3
 8006232:	2318      	movs	r3, #24
 8006234:	18fa      	adds	r2, r7, r3
 8006236:	2301      	movs	r3, #1
 8006238:	2115      	movs	r1, #21
 800623a:	f000 fe8d 	bl	8006f58 <lsm6dso_read_reg>
 800623e:	1e03      	subs	r3, r0, #0
 8006240:	d002      	beq.n	8006248 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x194>
      {
        return LSM6DSO_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	425b      	negs	r3, r3
 8006246:	e0be      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode == 0U)
 8006248:	2418      	movs	r4, #24
 800624a:	193b      	adds	r3, r7, r4
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2210      	movs	r2, #16
 8006250:	4013      	ands	r3, r2
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d111      	bne.n	800627c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c8>
      {
        val2.xl_hm_mode = 1U;
 8006258:	193b      	adds	r3, r7, r4
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	2110      	movs	r1, #16
 800625e:	430a      	orrs	r2, r1
 8006260:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	331c      	adds	r3, #28
 8006266:	0018      	movs	r0, r3
 8006268:	193a      	adds	r2, r7, r4
 800626a:	2301      	movs	r3, #1
 800626c:	2115      	movs	r1, #21
 800626e:	f000 fe94 	bl	8006f9a <lsm6dso_write_reg>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d002      	beq.n	800627c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c8>
        {
          return LSM6DSO_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	425b      	negs	r3, r3
 800627a:	e0a4      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800627c:	4955      	ldr	r1, [pc, #340]	; (80063d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800627e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006280:	f7fa f8e8 	bl	8000454 <__aeabi_fcmpgt>
 8006284:	1e03      	subs	r3, r0, #0
 8006286:	d100      	bne.n	800628a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d6>
      {
        newOdr = 208.0f;
      }
      break;
 8006288:	e080      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 208.0f;
 800628a:	4b52      	ldr	r3, [pc, #328]	; (80063d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
 800628e:	e07d      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	331c      	adds	r3, #28
 8006294:	0018      	movs	r0, r3
 8006296:	2310      	movs	r3, #16
 8006298:	18fa      	adds	r2, r7, r3
 800629a:	2301      	movs	r3, #1
 800629c:	2115      	movs	r1, #21
 800629e:	f000 fe5b 	bl	8006f58 <lsm6dso_read_reg>
 80062a2:	1e03      	subs	r3, r0, #0
 80062a4:	d002      	beq.n	80062ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f8>
      {
        return LSM6DSO_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	425b      	negs	r3, r3
 80062aa:	e08c      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode != 0U)
 80062ac:	2410      	movs	r4, #16
 80062ae:	193b      	adds	r3, r7, r4
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2210      	movs	r2, #16
 80062b4:	4013      	ands	r3, r2
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d011      	beq.n	80062e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22c>
      {
        val2.xl_hm_mode = 0U;
 80062bc:	193b      	adds	r3, r7, r4
 80062be:	781a      	ldrb	r2, [r3, #0]
 80062c0:	2110      	movs	r1, #16
 80062c2:	438a      	bics	r2, r1
 80062c4:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	331c      	adds	r3, #28
 80062ca:	0018      	movs	r0, r3
 80062cc:	193a      	adds	r2, r7, r4
 80062ce:	2301      	movs	r3, #1
 80062d0:	2115      	movs	r1, #21
 80062d2:	f000 fe62 	bl	8006f9a <lsm6dso_write_reg>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d002      	beq.n	80062e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22c>
        {
          return LSM6DSO_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	425b      	negs	r3, r3
 80062de:	e072      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	222a      	movs	r2, #42	; 0x2a
 80062e4:	5c9b      	ldrb	r3, [r3, r2]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d108      	bne.n	80062fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x248>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f000 f982 	bl	80065f6 <LSM6DSO_GYRO_Disable>
 80062f2:	1e03      	subs	r3, r0, #0
 80062f4:	d002      	beq.n	80062fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x248>
        {
          return LSM6DSO_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	425b      	negs	r3, r3
 80062fa:	e064      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	331c      	adds	r3, #28
 8006300:	0018      	movs	r0, r3
 8006302:	2314      	movs	r3, #20
 8006304:	18fa      	adds	r2, r7, r3
 8006306:	2301      	movs	r3, #1
 8006308:	2114      	movs	r1, #20
 800630a:	f000 fe25 	bl	8006f58 <lsm6dso_read_reg>
 800630e:	1e03      	subs	r3, r0, #0
 8006310:	d002      	beq.n	8006318 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x264>
      {
        return LSM6DSO_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	425b      	negs	r3, r3
 8006316:	e056      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en == 0U)
 8006318:	2314      	movs	r3, #20
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	227f      	movs	r2, #127	; 0x7f
 8006320:	4393      	bics	r3, r2
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d123      	bne.n	8006370 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2bc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2229      	movs	r2, #41	; 0x29
 800632c:	5c9b      	ldrb	r3, [r3, r2]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d10a      	bne.n	8006348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x294>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	331c      	adds	r3, #28
 8006336:	2100      	movs	r1, #0
 8006338:	0018      	movs	r0, r3
 800633a:	f000 feb6 	bl	80070aa <lsm6dso_xl_data_rate_set>
 800633e:	1e03      	subs	r3, r0, #0
 8006340:	d002      	beq.n	8006348 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x294>
          {
            return LSM6DSO_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	425b      	negs	r3, r3
 8006346:	e03e      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 1U;
 8006348:	2414      	movs	r4, #20
 800634a:	193b      	adds	r3, r7, r4
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	4249      	negs	r1, r1
 8006352:	430a      	orrs	r2, r1
 8006354:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	331c      	adds	r3, #28
 800635a:	0018      	movs	r0, r3
 800635c:	193a      	adds	r2, r7, r4
 800635e:	2301      	movs	r3, #1
 8006360:	2114      	movs	r1, #20
 8006362:	f000 fe1a 	bl	8006f9a <lsm6dso_write_reg>
 8006366:	1e03      	subs	r3, r0, #0
 8006368:	d002      	beq.n	8006370 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2bc>
        {
          return LSM6DSO_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	425b      	negs	r3, r3
 800636e:	e02a      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006370:	4918      	ldr	r1, [pc, #96]	; (80063d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8006372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006374:	f7fa f86e 	bl	8000454 <__aeabi_fcmpgt>
 8006378:	1e03      	subs	r3, r0, #0
 800637a:	d100      	bne.n	800637e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ca>
      {
        newOdr = 208.0f;
      }
      break;
 800637c:	e006      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 208.0f;
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
 8006382:	e003      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	425b      	negs	r3, r3
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800638a:	46c0      	nop			; (mov r8, r8)
  }

  if (ret == LSM6DSO_ERROR)
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	3301      	adds	r3, #1
 8006390:	d102      	bne.n	8006398 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e4>
  {
    return LSM6DSO_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	425b      	negs	r3, r3
 8006396:	e016      	b.n	80063c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
  }

  if (pObj->acc_is_enabled == 1U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2229      	movs	r2, #41	; 0x29
 800639c:	5c9b      	ldrb	r3, [r3, r2]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d108      	bne.n	80063b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x300>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80063a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1c11      	adds	r1, r2, #0
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 fbc1 	bl	8006b30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80063ae:	0003      	movs	r3, r0
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b2:	e007      	b.n	80063c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x310>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80063b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1c11      	adds	r1, r2, #0
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 fc38 	bl	8006c30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80063c0:	0003      	movs	r3, r0
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b00d      	add	sp, #52	; 0x34
 80063cc:	bd90      	pop	{r4, r7, pc}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	41480000 	.word	0x41480000
 80063d4:	43500000 	.word	0x43500000

080063d8 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	331c      	adds	r3, #28
 80063ea:	220b      	movs	r2, #11
 80063ec:	18ba      	adds	r2, r7, r2
 80063ee:	0011      	movs	r1, r2
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 fe23 	bl	800703c <lsm6dso_xl_full_scale_get>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d002      	beq.n	8006400 <LSM6DSO_ACC_GetFullScale+0x28>
  {
    return LSM6DSO_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	425b      	negs	r3, r3
 80063fe:	e022      	b.n	8006446 <LSM6DSO_ACC_GetFullScale+0x6e>
  }

  switch (fs_low_level)
 8006400:	230b      	movs	r3, #11
 8006402:	18fb      	adds	r3, r7, r3
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b03      	cmp	r3, #3
 8006408:	d010      	beq.n	800642c <LSM6DSO_ACC_GetFullScale+0x54>
 800640a:	dc17      	bgt.n	800643c <LSM6DSO_ACC_GetFullScale+0x64>
 800640c:	2b02      	cmp	r3, #2
 800640e:	d009      	beq.n	8006424 <LSM6DSO_ACC_GetFullScale+0x4c>
 8006410:	dc14      	bgt.n	800643c <LSM6DSO_ACC_GetFullScale+0x64>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <LSM6DSO_ACC_GetFullScale+0x44>
 8006416:	2b01      	cmp	r3, #1
 8006418:	d00c      	beq.n	8006434 <LSM6DSO_ACC_GetFullScale+0x5c>
 800641a:	e00f      	b.n	800643c <LSM6DSO_ACC_GetFullScale+0x64>
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2202      	movs	r2, #2
 8006420:	601a      	str	r2, [r3, #0]
      break;
 8006422:	e00f      	b.n	8006444 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2204      	movs	r2, #4
 8006428:	601a      	str	r2, [r3, #0]
      break;
 800642a:	e00b      	b.n	8006444 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_8g:
      *FullScale =  8;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2208      	movs	r2, #8
 8006430:	601a      	str	r2, [r3, #0]
      break;
 8006432:	e007      	b.n	8006444 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2210      	movs	r2, #16
 8006438:	601a      	str	r2, [r3, #0]
      break;
 800643a:	e003      	b.n	8006444 <LSM6DSO_ACC_GetFullScale+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	425b      	negs	r3, r3
 8006440:	60fb      	str	r3, [r7, #12]
      break;
 8006442:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b004      	add	sp, #16
 800644c:	bd80      	pop	{r7, pc}

0800644e <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b02      	cmp	r3, #2
 800645c:	dd0b      	ble.n	8006476 <LSM6DSO_ACC_SetFullScale+0x28>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	dd06      	ble.n	8006472 <LSM6DSO_ACC_SetFullScale+0x24>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b08      	cmp	r3, #8
 8006468:	dc01      	bgt.n	800646e <LSM6DSO_ACC_SetFullScale+0x20>
 800646a:	2303      	movs	r3, #3
 800646c:	e004      	b.n	8006478 <LSM6DSO_ACC_SetFullScale+0x2a>
 800646e:	2301      	movs	r3, #1
 8006470:	e002      	b.n	8006478 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006472:	2302      	movs	r3, #2
 8006474:	e000      	b.n	8006478 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006476:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006478:	210f      	movs	r1, #15
 800647a:	187a      	adds	r2, r7, r1
 800647c:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	331c      	adds	r3, #28
 8006482:	001a      	movs	r2, r3
 8006484:	187b      	adds	r3, r7, r1
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	0019      	movs	r1, r3
 800648a:	0010      	movs	r0, r2
 800648c:	f000 fda6 	bl	8006fdc <lsm6dso_xl_full_scale_set>
 8006490:	1e03      	subs	r3, r0, #0
 8006492:	d002      	beq.n	800649a <LSM6DSO_ACC_SetFullScale+0x4c>
  {
    return LSM6DSO_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	425b      	negs	r3, r3
 8006498:	e000      	b.n	800649c <LSM6DSO_ACC_SetFullScale+0x4e>
  }

  return LSM6DSO_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b004      	add	sp, #16
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	331c      	adds	r3, #28
 80064b2:	2208      	movs	r2, #8
 80064b4:	18ba      	adds	r2, r7, r2
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f001 fa24 	bl	8007906 <lsm6dso_acceleration_raw_get>
 80064be:	1e03      	subs	r3, r0, #0
 80064c0:	d002      	beq.n	80064c8 <LSM6DSO_ACC_GetAxesRaw+0x24>
  {
    return LSM6DSO_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	425b      	negs	r3, r3
 80064c6:	e010      	b.n	80064ea <LSM6DSO_ACC_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80064c8:	2108      	movs	r1, #8
 80064ca:	187b      	adds	r3, r7, r1
 80064cc:	2200      	movs	r2, #0
 80064ce:	5e9a      	ldrsh	r2, [r3, r2]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	2202      	movs	r2, #2
 80064d8:	5e9a      	ldrsh	r2, [r3, r2]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	2204      	movs	r2, #4
 80064e2:	5e9a      	ldrsh	r2, [r3, r2]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80064f2:	b590      	push	{r4, r7, lr}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	331c      	adds	r3, #28
 8006504:	2210      	movs	r2, #16
 8006506:	18ba      	adds	r2, r7, r2
 8006508:	0011      	movs	r1, r2
 800650a:	0018      	movs	r0, r3
 800650c:	f001 f9fb 	bl	8007906 <lsm6dso_acceleration_raw_get>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d002      	beq.n	800651a <LSM6DSO_ACC_GetAxes+0x28>
  {
    return LSM6DSO_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	425b      	negs	r3, r3
 8006518:	e046      	b.n	80065a8 <LSM6DSO_ACC_GetAxes+0xb6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800651a:	230c      	movs	r3, #12
 800651c:	18fa      	adds	r2, r7, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0011      	movs	r1, r2
 8006522:	0018      	movs	r0, r3
 8006524:	f7ff fd02 	bl	8005f2c <LSM6DSO_ACC_GetSensitivity>
 8006528:	1e03      	subs	r3, r0, #0
 800652a:	d002      	beq.n	8006532 <LSM6DSO_ACC_GetAxes+0x40>
  {
    return LSM6DSO_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	425b      	negs	r3, r3
 8006530:	e03a      	b.n	80065a8 <LSM6DSO_ACC_GetAxes+0xb6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006532:	2410      	movs	r4, #16
 8006534:	193b      	adds	r3, r7, r4
 8006536:	2200      	movs	r2, #0
 8006538:	5e9b      	ldrsh	r3, [r3, r2]
 800653a:	0018      	movs	r0, r3
 800653c:	f7fa ff40 	bl	80013c0 <__aeabi_i2f>
 8006540:	1c02      	adds	r2, r0, #0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1c19      	adds	r1, r3, #0
 8006546:	1c10      	adds	r0, r2, #0
 8006548:	f7fa fc30 	bl	8000dac <__aeabi_fmul>
 800654c:	1c03      	adds	r3, r0, #0
 800654e:	1c18      	adds	r0, r3, #0
 8006550:	f7fa ff16 	bl	8001380 <__aeabi_f2iz>
 8006554:	0002      	movs	r2, r0
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800655a:	193b      	adds	r3, r7, r4
 800655c:	2202      	movs	r2, #2
 800655e:	5e9b      	ldrsh	r3, [r3, r2]
 8006560:	0018      	movs	r0, r3
 8006562:	f7fa ff2d 	bl	80013c0 <__aeabi_i2f>
 8006566:	1c02      	adds	r2, r0, #0
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1c19      	adds	r1, r3, #0
 800656c:	1c10      	adds	r0, r2, #0
 800656e:	f7fa fc1d 	bl	8000dac <__aeabi_fmul>
 8006572:	1c03      	adds	r3, r0, #0
 8006574:	1c18      	adds	r0, r3, #0
 8006576:	f7fa ff03 	bl	8001380 <__aeabi_f2iz>
 800657a:	0002      	movs	r2, r0
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006580:	193b      	adds	r3, r7, r4
 8006582:	2204      	movs	r2, #4
 8006584:	5e9b      	ldrsh	r3, [r3, r2]
 8006586:	0018      	movs	r0, r3
 8006588:	f7fa ff1a 	bl	80013c0 <__aeabi_i2f>
 800658c:	1c02      	adds	r2, r0, #0
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1c19      	adds	r1, r3, #0
 8006592:	1c10      	adds	r0, r2, #0
 8006594:	f7fa fc0a 	bl	8000dac <__aeabi_fmul>
 8006598:	1c03      	adds	r3, r0, #0
 800659a:	1c18      	adds	r0, r3, #0
 800659c:	f7fa fef0 	bl	8001380 <__aeabi_f2iz>
 80065a0:	0002      	movs	r2, r0
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	0018      	movs	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b007      	add	sp, #28
 80065ae:	bd90      	pop	{r4, r7, pc}

080065b0 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	222a      	movs	r2, #42	; 0x2a
 80065bc:	5c9b      	ldrb	r3, [r3, r2]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e013      	b.n	80065ee <LSM6DSO_GYRO_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	331c      	adds	r3, #28
 80065ca:	001a      	movs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	212c      	movs	r1, #44	; 0x2c
 80065d0:	5c5b      	ldrb	r3, [r3, r1]
 80065d2:	0019      	movs	r1, r3
 80065d4:	0010      	movs	r0, r2
 80065d6:	f000 ff75 	bl	80074c4 <lsm6dso_gy_data_rate_set>
 80065da:	1e03      	subs	r3, r0, #0
 80065dc:	d002      	beq.n	80065e4 <LSM6DSO_GYRO_Enable+0x34>
  {
    return LSM6DSO_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	425b      	negs	r3, r3
 80065e2:	e004      	b.n	80065ee <LSM6DSO_GYRO_Enable+0x3e>
  }

  pObj->gyro_is_enabled = 1;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	222a      	movs	r2, #42	; 0x2a
 80065e8:	2101      	movs	r1, #1
 80065ea:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	222a      	movs	r2, #42	; 0x2a
 8006602:	5c9b      	ldrb	r3, [r3, r2]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e01d      	b.n	8006648 <LSM6DSO_GYRO_Disable+0x52>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	331c      	adds	r3, #28
 8006610:	001a      	movs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	332c      	adds	r3, #44	; 0x2c
 8006616:	0019      	movs	r1, r3
 8006618:	0010      	movs	r0, r2
 800661a:	f001 f89f 	bl	800775c <lsm6dso_gy_data_rate_get>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d002      	beq.n	8006628 <LSM6DSO_GYRO_Disable+0x32>
  {
    return LSM6DSO_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	425b      	negs	r3, r3
 8006626:	e00f      	b.n	8006648 <LSM6DSO_GYRO_Disable+0x52>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	331c      	adds	r3, #28
 800662c:	2100      	movs	r1, #0
 800662e:	0018      	movs	r0, r3
 8006630:	f000 ff48 	bl	80074c4 <lsm6dso_gy_data_rate_set>
 8006634:	1e03      	subs	r3, r0, #0
 8006636:	d002      	beq.n	800663e <LSM6DSO_GYRO_Disable+0x48>
  {
    return LSM6DSO_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	425b      	negs	r3, r3
 800663c:	e004      	b.n	8006648 <LSM6DSO_GYRO_Disable+0x52>
  }

  pObj->gyro_is_enabled = 0;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	222a      	movs	r2, #42	; 0x2a
 8006642:	2100      	movs	r1, #0
 8006644:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b002      	add	sp, #8
 800664e:	bd80      	pop	{r7, pc}

08006650 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	331c      	adds	r3, #28
 8006662:	220b      	movs	r2, #11
 8006664:	18ba      	adds	r2, r7, r2
 8006666:	0011      	movs	r1, r2
 8006668:	0018      	movs	r0, r3
 800666a:	f000 fef1 	bl	8007450 <lsm6dso_gy_full_scale_get>
 800666e:	1e03      	subs	r3, r0, #0
 8006670:	d002      	beq.n	8006678 <LSM6DSO_GYRO_GetSensitivity+0x28>
  {
    return LSM6DSO_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	425b      	negs	r3, r3
 8006676:	e022      	b.n	80066be <LSM6DSO_GYRO_GetSensitivity+0x6e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006678:	230b      	movs	r3, #11
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b06      	cmp	r3, #6
 8006680:	d818      	bhi.n	80066b4 <LSM6DSO_GYRO_GetSensitivity+0x64>
 8006682:	009a      	lsls	r2, r3, #2
 8006684:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <LSM6DSO_GYRO_GetSensitivity+0x78>)
 8006686:	18d3      	adds	r3, r2, r3
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	469f      	mov	pc, r3
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	4a0f      	ldr	r2, [pc, #60]	; (80066cc <LSM6DSO_GYRO_GetSensitivity+0x7c>)
 8006690:	601a      	str	r2, [r3, #0]
      break;
 8006692:	e013      	b.n	80066bc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	4a0e      	ldr	r2, [pc, #56]	; (80066d0 <LSM6DSO_GYRO_GetSensitivity+0x80>)
 8006698:	601a      	str	r2, [r3, #0]
      break;
 800669a:	e00f      	b.n	80066bc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	4a0d      	ldr	r2, [pc, #52]	; (80066d4 <LSM6DSO_GYRO_GetSensitivity+0x84>)
 80066a0:	601a      	str	r2, [r3, #0]
      break;
 80066a2:	e00b      	b.n	80066bc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	4a0c      	ldr	r2, [pc, #48]	; (80066d8 <LSM6DSO_GYRO_GetSensitivity+0x88>)
 80066a8:	601a      	str	r2, [r3, #0]
      break;
 80066aa:	e007      	b.n	80066bc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	4a0b      	ldr	r2, [pc, #44]	; (80066dc <LSM6DSO_GYRO_GetSensitivity+0x8c>)
 80066b0:	601a      	str	r2, [r3, #0]
      break;
 80066b2:	e003      	b.n	80066bc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	425b      	negs	r3, r3
 80066b8:	60fb      	str	r3, [r7, #12]
      break;
 80066ba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	0018      	movs	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	b004      	add	sp, #16
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	080157ec 	.word	0x080157ec
 80066cc:	408c0000 	.word	0x408c0000
 80066d0:	410c0000 	.word	0x410c0000
 80066d4:	418c0000 	.word	0x418c0000
 80066d8:	420c0000 	.word	0x420c0000
 80066dc:	428c0000 	.word	0x428c0000

080066e0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	331c      	adds	r3, #28
 80066f2:	220b      	movs	r2, #11
 80066f4:	18ba      	adds	r2, r7, r2
 80066f6:	0011      	movs	r1, r2
 80066f8:	0018      	movs	r0, r3
 80066fa:	f001 f82f 	bl	800775c <lsm6dso_gy_data_rate_get>
 80066fe:	1e03      	subs	r3, r0, #0
 8006700:	d002      	beq.n	8006708 <LSM6DSO_GYRO_GetOutputDataRate+0x28>
  {
    return LSM6DSO_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	425b      	negs	r3, r3
 8006706:	e03a      	b.n	800677e <LSM6DSO_GYRO_GetOutputDataRate+0x9e>
  }

  switch (odr_low_level)
 8006708:	230b      	movs	r3, #11
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b0a      	cmp	r3, #10
 8006710:	d830      	bhi.n	8006774 <LSM6DSO_GYRO_GetOutputDataRate+0x94>
 8006712:	009a      	lsls	r2, r3, #2
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <LSM6DSO_GYRO_GetOutputDataRate+0xa8>)
 8006716:	18d3      	adds	r3, r2, r3
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	469f      	mov	pc, r3
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
      break;
 8006722:	e02b      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	4a19      	ldr	r2, [pc, #100]	; (800678c <LSM6DSO_GYRO_GetOutputDataRate+0xac>)
 8006728:	601a      	str	r2, [r3, #0]
      break;
 800672a:	e027      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	4a18      	ldr	r2, [pc, #96]	; (8006790 <LSM6DSO_GYRO_GetOutputDataRate+0xb0>)
 8006730:	601a      	str	r2, [r3, #0]
      break;
 8006732:	e023      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	4a17      	ldr	r2, [pc, #92]	; (8006794 <LSM6DSO_GYRO_GetOutputDataRate+0xb4>)
 8006738:	601a      	str	r2, [r3, #0]
      break;
 800673a:	e01f      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <LSM6DSO_GYRO_GetOutputDataRate+0xb8>)
 8006740:	601a      	str	r2, [r3, #0]
      break;
 8006742:	e01b      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <LSM6DSO_GYRO_GetOutputDataRate+0xbc>)
 8006748:	601a      	str	r2, [r3, #0]
      break;
 800674a:	e017      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <LSM6DSO_GYRO_GetOutputDataRate+0xc0>)
 8006750:	601a      	str	r2, [r3, #0]
      break;
 8006752:	e013      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <LSM6DSO_GYRO_GetOutputDataRate+0xc4>)
 8006758:	601a      	str	r2, [r3, #0]
      break;
 800675a:	e00f      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	4a12      	ldr	r2, [pc, #72]	; (80067a8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>)
 8006760:	601a      	str	r2, [r3, #0]
      break;
 8006762:	e00b      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	4a11      	ldr	r2, [pc, #68]	; (80067ac <LSM6DSO_GYRO_GetOutputDataRate+0xcc>)
 8006768:	601a      	str	r2, [r3, #0]
      break;
 800676a:	e007      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006770:	601a      	str	r2, [r3, #0]
      break;
 8006772:	e003      	b.n	800677c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    default:
      ret = LSM6DSO_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	425b      	negs	r3, r3
 8006778:	60fb      	str	r3, [r7, #12]
      break;
 800677a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800677c:	68fb      	ldr	r3, [r7, #12]
}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b004      	add	sp, #16
 8006784:	bd80      	pop	{r7, pc}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	08015808 	.word	0x08015808
 800678c:	41480000 	.word	0x41480000
 8006790:	41d00000 	.word	0x41d00000
 8006794:	42500000 	.word	0x42500000
 8006798:	42d00000 	.word	0x42d00000
 800679c:	43500000 	.word	0x43500000
 80067a0:	43d08000 	.word	0x43d08000
 80067a4:	44504000 	.word	0x44504000
 80067a8:	44d06000 	.word	0x44d06000
 80067ac:	45505000 	.word	0x45505000
 80067b0:	45d05800 	.word	0x45d05800

080067b4 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 f805 	bl	80067d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80067ca:	0003      	movs	r3, r0
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b089      	sub	sp, #36	; 0x24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	1dfb      	adds	r3, r7, #7
 80067e0:	701a      	strb	r2, [r3, #0]
  int32_t ret = LSM6DSO_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80067ea:	1dfb      	adds	r3, r7, #7
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d028      	beq.n	8006848 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80067f6:	e05a      	b.n	80068ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xda>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	331c      	adds	r3, #28
 80067fc:	0018      	movs	r0, r3
 80067fe:	2314      	movs	r3, #20
 8006800:	18fa      	adds	r2, r7, r3
 8006802:	2301      	movs	r3, #1
 8006804:	2116      	movs	r1, #22
 8006806:	f000 fba7 	bl	8006f58 <lsm6dso_read_reg>
 800680a:	1e03      	subs	r3, r0, #0
 800680c:	d002      	beq.n	8006814 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	425b      	negs	r3, r3
 8006812:	e06e      	b.n	80068f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
      }

      if (val1.g_hm_mode != 0U)
 8006814:	2414      	movs	r4, #20
 8006816:	193b      	adds	r3, r7, r4
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	227f      	movs	r2, #127	; 0x7f
 800681c:	4393      	bics	r3, r2
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d048      	beq.n	80068b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      {
        val1.g_hm_mode = 0U;
 8006824:	193b      	adds	r3, r7, r4
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	217f      	movs	r1, #127	; 0x7f
 800682a:	400a      	ands	r2, r1
 800682c:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	331c      	adds	r3, #28
 8006832:	0018      	movs	r0, r3
 8006834:	193a      	adds	r2, r7, r4
 8006836:	2301      	movs	r3, #1
 8006838:	2116      	movs	r1, #22
 800683a:	f000 fbae 	bl	8006f9a <lsm6dso_write_reg>
 800683e:	1e03      	subs	r3, r0, #0
 8006840:	d039      	beq.n	80068b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        {
          return LSM6DSO_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	425b      	negs	r3, r3
 8006846:	e054      	b.n	80068f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	331c      	adds	r3, #28
 800684c:	0018      	movs	r0, r3
 800684e:	2310      	movs	r3, #16
 8006850:	18fa      	adds	r2, r7, r3
 8006852:	2301      	movs	r3, #1
 8006854:	2116      	movs	r1, #22
 8006856:	f000 fb7f 	bl	8006f58 <lsm6dso_read_reg>
 800685a:	1e03      	subs	r3, r0, #0
 800685c:	d002      	beq.n	8006864 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	425b      	negs	r3, r3
 8006862:	e046      	b.n	80068f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
      }

      if (val1.g_hm_mode == 0U)
 8006864:	2410      	movs	r4, #16
 8006866:	193b      	adds	r3, r7, r4
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	227f      	movs	r2, #127	; 0x7f
 800686c:	4393      	bics	r3, r2
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d112      	bne.n	800689a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc6>
      {
        val1.g_hm_mode = 1U;
 8006874:	193b      	adds	r3, r7, r4
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	4249      	negs	r1, r1
 800687c:	430a      	orrs	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	331c      	adds	r3, #28
 8006884:	0018      	movs	r0, r3
 8006886:	193a      	adds	r2, r7, r4
 8006888:	2301      	movs	r3, #1
 800688a:	2116      	movs	r1, #22
 800688c:	f000 fb85 	bl	8006f9a <lsm6dso_write_reg>
 8006890:	1e03      	subs	r3, r0, #0
 8006892:	d002      	beq.n	800689a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc6>
        {
          return LSM6DSO_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	425b      	negs	r3, r3
 8006898:	e02b      	b.n	80068f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800689a:	4918      	ldr	r1, [pc, #96]	; (80068fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800689c:	69b8      	ldr	r0, [r7, #24]
 800689e:	f7f9 fdd9 	bl	8000454 <__aeabi_fcmpgt>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d100      	bne.n	80068a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd4>
      {
        newOdr = 208.0f;
      }
      break;
 80068a6:	e007      	b.n	80068b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
        newOdr = 208.0f;
 80068a8:	4b14      	ldr	r3, [pc, #80]	; (80068fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e004      	b.n	80068b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	425b      	negs	r3, r3
 80068b2:	61fb      	str	r3, [r7, #28]
      break;
 80068b4:	e000      	b.n	80068b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
      break;
 80068b6:	46c0      	nop			; (mov r8, r8)
  }

  if (ret == LSM6DSO_ERROR)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	3301      	adds	r3, #1
 80068bc:	d102      	bne.n	80068c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	425b      	negs	r3, r3
 80068c2:	e016      	b.n	80068f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
  }

  if (pObj->gyro_is_enabled == 1U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	222a      	movs	r2, #42	; 0x2a
 80068c8:	5c9b      	ldrb	r3, [r3, r2]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d108      	bne.n	80068e0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10c>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	1c11      	adds	r1, r2, #0
 80068d4:	0018      	movs	r0, r3
 80068d6:	f000 fa1d 	bl	8006d14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80068da:	0003      	movs	r3, r0
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e007      	b.n	80068f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1c11      	adds	r1, r2, #0
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 fa8a 	bl	8006e00 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80068ec:	0003      	movs	r3, r0
 80068ee:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80068f0:	69fb      	ldr	r3, [r7, #28]
}
 80068f2:	0018      	movs	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b009      	add	sp, #36	; 0x24
 80068f8:	bd90      	pop	{r4, r7, pc}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	43500000 	.word	0x43500000

08006900 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	331c      	adds	r3, #28
 8006912:	220b      	movs	r2, #11
 8006914:	18ba      	adds	r2, r7, r2
 8006916:	0011      	movs	r1, r2
 8006918:	0018      	movs	r0, r3
 800691a:	f000 fd99 	bl	8007450 <lsm6dso_gy_full_scale_get>
 800691e:	1e03      	subs	r3, r0, #0
 8006920:	d002      	beq.n	8006928 <LSM6DSO_GYRO_GetFullScale+0x28>
  {
    return LSM6DSO_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	425b      	negs	r3, r3
 8006926:	e025      	b.n	8006974 <LSM6DSO_GYRO_GetFullScale+0x74>
  }

  switch (fs_low_level)
 8006928:	230b      	movs	r3, #11
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b06      	cmp	r3, #6
 8006930:	d81b      	bhi.n	800696a <LSM6DSO_GYRO_GetFullScale+0x6a>
 8006932:	009a      	lsls	r2, r3, #2
 8006934:	4b11      	ldr	r3, [pc, #68]	; (800697c <LSM6DSO_GYRO_GetFullScale+0x7c>)
 8006936:	18d3      	adds	r3, r2, r3
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	469f      	mov	pc, r3
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	227d      	movs	r2, #125	; 0x7d
 8006940:	601a      	str	r2, [r3, #0]
      break;
 8006942:	e016      	b.n	8006972 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	22fa      	movs	r2, #250	; 0xfa
 8006948:	601a      	str	r2, [r3, #0]
      break;
 800694a:	e012      	b.n	8006972 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	22fa      	movs	r2, #250	; 0xfa
 8006950:	0052      	lsls	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
      break;
 8006954:	e00d      	b.n	8006972 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	22fa      	movs	r2, #250	; 0xfa
 800695a:	0092      	lsls	r2, r2, #2
 800695c:	601a      	str	r2, [r3, #0]
      break;
 800695e:	e008      	b.n	8006972 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	22fa      	movs	r2, #250	; 0xfa
 8006964:	00d2      	lsls	r2, r2, #3
 8006966:	601a      	str	r2, [r3, #0]
      break;
 8006968:	e003      	b.n	8006972 <LSM6DSO_GYRO_GetFullScale+0x72>

    default:
      ret = LSM6DSO_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	425b      	negs	r3, r3
 800696e:	60fb      	str	r3, [r7, #12]
      break;
 8006970:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006972:	68fb      	ldr	r3, [r7, #12]
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b004      	add	sp, #16
 800697a:	bd80      	pop	{r7, pc}
 800697c:	08015834 	.word	0x08015834

08006980 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b7d      	cmp	r3, #125	; 0x7d
 800698e:	dd14      	ble.n	80069ba <LSM6DSO_GYRO_SetFullScale+0x3a>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2bfa      	cmp	r3, #250	; 0xfa
 8006994:	dd0f      	ble.n	80069b6 <LSM6DSO_GYRO_SetFullScale+0x36>
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	23fa      	movs	r3, #250	; 0xfa
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	429a      	cmp	r2, r3
 800699e:	dd08      	ble.n	80069b2 <LSM6DSO_GYRO_SetFullScale+0x32>
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	23fa      	movs	r3, #250	; 0xfa
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	429a      	cmp	r2, r3
 80069a8:	dc01      	bgt.n	80069ae <LSM6DSO_GYRO_SetFullScale+0x2e>
 80069aa:	2304      	movs	r3, #4
 80069ac:	e006      	b.n	80069bc <LSM6DSO_GYRO_SetFullScale+0x3c>
 80069ae:	2306      	movs	r3, #6
 80069b0:	e004      	b.n	80069bc <LSM6DSO_GYRO_SetFullScale+0x3c>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e002      	b.n	80069bc <LSM6DSO_GYRO_SetFullScale+0x3c>
 80069b6:	2300      	movs	r3, #0
 80069b8:	e000      	b.n	80069bc <LSM6DSO_GYRO_SetFullScale+0x3c>
 80069ba:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80069bc:	210f      	movs	r1, #15
 80069be:	187a      	adds	r2, r7, r1
 80069c0:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	331c      	adds	r3, #28
 80069c6:	001a      	movs	r2, r3
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	0019      	movs	r1, r3
 80069ce:	0010      	movs	r0, r2
 80069d0:	f000 fd0e 	bl	80073f0 <lsm6dso_gy_full_scale_set>
 80069d4:	1e03      	subs	r3, r0, #0
 80069d6:	d002      	beq.n	80069de <LSM6DSO_GYRO_SetFullScale+0x5e>
  {
    return LSM6DSO_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	425b      	negs	r3, r3
 80069dc:	e000      	b.n	80069e0 <LSM6DSO_GYRO_SetFullScale+0x60>
  }

  return LSM6DSO_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b004      	add	sp, #16
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	331c      	adds	r3, #28
 80069f6:	2208      	movs	r2, #8
 80069f8:	18ba      	adds	r2, r7, r2
 80069fa:	0011      	movs	r1, r2
 80069fc:	0018      	movs	r0, r3
 80069fe:	f000 ff2f 	bl	8007860 <lsm6dso_angular_rate_raw_get>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d002      	beq.n	8006a0c <LSM6DSO_GYRO_GetAxesRaw+0x24>
  {
    return LSM6DSO_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	425b      	negs	r3, r3
 8006a0a:	e010      	b.n	8006a2e <LSM6DSO_GYRO_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	187b      	adds	r3, r7, r1
 8006a10:	2200      	movs	r2, #0
 8006a12:	5e9a      	ldrsh	r2, [r3, r2]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006a18:	187b      	adds	r3, r7, r1
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	5e9a      	ldrsh	r2, [r3, r2]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	2204      	movs	r2, #4
 8006a26:	5e9a      	ldrsh	r2, [r3, r2]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b004      	add	sp, #16
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006a36:	b590      	push	{r4, r7, lr}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	331c      	adds	r3, #28
 8006a44:	2210      	movs	r2, #16
 8006a46:	18ba      	adds	r2, r7, r2
 8006a48:	0011      	movs	r1, r2
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 ff08 	bl	8007860 <lsm6dso_angular_rate_raw_get>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d002      	beq.n	8006a5a <LSM6DSO_GYRO_GetAxes+0x24>
  {
    return LSM6DSO_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	425b      	negs	r3, r3
 8006a58:	e046      	b.n	8006ae8 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	18fa      	adds	r2, r7, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f7ff fdf4 	bl	8006650 <LSM6DSO_GYRO_GetSensitivity>
 8006a68:	1e03      	subs	r3, r0, #0
 8006a6a:	d002      	beq.n	8006a72 <LSM6DSO_GYRO_GetAxes+0x3c>
  {
    return LSM6DSO_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	425b      	negs	r3, r3
 8006a70:	e03a      	b.n	8006ae8 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006a72:	2410      	movs	r4, #16
 8006a74:	193b      	adds	r3, r7, r4
 8006a76:	2200      	movs	r2, #0
 8006a78:	5e9b      	ldrsh	r3, [r3, r2]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7fa fca0 	bl	80013c0 <__aeabi_i2f>
 8006a80:	1c02      	adds	r2, r0, #0
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1c19      	adds	r1, r3, #0
 8006a86:	1c10      	adds	r0, r2, #0
 8006a88:	f7fa f990 	bl	8000dac <__aeabi_fmul>
 8006a8c:	1c03      	adds	r3, r0, #0
 8006a8e:	1c18      	adds	r0, r3, #0
 8006a90:	f7fa fc76 	bl	8001380 <__aeabi_f2iz>
 8006a94:	0002      	movs	r2, r0
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	5e9b      	ldrsh	r3, [r3, r2]
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f7fa fc8d 	bl	80013c0 <__aeabi_i2f>
 8006aa6:	1c02      	adds	r2, r0, #0
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	1c19      	adds	r1, r3, #0
 8006aac:	1c10      	adds	r0, r2, #0
 8006aae:	f7fa f97d 	bl	8000dac <__aeabi_fmul>
 8006ab2:	1c03      	adds	r3, r0, #0
 8006ab4:	1c18      	adds	r0, r3, #0
 8006ab6:	f7fa fc63 	bl	8001380 <__aeabi_f2iz>
 8006aba:	0002      	movs	r2, r0
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006ac0:	193b      	adds	r3, r7, r4
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7fa fc7a 	bl	80013c0 <__aeabi_i2f>
 8006acc:	1c02      	adds	r2, r0, #0
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1c19      	adds	r1, r3, #0
 8006ad2:	1c10      	adds	r0, r2, #0
 8006ad4:	f7fa f96a 	bl	8000dac <__aeabi_fmul>
 8006ad8:	1c03      	adds	r3, r0, #0
 8006ada:	1c18      	adds	r0, r3, #0
 8006adc:	f7fa fc50 	bl	8001380 <__aeabi_f2iz>
 8006ae0:	0002      	movs	r2, r0
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	0018      	movs	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b007      	add	sp, #28
 8006aee:	bd90      	pop	{r4, r7, pc}

08006af0 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	0008      	movs	r0, r1
 8006afa:	0011      	movs	r1, r2
 8006afc:	1cfb      	adds	r3, r7, #3
 8006afe:	1c02      	adds	r2, r0, #0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	1cbb      	adds	r3, r7, #2
 8006b04:	1c0a      	adds	r2, r1, #0
 8006b06:	701a      	strb	r2, [r3, #0]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	331c      	adds	r3, #28
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	1cba      	adds	r2, r7, #2
 8006b10:	1cfb      	adds	r3, r7, #3
 8006b12:	7819      	ldrb	r1, [r3, #0]
 8006b14:	2301      	movs	r3, #1
 8006b16:	f000 fa40 	bl	8006f9a <lsm6dso_write_reg>
 8006b1a:	1e03      	subs	r3, r0, #0
 8006b1c:	d002      	beq.n	8006b24 <LSM6DSO_Write_Reg+0x34>
  {
    return LSM6DSO_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	425b      	negs	r3, r3
 8006b22:	e000      	b.n	8006b26 <LSM6DSO_Write_Reg+0x36>
  }

  return LSM6DSO_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006b3a:	4933      	ldr	r1, [pc, #204]	; (8006c08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd8>)
 8006b3c:	6838      	ldr	r0, [r7, #0]
 8006b3e:	f7f9 fc7f 	bl	8000440 <__aeabi_fcmple>
 8006b42:	1e03      	subs	r3, r0, #0
 8006b44:	d001      	beq.n	8006b4a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1a>
 8006b46:	230b      	movs	r3, #11
 8006b48:	e048      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006b4a:	4930      	ldr	r1, [pc, #192]	; (8006c0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>)
 8006b4c:	6838      	ldr	r0, [r7, #0]
 8006b4e:	f7f9 fc77 	bl	8000440 <__aeabi_fcmple>
 8006b52:	1e03      	subs	r3, r0, #0
 8006b54:	d001      	beq.n	8006b5a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e040      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006b5a:	492d      	ldr	r1, [pc, #180]	; (8006c10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe0>)
 8006b5c:	6838      	ldr	r0, [r7, #0]
 8006b5e:	f7f9 fc6f 	bl	8000440 <__aeabi_fcmple>
 8006b62:	1e03      	subs	r3, r0, #0
 8006b64:	d001      	beq.n	8006b6a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x3a>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e038      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006b6a:	492a      	ldr	r1, [pc, #168]	; (8006c14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe4>)
 8006b6c:	6838      	ldr	r0, [r7, #0]
 8006b6e:	f7f9 fc67 	bl	8000440 <__aeabi_fcmple>
 8006b72:	1e03      	subs	r3, r0, #0
 8006b74:	d001      	beq.n	8006b7a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4a>
 8006b76:	2303      	movs	r3, #3
 8006b78:	e030      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006b7a:	4927      	ldr	r1, [pc, #156]	; (8006c18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8006b7c:	6838      	ldr	r0, [r7, #0]
 8006b7e:	f7f9 fc5f 	bl	8000440 <__aeabi_fcmple>
 8006b82:	1e03      	subs	r3, r0, #0
 8006b84:	d001      	beq.n	8006b8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8006b86:	2304      	movs	r3, #4
 8006b88:	e028      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006b8a:	4924      	ldr	r1, [pc, #144]	; (8006c1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8006b8c:	6838      	ldr	r0, [r7, #0]
 8006b8e:	f7f9 fc57 	bl	8000440 <__aeabi_fcmple>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d001      	beq.n	8006b9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x6a>
 8006b96:	2305      	movs	r3, #5
 8006b98:	e020      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006b9a:	4921      	ldr	r1, [pc, #132]	; (8006c20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8006b9c:	6838      	ldr	r0, [r7, #0]
 8006b9e:	f7f9 fc4f 	bl	8000440 <__aeabi_fcmple>
 8006ba2:	1e03      	subs	r3, r0, #0
 8006ba4:	d001      	beq.n	8006baa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006ba6:	2306      	movs	r3, #6
 8006ba8:	e018      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006baa:	491e      	ldr	r1, [pc, #120]	; (8006c24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8006bac:	6838      	ldr	r0, [r7, #0]
 8006bae:	f7f9 fc47 	bl	8000440 <__aeabi_fcmple>
 8006bb2:	1e03      	subs	r3, r0, #0
 8006bb4:	d001      	beq.n	8006bba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x8a>
 8006bb6:	2307      	movs	r3, #7
 8006bb8:	e010      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006bba:	491b      	ldr	r1, [pc, #108]	; (8006c28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8006bbc:	6838      	ldr	r0, [r7, #0]
 8006bbe:	f7f9 fc3f 	bl	8000440 <__aeabi_fcmple>
 8006bc2:	1e03      	subs	r3, r0, #0
 8006bc4:	d001      	beq.n	8006bca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	e008      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006bca:	4918      	ldr	r1, [pc, #96]	; (8006c2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8006bcc:	6838      	ldr	r0, [r7, #0]
 8006bce:	f7f9 fc37 	bl	8000440 <__aeabi_fcmple>
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	d001      	beq.n	8006bda <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8006bd6:	2309      	movs	r3, #9
 8006bd8:	e000      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006bda:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006bdc:	210f      	movs	r1, #15
 8006bde:	187a      	adds	r2, r7, r1
 8006be0:	7013      	strb	r3, [r2, #0]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	331c      	adds	r3, #28
 8006be6:	001a      	movs	r2, r3
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	0019      	movs	r1, r3
 8006bee:	0010      	movs	r0, r2
 8006bf0:	f000 fa5b 	bl	80070aa <lsm6dso_xl_data_rate_set>
 8006bf4:	1e03      	subs	r3, r0, #0
 8006bf6:	d002      	beq.n	8006bfe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xce>
  {
    return LSM6DSO_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	425b      	negs	r3, r3
 8006bfc:	e000      	b.n	8006c00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd0>
  }

  return LSM6DSO_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b004      	add	sp, #16
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	3fcccccd 	.word	0x3fcccccd
 8006c0c:	41480000 	.word	0x41480000
 8006c10:	41d00000 	.word	0x41d00000
 8006c14:	42500000 	.word	0x42500000
 8006c18:	42d00000 	.word	0x42d00000
 8006c1c:	43500000 	.word	0x43500000
 8006c20:	43d08000 	.word	0x43d08000
 8006c24:	44504000 	.word	0x44504000
 8006c28:	44d06000 	.word	0x44d06000
 8006c2c:	45505000 	.word	0x45505000

08006c30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006c3a:	492c      	ldr	r1, [pc, #176]	; (8006cec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 8006c3c:	6838      	ldr	r0, [r7, #0]
 8006c3e:	f7f9 fbff 	bl	8000440 <__aeabi_fcmple>
 8006c42:	1e03      	subs	r3, r0, #0
 8006c44:	d001      	beq.n	8006c4a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1a>
 8006c46:	230b      	movs	r3, #11
 8006c48:	e048      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006c4a:	4929      	ldr	r1, [pc, #164]	; (8006cf0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8006c4c:	6838      	ldr	r0, [r7, #0]
 8006c4e:	f7f9 fbf7 	bl	8000440 <__aeabi_fcmple>
 8006c52:	1e03      	subs	r3, r0, #0
 8006c54:	d001      	beq.n	8006c5a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2a>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e040      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006c5a:	4926      	ldr	r1, [pc, #152]	; (8006cf4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8006c5c:	6838      	ldr	r0, [r7, #0]
 8006c5e:	f7f9 fbef 	bl	8000440 <__aeabi_fcmple>
 8006c62:	1e03      	subs	r3, r0, #0
 8006c64:	d001      	beq.n	8006c6a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e038      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006c6a:	4923      	ldr	r1, [pc, #140]	; (8006cf8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8006c6c:	6838      	ldr	r0, [r7, #0]
 8006c6e:	f7f9 fbe7 	bl	8000440 <__aeabi_fcmple>
 8006c72:	1e03      	subs	r3, r0, #0
 8006c74:	d001      	beq.n	8006c7a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4a>
 8006c76:	2303      	movs	r3, #3
 8006c78:	e030      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006c7a:	4920      	ldr	r1, [pc, #128]	; (8006cfc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8006c7c:	6838      	ldr	r0, [r7, #0]
 8006c7e:	f7f9 fbdf 	bl	8000440 <__aeabi_fcmple>
 8006c82:	1e03      	subs	r3, r0, #0
 8006c84:	d001      	beq.n	8006c8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8006c86:	2304      	movs	r3, #4
 8006c88:	e028      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006c8a:	491d      	ldr	r1, [pc, #116]	; (8006d00 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8006c8c:	6838      	ldr	r0, [r7, #0]
 8006c8e:	f7f9 fbd7 	bl	8000440 <__aeabi_fcmple>
 8006c92:	1e03      	subs	r3, r0, #0
 8006c94:	d001      	beq.n	8006c9a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8006c96:	2305      	movs	r3, #5
 8006c98:	e020      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006c9a:	491a      	ldr	r1, [pc, #104]	; (8006d04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8006c9c:	6838      	ldr	r0, [r7, #0]
 8006c9e:	f7f9 fbcf 	bl	8000440 <__aeabi_fcmple>
 8006ca2:	1e03      	subs	r3, r0, #0
 8006ca4:	d001      	beq.n	8006caa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006ca6:	2306      	movs	r3, #6
 8006ca8:	e018      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006caa:	4917      	ldr	r1, [pc, #92]	; (8006d08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f7f9 fbc7 	bl	8000440 <__aeabi_fcmple>
 8006cb2:	1e03      	subs	r3, r0, #0
 8006cb4:	d001      	beq.n	8006cba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x8a>
 8006cb6:	2307      	movs	r3, #7
 8006cb8:	e010      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006cba:	4914      	ldr	r1, [pc, #80]	; (8006d0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8006cbc:	6838      	ldr	r0, [r7, #0]
 8006cbe:	f7f9 fbbf 	bl	8000440 <__aeabi_fcmple>
 8006cc2:	1e03      	subs	r3, r0, #0
 8006cc4:	d001      	beq.n	8006cca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	e008      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006cca:	4911      	ldr	r1, [pc, #68]	; (8006d10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8006ccc:	6838      	ldr	r0, [r7, #0]
 8006cce:	f7f9 fbb7 	bl	8000440 <__aeabi_fcmple>
 8006cd2:	1e03      	subs	r3, r0, #0
 8006cd4:	d001      	beq.n	8006cda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8006cd6:	2309      	movs	r3, #9
 8006cd8:	e000      	b.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006cda:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	212b      	movs	r1, #43	; 0x2b
 8006ce0:	5453      	strb	r3, [r2, r1]
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b002      	add	sp, #8
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	3fcccccd 	.word	0x3fcccccd
 8006cf0:	41480000 	.word	0x41480000
 8006cf4:	41d00000 	.word	0x41d00000
 8006cf8:	42500000 	.word	0x42500000
 8006cfc:	42d00000 	.word	0x42d00000
 8006d00:	43500000 	.word	0x43500000
 8006d04:	43d08000 	.word	0x43d08000
 8006d08:	44504000 	.word	0x44504000
 8006d0c:	44d06000 	.word	0x44d06000
 8006d10:	45505000 	.word	0x45505000

08006d14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006d1e:	492f      	ldr	r1, [pc, #188]	; (8006ddc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc8>)
 8006d20:	6838      	ldr	r0, [r7, #0]
 8006d22:	f7f9 fb8d 	bl	8000440 <__aeabi_fcmple>
 8006d26:	1e03      	subs	r3, r0, #0
 8006d28:	d001      	beq.n	8006d2e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1a>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e040      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d2e:	492c      	ldr	r1, [pc, #176]	; (8006de0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>)
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f7f9 fb85 	bl	8000440 <__aeabi_fcmple>
 8006d36:	1e03      	subs	r3, r0, #0
 8006d38:	d001      	beq.n	8006d3e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2a>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e038      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d3e:	4929      	ldr	r1, [pc, #164]	; (8006de4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd0>)
 8006d40:	6838      	ldr	r0, [r7, #0]
 8006d42:	f7f9 fb7d 	bl	8000440 <__aeabi_fcmple>
 8006d46:	1e03      	subs	r3, r0, #0
 8006d48:	d001      	beq.n	8006d4e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x3a>
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e030      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d4e:	4926      	ldr	r1, [pc, #152]	; (8006de8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8006d50:	6838      	ldr	r0, [r7, #0]
 8006d52:	f7f9 fb75 	bl	8000440 <__aeabi_fcmple>
 8006d56:	1e03      	subs	r3, r0, #0
 8006d58:	d001      	beq.n	8006d5e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4a>
 8006d5a:	2304      	movs	r3, #4
 8006d5c:	e028      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d5e:	4923      	ldr	r1, [pc, #140]	; (8006dec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8006d60:	6838      	ldr	r0, [r7, #0]
 8006d62:	f7f9 fb6d 	bl	8000440 <__aeabi_fcmple>
 8006d66:	1e03      	subs	r3, r0, #0
 8006d68:	d001      	beq.n	8006d6e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x5a>
 8006d6a:	2305      	movs	r3, #5
 8006d6c:	e020      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d6e:	4920      	ldr	r1, [pc, #128]	; (8006df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8006d70:	6838      	ldr	r0, [r7, #0]
 8006d72:	f7f9 fb65 	bl	8000440 <__aeabi_fcmple>
 8006d76:	1e03      	subs	r3, r0, #0
 8006d78:	d001      	beq.n	8006d7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x6a>
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	e018      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d7e:	491d      	ldr	r1, [pc, #116]	; (8006df4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8006d80:	6838      	ldr	r0, [r7, #0]
 8006d82:	f7f9 fb5d 	bl	8000440 <__aeabi_fcmple>
 8006d86:	1e03      	subs	r3, r0, #0
 8006d88:	d001      	beq.n	8006d8e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006d8a:	2307      	movs	r3, #7
 8006d8c:	e010      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d8e:	491a      	ldr	r1, [pc, #104]	; (8006df8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8006d90:	6838      	ldr	r0, [r7, #0]
 8006d92:	f7f9 fb55 	bl	8000440 <__aeabi_fcmple>
 8006d96:	1e03      	subs	r3, r0, #0
 8006d98:	d001      	beq.n	8006d9e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8a>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	e008      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006d9e:	4917      	ldr	r1, [pc, #92]	; (8006dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8006da0:	6838      	ldr	r0, [r7, #0]
 8006da2:	f7f9 fb4d 	bl	8000440 <__aeabi_fcmple>
 8006da6:	1e03      	subs	r3, r0, #0
 8006da8:	d001      	beq.n	8006dae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8006daa:	2309      	movs	r3, #9
 8006dac:	e000      	b.n	8006db0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006dae:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006db0:	210f      	movs	r1, #15
 8006db2:	187a      	adds	r2, r7, r1
 8006db4:	7013      	strb	r3, [r2, #0]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	331c      	adds	r3, #28
 8006dba:	001a      	movs	r2, r3
 8006dbc:	187b      	adds	r3, r7, r1
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	0019      	movs	r1, r3
 8006dc2:	0010      	movs	r0, r2
 8006dc4:	f000 fb7e 	bl	80074c4 <lsm6dso_gy_data_rate_set>
 8006dc8:	1e03      	subs	r3, r0, #0
 8006dca:	d002      	beq.n	8006dd2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbe>
  {
    return LSM6DSO_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	425b      	negs	r3, r3
 8006dd0:	e000      	b.n	8006dd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc0>
  }

  return LSM6DSO_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b004      	add	sp, #16
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	41480000 	.word	0x41480000
 8006de0:	41d00000 	.word	0x41d00000
 8006de4:	42500000 	.word	0x42500000
 8006de8:	42d00000 	.word	0x42d00000
 8006dec:	43500000 	.word	0x43500000
 8006df0:	43d08000 	.word	0x43d08000
 8006df4:	44504000 	.word	0x44504000
 8006df8:	44d06000 	.word	0x44d06000
 8006dfc:	45505000 	.word	0x45505000

08006e00 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006e0a:	4928      	ldr	r1, [pc, #160]	; (8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>)
 8006e0c:	6838      	ldr	r0, [r7, #0]
 8006e0e:	f7f9 fb17 	bl	8000440 <__aeabi_fcmple>
 8006e12:	1e03      	subs	r3, r0, #0
 8006e14:	d001      	beq.n	8006e1a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1a>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e040      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e1a:	4925      	ldr	r1, [pc, #148]	; (8006eb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb0>)
 8006e1c:	6838      	ldr	r0, [r7, #0]
 8006e1e:	f7f9 fb0f 	bl	8000440 <__aeabi_fcmple>
 8006e22:	1e03      	subs	r3, r0, #0
 8006e24:	d001      	beq.n	8006e2a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2a>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e038      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e2a:	4922      	ldr	r1, [pc, #136]	; (8006eb4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb4>)
 8006e2c:	6838      	ldr	r0, [r7, #0]
 8006e2e:	f7f9 fb07 	bl	8000440 <__aeabi_fcmple>
 8006e32:	1e03      	subs	r3, r0, #0
 8006e34:	d001      	beq.n	8006e3a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x3a>
 8006e36:	2303      	movs	r3, #3
 8006e38:	e030      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e3a:	491f      	ldr	r1, [pc, #124]	; (8006eb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb8>)
 8006e3c:	6838      	ldr	r0, [r7, #0]
 8006e3e:	f7f9 faff 	bl	8000440 <__aeabi_fcmple>
 8006e42:	1e03      	subs	r3, r0, #0
 8006e44:	d001      	beq.n	8006e4a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4a>
 8006e46:	2304      	movs	r3, #4
 8006e48:	e028      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e4a:	491c      	ldr	r1, [pc, #112]	; (8006ebc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>)
 8006e4c:	6838      	ldr	r0, [r7, #0]
 8006e4e:	f7f9 faf7 	bl	8000440 <__aeabi_fcmple>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d001      	beq.n	8006e5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x5a>
 8006e56:	2305      	movs	r3, #5
 8006e58:	e020      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e5a:	4919      	ldr	r1, [pc, #100]	; (8006ec0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8006e5c:	6838      	ldr	r0, [r7, #0]
 8006e5e:	f7f9 faef 	bl	8000440 <__aeabi_fcmple>
 8006e62:	1e03      	subs	r3, r0, #0
 8006e64:	d001      	beq.n	8006e6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x6a>
 8006e66:	2306      	movs	r3, #6
 8006e68:	e018      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e6a:	4916      	ldr	r1, [pc, #88]	; (8006ec4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8006e6c:	6838      	ldr	r0, [r7, #0]
 8006e6e:	f7f9 fae7 	bl	8000440 <__aeabi_fcmple>
 8006e72:	1e03      	subs	r3, r0, #0
 8006e74:	d001      	beq.n	8006e7a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006e76:	2307      	movs	r3, #7
 8006e78:	e010      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e7a:	4913      	ldr	r1, [pc, #76]	; (8006ec8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7f9 fadf 	bl	8000440 <__aeabi_fcmple>
 8006e82:	1e03      	subs	r3, r0, #0
 8006e84:	d001      	beq.n	8006e8a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x8a>
 8006e86:	2308      	movs	r3, #8
 8006e88:	e008      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e8a:	4910      	ldr	r1, [pc, #64]	; (8006ecc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8006e8c:	6838      	ldr	r0, [r7, #0]
 8006e8e:	f7f9 fad7 	bl	8000440 <__aeabi_fcmple>
 8006e92:	1e03      	subs	r3, r0, #0
 8006e94:	d001      	beq.n	8006e9a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8006e96:	2309      	movs	r3, #9
 8006e98:	e000      	b.n	8006e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006e9a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	212c      	movs	r1, #44	; 0x2c
 8006ea0:	5453      	strb	r3, [r2, r1]
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	41480000 	.word	0x41480000
 8006eb0:	41d00000 	.word	0x41d00000
 8006eb4:	42500000 	.word	0x42500000
 8006eb8:	42d00000 	.word	0x42d00000
 8006ebc:	43500000 	.word	0x43500000
 8006ec0:	43d08000 	.word	0x43d08000
 8006ec4:	44504000 	.word	0x44504000
 8006ec8:	44d06000 	.word	0x44d06000
 8006ecc:	45505000 	.word	0x45505000

08006ed0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	0008      	movs	r0, r1
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	0019      	movs	r1, r3
 8006ede:	250b      	movs	r5, #11
 8006ee0:	197b      	adds	r3, r7, r5
 8006ee2:	1c02      	adds	r2, r0, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	2608      	movs	r6, #8
 8006ee8:	19bb      	adds	r3, r7, r6
 8006eea:	1c0a      	adds	r2, r1, #0
 8006eec:	801a      	strh	r2, [r3, #0]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	695c      	ldr	r4, [r3, #20]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	b298      	uxth	r0, r3
 8006efc:	197b      	adds	r3, r7, r5
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b299      	uxth	r1, r3
 8006f02:	19bb      	adds	r3, r7, r6
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	47a0      	blx	r4
 8006f0a:	0003      	movs	r3, r0
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b007      	add	sp, #28
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f14 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	0008      	movs	r0, r1
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	0019      	movs	r1, r3
 8006f22:	250b      	movs	r5, #11
 8006f24:	197b      	adds	r3, r7, r5
 8006f26:	1c02      	adds	r2, r0, #0
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	2608      	movs	r6, #8
 8006f2c:	19bb      	adds	r3, r7, r6
 8006f2e:	1c0a      	adds	r2, r1, #0
 8006f30:	801a      	strh	r2, [r3, #0]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	691c      	ldr	r4, [r3, #16]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	7b1b      	ldrb	r3, [r3, #12]
 8006f3e:	b298      	uxth	r0, r3
 8006f40:	197b      	adds	r3, r7, r5
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	b299      	uxth	r1, r3
 8006f46:	19bb      	adds	r3, r7, r6
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	47a0      	blx	r4
 8006f4e:	0003      	movs	r3, r0
}
 8006f50:	0018      	movs	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b007      	add	sp, #28
 8006f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f58 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	0008      	movs	r0, r1
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	0019      	movs	r1, r3
 8006f66:	260b      	movs	r6, #11
 8006f68:	19bb      	adds	r3, r7, r6
 8006f6a:	1c02      	adds	r2, r0, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	2508      	movs	r5, #8
 8006f70:	197b      	adds	r3, r7, r5
 8006f72:	1c0a      	adds	r2, r1, #0
 8006f74:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685c      	ldr	r4, [r3, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6898      	ldr	r0, [r3, #8]
 8006f7e:	197b      	adds	r3, r7, r5
 8006f80:	881d      	ldrh	r5, [r3, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	19bb      	adds	r3, r7, r6
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	002b      	movs	r3, r5
 8006f8a:	47a0      	blx	r4
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	617b      	str	r3, [r7, #20]

  return ret;
 8006f90:	697b      	ldr	r3, [r7, #20]
}
 8006f92:	0018      	movs	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b007      	add	sp, #28
 8006f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f9a <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	0008      	movs	r0, r1
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	260b      	movs	r6, #11
 8006faa:	19bb      	adds	r3, r7, r6
 8006fac:	1c02      	adds	r2, r0, #0
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	2508      	movs	r5, #8
 8006fb2:	197b      	adds	r3, r7, r5
 8006fb4:	1c0a      	adds	r2, r1, #0
 8006fb6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681c      	ldr	r4, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6898      	ldr	r0, [r3, #8]
 8006fc0:	197b      	adds	r3, r7, r5
 8006fc2:	881d      	ldrh	r5, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	19bb      	adds	r3, r7, r6
 8006fc8:	7819      	ldrb	r1, [r3, #0]
 8006fca:	002b      	movs	r3, r5
 8006fcc:	47a0      	blx	r4
 8006fce:	0003      	movs	r3, r0
 8006fd0:	617b      	str	r3, [r7, #20]

  return ret;
 8006fd2:	697b      	ldr	r3, [r7, #20]
}
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b007      	add	sp, #28
 8006fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fdc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	000a      	movs	r2, r1
 8006fe6:	1cfb      	adds	r3, r7, #3
 8006fe8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006fea:	2408      	movs	r4, #8
 8006fec:	193a      	adds	r2, r7, r4
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	2110      	movs	r1, #16
 8006ff4:	f7ff ffb0 	bl	8006f58 <lsm6dso_read_reg>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d117      	bne.n	8007032 <lsm6dso_xl_full_scale_set+0x56>
  {
    reg.fs_xl = (uint8_t) val;
 8007002:	1cfb      	adds	r3, r7, #3
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2203      	movs	r2, #3
 8007008:	4013      	ands	r3, r2
 800700a:	b2da      	uxtb	r2, r3
 800700c:	193b      	adds	r3, r7, r4
 800700e:	2103      	movs	r1, #3
 8007010:	400a      	ands	r2, r1
 8007012:	0090      	lsls	r0, r2, #2
 8007014:	781a      	ldrb	r2, [r3, #0]
 8007016:	210c      	movs	r1, #12
 8007018:	438a      	bics	r2, r1
 800701a:	1c11      	adds	r1, r2, #0
 800701c:	1c02      	adds	r2, r0, #0
 800701e:	430a      	orrs	r2, r1
 8007020:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007022:	193a      	adds	r2, r7, r4
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	2301      	movs	r3, #1
 8007028:	2110      	movs	r1, #16
 800702a:	f7ff ffb6 	bl	8006f9a <lsm6dso_write_reg>
 800702e:	0003      	movs	r3, r0
 8007030:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007032:	68fb      	ldr	r3, [r7, #12]
}
 8007034:	0018      	movs	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	b005      	add	sp, #20
 800703a:	bd90      	pop	{r4, r7, pc}

0800703c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007046:	2408      	movs	r4, #8
 8007048:	193a      	adds	r2, r7, r4
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	2301      	movs	r3, #1
 800704e:	2110      	movs	r1, #16
 8007050:	f7ff ff82 	bl	8006f58 <lsm6dso_read_reg>
 8007054:	0003      	movs	r3, r0
 8007056:	60fb      	str	r3, [r7, #12]

  switch (reg.fs_xl)
 8007058:	193b      	adds	r3, r7, r4
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	071b      	lsls	r3, r3, #28
 800705e:	0f9b      	lsrs	r3, r3, #30
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b03      	cmp	r3, #3
 8007064:	d014      	beq.n	8007090 <lsm6dso_xl_full_scale_get+0x54>
 8007066:	dc17      	bgt.n	8007098 <lsm6dso_xl_full_scale_get+0x5c>
 8007068:	2b02      	cmp	r3, #2
 800706a:	d00d      	beq.n	8007088 <lsm6dso_xl_full_scale_get+0x4c>
 800706c:	dc14      	bgt.n	8007098 <lsm6dso_xl_full_scale_get+0x5c>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <lsm6dso_xl_full_scale_get+0x3c>
 8007072:	2b01      	cmp	r3, #1
 8007074:	d004      	beq.n	8007080 <lsm6dso_xl_full_scale_get+0x44>
 8007076:	e00f      	b.n	8007098 <lsm6dso_xl_full_scale_get+0x5c>
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
      break;
 800707e:	e00f      	b.n	80070a0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2201      	movs	r2, #1
 8007084:	701a      	strb	r2, [r3, #0]
      break;
 8007086:	e00b      	b.n	80070a0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2202      	movs	r2, #2
 800708c:	701a      	strb	r2, [r3, #0]
      break;
 800708e:	e007      	b.n	80070a0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2203      	movs	r2, #3
 8007094:	701a      	strb	r2, [r3, #0]
      break;
 8007096:	e003      	b.n	80070a0 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
      break;
 800709e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	0018      	movs	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b005      	add	sp, #20
 80070a8:	bd90      	pop	{r4, r7, pc}

080070aa <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80070aa:	b590      	push	{r4, r7, lr}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	000a      	movs	r2, r1
 80070b4:	1cfb      	adds	r3, r7, #3
 80070b6:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
 80070b8:	2317      	movs	r3, #23
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	1cfa      	adds	r2, r7, #3
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80070c2:	240c      	movs	r4, #12
 80070c4:	193a      	adds	r2, r7, r4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0011      	movs	r1, r2
 80070ca:	0018      	movs	r0, r3
 80070cc:	f000 fd69 	bl	8007ba2 <lsm6dso_fsm_enable_get>
 80070d0:	0003      	movs	r3, r0
 80070d2:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d000      	beq.n	80070dc <lsm6dso_xl_data_rate_set+0x32>
 80070da:	e105      	b.n	80072e8 <lsm6dso_xl_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070dc:	0021      	movs	r1, r4
 80070de:	187b      	adds	r3, r7, r1
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	0fdb      	lsrs	r3, r3, #31
 80070e6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80070e8:	187b      	adds	r3, r7, r1
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	079b      	lsls	r3, r3, #30
 80070ee:	0fdb      	lsrs	r3, r3, #31
 80070f0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070f2:	4313      	orrs	r3, r2
 80070f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80070f6:	187b      	adds	r3, r7, r1
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	075b      	lsls	r3, r3, #29
 80070fc:	0fdb      	lsrs	r3, r3, #31
 80070fe:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007100:	4313      	orrs	r3, r2
 8007102:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007104:	187b      	adds	r3, r7, r1
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	071b      	lsls	r3, r3, #28
 800710a:	0fdb      	lsrs	r3, r3, #31
 800710c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800710e:	4313      	orrs	r3, r2
 8007110:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007112:	187b      	adds	r3, r7, r1
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	06db      	lsls	r3, r3, #27
 8007118:	0fdb      	lsrs	r3, r3, #31
 800711a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800711c:	4313      	orrs	r3, r2
 800711e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007120:	187b      	adds	r3, r7, r1
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	069b      	lsls	r3, r3, #26
 8007126:	0fdb      	lsrs	r3, r3, #31
 8007128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800712a:	4313      	orrs	r3, r2
 800712c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800712e:	187b      	adds	r3, r7, r1
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	065b      	lsls	r3, r3, #25
 8007134:	0fdb      	lsrs	r3, r3, #31
 8007136:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007138:	4313      	orrs	r3, r2
 800713a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800713c:	187b      	adds	r3, r7, r1
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	0fdb      	lsrs	r3, r3, #31
 8007144:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007146:	4313      	orrs	r3, r2
 8007148:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800714a:	187b      	adds	r3, r7, r1
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	07db      	lsls	r3, r3, #31
 8007150:	0fdb      	lsrs	r3, r3, #31
 8007152:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007154:	4313      	orrs	r3, r2
 8007156:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007158:	187b      	adds	r3, r7, r1
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	079b      	lsls	r3, r3, #30
 800715e:	0fdb      	lsrs	r3, r3, #31
 8007160:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007162:	4313      	orrs	r3, r2
 8007164:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007166:	187b      	adds	r3, r7, r1
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	075b      	lsls	r3, r3, #29
 800716c:	0fdb      	lsrs	r3, r3, #31
 800716e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007170:	4313      	orrs	r3, r2
 8007172:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007174:	187b      	adds	r3, r7, r1
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	071b      	lsls	r3, r3, #28
 800717a:	0fdb      	lsrs	r3, r3, #31
 800717c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800717e:	4313      	orrs	r3, r2
 8007180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007182:	187b      	adds	r3, r7, r1
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	06db      	lsls	r3, r3, #27
 8007188:	0fdb      	lsrs	r3, r3, #31
 800718a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800718c:	4313      	orrs	r3, r2
 800718e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007190:	187b      	adds	r3, r7, r1
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	069b      	lsls	r3, r3, #26
 8007196:	0fdb      	lsrs	r3, r3, #31
 8007198:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800719a:	4313      	orrs	r3, r2
 800719c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	065b      	lsls	r3, r3, #25
 80071a4:	0fdb      	lsrs	r3, r3, #31
 80071a6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80071ac:	187b      	adds	r3, r7, r1
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	061b      	lsls	r3, r3, #24
 80071b2:	0fdb      	lsrs	r3, r3, #31
 80071b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d000      	beq.n	80071c0 <lsm6dso_xl_data_rate_set+0x116>
 80071be:	e093      	b.n	80072e8 <lsm6dso_xl_data_rate_set+0x23e>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80071c0:	240b      	movs	r4, #11
 80071c2:	193a      	adds	r2, r7, r4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	0011      	movs	r1, r2
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fd10 	bl	8007bee <lsm6dso_fsm_data_rate_get>
 80071ce:	0003      	movs	r3, r0
 80071d0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d000      	beq.n	80071da <lsm6dso_xl_data_rate_set+0x130>
 80071d8:	e086      	b.n	80072e8 <lsm6dso_xl_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80071da:	193b      	adds	r3, r7, r4
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d052      	beq.n	8007288 <lsm6dso_xl_data_rate_set+0x1de>
 80071e2:	dd00      	ble.n	80071e6 <lsm6dso_xl_data_rate_set+0x13c>
 80071e4:	e07a      	b.n	80072dc <lsm6dso_xl_data_rate_set+0x232>
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d02d      	beq.n	8007246 <lsm6dso_xl_data_rate_set+0x19c>
 80071ea:	dd00      	ble.n	80071ee <lsm6dso_xl_data_rate_set+0x144>
 80071ec:	e076      	b.n	80072dc <lsm6dso_xl_data_rate_set+0x232>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <lsm6dso_xl_data_rate_set+0x14e>
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d00f      	beq.n	8007216 <lsm6dso_xl_data_rate_set+0x16c>
 80071f6:	e071      	b.n	80072dc <lsm6dso_xl_data_rate_set+0x232>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80071f8:	1cfb      	adds	r3, r7, #3
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <lsm6dso_xl_data_rate_set+0x160>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007200:	2317      	movs	r3, #23
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	2201      	movs	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007208:	e06f      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 800720a:	2317      	movs	r3, #23
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	1cfa      	adds	r2, r7, #3
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	701a      	strb	r2, [r3, #0]
            break;
 8007214:	e069      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007216:	1cfb      	adds	r3, r7, #3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800721e:	2317      	movs	r3, #23
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	2202      	movs	r2, #2
 8007224:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007226:	e060      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007228:	1cfb      	adds	r3, r7, #3
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d104      	bne.n	800723a <lsm6dso_xl_data_rate_set+0x190>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007230:	2317      	movs	r3, #23
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	2202      	movs	r2, #2
 8007236:	701a      	strb	r2, [r3, #0]
            break;
 8007238:	e057      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 800723a:	2317      	movs	r3, #23
 800723c:	18fb      	adds	r3, r7, r3
 800723e:	1cfa      	adds	r2, r7, #3
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
            break;
 8007244:	e051      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007246:	1cfb      	adds	r3, r7, #3
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <lsm6dso_xl_data_rate_set+0x1ae>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800724e:	2317      	movs	r3, #23
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	2203      	movs	r2, #3
 8007254:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007256:	e048      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007258:	1cfb      	adds	r3, r7, #3
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d104      	bne.n	800726a <lsm6dso_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007260:	2317      	movs	r3, #23
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	2203      	movs	r2, #3
 8007266:	701a      	strb	r2, [r3, #0]
            break;
 8007268:	e03f      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800726a:	1cfb      	adds	r3, r7, #3
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d104      	bne.n	800727c <lsm6dso_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007272:	2317      	movs	r3, #23
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	2203      	movs	r2, #3
 8007278:	701a      	strb	r2, [r3, #0]
            break;
 800727a:	e036      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 800727c:	2317      	movs	r3, #23
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	1cfa      	adds	r2, r7, #3
 8007282:	7812      	ldrb	r2, [r2, #0]
 8007284:	701a      	strb	r2, [r3, #0]
            break;
 8007286:	e030      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007288:	1cfb      	adds	r3, r7, #3
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <lsm6dso_xl_data_rate_set+0x1f0>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007290:	2317      	movs	r3, #23
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	2204      	movs	r2, #4
 8007296:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007298:	e027      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800729a:	1cfb      	adds	r3, r7, #3
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d104      	bne.n	80072ac <lsm6dso_xl_data_rate_set+0x202>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80072a2:	2317      	movs	r3, #23
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	2204      	movs	r2, #4
 80072a8:	701a      	strb	r2, [r3, #0]
            break;
 80072aa:	e01e      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80072ac:	1cfb      	adds	r3, r7, #3
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d104      	bne.n	80072be <lsm6dso_xl_data_rate_set+0x214>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80072b4:	2317      	movs	r3, #23
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	2204      	movs	r2, #4
 80072ba:	701a      	strb	r2, [r3, #0]
            break;
 80072bc:	e015      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80072be:	1cfb      	adds	r3, r7, #3
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d104      	bne.n	80072d0 <lsm6dso_xl_data_rate_set+0x226>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80072c6:	2317      	movs	r3, #23
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	2204      	movs	r2, #4
 80072cc:	701a      	strb	r2, [r3, #0]
            break;
 80072ce:	e00c      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 80072d0:	2317      	movs	r3, #23
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	1cfa      	adds	r2, r7, #3
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	701a      	strb	r2, [r3, #0]
            break;
 80072da:	e006      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>

          default:
            odr_xl = val;
 80072dc:	2317      	movs	r3, #23
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	1cfa      	adds	r2, r7, #3
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	701a      	strb	r2, [r3, #0]
            break;
 80072e6:	e000      	b.n	80072ea <lsm6dso_xl_data_rate_set+0x240>
        }
      }
 80072e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  if (ret == 0)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d108      	bne.n	8007302 <lsm6dso_xl_data_rate_set+0x258>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80072f0:	2308      	movs	r3, #8
 80072f2:	18fa      	adds	r2, r7, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	2301      	movs	r3, #1
 80072f8:	2110      	movs	r1, #16
 80072fa:	f7ff fe2d 	bl	8006f58 <lsm6dso_read_reg>
 80072fe:	0003      	movs	r3, r0
 8007300:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d117      	bne.n	8007338 <lsm6dso_xl_data_rate_set+0x28e>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007308:	2317      	movs	r3, #23
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	220f      	movs	r2, #15
 8007310:	4013      	ands	r3, r2
 8007312:	b2da      	uxtb	r2, r3
 8007314:	2408      	movs	r4, #8
 8007316:	193b      	adds	r3, r7, r4
 8007318:	0110      	lsls	r0, r2, #4
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	210f      	movs	r1, #15
 800731e:	400a      	ands	r2, r1
 8007320:	1c11      	adds	r1, r2, #0
 8007322:	1c02      	adds	r2, r0, #0
 8007324:	430a      	orrs	r2, r1
 8007326:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007328:	193a      	adds	r2, r7, r4
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	2301      	movs	r3, #1
 800732e:	2110      	movs	r1, #16
 8007330:	f7ff fe33 	bl	8006f9a <lsm6dso_write_reg>
 8007334:	0003      	movs	r3, r0
 8007336:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8007338:	693b      	ldr	r3, [r7, #16]
}
 800733a:	0018      	movs	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	b007      	add	sp, #28
 8007340:	bd90      	pop	{r4, r7, pc}
	...

08007344 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007344:	b590      	push	{r4, r7, lr}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800734e:	2408      	movs	r4, #8
 8007350:	193a      	adds	r2, r7, r4
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	2301      	movs	r3, #1
 8007356:	2110      	movs	r1, #16
 8007358:	f7ff fdfe 	bl	8006f58 <lsm6dso_read_reg>
 800735c:	0003      	movs	r3, r0
 800735e:	60fb      	str	r3, [r7, #12]

  switch (reg.odr_xl)
 8007360:	193b      	adds	r3, r7, r4
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	061b      	lsls	r3, r3, #24
 8007366:	0f1b      	lsrs	r3, r3, #28
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b0b      	cmp	r3, #11
 800736c:	d834      	bhi.n	80073d8 <lsm6dso_xl_data_rate_get+0x94>
 800736e:	009a      	lsls	r2, r3, #2
 8007370:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <lsm6dso_xl_data_rate_get+0xa8>)
 8007372:	18d3      	adds	r3, r2, r3
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	469f      	mov	pc, r3
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e02f      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e02b      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2202      	movs	r2, #2
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e027      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2203      	movs	r2, #3
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e023      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2204      	movs	r2, #4
 800739c:	701a      	strb	r2, [r3, #0]
      break;
 800739e:	e01f      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2205      	movs	r2, #5
 80073a4:	701a      	strb	r2, [r3, #0]
      break;
 80073a6:	e01b      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2206      	movs	r2, #6
 80073ac:	701a      	strb	r2, [r3, #0]
      break;
 80073ae:	e017      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2207      	movs	r2, #7
 80073b4:	701a      	strb	r2, [r3, #0]
      break;
 80073b6:	e013      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2208      	movs	r2, #8
 80073bc:	701a      	strb	r2, [r3, #0]
      break;
 80073be:	e00f      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2209      	movs	r2, #9
 80073c4:	701a      	strb	r2, [r3, #0]
      break;
 80073c6:	e00b      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	220a      	movs	r2, #10
 80073cc:	701a      	strb	r2, [r3, #0]
      break;
 80073ce:	e007      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	220b      	movs	r2, #11
 80073d4:	701a      	strb	r2, [r3, #0]
      break;
 80073d6:	e003      	b.n	80073e0 <lsm6dso_xl_data_rate_get+0x9c>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
      break;
 80073de:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80073e0:	68fb      	ldr	r3, [r7, #12]
}
 80073e2:	0018      	movs	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b005      	add	sp, #20
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	08015850 	.word	0x08015850

080073f0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	000a      	movs	r2, r1
 80073fa:	1cfb      	adds	r3, r7, #3
 80073fc:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80073fe:	2408      	movs	r4, #8
 8007400:	193a      	adds	r2, r7, r4
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	2301      	movs	r3, #1
 8007406:	2111      	movs	r1, #17
 8007408:	f7ff fda6 	bl	8006f58 <lsm6dso_read_reg>
 800740c:	0003      	movs	r3, r0
 800740e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d117      	bne.n	8007446 <lsm6dso_gy_full_scale_set+0x56>
  {
    reg.fs_g = (uint8_t) val;
 8007416:	1cfb      	adds	r3, r7, #3
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2207      	movs	r2, #7
 800741c:	4013      	ands	r3, r2
 800741e:	b2da      	uxtb	r2, r3
 8007420:	193b      	adds	r3, r7, r4
 8007422:	2107      	movs	r1, #7
 8007424:	400a      	ands	r2, r1
 8007426:	1890      	adds	r0, r2, r2
 8007428:	781a      	ldrb	r2, [r3, #0]
 800742a:	210e      	movs	r1, #14
 800742c:	438a      	bics	r2, r1
 800742e:	1c11      	adds	r1, r2, #0
 8007430:	1c02      	adds	r2, r0, #0
 8007432:	430a      	orrs	r2, r1
 8007434:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007436:	193a      	adds	r2, r7, r4
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	2301      	movs	r3, #1
 800743c:	2111      	movs	r1, #17
 800743e:	f7ff fdac 	bl	8006f9a <lsm6dso_write_reg>
 8007442:	0003      	movs	r3, r0
 8007444:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b005      	add	sp, #20
 800744e:	bd90      	pop	{r4, r7, pc}

08007450 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800745a:	2408      	movs	r4, #8
 800745c:	193a      	adds	r2, r7, r4
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	2301      	movs	r3, #1
 8007462:	2111      	movs	r1, #17
 8007464:	f7ff fd78 	bl	8006f58 <lsm6dso_read_reg>
 8007468:	0003      	movs	r3, r0
 800746a:	60fb      	str	r3, [r7, #12]

  switch (reg.fs_g)
 800746c:	193b      	adds	r3, r7, r4
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	071b      	lsls	r3, r3, #28
 8007472:	0f5b      	lsrs	r3, r3, #29
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b06      	cmp	r3, #6
 8007478:	d818      	bhi.n	80074ac <lsm6dso_gy_full_scale_get+0x5c>
 800747a:	009a      	lsls	r2, r3, #2
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <lsm6dso_gy_full_scale_get+0x70>)
 800747e:	18d3      	adds	r3, r2, r3
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	469f      	mov	pc, r3
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
      break;
 800748a:	e013      	b.n	80074b4 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]
      break;
 8007492:	e00f      	b.n	80074b4 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
      break;
 800749a:	e00b      	b.n	80074b4 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2204      	movs	r2, #4
 80074a0:	701a      	strb	r2, [r3, #0]
      break;
 80074a2:	e007      	b.n	80074b4 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2206      	movs	r2, #6
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	e003      	b.n	80074b4 <lsm6dso_gy_full_scale_get+0x64>

    default:
      *val = LSM6DSO_250dps;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80074b4:	68fb      	ldr	r3, [r7, #12]
}
 80074b6:	0018      	movs	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b005      	add	sp, #20
 80074bc:	bd90      	pop	{r4, r7, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	08015880 	.word	0x08015880

080074c4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	000a      	movs	r2, r1
 80074ce:	1cfb      	adds	r3, r7, #3
 80074d0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
 80074d2:	2317      	movs	r3, #23
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	1cfa      	adds	r2, r7, #3
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80074dc:	240c      	movs	r4, #12
 80074de:	193a      	adds	r2, r7, r4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	0011      	movs	r1, r2
 80074e4:	0018      	movs	r0, r3
 80074e6:	f000 fb5c 	bl	8007ba2 <lsm6dso_fsm_enable_get>
 80074ea:	0003      	movs	r3, r0
 80074ec:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d000      	beq.n	80074f6 <lsm6dso_gy_data_rate_set+0x32>
 80074f4:	e105      	b.n	8007702 <lsm6dso_gy_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074f6:	0021      	movs	r1, r4
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	07db      	lsls	r3, r3, #31
 80074fe:	0fdb      	lsrs	r3, r3, #31
 8007500:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007502:	187b      	adds	r3, r7, r1
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	079b      	lsls	r3, r3, #30
 8007508:	0fdb      	lsrs	r3, r3, #31
 800750a:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800750c:	4313      	orrs	r3, r2
 800750e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007510:	187b      	adds	r3, r7, r1
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	075b      	lsls	r3, r3, #29
 8007516:	0fdb      	lsrs	r3, r3, #31
 8007518:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800751a:	4313      	orrs	r3, r2
 800751c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800751e:	187b      	adds	r3, r7, r1
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	071b      	lsls	r3, r3, #28
 8007524:	0fdb      	lsrs	r3, r3, #31
 8007526:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007528:	4313      	orrs	r3, r2
 800752a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800752c:	187b      	adds	r3, r7, r1
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	06db      	lsls	r3, r3, #27
 8007532:	0fdb      	lsrs	r3, r3, #31
 8007534:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007536:	4313      	orrs	r3, r2
 8007538:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800753a:	187b      	adds	r3, r7, r1
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	069b      	lsls	r3, r3, #26
 8007540:	0fdb      	lsrs	r3, r3, #31
 8007542:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007544:	4313      	orrs	r3, r2
 8007546:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007548:	187b      	adds	r3, r7, r1
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	065b      	lsls	r3, r3, #25
 800754e:	0fdb      	lsrs	r3, r3, #31
 8007550:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007552:	4313      	orrs	r3, r2
 8007554:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007556:	187b      	adds	r3, r7, r1
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	0fdb      	lsrs	r3, r3, #31
 800755e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007560:	4313      	orrs	r3, r2
 8007562:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007564:	187b      	adds	r3, r7, r1
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	07db      	lsls	r3, r3, #31
 800756a:	0fdb      	lsrs	r3, r3, #31
 800756c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800756e:	4313      	orrs	r3, r2
 8007570:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007572:	187b      	adds	r3, r7, r1
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	079b      	lsls	r3, r3, #30
 8007578:	0fdb      	lsrs	r3, r3, #31
 800757a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800757c:	4313      	orrs	r3, r2
 800757e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007580:	187b      	adds	r3, r7, r1
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	075b      	lsls	r3, r3, #29
 8007586:	0fdb      	lsrs	r3, r3, #31
 8007588:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800758a:	4313      	orrs	r3, r2
 800758c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800758e:	187b      	adds	r3, r7, r1
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	071b      	lsls	r3, r3, #28
 8007594:	0fdb      	lsrs	r3, r3, #31
 8007596:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007598:	4313      	orrs	r3, r2
 800759a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800759c:	187b      	adds	r3, r7, r1
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	06db      	lsls	r3, r3, #27
 80075a2:	0fdb      	lsrs	r3, r3, #31
 80075a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80075aa:	187b      	adds	r3, r7, r1
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	069b      	lsls	r3, r3, #26
 80075b0:	0fdb      	lsrs	r3, r3, #31
 80075b2:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80075b8:	187b      	adds	r3, r7, r1
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	065b      	lsls	r3, r3, #25
 80075be:	0fdb      	lsrs	r3, r3, #31
 80075c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80075c2:	4313      	orrs	r3, r2
 80075c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80075c6:	187b      	adds	r3, r7, r1
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	0fdb      	lsrs	r3, r3, #31
 80075ce:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d000      	beq.n	80075da <lsm6dso_gy_data_rate_set+0x116>
 80075d8:	e093      	b.n	8007702 <lsm6dso_gy_data_rate_set+0x23e>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80075da:	240b      	movs	r4, #11
 80075dc:	193a      	adds	r2, r7, r4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0011      	movs	r1, r2
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 fb03 	bl	8007bee <lsm6dso_fsm_data_rate_get>
 80075e8:	0003      	movs	r3, r0
 80075ea:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d000      	beq.n	80075f4 <lsm6dso_gy_data_rate_set+0x130>
 80075f2:	e086      	b.n	8007702 <lsm6dso_gy_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d052      	beq.n	80076a2 <lsm6dso_gy_data_rate_set+0x1de>
 80075fc:	dd00      	ble.n	8007600 <lsm6dso_gy_data_rate_set+0x13c>
 80075fe:	e07a      	b.n	80076f6 <lsm6dso_gy_data_rate_set+0x232>
 8007600:	2b02      	cmp	r3, #2
 8007602:	d02d      	beq.n	8007660 <lsm6dso_gy_data_rate_set+0x19c>
 8007604:	dd00      	ble.n	8007608 <lsm6dso_gy_data_rate_set+0x144>
 8007606:	e076      	b.n	80076f6 <lsm6dso_gy_data_rate_set+0x232>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <lsm6dso_gy_data_rate_set+0x14e>
 800760c:	2b01      	cmp	r3, #1
 800760e:	d00f      	beq.n	8007630 <lsm6dso_gy_data_rate_set+0x16c>
 8007610:	e071      	b.n	80076f6 <lsm6dso_gy_data_rate_set+0x232>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007612:	1cfb      	adds	r3, r7, #3
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <lsm6dso_gy_data_rate_set+0x160>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800761a:	2317      	movs	r3, #23
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	2201      	movs	r2, #1
 8007620:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8007622:	e06f      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 8007624:	2317      	movs	r3, #23
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	1cfa      	adds	r2, r7, #3
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	701a      	strb	r2, [r3, #0]
            break;
 800762e:	e069      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007630:	1cfb      	adds	r3, r7, #3
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007638:	2317      	movs	r3, #23
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	2202      	movs	r2, #2
 800763e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8007640:	e060      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007642:	1cfb      	adds	r3, r7, #3
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d104      	bne.n	8007654 <lsm6dso_gy_data_rate_set+0x190>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 800764a:	2317      	movs	r3, #23
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	2202      	movs	r2, #2
 8007650:	701a      	strb	r2, [r3, #0]
            break;
 8007652:	e057      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 8007654:	2317      	movs	r3, #23
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	1cfa      	adds	r2, r7, #3
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	701a      	strb	r2, [r3, #0]
            break;
 800765e:	e051      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007660:	1cfb      	adds	r3, r7, #3
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <lsm6dso_gy_data_rate_set+0x1ae>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007668:	2317      	movs	r3, #23
 800766a:	18fb      	adds	r3, r7, r3
 800766c:	2203      	movs	r2, #3
 800766e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8007670:	e048      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007672:	1cfb      	adds	r3, r7, #3
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d104      	bne.n	8007684 <lsm6dso_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800767a:	2317      	movs	r3, #23
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	2203      	movs	r2, #3
 8007680:	701a      	strb	r2, [r3, #0]
            break;
 8007682:	e03f      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8007684:	1cfb      	adds	r3, r7, #3
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d104      	bne.n	8007696 <lsm6dso_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800768c:	2317      	movs	r3, #23
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	2203      	movs	r2, #3
 8007692:	701a      	strb	r2, [r3, #0]
            break;
 8007694:	e036      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 8007696:	2317      	movs	r3, #23
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	1cfa      	adds	r2, r7, #3
 800769c:	7812      	ldrb	r2, [r2, #0]
 800769e:	701a      	strb	r2, [r3, #0]
            break;
 80076a0:	e030      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80076a2:	1cfb      	adds	r3, r7, #3
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <lsm6dso_gy_data_rate_set+0x1f0>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076aa:	2317      	movs	r3, #23
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	2204      	movs	r2, #4
 80076b0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80076b2:	e027      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80076b4:	1cfb      	adds	r3, r7, #3
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d104      	bne.n	80076c6 <lsm6dso_gy_data_rate_set+0x202>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076bc:	2317      	movs	r3, #23
 80076be:	18fb      	adds	r3, r7, r3
 80076c0:	2204      	movs	r2, #4
 80076c2:	701a      	strb	r2, [r3, #0]
            break;
 80076c4:	e01e      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80076c6:	1cfb      	adds	r3, r7, #3
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d104      	bne.n	80076d8 <lsm6dso_gy_data_rate_set+0x214>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076ce:	2317      	movs	r3, #23
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	2204      	movs	r2, #4
 80076d4:	701a      	strb	r2, [r3, #0]
            break;
 80076d6:	e015      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 80076d8:	1cfb      	adds	r3, r7, #3
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d104      	bne.n	80076ea <lsm6dso_gy_data_rate_set+0x226>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076e0:	2317      	movs	r3, #23
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	2204      	movs	r2, #4
 80076e6:	701a      	strb	r2, [r3, #0]
            break;
 80076e8:	e00c      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 80076ea:	2317      	movs	r3, #23
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	1cfa      	adds	r2, r7, #3
 80076f0:	7812      	ldrb	r2, [r2, #0]
 80076f2:	701a      	strb	r2, [r3, #0]
            break;
 80076f4:	e006      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>

          default:
            odr_gy = val;
 80076f6:	2317      	movs	r3, #23
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	1cfa      	adds	r2, r7, #3
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	701a      	strb	r2, [r3, #0]
            break;
 8007700:	e000      	b.n	8007704 <lsm6dso_gy_data_rate_set+0x240>
        }
      }
 8007702:	46c0      	nop			; (mov r8, r8)
    }
  }

  if (ret == 0)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <lsm6dso_gy_data_rate_set+0x258>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800770a:	2308      	movs	r3, #8
 800770c:	18fa      	adds	r2, r7, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	2301      	movs	r3, #1
 8007712:	2111      	movs	r1, #17
 8007714:	f7ff fc20 	bl	8006f58 <lsm6dso_read_reg>
 8007718:	0003      	movs	r3, r0
 800771a:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d117      	bne.n	8007752 <lsm6dso_gy_data_rate_set+0x28e>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8007722:	2317      	movs	r3, #23
 8007724:	18fb      	adds	r3, r7, r3
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	220f      	movs	r2, #15
 800772a:	4013      	ands	r3, r2
 800772c:	b2da      	uxtb	r2, r3
 800772e:	2408      	movs	r4, #8
 8007730:	193b      	adds	r3, r7, r4
 8007732:	0110      	lsls	r0, r2, #4
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	210f      	movs	r1, #15
 8007738:	400a      	ands	r2, r1
 800773a:	1c11      	adds	r1, r2, #0
 800773c:	1c02      	adds	r2, r0, #0
 800773e:	430a      	orrs	r2, r1
 8007740:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007742:	193a      	adds	r2, r7, r4
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	2301      	movs	r3, #1
 8007748:	2111      	movs	r1, #17
 800774a:	f7ff fc26 	bl	8006f9a <lsm6dso_write_reg>
 800774e:	0003      	movs	r3, r0
 8007750:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8007752:	693b      	ldr	r3, [r7, #16]
}
 8007754:	0018      	movs	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	b007      	add	sp, #28
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 800775c:	b590      	push	{r4, r7, lr}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007766:	2408      	movs	r4, #8
 8007768:	193a      	adds	r2, r7, r4
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	2301      	movs	r3, #1
 800776e:	2111      	movs	r1, #17
 8007770:	f7ff fbf2 	bl	8006f58 <lsm6dso_read_reg>
 8007774:	0003      	movs	r3, r0
 8007776:	60fb      	str	r3, [r7, #12]

  switch (reg.odr_g)
 8007778:	193b      	adds	r3, r7, r4
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	061b      	lsls	r3, r3, #24
 800777e:	0f1b      	lsrs	r3, r3, #28
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b0a      	cmp	r3, #10
 8007784:	d830      	bhi.n	80077e8 <lsm6dso_gy_data_rate_get+0x8c>
 8007786:	009a      	lsls	r2, r3, #2
 8007788:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <lsm6dso_gy_data_rate_get+0xa0>)
 800778a:	18d3      	adds	r3, r2, r3
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	469f      	mov	pc, r3
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
      break;
 8007796:	e02b      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	701a      	strb	r2, [r3, #0]
      break;
 800779e:	e027      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2202      	movs	r2, #2
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e023      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2203      	movs	r2, #3
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e01f      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2204      	movs	r2, #4
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	e01b      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2205      	movs	r2, #5
 80077bc:	701a      	strb	r2, [r3, #0]
      break;
 80077be:	e017      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2206      	movs	r2, #6
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e013      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2207      	movs	r2, #7
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e00f      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2208      	movs	r2, #8
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e00b      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2209      	movs	r2, #9
 80077dc:	701a      	strb	r2, [r3, #0]
      break;
 80077de:	e007      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	220a      	movs	r2, #10
 80077e4:	701a      	strb	r2, [r3, #0]
      break;
 80077e6:	e003      	b.n	80077f0 <lsm6dso_gy_data_rate_get+0x94>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	701a      	strb	r2, [r3, #0]
      break;
 80077ee:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80077f0:	68fb      	ldr	r3, [r7, #12]
}
 80077f2:	0018      	movs	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b005      	add	sp, #20
 80077f8:	bd90      	pop	{r4, r7, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	0801589c 	.word	0x0801589c

08007800 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	000a      	movs	r2, r1
 800780a:	1cfb      	adds	r3, r7, #3
 800780c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800780e:	2408      	movs	r4, #8
 8007810:	193a      	adds	r2, r7, r4
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	2301      	movs	r3, #1
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff fb9e 	bl	8006f58 <lsm6dso_read_reg>
 800781c:	0003      	movs	r3, r0
 800781e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d117      	bne.n	8007856 <lsm6dso_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8007826:	1cfb      	adds	r3, r7, #3
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2201      	movs	r2, #1
 800782c:	4013      	ands	r3, r2
 800782e:	b2da      	uxtb	r2, r3
 8007830:	193b      	adds	r3, r7, r4
 8007832:	2101      	movs	r1, #1
 8007834:	400a      	ands	r2, r1
 8007836:	0190      	lsls	r0, r2, #6
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	2140      	movs	r1, #64	; 0x40
 800783c:	438a      	bics	r2, r1
 800783e:	1c11      	adds	r1, r2, #0
 8007840:	1c02      	adds	r2, r0, #0
 8007842:	430a      	orrs	r2, r1
 8007844:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007846:	193a      	adds	r2, r7, r4
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	2301      	movs	r3, #1
 800784c:	2112      	movs	r1, #18
 800784e:	f7ff fba4 	bl	8006f9a <lsm6dso_write_reg>
 8007852:	0003      	movs	r3, r0
 8007854:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	0018      	movs	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	b005      	add	sp, #20
 800785e:	bd90      	pop	{r4, r7, pc}

08007860 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800786a:	240c      	movs	r4, #12
 800786c:	193a      	adds	r2, r7, r4
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	2306      	movs	r3, #6
 8007872:	2122      	movs	r1, #34	; 0x22
 8007874:	f7ff fb70 	bl	8006f58 <lsm6dso_read_reg>
 8007878:	0003      	movs	r3, r0
 800787a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800787c:	0021      	movs	r1, r4
 800787e:	187b      	adds	r3, r7, r1
 8007880:	785b      	ldrb	r3, [r3, #1]
 8007882:	b21a      	sxth	r2, r3
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2200      	movs	r2, #0
 800788c:	5e9b      	ldrsh	r3, [r3, r2]
 800788e:	b29b      	uxth	r3, r3
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	b29a      	uxth	r2, r3
 8007894:	187b      	adds	r3, r7, r1
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	18d3      	adds	r3, r2, r3
 800789c:	b29b      	uxth	r3, r3
 800789e:	b21a      	sxth	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	78da      	ldrb	r2, [r3, #3]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3302      	adds	r3, #2
 80078ac:	b212      	sxth	r2, r2
 80078ae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	3302      	adds	r3, #2
 80078b4:	2200      	movs	r2, #0
 80078b6:	5e9b      	ldrsh	r3, [r3, r2]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	b29a      	uxth	r2, r3
 80078be:	187b      	adds	r3, r7, r1
 80078c0:	789b      	ldrb	r3, [r3, #2]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	18d3      	adds	r3, r2, r3
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	3302      	adds	r3, #2
 80078cc:	b212      	sxth	r2, r2
 80078ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	795a      	ldrb	r2, [r3, #5]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	3304      	adds	r3, #4
 80078d8:	b212      	sxth	r2, r2
 80078da:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	3304      	adds	r3, #4
 80078e0:	2200      	movs	r2, #0
 80078e2:	5e9b      	ldrsh	r3, [r3, r2]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	187b      	adds	r3, r7, r1
 80078ec:	791b      	ldrb	r3, [r3, #4]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	3304      	adds	r3, #4
 80078f8:	b212      	sxth	r2, r2
 80078fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80078fc:	697b      	ldr	r3, [r7, #20]
}
 80078fe:	0018      	movs	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	b007      	add	sp, #28
 8007904:	bd90      	pop	{r4, r7, pc}

08007906 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007906:	b590      	push	{r4, r7, lr}
 8007908:	b087      	sub	sp, #28
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007910:	240c      	movs	r4, #12
 8007912:	193a      	adds	r2, r7, r4
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	2306      	movs	r3, #6
 8007918:	2128      	movs	r1, #40	; 0x28
 800791a:	f7ff fb1d 	bl	8006f58 <lsm6dso_read_reg>
 800791e:	0003      	movs	r3, r0
 8007920:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007922:	0021      	movs	r1, r4
 8007924:	187b      	adds	r3, r7, r1
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	b21a      	sxth	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	5e9b      	ldrsh	r3, [r3, r2]
 8007934:	b29b      	uxth	r3, r3
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	b29a      	uxth	r2, r3
 800793a:	187b      	adds	r3, r7, r1
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	18d3      	adds	r3, r2, r3
 8007942:	b29b      	uxth	r3, r3
 8007944:	b21a      	sxth	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800794a:	187b      	adds	r3, r7, r1
 800794c:	78da      	ldrb	r2, [r3, #3]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	3302      	adds	r3, #2
 8007952:	b212      	sxth	r2, r2
 8007954:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	3302      	adds	r3, #2
 800795a:	2200      	movs	r2, #0
 800795c:	5e9b      	ldrsh	r3, [r3, r2]
 800795e:	b29b      	uxth	r3, r3
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	b29a      	uxth	r2, r3
 8007964:	187b      	adds	r3, r7, r1
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	b29b      	uxth	r3, r3
 800796a:	18d3      	adds	r3, r2, r3
 800796c:	b29a      	uxth	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	3302      	adds	r3, #2
 8007972:	b212      	sxth	r2, r2
 8007974:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007976:	187b      	adds	r3, r7, r1
 8007978:	795a      	ldrb	r2, [r3, #5]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	3304      	adds	r3, #4
 800797e:	b212      	sxth	r2, r2
 8007980:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	3304      	adds	r3, #4
 8007986:	2200      	movs	r2, #0
 8007988:	5e9b      	ldrsh	r3, [r3, r2]
 800798a:	b29b      	uxth	r3, r3
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	b29a      	uxth	r2, r3
 8007990:	187b      	adds	r3, r7, r1
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	b29b      	uxth	r3, r3
 8007996:	18d3      	adds	r3, r2, r3
 8007998:	b29a      	uxth	r2, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	3304      	adds	r3, #4
 800799e:	b212      	sxth	r2, r2
 80079a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80079a2:	697b      	ldr	r3, [r7, #20]
}
 80079a4:	0018      	movs	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b007      	add	sp, #28
 80079aa:	bd90      	pop	{r4, r7, pc}

080079ac <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	000a      	movs	r2, r1
 80079b6:	1cfb      	adds	r3, r7, #3
 80079b8:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80079ba:	2408      	movs	r4, #8
 80079bc:	193a      	adds	r2, r7, r4
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	2301      	movs	r3, #1
 80079c2:	2101      	movs	r1, #1
 80079c4:	f7ff fac8 	bl	8006f58 <lsm6dso_read_reg>
 80079c8:	0003      	movs	r3, r0
 80079ca:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d115      	bne.n	80079fe <lsm6dso_mem_bank_set+0x52>
  {
    reg.reg_access = (uint8_t)val;
 80079d2:	1cfb      	adds	r3, r7, #3
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2203      	movs	r2, #3
 80079d8:	4013      	ands	r3, r2
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	193b      	adds	r3, r7, r4
 80079de:	0190      	lsls	r0, r2, #6
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	213f      	movs	r1, #63	; 0x3f
 80079e4:	400a      	ands	r2, r1
 80079e6:	1c11      	adds	r1, r2, #0
 80079e8:	1c02      	adds	r2, r0, #0
 80079ea:	430a      	orrs	r2, r1
 80079ec:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80079ee:	193a      	adds	r2, r7, r4
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	2301      	movs	r3, #1
 80079f4:	2101      	movs	r1, #1
 80079f6:	f7ff fad0 	bl	8006f9a <lsm6dso_write_reg>
 80079fa:	0003      	movs	r3, r0
 80079fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80079fe:	68fb      	ldr	r3, [r7, #12]
}
 8007a00:	0018      	movs	r0, r3
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b005      	add	sp, #20
 8007a06:	bd90      	pop	{r4, r7, pc}

08007a08 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	2301      	movs	r3, #1
 8007a18:	210f      	movs	r1, #15
 8007a1a:	f7ff fa9d 	bl	8006f58 <lsm6dso_read_reg>
 8007a1e:	0003      	movs	r3, r0
 8007a20:	60fb      	str	r3, [r7, #12]

  return ret;
 8007a22:	68fb      	ldr	r3, [r7, #12]
}
 8007a24:	0018      	movs	r0, r3
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b004      	add	sp, #16
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a2c:	b590      	push	{r4, r7, lr}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	000a      	movs	r2, r1
 8007a36:	1cfb      	adds	r3, r7, #3
 8007a38:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007a3a:	2408      	movs	r4, #8
 8007a3c:	193a      	adds	r2, r7, r4
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	2112      	movs	r1, #18
 8007a44:	f7ff fa88 	bl	8006f58 <lsm6dso_read_reg>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d117      	bne.n	8007a82 <lsm6dso_auto_increment_set+0x56>
  {
    reg.if_inc = val;
 8007a52:	1cfb      	adds	r3, r7, #3
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2201      	movs	r2, #1
 8007a58:	4013      	ands	r3, r2
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	193b      	adds	r3, r7, r4
 8007a5e:	2101      	movs	r1, #1
 8007a60:	400a      	ands	r2, r1
 8007a62:	0090      	lsls	r0, r2, #2
 8007a64:	781a      	ldrb	r2, [r3, #0]
 8007a66:	2104      	movs	r1, #4
 8007a68:	438a      	bics	r2, r1
 8007a6a:	1c11      	adds	r1, r2, #0
 8007a6c:	1c02      	adds	r2, r0, #0
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007a72:	193a      	adds	r2, r7, r4
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	2301      	movs	r3, #1
 8007a78:	2112      	movs	r1, #18
 8007a7a:	f7ff fa8e 	bl	8006f9a <lsm6dso_write_reg>
 8007a7e:	0003      	movs	r3, r0
 8007a80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	0018      	movs	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	b005      	add	sp, #20
 8007a8a:	bd90      	pop	{r4, r7, pc}

08007a8c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	000a      	movs	r2, r1
 8007a96:	1cfb      	adds	r3, r7, #3
 8007a98:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a9a:	240c      	movs	r4, #12
 8007a9c:	193a      	adds	r2, r7, r4
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	2118      	movs	r1, #24
 8007aa4:	f7ff fa58 	bl	8006f58 <lsm6dso_read_reg>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d11a      	bne.n	8007ae8 <lsm6dso_i3c_disable_set+0x5c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007ab2:	1cfb      	adds	r3, r7, #3
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	09db      	lsrs	r3, r3, #7
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	1c1a      	adds	r2, r3, #0
 8007abc:	2301      	movs	r3, #1
 8007abe:	4013      	ands	r3, r2
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	400a      	ands	r2, r1
 8007ac8:	1890      	adds	r0, r2, r2
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	2102      	movs	r1, #2
 8007ace:	438a      	bics	r2, r1
 8007ad0:	1c11      	adds	r1, r2, #0
 8007ad2:	1c02      	adds	r2, r0, #0
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007ad8:	193a      	adds	r2, r7, r4
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	2301      	movs	r3, #1
 8007ade:	2118      	movs	r1, #24
 8007ae0:	f7ff fa5b 	bl	8006f9a <lsm6dso_write_reg>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d108      	bne.n	8007b00 <lsm6dso_i3c_disable_set+0x74>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007aee:	2310      	movs	r3, #16
 8007af0:	18fa      	adds	r2, r7, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	2301      	movs	r3, #1
 8007af6:	2162      	movs	r1, #98	; 0x62
 8007af8:	f7ff fa2e 	bl	8006f58 <lsm6dso_read_reg>
 8007afc:	0003      	movs	r3, r0
 8007afe:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d118      	bne.n	8007b38 <lsm6dso_i3c_disable_set+0xac>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007b06:	1cfb      	adds	r3, r7, #3
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	2410      	movs	r4, #16
 8007b12:	193b      	adds	r3, r7, r4
 8007b14:	2103      	movs	r1, #3
 8007b16:	400a      	ands	r2, r1
 8007b18:	00d0      	lsls	r0, r2, #3
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	2118      	movs	r1, #24
 8007b1e:	438a      	bics	r2, r1
 8007b20:	1c11      	adds	r1, r2, #0
 8007b22:	1c02      	adds	r2, r0, #0
 8007b24:	430a      	orrs	r2, r1
 8007b26:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007b28:	193a      	adds	r2, r7, r4
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	2162      	movs	r1, #98	; 0x62
 8007b30:	f7ff fa33 	bl	8006f9a <lsm6dso_write_reg>
 8007b34:	0003      	movs	r3, r0
 8007b36:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007b38:	697b      	ldr	r3, [r7, #20]
}
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	b007      	add	sp, #28
 8007b40:	bd90      	pop	{r4, r7, pc}

08007b42 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007b42:	b590      	push	{r4, r7, lr}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	000a      	movs	r2, r1
 8007b4c:	1cfb      	adds	r3, r7, #3
 8007b4e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007b50:	2408      	movs	r4, #8
 8007b52:	193a      	adds	r2, r7, r4
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	2301      	movs	r3, #1
 8007b58:	210a      	movs	r1, #10
 8007b5a:	f7ff f9fd 	bl	8006f58 <lsm6dso_read_reg>
 8007b5e:	0003      	movs	r3, r0
 8007b60:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d117      	bne.n	8007b98 <lsm6dso_fifo_mode_set+0x56>
  {
    reg.fifo_mode = (uint8_t)val;
 8007b68:	1cfb      	adds	r3, r7, #3
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	4013      	ands	r3, r2
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	193b      	adds	r3, r7, r4
 8007b74:	2107      	movs	r1, #7
 8007b76:	400a      	ands	r2, r1
 8007b78:	0010      	movs	r0, r2
 8007b7a:	781a      	ldrb	r2, [r3, #0]
 8007b7c:	2107      	movs	r1, #7
 8007b7e:	438a      	bics	r2, r1
 8007b80:	1c11      	adds	r1, r2, #0
 8007b82:	1c02      	adds	r2, r0, #0
 8007b84:	430a      	orrs	r2, r1
 8007b86:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007b88:	193a      	adds	r2, r7, r4
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	210a      	movs	r1, #10
 8007b90:	f7ff fa03 	bl	8006f9a <lsm6dso_write_reg>
 8007b94:	0003      	movs	r3, r0
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007b98:	68fb      	ldr	r3, [r7, #12]
}
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	b005      	add	sp, #20
 8007ba0:	bd90      	pop	{r4, r7, pc}

08007ba2 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2102      	movs	r1, #2
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f7ff fefb 	bl	80079ac <lsm6dso_mem_bank_set>
 8007bb6:	0003      	movs	r3, r0
 8007bb8:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d107      	bne.n	8007bd0 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2146      	movs	r1, #70	; 0x46
 8007bc8:	f7ff f9c6 	bl	8006f58 <lsm6dso_read_reg>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7ff fee6 	bl	80079ac <lsm6dso_mem_bank_set>
 8007be0:	0003      	movs	r3, r0
 8007be2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007be4:	68fb      	ldr	r3, [r7, #12]
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b004      	add	sp, #16
 8007bec:	bd80      	pop	{r7, pc}

08007bee <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2102      	movs	r1, #2
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7ff fed5 	bl	80079ac <lsm6dso_mem_bank_set>
 8007c02:	0003      	movs	r3, r0
 8007c04:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d108      	bne.n	8007c1e <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	18fa      	adds	r2, r7, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	2301      	movs	r3, #1
 8007c14:	215f      	movs	r1, #95	; 0x5f
 8007c16:	f7ff f99f 	bl	8006f58 <lsm6dso_read_reg>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d12b      	bne.n	8007c7c <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
 8007c24:	2308      	movs	r3, #8
 8007c26:	18fb      	adds	r3, r7, r3
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	06db      	lsls	r3, r3, #27
 8007c2c:	0f9b      	lsrs	r3, r3, #30
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d014      	beq.n	8007c5e <lsm6dso_fsm_data_rate_get+0x70>
 8007c34:	dc17      	bgt.n	8007c66 <lsm6dso_fsm_data_rate_get+0x78>
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d00d      	beq.n	8007c56 <lsm6dso_fsm_data_rate_get+0x68>
 8007c3a:	dc14      	bgt.n	8007c66 <lsm6dso_fsm_data_rate_get+0x78>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <lsm6dso_fsm_data_rate_get+0x58>
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d004      	beq.n	8007c4e <lsm6dso_fsm_data_rate_get+0x60>
 8007c44:	e00f      	b.n	8007c66 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
        break;
 8007c4c:	e00f      	b.n	8007c6e <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
        break;
 8007c54:	e00b      	b.n	8007c6e <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	701a      	strb	r2, [r3, #0]
        break;
 8007c5c:	e007      	b.n	8007c6e <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2203      	movs	r2, #3
 8007c62:	701a      	strb	r2, [r3, #0]
        break;
 8007c64:	e003      	b.n	8007c6e <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	701a      	strb	r2, [r3, #0]
        break;
 8007c6c:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2100      	movs	r1, #0
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7ff fe9a 	bl	80079ac <lsm6dso_mem_bank_set>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b004      	add	sp, #16
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	425b      	negs	r3, r3
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	e031      	b.n	8007d04 <STTS751_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	7b1a      	ldrb	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695a      	ldr	r2, [r3, #20]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a0d      	ldr	r2, [pc, #52]	; (8007d10 <STTS751_RegisterBusIO+0x88>)
 8007cdc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a0c      	ldr	r2, [pc, #48]	; (8007d14 <STTS751_RegisterBusIO+0x8c>)
 8007ce2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <STTS751_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4798      	blx	r3
 8007cf8:	0003      	movs	r3, r0
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e002      	b.n	8007d04 <STTS751_RegisterBusIO+0x7c>
    }
    else
    {
      ret = STTS751_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	425b      	negs	r3, r3
 8007d02:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	0018      	movs	r0, r3
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b004      	add	sp, #16
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	08008137 	.word	0x08008137
 8007d14:	080081cd 	.word	0x080081cd

08007d18 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2228      	movs	r2, #40	; 0x28
 8007d24:	5c9b      	ldrb	r3, [r3, r2]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d124      	bne.n	8007d74 <STTS751_Init+0x5c>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	331c      	adds	r3, #28
 8007d2e:	2101      	movs	r1, #1
 8007d30:	0018      	movs	r0, r3
 8007d32:	f000 fc6d 	bl	8008610 <stts751_pin_event_route_set>
 8007d36:	1e03      	subs	r3, r0, #0
 8007d38:	d002      	beq.n	8007d40 <STTS751_Init+0x28>
    {
      return STTS751_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	425b      	negs	r3, r3
 8007d3e:	e01e      	b.n	8007d7e <STTS751_Init+0x66>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	22fe      	movs	r2, #254	; 0xfe
 8007d44:	0592      	lsls	r2, r2, #22
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	331c      	adds	r3, #28
 8007d4c:	2103      	movs	r1, #3
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f000 fbc4 	bl	80084dc <stts751_resolution_set>
 8007d54:	1e03      	subs	r3, r0, #0
 8007d56:	d002      	beq.n	8007d5e <STTS751_Init+0x46>
    {
      return STTS751_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	425b      	negs	r3, r3
 8007d5c:	e00f      	b.n	8007d7e <STTS751_Init+0x66>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	331c      	adds	r3, #28
 8007d62:	2180      	movs	r1, #128	; 0x80
 8007d64:	0018      	movs	r0, r3
 8007d66:	f000 fad5 	bl	8008314 <stts751_temp_data_rate_set>
 8007d6a:	1e03      	subs	r3, r0, #0
 8007d6c:	d002      	beq.n	8007d74 <STTS751_Init+0x5c>
    {
      return STTS751_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	425b      	negs	r3, r3
 8007d72:	e004      	b.n	8007d7e <STTS751_Init+0x66>
    }
  }

  pObj->is_initialized = 1;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2228      	movs	r2, #40	; 0x28
 8007d78:	2101      	movs	r1, #1
 8007d7a:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	0018      	movs	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b002      	add	sp, #8
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2228      	movs	r2, #40	; 0x28
 8007d92:	5c9b      	ldrb	r3, [r3, r2]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d108      	bne.n	8007daa <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f000 f86a 	bl	8007e74 <STTS751_TEMP_Disable>
 8007da0:	1e03      	subs	r3, r0, #0
 8007da2:	d002      	beq.n	8007daa <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	425b      	negs	r3, r3
 8007da8:	e004      	b.n	8007db4 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2228      	movs	r2, #40	; 0x28
 8007dae:	2100      	movs	r1, #0
 8007db0:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b002      	add	sp, #8
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	331c      	adds	r3, #28
 8007dca:	220c      	movs	r2, #12
 8007dcc:	18ba      	adds	r2, r7, r2
 8007dce:	0011      	movs	r1, r2
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f000 fc4b 	bl	800866c <stts751_device_id_get>
 8007dd6:	1e03      	subs	r3, r0, #0
 8007dd8:	d002      	beq.n	8007de0 <STTS751_ReadID+0x24>
  {
    return STTS751_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	425b      	negs	r3, r3
 8007dde:	e005      	b.n	8007dec <STTS751_ReadID+0x30>
  }

  *Id = buf.manufacturer_id;
 8007de0:	230c      	movs	r3, #12
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	785a      	ldrb	r2, [r3, #1]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	0018      	movs	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b004      	add	sp, #16
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2200      	movs	r2, #0
 8007e02:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2200      	movs	r2, #0
 8007e14:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2284      	movs	r2, #132	; 0x84
 8007e20:	05d2      	lsls	r2, r2, #23
 8007e22:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b002      	add	sp, #8
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2229      	movs	r2, #41	; 0x29
 8007e40:	5c9b      	ldrb	r3, [r3, r2]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e010      	b.n	8007e6c <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	1c11      	adds	r1, r2, #0
 8007e52:	0018      	movs	r0, r3
 8007e54:	f000 f8a2 	bl	8007f9c <STTS751_TEMP_SetOutputDataRate>
 8007e58:	1e03      	subs	r3, r0, #0
 8007e5a:	d002      	beq.n	8007e62 <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	425b      	negs	r3, r3
 8007e60:	e004      	b.n	8007e6c <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2229      	movs	r2, #41	; 0x29
 8007e66:	2101      	movs	r1, #1
 8007e68:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	b002      	add	sp, #8
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2229      	movs	r2, #41	; 0x29
 8007e80:	5c9b      	ldrb	r3, [r3, r2]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e01c      	b.n	8007ec4 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	332c      	adds	r3, #44	; 0x2c
 8007e8e:	001a      	movs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	0011      	movs	r1, r2
 8007e94:	0018      	movs	r0, r3
 8007e96:	f000 f819 	bl	8007ecc <STTS751_TEMP_GetOutputDataRate>
 8007e9a:	1e03      	subs	r3, r0, #0
 8007e9c:	d002      	beq.n	8007ea4 <STTS751_TEMP_Disable+0x30>
  {
    return STTS751_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	425b      	negs	r3, r3
 8007ea2:	e00f      	b.n	8007ec4 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	331c      	adds	r3, #28
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 fa32 	bl	8008314 <stts751_temp_data_rate_set>
 8007eb0:	1e03      	subs	r3, r0, #0
 8007eb2:	d002      	beq.n	8007eba <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	425b      	negs	r3, r3
 8007eb8:	e004      	b.n	8007ec4 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2229      	movs	r2, #41	; 0x29
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b002      	add	sp, #8
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	331c      	adds	r3, #28
 8007ede:	220b      	movs	r2, #11
 8007ee0:	18ba      	adds	r2, r7, r2
 8007ee2:	0011      	movs	r1, r2
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	f000 fa85 	bl	80083f4 <stts751_temp_data_rate_get>
 8007eea:	1e03      	subs	r3, r0, #0
 8007eec:	d002      	beq.n	8007ef4 <STTS751_TEMP_GetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	425b      	negs	r3, r3
 8007ef2:	e04d      	b.n	8007f90 <STTS751_TEMP_GetOutputDataRate+0xc4>
  }

  switch (odr_low_level)
 8007ef4:	230b      	movs	r3, #11
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b90      	cmp	r3, #144	; 0x90
 8007efc:	d00d      	beq.n	8007f1a <STTS751_TEMP_GetOutputDataRate+0x4e>
 8007efe:	dc42      	bgt.n	8007f86 <STTS751_TEMP_GetOutputDataRate+0xba>
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	dc08      	bgt.n	8007f16 <STTS751_TEMP_GetOutputDataRate+0x4a>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	db3e      	blt.n	8007f86 <STTS751_TEMP_GetOutputDataRate+0xba>
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d83c      	bhi.n	8007f86 <STTS751_TEMP_GetOutputDataRate+0xba>
 8007f0c:	009a      	lsls	r2, r3, #2
 8007f0e:	4b22      	ldr	r3, [pc, #136]	; (8007f98 <STTS751_TEMP_GetOutputDataRate+0xcc>)
 8007f10:	18d3      	adds	r3, r2, r3
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	469f      	mov	pc, r3
 8007f16:	2b80      	cmp	r3, #128	; 0x80
 8007f18:	d135      	bne.n	8007f86 <STTS751_TEMP_GetOutputDataRate+0xba>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]
      break;
 8007f20:	e035      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	22f6      	movs	r2, #246	; 0xf6
 8007f26:	0592      	lsls	r2, r2, #22
 8007f28:	601a      	str	r2, [r3, #0]
      break;
 8007f2a:	e030      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	22f8      	movs	r2, #248	; 0xf8
 8007f30:	0592      	lsls	r2, r2, #22
 8007f32:	601a      	str	r2, [r3, #0]
      break;
 8007f34:	e02b      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	22fa      	movs	r2, #250	; 0xfa
 8007f3a:	0592      	lsls	r2, r2, #22
 8007f3c:	601a      	str	r2, [r3, #0]
      break;
 8007f3e:	e026      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	22fc      	movs	r2, #252	; 0xfc
 8007f44:	0592      	lsls	r2, r2, #22
 8007f46:	601a      	str	r2, [r3, #0]
      break;
 8007f48:	e021      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	22fe      	movs	r2, #254	; 0xfe
 8007f4e:	0592      	lsls	r2, r2, #22
 8007f50:	601a      	str	r2, [r3, #0]
      break;
 8007f52:	e01c      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2280      	movs	r2, #128	; 0x80
 8007f58:	05d2      	lsls	r2, r2, #23
 8007f5a:	601a      	str	r2, [r3, #0]
      break;
 8007f5c:	e017      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2281      	movs	r2, #129	; 0x81
 8007f62:	05d2      	lsls	r2, r2, #23
 8007f64:	601a      	str	r2, [r3, #0]
      break;
 8007f66:	e012      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2282      	movs	r2, #130	; 0x82
 8007f6c:	05d2      	lsls	r2, r2, #23
 8007f6e:	601a      	str	r2, [r3, #0]
      break;
 8007f70:	e00d      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2283      	movs	r2, #131	; 0x83
 8007f76:	05d2      	lsls	r2, r2, #23
 8007f78:	601a      	str	r2, [r3, #0]
      break;
 8007f7a:	e008      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2284      	movs	r2, #132	; 0x84
 8007f80:	05d2      	lsls	r2, r2, #23
 8007f82:	601a      	str	r2, [r3, #0]
      break;
 8007f84:	e003      	b.n	8007f8e <STTS751_TEMP_GetOutputDataRate+0xc2>

    default:
      ret = STTS751_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	425b      	negs	r3, r3
 8007f8a:	60fb      	str	r3, [r7, #12]
      break;
 8007f8c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
}
 8007f90:	0018      	movs	r0, r3
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b004      	add	sp, #16
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	080158c8 	.word	0x080158c8

08007f9c <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	331c      	adds	r3, #28
 8007faa:	220e      	movs	r2, #14
 8007fac:	18ba      	adds	r2, r7, r2
 8007fae:	0011      	movs	r1, r2
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f000 fac3 	bl	800853c <stts751_resolution_get>
 8007fb6:	1e03      	subs	r3, r0, #0
 8007fb8:	d002      	beq.n	8007fc0 <STTS751_TEMP_SetOutputDataRate+0x24>
  {
    return STTS751_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	425b      	negs	r3, r3
 8007fbe:	e095      	b.n	80080ec <STTS751_TEMP_SetOutputDataRate+0x150>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8007fc0:	2183      	movs	r1, #131	; 0x83
 8007fc2:	05c9      	lsls	r1, r1, #23
 8007fc4:	6838      	ldr	r0, [r7, #0]
 8007fc6:	f7f8 fa2b 	bl	8000420 <__aeabi_fcmpeq>
 8007fca:	1e03      	subs	r3, r0, #0
 8007fcc:	d00f      	beq.n	8007fee <STTS751_TEMP_SetOutputDataRate+0x52>
 8007fce:	230e      	movs	r3, #14
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d10a      	bne.n	8007fee <STTS751_TEMP_SetOutputDataRate+0x52>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	331c      	adds	r3, #28
 8007fdc:	2101      	movs	r1, #1
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f000 fa7c 	bl	80084dc <stts751_resolution_set>
 8007fe4:	1e03      	subs	r3, r0, #0
 8007fe6:	d002      	beq.n	8007fee <STTS751_TEMP_SetOutputDataRate+0x52>
    {
      return STTS751_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	425b      	negs	r3, r3
 8007fec:	e07e      	b.n	80080ec <STTS751_TEMP_SetOutputDataRate+0x150>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007fee:	2184      	movs	r1, #132	; 0x84
 8007ff0:	05c9      	lsls	r1, r1, #23
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f7f8 fa14 	bl	8000420 <__aeabi_fcmpeq>
 8007ff8:	1e03      	subs	r3, r0, #0
 8007ffa:	d013      	beq.n	8008024 <STTS751_TEMP_SetOutputDataRate+0x88>
 8007ffc:	220e      	movs	r2, #14
 8007ffe:	18bb      	adds	r3, r7, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b03      	cmp	r3, #3
 8008004:	d003      	beq.n	800800e <STTS751_TEMP_SetOutputDataRate+0x72>
 8008006:	18bb      	adds	r3, r7, r2
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d10a      	bne.n	8008024 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	331c      	adds	r3, #28
 8008012:	2100      	movs	r1, #0
 8008014:	0018      	movs	r0, r3
 8008016:	f000 fa61 	bl	80084dc <stts751_resolution_set>
 800801a:	1e03      	subs	r3, r0, #0
 800801c:	d002      	beq.n	8008024 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	425b      	negs	r3, r3
 8008022:	e063      	b.n	80080ec <STTS751_TEMP_SetOutputDataRate+0x150>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008024:	21f6      	movs	r1, #246	; 0xf6
 8008026:	0589      	lsls	r1, r1, #22
 8008028:	6838      	ldr	r0, [r7, #0]
 800802a:	f7f8 fa09 	bl	8000440 <__aeabi_fcmple>
 800802e:	1e03      	subs	r3, r0, #0
 8008030:	d001      	beq.n	8008036 <STTS751_TEMP_SetOutputDataRate+0x9a>
 8008032:	2300      	movs	r3, #0
 8008034:	e048      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008036:	21f8      	movs	r1, #248	; 0xf8
 8008038:	0589      	lsls	r1, r1, #22
 800803a:	6838      	ldr	r0, [r7, #0]
 800803c:	f7f8 fa00 	bl	8000440 <__aeabi_fcmple>
 8008040:	1e03      	subs	r3, r0, #0
 8008042:	d001      	beq.n	8008048 <STTS751_TEMP_SetOutputDataRate+0xac>
 8008044:	2301      	movs	r3, #1
 8008046:	e03f      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008048:	21fa      	movs	r1, #250	; 0xfa
 800804a:	0589      	lsls	r1, r1, #22
 800804c:	6838      	ldr	r0, [r7, #0]
 800804e:	f7f8 f9f7 	bl	8000440 <__aeabi_fcmple>
 8008052:	1e03      	subs	r3, r0, #0
 8008054:	d001      	beq.n	800805a <STTS751_TEMP_SetOutputDataRate+0xbe>
 8008056:	2302      	movs	r3, #2
 8008058:	e036      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800805a:	21fc      	movs	r1, #252	; 0xfc
 800805c:	0589      	lsls	r1, r1, #22
 800805e:	6838      	ldr	r0, [r7, #0]
 8008060:	f7f8 f9ee 	bl	8000440 <__aeabi_fcmple>
 8008064:	1e03      	subs	r3, r0, #0
 8008066:	d001      	beq.n	800806c <STTS751_TEMP_SetOutputDataRate+0xd0>
 8008068:	2303      	movs	r3, #3
 800806a:	e02d      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800806c:	21fe      	movs	r1, #254	; 0xfe
 800806e:	0589      	lsls	r1, r1, #22
 8008070:	6838      	ldr	r0, [r7, #0]
 8008072:	f7f8 f9e5 	bl	8000440 <__aeabi_fcmple>
 8008076:	1e03      	subs	r3, r0, #0
 8008078:	d001      	beq.n	800807e <STTS751_TEMP_SetOutputDataRate+0xe2>
 800807a:	2304      	movs	r3, #4
 800807c:	e024      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800807e:	2180      	movs	r1, #128	; 0x80
 8008080:	05c9      	lsls	r1, r1, #23
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f7f8 f9dc 	bl	8000440 <__aeabi_fcmple>
 8008088:	1e03      	subs	r3, r0, #0
 800808a:	d001      	beq.n	8008090 <STTS751_TEMP_SetOutputDataRate+0xf4>
 800808c:	2305      	movs	r3, #5
 800808e:	e01b      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008090:	2181      	movs	r1, #129	; 0x81
 8008092:	05c9      	lsls	r1, r1, #23
 8008094:	6838      	ldr	r0, [r7, #0]
 8008096:	f7f8 f9d3 	bl	8000440 <__aeabi_fcmple>
 800809a:	1e03      	subs	r3, r0, #0
 800809c:	d001      	beq.n	80080a2 <STTS751_TEMP_SetOutputDataRate+0x106>
 800809e:	2306      	movs	r3, #6
 80080a0:	e012      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 80080a2:	2182      	movs	r1, #130	; 0x82
 80080a4:	05c9      	lsls	r1, r1, #23
 80080a6:	6838      	ldr	r0, [r7, #0]
 80080a8:	f7f8 f9ca 	bl	8000440 <__aeabi_fcmple>
 80080ac:	1e03      	subs	r3, r0, #0
 80080ae:	d001      	beq.n	80080b4 <STTS751_TEMP_SetOutputDataRate+0x118>
 80080b0:	2307      	movs	r3, #7
 80080b2:	e009      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 80080b4:	2183      	movs	r1, #131	; 0x83
 80080b6:	05c9      	lsls	r1, r1, #23
 80080b8:	6838      	ldr	r0, [r7, #0]
 80080ba:	f7f8 f9c1 	bl	8000440 <__aeabi_fcmple>
 80080be:	1e03      	subs	r3, r0, #0
 80080c0:	d001      	beq.n	80080c6 <STTS751_TEMP_SetOutputDataRate+0x12a>
 80080c2:	2308      	movs	r3, #8
 80080c4:	e000      	b.n	80080c8 <STTS751_TEMP_SetOutputDataRate+0x12c>
 80080c6:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80080c8:	210f      	movs	r1, #15
 80080ca:	187a      	adds	r2, r7, r1
 80080cc:	7013      	strb	r3, [r2, #0]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	331c      	adds	r3, #28
 80080d2:	001a      	movs	r2, r3
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	0019      	movs	r1, r3
 80080da:	0010      	movs	r0, r2
 80080dc:	f000 f91a 	bl	8008314 <stts751_temp_data_rate_set>
 80080e0:	1e03      	subs	r3, r0, #0
 80080e2:	d002      	beq.n	80080ea <STTS751_TEMP_SetOutputDataRate+0x14e>
  {
    return STTS751_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	425b      	negs	r3, r3
 80080e8:	e000      	b.n	80080ec <STTS751_TEMP_SetOutputDataRate+0x150>
  }

  return STTS751_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	0018      	movs	r0, r3
 80080ee:	46bd      	mov	sp, r7
 80080f0:	b004      	add	sp, #16
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	331c      	adds	r3, #28
 8008102:	220e      	movs	r2, #14
 8008104:	18ba      	adds	r2, r7, r2
 8008106:	0011      	movs	r1, r2
 8008108:	0018      	movs	r0, r3
 800810a:	f000 fa4e 	bl	80085aa <stts751_temperature_raw_get>
 800810e:	1e03      	subs	r3, r0, #0
 8008110:	d002      	beq.n	8008118 <STTS751_TEMP_GetTemperature+0x24>
  {
    return STTS751_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	425b      	negs	r3, r3
 8008116:	e00a      	b.n	800812e <STTS751_TEMP_GetTemperature+0x3a>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008118:	230e      	movs	r3, #14
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	2200      	movs	r2, #0
 800811e:	5e9b      	ldrsh	r3, [r3, r2]
 8008120:	0018      	movs	r0, r3
 8008122:	f000 f8e0 	bl	80082e6 <stts751_from_lsb_to_celsius>
 8008126:	1c02      	adds	r2, r0, #0
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	0018      	movs	r0, r3
 8008130:	46bd      	mov	sp, r7
 8008132:	b004      	add	sp, #16
 8008134:	bd80      	pop	{r7, pc}

08008136 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008136:	b5b0      	push	{r4, r5, r7, lr}
 8008138:	b088      	sub	sp, #32
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	0008      	movs	r0, r1
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	0019      	movs	r1, r3
 8008144:	230b      	movs	r3, #11
 8008146:	18fb      	adds	r3, r7, r3
 8008148:	1c02      	adds	r2, r0, #0
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	2308      	movs	r3, #8
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	1c0a      	adds	r2, r1, #0
 8008152:	801a      	strh	r2, [r3, #0]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d12e      	bne.n	80081c2 <ReadRegWrap+0x8c>
  {
    for (i = 0; i < Length; i++)
 8008164:	231e      	movs	r3, #30
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	2200      	movs	r2, #0
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e021      	b.n	80081b2 <ReadRegWrap+0x7c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	695c      	ldr	r4, [r3, #20]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	7b1b      	ldrb	r3, [r3, #12]
 8008176:	b298      	uxth	r0, r3
 8008178:	230b      	movs	r3, #11
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b29a      	uxth	r2, r3
 8008180:	251e      	movs	r5, #30
 8008182:	197b      	adds	r3, r7, r5
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	18d3      	adds	r3, r2, r3
 8008188:	b299      	uxth	r1, r3
 800818a:	197b      	adds	r3, r7, r5
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	18d2      	adds	r2, r2, r3
 8008192:	2301      	movs	r3, #1
 8008194:	47a0      	blx	r4
 8008196:	0003      	movs	r3, r0
 8008198:	61bb      	str	r3, [r7, #24]
      if (ret != STTS751_OK)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <ReadRegWrap+0x70>
      {
        return STTS751_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	425b      	negs	r3, r3
 80081a4:	e00e      	b.n	80081c4 <ReadRegWrap+0x8e>
    for (i = 0; i < Length; i++)
 80081a6:	211e      	movs	r1, #30
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	187b      	adds	r3, r7, r1
 80081ae:	3201      	adds	r2, #1
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	231e      	movs	r3, #30
 80081b4:	18fa      	adds	r2, r7, r3
 80081b6:	2308      	movs	r3, #8
 80081b8:	18fb      	adds	r3, r7, r3
 80081ba:	8812      	ldrh	r2, [r2, #0]
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d3d5      	bcc.n	800816e <ReadRegWrap+0x38>
      }
    }
  }

  return ret;
 80081c2:	69bb      	ldr	r3, [r7, #24]
}
 80081c4:	0018      	movs	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	b008      	add	sp, #32
 80081ca:	bdb0      	pop	{r4, r5, r7, pc}

080081cc <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80081cc:	b5b0      	push	{r4, r5, r7, lr}
 80081ce:	b088      	sub	sp, #32
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	0008      	movs	r0, r1
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	0019      	movs	r1, r3
 80081da:	230b      	movs	r3, #11
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	1c02      	adds	r2, r0, #0
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	2308      	movs	r3, #8
 80081e4:	18fb      	adds	r3, r7, r3
 80081e6:	1c0a      	adds	r2, r1, #0
 80081e8:	801a      	strh	r2, [r3, #0]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d12e      	bne.n	8008258 <WriteRegWrap+0x8c>
  {
    for (i = 0; i < Length; i++)
 80081fa:	231e      	movs	r3, #30
 80081fc:	18fb      	adds	r3, r7, r3
 80081fe:	2200      	movs	r2, #0
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e021      	b.n	8008248 <WriteRegWrap+0x7c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	691c      	ldr	r4, [r3, #16]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	7b1b      	ldrb	r3, [r3, #12]
 800820c:	b298      	uxth	r0, r3
 800820e:	230b      	movs	r3, #11
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b29a      	uxth	r2, r3
 8008216:	251e      	movs	r5, #30
 8008218:	197b      	adds	r3, r7, r5
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	18d3      	adds	r3, r2, r3
 800821e:	b299      	uxth	r1, r3
 8008220:	197b      	adds	r3, r7, r5
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	18d2      	adds	r2, r2, r3
 8008228:	2301      	movs	r3, #1
 800822a:	47a0      	blx	r4
 800822c:	0003      	movs	r3, r0
 800822e:	61bb      	str	r3, [r7, #24]
      if (ret != STTS751_OK)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <WriteRegWrap+0x70>
      {
        return STTS751_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	425b      	negs	r3, r3
 800823a:	e00e      	b.n	800825a <WriteRegWrap+0x8e>
    for (i = 0; i < Length; i++)
 800823c:	211e      	movs	r1, #30
 800823e:	187b      	adds	r3, r7, r1
 8008240:	881a      	ldrh	r2, [r3, #0]
 8008242:	187b      	adds	r3, r7, r1
 8008244:	3201      	adds	r2, #1
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	231e      	movs	r3, #30
 800824a:	18fa      	adds	r2, r7, r3
 800824c:	2308      	movs	r3, #8
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	8812      	ldrh	r2, [r2, #0]
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d3d5      	bcc.n	8008204 <WriteRegWrap+0x38>
      }
    }
  }

  return ret;
 8008258:	69bb      	ldr	r3, [r7, #24]
}
 800825a:	0018      	movs	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	b008      	add	sp, #32
 8008260:	bdb0      	pop	{r4, r5, r7, pc}

08008262 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008264:	b087      	sub	sp, #28
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	0008      	movs	r0, r1
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	0019      	movs	r1, r3
 8008270:	260b      	movs	r6, #11
 8008272:	19bb      	adds	r3, r7, r6
 8008274:	1c02      	adds	r2, r0, #0
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	2508      	movs	r5, #8
 800827a:	197b      	adds	r3, r7, r5
 800827c:	1c0a      	adds	r2, r1, #0
 800827e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	685c      	ldr	r4, [r3, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6898      	ldr	r0, [r3, #8]
 8008288:	197b      	adds	r3, r7, r5
 800828a:	881d      	ldrh	r5, [r3, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	19bb      	adds	r3, r7, r6
 8008290:	7819      	ldrb	r1, [r3, #0]
 8008292:	002b      	movs	r3, r5
 8008294:	47a0      	blx	r4
 8008296:	0003      	movs	r3, r0
 8008298:	617b      	str	r3, [r7, #20]

  return ret;
 800829a:	697b      	ldr	r3, [r7, #20]
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b007      	add	sp, #28
 80082a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082a4 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	0008      	movs	r0, r1
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	0019      	movs	r1, r3
 80082b2:	260b      	movs	r6, #11
 80082b4:	19bb      	adds	r3, r7, r6
 80082b6:	1c02      	adds	r2, r0, #0
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	2508      	movs	r5, #8
 80082bc:	197b      	adds	r3, r7, r5
 80082be:	1c0a      	adds	r2, r1, #0
 80082c0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681c      	ldr	r4, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6898      	ldr	r0, [r3, #8]
 80082ca:	197b      	adds	r3, r7, r5
 80082cc:	881d      	ldrh	r5, [r3, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	19bb      	adds	r3, r7, r6
 80082d2:	7819      	ldrb	r1, [r3, #0]
 80082d4:	002b      	movs	r3, r5
 80082d6:	47a0      	blx	r4
 80082d8:	0003      	movs	r3, r0
 80082da:	617b      	str	r3, [r7, #20]

  return ret;
 80082dc:	697b      	ldr	r3, [r7, #20]
}
 80082de:	0018      	movs	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b007      	add	sp, #28
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082e6 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	0002      	movs	r2, r0
 80082ee:	1dbb      	adds	r3, r7, #6
 80082f0:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) / 256.0f;
 80082f2:	1dbb      	adds	r3, r7, #6
 80082f4:	2200      	movs	r2, #0
 80082f6:	5e9b      	ldrsh	r3, [r3, r2]
 80082f8:	0018      	movs	r0, r3
 80082fa:	f7f9 f861 	bl	80013c0 <__aeabi_i2f>
 80082fe:	1c03      	adds	r3, r0, #0
 8008300:	2187      	movs	r1, #135	; 0x87
 8008302:	05c9      	lsls	r1, r1, #23
 8008304:	1c18      	adds	r0, r3, #0
 8008306:	f7f8 fb89 	bl	8000a1c <__aeabi_fdiv>
 800830a:	1c03      	adds	r3, r0, #0
}
 800830c:	1c18      	adds	r0, r3, #0
 800830e:	46bd      	mov	sp, r7
 8008310:	b002      	add	sp, #8
 8008312:	bd80      	pop	{r7, pc}

08008314 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	000a      	movs	r2, r1
 800831e:	1cfb      	adds	r3, r7, #3
 8008320:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8008322:	230b      	movs	r3, #11
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	22aa      	movs	r2, #170	; 0xaa
 8008328:	701a      	strb	r2, [r3, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800832a:	240c      	movs	r4, #12
 800832c:	193a      	adds	r2, r7, r4
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	2301      	movs	r3, #1
 8008332:	2104      	movs	r1, #4
 8008334:	f7ff ff95 	bl	8008262 <stts751_read_reg>
 8008338:	0003      	movs	r3, r0
 800833a:	617b      	str	r3, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d117      	bne.n	8008372 <stts751_temp_data_rate_set+0x5e>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008342:	1cfb      	adds	r3, r7, #3
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	220f      	movs	r2, #15
 8008348:	4013      	ands	r3, r2
 800834a:	b2da      	uxtb	r2, r3
 800834c:	193b      	adds	r3, r7, r4
 800834e:	210f      	movs	r1, #15
 8008350:	400a      	ands	r2, r1
 8008352:	0010      	movs	r0, r2
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	210f      	movs	r1, #15
 8008358:	438a      	bics	r2, r1
 800835a:	1c11      	adds	r1, r2, #0
 800835c:	1c02      	adds	r2, r0, #0
 800835e:	430a      	orrs	r2, r1
 8008360:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008362:	193a      	adds	r2, r7, r4
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	2301      	movs	r3, #1
 8008368:	2104      	movs	r1, #4
 800836a:	f7ff ff9b 	bl	80082a4 <stts751_write_reg>
 800836e:	0003      	movs	r3, r0
 8008370:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d108      	bne.n	800838a <stts751_temp_data_rate_set+0x76>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008378:	2310      	movs	r3, #16
 800837a:	18fa      	adds	r2, r7, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	2301      	movs	r3, #1
 8008380:	2103      	movs	r1, #3
 8008382:	f7ff ff6e 	bl	8008262 <stts751_read_reg>
 8008386:	0003      	movs	r3, r0
 8008388:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11b      	bne.n	80083c8 <stts751_temp_data_rate_set+0xb4>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008390:	1cfb      	adds	r3, r7, #3
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	09db      	lsrs	r3, r3, #7
 8008396:	b2db      	uxtb	r3, r3
 8008398:	1c1a      	adds	r2, r3, #0
 800839a:	2301      	movs	r3, #1
 800839c:	4013      	ands	r3, r2
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	2410      	movs	r4, #16
 80083a2:	193b      	adds	r3, r7, r4
 80083a4:	2101      	movs	r1, #1
 80083a6:	400a      	ands	r2, r1
 80083a8:	0190      	lsls	r0, r2, #6
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	2140      	movs	r1, #64	; 0x40
 80083ae:	438a      	bics	r2, r1
 80083b0:	1c11      	adds	r1, r2, #0
 80083b2:	1c02      	adds	r2, r0, #0
 80083b4:	430a      	orrs	r2, r1
 80083b6:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80083b8:	193a      	adds	r2, r7, r4
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	2301      	movs	r3, #1
 80083be:	2103      	movs	r1, #3
 80083c0:	f7ff ff70 	bl	80082a4 <stts751_write_reg>
 80083c4:	0003      	movs	r3, r0
 80083c6:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10c      	bne.n	80083e8 <stts751_temp_data_rate_set+0xd4>
 80083ce:	1cfb      	adds	r3, r7, #3
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b90      	cmp	r3, #144	; 0x90
 80083d4:	d108      	bne.n	80083e8 <stts751_temp_data_rate_set+0xd4>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80083d6:	230b      	movs	r3, #11
 80083d8:	18fa      	adds	r2, r7, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	2301      	movs	r3, #1
 80083de:	210f      	movs	r1, #15
 80083e0:	f7ff ff60 	bl	80082a4 <stts751_write_reg>
 80083e4:	0003      	movs	r3, r0
 80083e6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80083e8:	697b      	ldr	r3, [r7, #20]
}
 80083ea:	0018      	movs	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b007      	add	sp, #28
 80083f0:	bd90      	pop	{r4, r7, pc}
	...

080083f4 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80083fe:	2310      	movs	r3, #16
 8008400:	18fa      	adds	r2, r7, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	2301      	movs	r3, #1
 8008406:	2104      	movs	r1, #4
 8008408:	f7ff ff2b 	bl	8008262 <stts751_read_reg>
 800840c:	0003      	movs	r3, r0
 800840e:	617b      	str	r3, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d108      	bne.n	8008428 <stts751_temp_data_rate_get+0x34>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008416:	230c      	movs	r3, #12
 8008418:	18fa      	adds	r2, r7, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	2301      	movs	r3, #1
 800841e:	2103      	movs	r1, #3
 8008420:	f7ff ff1f 	bl	8008262 <stts751_read_reg>
 8008424:	0003      	movs	r3, r0
 8008426:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008428:	230c      	movs	r3, #12
 800842a:	18fb      	adds	r3, r7, r3
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	065b      	lsls	r3, r3, #25
 8008430:	0fdb      	lsrs	r3, r3, #31
 8008432:	b2db      	uxtb	r3, r3
 8008434:	01db      	lsls	r3, r3, #7
 8008436:	2210      	movs	r2, #16
 8008438:	18ba      	adds	r2, r7, r2
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	0712      	lsls	r2, r2, #28
 800843e:	0f12      	lsrs	r2, r2, #28
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	189b      	adds	r3, r3, r2
 8008444:	2b90      	cmp	r3, #144	; 0x90
 8008446:	d011      	beq.n	800846c <stts751_temp_data_rate_get+0x78>
 8008448:	dc3c      	bgt.n	80084c4 <stts751_temp_data_rate_get+0xd0>
 800844a:	2b09      	cmp	r3, #9
 800844c:	dc08      	bgt.n	8008460 <stts751_temp_data_rate_get+0x6c>
 800844e:	2b00      	cmp	r3, #0
 8008450:	db38      	blt.n	80084c4 <stts751_temp_data_rate_get+0xd0>
 8008452:	2b09      	cmp	r3, #9
 8008454:	d836      	bhi.n	80084c4 <stts751_temp_data_rate_get+0xd0>
 8008456:	009a      	lsls	r2, r3, #2
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <stts751_temp_data_rate_get+0xe4>)
 800845a:	18d3      	adds	r3, r2, r3
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	469f      	mov	pc, r3
 8008460:	2b80      	cmp	r3, #128	; 0x80
 8008462:	d12f      	bne.n	80084c4 <stts751_temp_data_rate_get+0xd0>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2280      	movs	r2, #128	; 0x80
 8008468:	701a      	strb	r2, [r3, #0]
      break;
 800846a:	e02f      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2290      	movs	r2, #144	; 0x90
 8008470:	701a      	strb	r2, [r3, #0]
      break;
 8008472:	e02b      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
      break;
 800847a:	e027      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	701a      	strb	r2, [r3, #0]
      break;
 8008482:	e023      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2202      	movs	r2, #2
 8008488:	701a      	strb	r2, [r3, #0]
      break;
 800848a:	e01f      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2203      	movs	r2, #3
 8008490:	701a      	strb	r2, [r3, #0]
      break;
 8008492:	e01b      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2204      	movs	r2, #4
 8008498:	701a      	strb	r2, [r3, #0]
      break;
 800849a:	e017      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2205      	movs	r2, #5
 80084a0:	701a      	strb	r2, [r3, #0]
      break;
 80084a2:	e013      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2206      	movs	r2, #6
 80084a8:	701a      	strb	r2, [r3, #0]
      break;
 80084aa:	e00f      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2207      	movs	r2, #7
 80084b0:	701a      	strb	r2, [r3, #0]
      break;
 80084b2:	e00b      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2208      	movs	r2, #8
 80084b8:	701a      	strb	r2, [r3, #0]
      break;
 80084ba:	e007      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2209      	movs	r2, #9
 80084c0:	701a      	strb	r2, [r3, #0]
      break;
 80084c2:	e003      	b.n	80084cc <stts751_temp_data_rate_get+0xd8>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2280      	movs	r2, #128	; 0x80
 80084c8:	701a      	strb	r2, [r3, #0]
      break;
 80084ca:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80084cc:	697b      	ldr	r3, [r7, #20]
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b006      	add	sp, #24
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	080158f0 	.word	0x080158f0

080084dc <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	000a      	movs	r2, r1
 80084e6:	1cfb      	adds	r3, r7, #3
 80084e8:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80084ea:	2408      	movs	r4, #8
 80084ec:	193a      	adds	r2, r7, r4
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	2301      	movs	r3, #1
 80084f2:	2103      	movs	r1, #3
 80084f4:	f7ff feb5 	bl	8008262 <stts751_read_reg>
 80084f8:	0003      	movs	r3, r0
 80084fa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d117      	bne.n	8008532 <stts751_resolution_set+0x56>
  {
    reg.tres = (uint8_t) val;
 8008502:	1cfb      	adds	r3, r7, #3
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2203      	movs	r2, #3
 8008508:	4013      	ands	r3, r2
 800850a:	b2da      	uxtb	r2, r3
 800850c:	193b      	adds	r3, r7, r4
 800850e:	2103      	movs	r1, #3
 8008510:	400a      	ands	r2, r1
 8008512:	0090      	lsls	r0, r2, #2
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	210c      	movs	r1, #12
 8008518:	438a      	bics	r2, r1
 800851a:	1c11      	adds	r1, r2, #0
 800851c:	1c02      	adds	r2, r0, #0
 800851e:	430a      	orrs	r2, r1
 8008520:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008522:	193a      	adds	r2, r7, r4
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	2301      	movs	r3, #1
 8008528:	2103      	movs	r1, #3
 800852a:	f7ff febb 	bl	80082a4 <stts751_write_reg>
 800852e:	0003      	movs	r3, r0
 8008530:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	0018      	movs	r0, r3
 8008536:	46bd      	mov	sp, r7
 8008538:	b005      	add	sp, #20
 800853a:	bd90      	pop	{r4, r7, pc}

0800853c <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800853c:	b590      	push	{r4, r7, lr}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008546:	2408      	movs	r4, #8
 8008548:	193a      	adds	r2, r7, r4
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	2301      	movs	r3, #1
 800854e:	2103      	movs	r1, #3
 8008550:	f7ff fe87 	bl	8008262 <stts751_read_reg>
 8008554:	0003      	movs	r3, r0
 8008556:	60fb      	str	r3, [r7, #12]

  switch (reg.tres)
 8008558:	193b      	adds	r3, r7, r4
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	071b      	lsls	r3, r3, #28
 800855e:	0f9b      	lsrs	r3, r3, #30
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d014      	beq.n	8008590 <stts751_resolution_get+0x54>
 8008566:	dc17      	bgt.n	8008598 <stts751_resolution_get+0x5c>
 8008568:	2b02      	cmp	r3, #2
 800856a:	d005      	beq.n	8008578 <stts751_resolution_get+0x3c>
 800856c:	dc14      	bgt.n	8008598 <stts751_resolution_get+0x5c>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <stts751_resolution_get+0x44>
 8008572:	2b01      	cmp	r3, #1
 8008574:	d008      	beq.n	8008588 <stts751_resolution_get+0x4c>
 8008576:	e00f      	b.n	8008598 <stts751_resolution_get+0x5c>
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2202      	movs	r2, #2
 800857c:	701a      	strb	r2, [r3, #0]
      break;
 800857e:	e00f      	b.n	80085a0 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2200      	movs	r2, #0
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e00b      	b.n	80085a0 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
      break;
 800858e:	e007      	b.n	80085a0 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2203      	movs	r2, #3
 8008594:	701a      	strb	r2, [r3, #0]
      break;
 8008596:	e003      	b.n	80085a0 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
      break;
 800859e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80085a0:	68fb      	ldr	r3, [r7, #12]
}
 80085a2:	0018      	movs	r0, r3
 80085a4:	46bd      	mov	sp, r7
 80085a6:	b005      	add	sp, #20
 80085a8:	bd90      	pop	{r4, r7, pc}

080085aa <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80085aa:	b590      	push	{r4, r7, lr}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 80085b4:	2408      	movs	r4, #8
 80085b6:	193b      	adds	r3, r7, r4
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	2301      	movs	r3, #1
 80085be:	2100      	movs	r1, #0
 80085c0:	f7ff fe4f 	bl	8008262 <stts751_read_reg>
 80085c4:	0003      	movs	r3, r0
 80085c6:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11b      	bne.n	8008606 <stts751_temperature_raw_get+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80085ce:	193a      	adds	r2, r7, r4
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	2301      	movs	r3, #1
 80085d4:	2102      	movs	r1, #2
 80085d6:	f7ff fe44 	bl	8008262 <stts751_read_reg>
 80085da:	0003      	movs	r3, r0
 80085dc:	60fb      	str	r3, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80085de:	0021      	movs	r1, r4
 80085e0:	193b      	adds	r3, r7, r4
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	b21a      	sxth	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	5e9b      	ldrsh	r3, [r3, r2]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	187b      	adds	r3, r7, r1
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	18d3      	adds	r3, r2, r3
 80085fe:	b29b      	uxth	r3, r3
 8008600:	b21a      	sxth	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8008606:	68fb      	ldr	r3, [r7, #12]
}
 8008608:	0018      	movs	r0, r3
 800860a:	46bd      	mov	sp, r7
 800860c:	b005      	add	sp, #20
 800860e:	bd90      	pop	{r4, r7, pc}

08008610 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	000a      	movs	r2, r1
 800861a:	1cfb      	adds	r3, r7, #3
 800861c:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800861e:	2408      	movs	r4, #8
 8008620:	193a      	adds	r2, r7, r4
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	2301      	movs	r3, #1
 8008626:	2103      	movs	r1, #3
 8008628:	f7ff fe1b 	bl	8008262 <stts751_read_reg>
 800862c:	0003      	movs	r3, r0
 800862e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d115      	bne.n	8008662 <stts751_pin_event_route_set+0x52>
  {
    reg.mask1 = val;
 8008636:	1cfb      	adds	r3, r7, #3
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2201      	movs	r2, #1
 800863c:	4013      	ands	r3, r2
 800863e:	b2da      	uxtb	r2, r3
 8008640:	193b      	adds	r3, r7, r4
 8008642:	01d0      	lsls	r0, r2, #7
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	217f      	movs	r1, #127	; 0x7f
 8008648:	400a      	ands	r2, r1
 800864a:	1c11      	adds	r1, r2, #0
 800864c:	1c02      	adds	r2, r0, #0
 800864e:	430a      	orrs	r2, r1
 8008650:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008652:	193a      	adds	r2, r7, r4
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	2301      	movs	r3, #1
 8008658:	2103      	movs	r1, #3
 800865a:	f7ff fe23 	bl	80082a4 <stts751_write_reg>
 800865e:	0003      	movs	r3, r0
 8008660:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008662:	68fb      	ldr	r3, [r7, #12]
}
 8008664:	0018      	movs	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	b005      	add	sp, #20
 800866a:	bd90      	pop	{r4, r7, pc}

0800866c <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	2301      	movs	r3, #1
 800867c:	21fd      	movs	r1, #253	; 0xfd
 800867e:	f7ff fdf0 	bl	8008262 <stts751_read_reg>
 8008682:	0003      	movs	r3, r0
 8008684:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <stts751_device_id_get+0x32>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	2301      	movs	r3, #1
 8008694:	21fe      	movs	r1, #254	; 0xfe
 8008696:	f7ff fde4 	bl	8008262 <stts751_read_reg>
 800869a:	0003      	movs	r3, r0
 800869c:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d108      	bne.n	80086b6 <stts751_device_id_get+0x4a>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	1c9a      	adds	r2, r3, #2
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	2301      	movs	r3, #1
 80086ac:	21ff      	movs	r1, #255	; 0xff
 80086ae:	f7ff fdd8 	bl	8008262 <stts751_read_reg>
 80086b2:	0003      	movs	r3, r0
 80086b4:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	0018      	movs	r0, r3
 80086ba:	46bd      	mov	sp, r7
 80086bc:	b004      	add	sp, #16
 80086be:	bd80      	pop	{r7, pc}

080086c0 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	; 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d100      	bne.n	80086de <IKS01A3_ENV_SENSOR_Init+0x1e>
 80086dc:	e079      	b.n	80087d2 <IKS01A3_ENV_SENSOR_Init+0x112>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d900      	bls.n	80086e6 <IKS01A3_ENV_SENSOR_Init+0x26>
 80086e4:	e0ac      	b.n	8008840 <IKS01A3_ENV_SENSOR_Init+0x180>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <IKS01A3_ENV_SENSOR_Init+0x34>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d038      	beq.n	8008764 <IKS01A3_ENV_SENSOR_Init+0xa4>
 80086f2:	e0a5      	b.n	8008840 <IKS01A3_ENV_SENSOR_Init+0x180>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	0018      	movs	r0, r3
 80086f8:	f000 f9b6 	bl	8008a68 <HTS221_0_Probe>
 80086fc:	1e03      	subs	r3, r0, #0
 80086fe:	d002      	beq.n	8008706 <IKS01A3_ENV_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 8008700:	2301      	movs	r3, #1
 8008702:	425b      	negs	r3, r3
 8008704:	e0db      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008706:	4b70      	ldr	r3, [pc, #448]	; (80088c8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	58d3      	ldr	r3, [r2, r3]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a6e      	ldr	r2, [pc, #440]	; (80088cc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	0089      	lsls	r1, r1, #2
 8008716:	588a      	ldr	r2, [r1, r2]
 8008718:	2108      	movs	r1, #8
 800871a:	1879      	adds	r1, r7, r1
 800871c:	0010      	movs	r0, r2
 800871e:	4798      	blx	r3
 8008720:	1e03      	subs	r3, r0, #0
 8008722:	d002      	beq.n	800872a <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008724:	2307      	movs	r3, #7
 8008726:	425b      	negs	r3, r3
 8008728:	e0c9      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 800872a:	2308      	movs	r3, #8
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d103      	bne.n	800873c <IKS01A3_ENV_SENSOR_Init+0x7c>
      {
        component_functions |= ENV_TEMPERATURE;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2201      	movs	r2, #1
 8008738:	4313      	orrs	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800873c:	2308      	movs	r3, #8
 800873e:	18fb      	adds	r3, r7, r3
 8008740:	789b      	ldrb	r3, [r3, #2]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d103      	bne.n	800874e <IKS01A3_ENV_SENSOR_Init+0x8e>
      {
        component_functions |= ENV_HUMIDITY;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2204      	movs	r2, #4
 800874a:	4313      	orrs	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800874e:	2308      	movs	r3, #8
 8008750:	18fb      	adds	r3, r7, r3
 8008752:	785b      	ldrb	r3, [r3, #1]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d000      	beq.n	800875a <IKS01A3_ENV_SENSOR_Init+0x9a>
 8008758:	e076      	b.n	8008848 <IKS01A3_ENV_SENSOR_Init+0x188>
      {
        component_functions |= ENV_PRESSURE;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2202      	movs	r2, #2
 800875e:	4313      	orrs	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008762:	e071      	b.n	8008848 <IKS01A3_ENV_SENSOR_Init+0x188>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	0018      	movs	r0, r3
 8008768:	f000 fa44 	bl	8008bf4 <LPS22HH_0_Probe>
 800876c:	1e03      	subs	r3, r0, #0
 800876e:	d002      	beq.n	8008776 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8008770:	2301      	movs	r3, #1
 8008772:	425b      	negs	r3, r3
 8008774:	e0a3      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008776:	4b54      	ldr	r3, [pc, #336]	; (80088c8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	0092      	lsls	r2, r2, #2
 800877c:	58d3      	ldr	r3, [r2, r3]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	4a52      	ldr	r2, [pc, #328]	; (80088cc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	0089      	lsls	r1, r1, #2
 8008786:	588a      	ldr	r2, [r1, r2]
 8008788:	2108      	movs	r1, #8
 800878a:	1879      	adds	r1, r7, r1
 800878c:	0010      	movs	r0, r2
 800878e:	4798      	blx	r3
 8008790:	1e03      	subs	r3, r0, #0
 8008792:	d002      	beq.n	800879a <IKS01A3_ENV_SENSOR_Init+0xda>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008794:	2307      	movs	r3, #7
 8008796:	425b      	negs	r3, r3
 8008798:	e091      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 800879a:	2308      	movs	r3, #8
 800879c:	18fb      	adds	r3, r7, r3
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d103      	bne.n	80087ac <IKS01A3_ENV_SENSOR_Init+0xec>
      {
        component_functions |= ENV_TEMPERATURE;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	2201      	movs	r2, #1
 80087a8:	4313      	orrs	r3, r2
 80087aa:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80087ac:	2308      	movs	r3, #8
 80087ae:	18fb      	adds	r3, r7, r3
 80087b0:	789b      	ldrb	r3, [r3, #2]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d103      	bne.n	80087be <IKS01A3_ENV_SENSOR_Init+0xfe>
      {
        component_functions |= ENV_HUMIDITY;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	2204      	movs	r2, #4
 80087ba:	4313      	orrs	r3, r2
 80087bc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80087be:	2308      	movs	r3, #8
 80087c0:	18fb      	adds	r3, r7, r3
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d141      	bne.n	800884c <IKS01A3_ENV_SENSOR_Init+0x18c>
      {
        component_functions |= ENV_PRESSURE;
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2202      	movs	r2, #2
 80087cc:	4313      	orrs	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
      }
      break;
 80087d0:	e03c      	b.n	800884c <IKS01A3_ENV_SENSOR_Init+0x18c>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	0018      	movs	r0, r3
 80087d6:	f000 fad5 	bl	8008d84 <STTS751_0_Probe>
 80087da:	1e03      	subs	r3, r0, #0
 80087dc:	d002      	beq.n	80087e4 <IKS01A3_ENV_SENSOR_Init+0x124>
      {
        return BSP_ERROR_NO_INIT;
 80087de:	2301      	movs	r3, #1
 80087e0:	425b      	negs	r3, r3
 80087e2:	e06c      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80087e4:	4b38      	ldr	r3, [pc, #224]	; (80088c8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	0092      	lsls	r2, r2, #2
 80087ea:	58d3      	ldr	r3, [r2, r3]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	4a37      	ldr	r2, [pc, #220]	; (80088cc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	0089      	lsls	r1, r1, #2
 80087f4:	588a      	ldr	r2, [r1, r2]
 80087f6:	2108      	movs	r1, #8
 80087f8:	1879      	adds	r1, r7, r1
 80087fa:	0010      	movs	r0, r2
 80087fc:	4798      	blx	r3
 80087fe:	1e03      	subs	r3, r0, #0
 8008800:	d002      	beq.n	8008808 <IKS01A3_ENV_SENSOR_Init+0x148>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008802:	2307      	movs	r3, #7
 8008804:	425b      	negs	r3, r3
 8008806:	e05a      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 8008808:	2308      	movs	r3, #8
 800880a:	18fb      	adds	r3, r7, r3
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d103      	bne.n	800881a <IKS01A3_ENV_SENSOR_Init+0x15a>
      {
        component_functions |= ENV_TEMPERATURE;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2201      	movs	r2, #1
 8008816:	4313      	orrs	r3, r2
 8008818:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800881a:	2308      	movs	r3, #8
 800881c:	18fb      	adds	r3, r7, r3
 800881e:	789b      	ldrb	r3, [r3, #2]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d103      	bne.n	800882c <IKS01A3_ENV_SENSOR_Init+0x16c>
      {
        component_functions |= ENV_HUMIDITY;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2204      	movs	r2, #4
 8008828:	4313      	orrs	r3, r2
 800882a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800882c:	2308      	movs	r3, #8
 800882e:	18fb      	adds	r3, r7, r3
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d10c      	bne.n	8008850 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_PRESSURE;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2202      	movs	r2, #2
 800883a:	4313      	orrs	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800883e:	e007      	b.n	8008850 <IKS01A3_ENV_SENSOR_Init+0x190>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008840:	2302      	movs	r3, #2
 8008842:	425b      	negs	r3, r3
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008846:	e004      	b.n	8008852 <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 8008848:	46c0      	nop			; (mov r8, r8)
 800884a:	e002      	b.n	8008852 <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 800884c:	46c0      	nop			; (mov r8, r8)
 800884e:	e000      	b.n	8008852 <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 8008850:	46c0      	nop			; (mov r8, r8)
  }

  if (ret != BSP_ERROR_NONE)
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <IKS01A3_ENV_SENSOR_Init+0x19c>
  {
    return ret;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	e030      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800885c:	2300      	movs	r3, #0
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	e029      	b.n	80088b6 <IKS01A3_ENV_SENSOR_Init+0x1f6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6a3a      	ldr	r2, [r7, #32]
 8008866:	4013      	ands	r3, r2
 8008868:	6a3a      	ldr	r2, [r7, #32]
 800886a:	429a      	cmp	r2, r3
 800886c:	d11d      	bne.n	80088aa <IKS01A3_ENV_SENSOR_Init+0x1ea>
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	4013      	ands	r3, r2
 8008874:	6a3a      	ldr	r2, [r7, #32]
 8008876:	429a      	cmp	r2, r3
 8008878:	d117      	bne.n	80088aa <IKS01A3_ENV_SENSOR_Init+0x1ea>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	0092      	lsls	r2, r2, #2
 8008880:	58d0      	ldr	r0, [r2, r3]
 8008882:	4914      	ldr	r1, [pc, #80]	; (80088d4 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	0013      	movs	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	189b      	adds	r3, r3, r2
 800888c:	181b      	adds	r3, r3, r0
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	585b      	ldr	r3, [r3, r1]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	0089      	lsls	r1, r1, #2
 800889a:	588a      	ldr	r2, [r1, r2]
 800889c:	0010      	movs	r0, r2
 800889e:	4798      	blx	r3
 80088a0:	1e03      	subs	r3, r0, #0
 80088a2:	d002      	beq.n	80088aa <IKS01A3_ENV_SENSOR_Init+0x1ea>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80088a4:	2305      	movs	r3, #5
 80088a6:	425b      	negs	r3, r3
 80088a8:	e009      	b.n	80088be <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
    }
    function = function << 1;
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	3301      	adds	r3, #1
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d9d2      	bls.n	8008862 <IKS01A3_ENV_SENSOR_Init+0x1a2>
  }

  return ret;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088be:	0018      	movs	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	b00a      	add	sp, #40	; 0x28
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	20000b90 	.word	0x20000b90
 80088cc:	20000b60 	.word	0x20000b60
 80088d0:	20000224 	.word	0x20000224
 80088d4:	20000b6c 	.word	0x20000b6c

080088d8 <IKS01A3_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d903      	bls.n	80088f0 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80088e8:	2302      	movs	r3, #2
 80088ea:	425b      	negs	r3, r3
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e027      	b.n	8008940 <IKS01A3_ENV_SENSOR_Enable+0x68>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80088f0:	4b16      	ldr	r3, [pc, #88]	; (800894c <IKS01A3_ENV_SENSOR_Enable+0x74>)
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	0092      	lsls	r2, r2, #2
 80088f6:	58d3      	ldr	r3, [r2, r3]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	4013      	ands	r3, r2
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d11b      	bne.n	800893a <IKS01A3_ENV_SENSOR_Enable+0x62>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	0092      	lsls	r2, r2, #2
 8008908:	58d0      	ldr	r0, [r2, r3]
 800890a:	4912      	ldr	r1, [pc, #72]	; (8008954 <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	0013      	movs	r3, r2
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	189b      	adds	r3, r3, r2
 8008914:	181b      	adds	r3, r3, r0
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	585b      	ldr	r3, [r3, r1]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a0e      	ldr	r2, [pc, #56]	; (8008958 <IKS01A3_ENV_SENSOR_Enable+0x80>)
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	0089      	lsls	r1, r1, #2
 8008922:	588a      	ldr	r2, [r1, r2]
 8008924:	0010      	movs	r0, r2
 8008926:	4798      	blx	r3
 8008928:	1e03      	subs	r3, r0, #0
 800892a:	d003      	beq.n	8008934 <IKS01A3_ENV_SENSOR_Enable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800892c:	2305      	movs	r3, #5
 800892e:	425b      	negs	r3, r3
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	e005      	b.n	8008940 <IKS01A3_ENV_SENSOR_Enable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e002      	b.n	8008940 <IKS01A3_ENV_SENSOR_Enable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800893a:	2302      	movs	r3, #2
 800893c:	425b      	negs	r3, r3
 800893e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008940:	68fb      	ldr	r3, [r7, #12]
}
 8008942:	0018      	movs	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	b004      	add	sp, #16
 8008948:	bd80      	pop	{r7, pc}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	20000b9c 	.word	0x20000b9c
 8008950:	20000224 	.word	0x20000224
 8008954:	20000b6c 	.word	0x20000b6c
 8008958:	20000b60 	.word	0x20000b60

0800895c <IKS01A3_ENV_SENSOR_Disable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d903      	bls.n	8008974 <IKS01A3_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800896c:	2302      	movs	r3, #2
 800896e:	425b      	negs	r3, r3
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	e027      	b.n	80089c4 <IKS01A3_ENV_SENSOR_Disable+0x68>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008974:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <IKS01A3_ENV_SENSOR_Disable+0x74>)
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	58d3      	ldr	r3, [r2, r3]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	4013      	ands	r3, r2
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d11b      	bne.n	80089be <IKS01A3_ENV_SENSOR_Disable+0x62>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008986:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <IKS01A3_ENV_SENSOR_Disable+0x78>)
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	0092      	lsls	r2, r2, #2
 800898c:	58d0      	ldr	r0, [r2, r3]
 800898e:	4912      	ldr	r1, [pc, #72]	; (80089d8 <IKS01A3_ENV_SENSOR_Disable+0x7c>)
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	0013      	movs	r3, r2
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	189b      	adds	r3, r3, r2
 8008998:	181b      	adds	r3, r3, r0
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	585b      	ldr	r3, [r3, r1]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a0e      	ldr	r2, [pc, #56]	; (80089dc <IKS01A3_ENV_SENSOR_Disable+0x80>)
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	0089      	lsls	r1, r1, #2
 80089a6:	588a      	ldr	r2, [r1, r2]
 80089a8:	0010      	movs	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	1e03      	subs	r3, r0, #0
 80089ae:	d003      	beq.n	80089b8 <IKS01A3_ENV_SENSOR_Disable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80089b0:	2305      	movs	r3, #5
 80089b2:	425b      	negs	r3, r3
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e005      	b.n	80089c4 <IKS01A3_ENV_SENSOR_Disable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	e002      	b.n	80089c4 <IKS01A3_ENV_SENSOR_Disable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80089be:	2302      	movs	r3, #2
 80089c0:	425b      	negs	r3, r3
 80089c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80089c4:	68fb      	ldr	r3, [r7, #12]
}
 80089c6:	0018      	movs	r0, r3
 80089c8:	46bd      	mov	sp, r7
 80089ca:	b004      	add	sp, #16
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	20000b9c 	.word	0x20000b9c
 80089d4:	20000224 	.word	0x20000224
 80089d8:	20000b6c 	.word	0x20000b6c
 80089dc:	20000b60 	.word	0x20000b60

080089e0 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d903      	bls.n	80089fa <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80089f2:	2302      	movs	r3, #2
 80089f4:	425b      	negs	r3, r3
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e028      	b.n	8008a4c <IKS01A3_ENV_SENSOR_GetValue+0x6c>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	0092      	lsls	r2, r2, #2
 8008a00:	58d3      	ldr	r3, [r2, r3]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4013      	ands	r3, r2
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d11c      	bne.n	8008a46 <IKS01A3_ENV_SENSOR_GetValue+0x66>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	0092      	lsls	r2, r2, #2
 8008a12:	58d0      	ldr	r0, [r2, r3]
 8008a14:	4912      	ldr	r1, [pc, #72]	; (8008a60 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	0013      	movs	r3, r2
 8008a1a:	005b      	lsls	r3, r3, #1
 8008a1c:	189b      	adds	r3, r3, r2
 8008a1e:	181b      	adds	r3, r3, r0
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	585b      	ldr	r3, [r3, r1]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	4a0f      	ldr	r2, [pc, #60]	; (8008a64 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8008a28:	68f9      	ldr	r1, [r7, #12]
 8008a2a:	0089      	lsls	r1, r1, #2
 8008a2c:	588a      	ldr	r2, [r1, r2]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	0010      	movs	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	1e03      	subs	r3, r0, #0
 8008a36:	d003      	beq.n	8008a40 <IKS01A3_ENV_SENSOR_GetValue+0x60>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a38:	2305      	movs	r3, #5
 8008a3a:	425b      	negs	r3, r3
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	e005      	b.n	8008a4c <IKS01A3_ENV_SENSOR_GetValue+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e002      	b.n	8008a4c <IKS01A3_ENV_SENSOR_GetValue+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008a46:	2302      	movs	r3, #2
 8008a48:	425b      	negs	r3, r3
 8008a4a:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008a4c:	697b      	ldr	r3, [r7, #20]
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b006      	add	sp, #24
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	20000b9c 	.word	0x20000b9c
 8008a5c:	20000224 	.word	0x20000224
 8008a60:	20000b6c 	.word	0x20000b6c
 8008a64:	20000b60 	.word	0x20000b60

08008a68 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b091      	sub	sp, #68	; 0x44
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008a74:	2120      	movs	r1, #32
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	2200      	movs	r2, #0
 8008a7a:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8008a7c:	187b      	adds	r3, r7, r1
 8008a7e:	22bf      	movs	r2, #191	; 0xbf
 8008a80:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008a82:	187b      	adds	r3, r7, r1
 8008a84:	4a4d      	ldr	r2, [pc, #308]	; (8008bbc <HTS221_0_Probe+0x154>)
 8008a86:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008a88:	187b      	adds	r3, r7, r1
 8008a8a:	4a4d      	ldr	r2, [pc, #308]	; (8008bc0 <HTS221_0_Probe+0x158>)
 8008a8c:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008a8e:	187b      	adds	r3, r7, r1
 8008a90:	4a4c      	ldr	r2, [pc, #304]	; (8008bc4 <HTS221_0_Probe+0x15c>)
 8008a92:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008a94:	187b      	adds	r3, r7, r1
 8008a96:	4a4c      	ldr	r2, [pc, #304]	; (8008bc8 <HTS221_0_Probe+0x160>)
 8008a98:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008a9a:	187b      	adds	r3, r7, r1
 8008a9c:	4a4b      	ldr	r2, [pc, #300]	; (8008bcc <HTS221_0_Probe+0x164>)
 8008a9e:	619a      	str	r2, [r3, #24]

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8008aa0:	187a      	adds	r2, r7, r1
 8008aa2:	4b4b      	ldr	r3, [pc, #300]	; (8008bd0 <HTS221_0_Probe+0x168>)
 8008aa4:	0011      	movs	r1, r2
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	f7f9 f956 	bl	8001d58 <HTS221_RegisterBusIO>
 8008aac:	1e03      	subs	r3, r0, #0
 8008aae:	d003      	beq.n	8008ab8 <HTS221_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ab0:	2307      	movs	r3, #7
 8008ab2:	425b      	negs	r3, r3
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab6:	e07b      	b.n	8008bb0 <HTS221_0_Probe+0x148>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8008ab8:	231f      	movs	r3, #31
 8008aba:	18fa      	adds	r2, r7, r3
 8008abc:	4b44      	ldr	r3, [pc, #272]	; (8008bd0 <HTS221_0_Probe+0x168>)
 8008abe:	0011      	movs	r1, r2
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f7f9 f9d0 	bl	8001e66 <HTS221_ReadID>
 8008ac6:	1e03      	subs	r3, r0, #0
 8008ac8:	d003      	beq.n	8008ad2 <HTS221_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008aca:	2307      	movs	r3, #7
 8008acc:	425b      	negs	r3, r3
 8008ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ad0:	e06e      	b.n	8008bb0 <HTS221_0_Probe+0x148>
  }
  else if (id != HTS221_ID)
 8008ad2:	231f      	movs	r3, #31
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2bbc      	cmp	r3, #188	; 0xbc
 8008ada:	d003      	beq.n	8008ae4 <HTS221_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008adc:	2307      	movs	r3, #7
 8008ade:	425b      	negs	r3, r3
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae2:	e065      	b.n	8008bb0 <HTS221_0_Probe+0x148>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8008ae4:	240c      	movs	r4, #12
 8008ae6:	193a      	adds	r2, r7, r4
 8008ae8:	4b39      	ldr	r3, [pc, #228]	; (8008bd0 <HTS221_0_Probe+0x168>)
 8008aea:	0011      	movs	r1, r2
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7f9 f9d1 	bl	8001e94 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008af2:	0021      	movs	r1, r4
 8008af4:	187b      	adds	r3, r7, r1
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	001a      	movs	r2, r3
 8008afa:	187b      	adds	r3, r7, r1
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8008b02:	187b      	adds	r3, r7, r1
 8008b04:	789b      	ldrb	r3, [r3, #2]
 8008b06:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	4b32      	ldr	r3, [pc, #200]	; (8008bd4 <HTS221_0_Probe+0x16c>)
 8008b0c:	601a      	str	r2, [r3, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8008b0e:	4b32      	ldr	r3, [pc, #200]	; (8008bd8 <HTS221_0_Probe+0x170>)
 8008b10:	4a2f      	ldr	r2, [pc, #188]	; (8008bd0 <HTS221_0_Probe+0x168>)
 8008b12:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8008b14:	4b31      	ldr	r3, [pc, #196]	; (8008bdc <HTS221_0_Probe+0x174>)
 8008b16:	4a32      	ldr	r2, [pc, #200]	; (8008be0 <HTS221_0_Probe+0x178>)
 8008b18:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d11c      	bne.n	8008b5a <HTS221_0_Probe+0xf2>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	4013      	ands	r3, r2
 8008b26:	d018      	beq.n	8008b5a <HTS221_0_Probe+0xf2>
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d114      	bne.n	8008b5a <HTS221_0_Probe+0xf2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8008b30:	4b2c      	ldr	r3, [pc, #176]	; (8008be4 <HTS221_0_Probe+0x17c>)
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4b2c      	ldr	r3, [pc, #176]	; (8008be8 <HTS221_0_Probe+0x180>)
 8008b36:	0092      	lsls	r2, r2, #2
 8008b38:	492c      	ldr	r1, [pc, #176]	; (8008bec <HTS221_0_Probe+0x184>)
 8008b3a:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008b3c:	4b27      	ldr	r3, [pc, #156]	; (8008bdc <HTS221_0_Probe+0x174>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <HTS221_0_Probe+0x170>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	0018      	movs	r0, r3
 8008b48:	4790      	blx	r2
 8008b4a:	1e03      	subs	r3, r0, #0
 8008b4c:	d003      	beq.n	8008b56 <HTS221_0_Probe+0xee>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b4e:	2305      	movs	r3, #5
 8008b50:	425b      	negs	r3, r3
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b54:	e001      	b.n	8008b5a <HTS221_0_Probe+0xf2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d11d      	bne.n	8008b9c <HTS221_0_Probe+0x134>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2204      	movs	r2, #4
 8008b64:	4013      	ands	r3, r2
 8008b66:	d019      	beq.n	8008b9c <HTS221_0_Probe+0x134>
 8008b68:	230c      	movs	r3, #12
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	789b      	ldrb	r3, [r3, #2]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d114      	bne.n	8008b9c <HTS221_0_Probe+0x134>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <HTS221_0_Probe+0x17c>)
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <HTS221_0_Probe+0x180>)
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	491d      	ldr	r1, [pc, #116]	; (8008bf0 <HTS221_0_Probe+0x188>)
 8008b7c:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <HTS221_0_Probe+0x174>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <HTS221_0_Probe+0x170>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	0018      	movs	r0, r3
 8008b8a:	4790      	blx	r2
 8008b8c:	1e03      	subs	r3, r0, #0
 8008b8e:	d003      	beq.n	8008b98 <HTS221_0_Probe+0x130>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b90:	2305      	movs	r3, #5
 8008b92:	425b      	negs	r3, r3
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b96:	e001      	b.n	8008b9c <HTS221_0_Probe+0x134>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HTS221_0_Probe+0x148>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	d002      	beq.n	8008bb0 <HTS221_0_Probe+0x148>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008baa:	2305      	movs	r3, #5
 8008bac:	425b      	negs	r3, r3
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	b011      	add	sp, #68	; 0x44
 8008bb8:	bd90      	pop	{r4, r7, pc}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	08001945 	.word	0x08001945
 8008bc0:	080019c1 	.word	0x080019c1
 8008bc4:	08001a89 	.word	0x08001a89
 8008bc8:	08001a11 	.word	0x08001a11
 8008bcc:	08001b01 	.word	0x08001b01
 8008bd0:	20000ba8 	.word	0x20000ba8
 8008bd4:	20000b9c 	.word	0x20000b9c
 8008bd8:	20000b60 	.word	0x20000b60
 8008bdc:	20000b90 	.word	0x20000b90
 8008be0:	200000d0 	.word	0x200000d0
 8008be4:	20000224 	.word	0x20000224
 8008be8:	20000b6c 	.word	0x20000b6c
 8008bec:	200000f4 	.word	0x200000f4
 8008bf0:	200000e0 	.word	0x200000e0

08008bf4 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b091      	sub	sp, #68	; 0x44
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8008c00:	2120      	movs	r1, #32
 8008c02:	187b      	adds	r3, r7, r1
 8008c04:	2200      	movs	r2, #0
 8008c06:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8008c08:	187b      	adds	r3, r7, r1
 8008c0a:	22bb      	movs	r2, #187	; 0xbb
 8008c0c:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008c0e:	187b      	adds	r3, r7, r1
 8008c10:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <LPS22HH_0_Probe+0x158>)
 8008c12:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	4a4e      	ldr	r2, [pc, #312]	; (8008d50 <LPS22HH_0_Probe+0x15c>)
 8008c18:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	4a4d      	ldr	r2, [pc, #308]	; (8008d54 <LPS22HH_0_Probe+0x160>)
 8008c1e:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008c20:	187b      	adds	r3, r7, r1
 8008c22:	4a4d      	ldr	r2, [pc, #308]	; (8008d58 <LPS22HH_0_Probe+0x164>)
 8008c24:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008c26:	187b      	adds	r3, r7, r1
 8008c28:	4a4c      	ldr	r2, [pc, #304]	; (8008d5c <LPS22HH_0_Probe+0x168>)
 8008c2a:	619a      	str	r2, [r3, #24]

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8008c2c:	187a      	adds	r2, r7, r1
 8008c2e:	4b4c      	ldr	r3, [pc, #304]	; (8008d60 <LPS22HH_0_Probe+0x16c>)
 8008c30:	0011      	movs	r1, r2
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7fc f97c 	bl	8004f30 <LPS22HH_RegisterBusIO>
 8008c38:	1e03      	subs	r3, r0, #0
 8008c3a:	d003      	beq.n	8008c44 <LPS22HH_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c3c:	2307      	movs	r3, #7
 8008c3e:	425b      	negs	r3, r3
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c42:	e07d      	b.n	8008d40 <LPS22HH_0_Probe+0x14c>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008c44:	231f      	movs	r3, #31
 8008c46:	18fa      	adds	r2, r7, r3
 8008c48:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <LPS22HH_0_Probe+0x16c>)
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f7fc fa14 	bl	800507a <LPS22HH_ReadID>
 8008c52:	1e03      	subs	r3, r0, #0
 8008c54:	d003      	beq.n	8008c5e <LPS22HH_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c56:	2307      	movs	r3, #7
 8008c58:	425b      	negs	r3, r3
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5c:	e070      	b.n	8008d40 <LPS22HH_0_Probe+0x14c>
  }
  else if (id != LPS22HH_ID)
 8008c5e:	231f      	movs	r3, #31
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2bb3      	cmp	r3, #179	; 0xb3
 8008c66:	d003      	beq.n	8008c70 <LPS22HH_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c68:	2307      	movs	r3, #7
 8008c6a:	425b      	negs	r3, r3
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c6e:	e067      	b.n	8008d40 <LPS22HH_0_Probe+0x14c>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8008c70:	240c      	movs	r4, #12
 8008c72:	193a      	adds	r2, r7, r4
 8008c74:	4b3a      	ldr	r3, [pc, #232]	; (8008d60 <LPS22HH_0_Probe+0x16c>)
 8008c76:	0011      	movs	r1, r2
 8008c78:	0018      	movs	r0, r3
 8008c7a:	f7fc fa15 	bl	80050a8 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008c7e:	0021      	movs	r1, r4
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	001a      	movs	r2, r3
 8008c86:	187b      	adds	r3, r7, r1
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008c8e:	187b      	adds	r3, r7, r1
 8008c90:	789b      	ldrb	r3, [r3, #2]
 8008c92:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008c94:	431a      	orrs	r2, r3
 8008c96:	4b33      	ldr	r3, [pc, #204]	; (8008d64 <LPS22HH_0_Probe+0x170>)
 8008c98:	605a      	str	r2, [r3, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008c9a:	4b33      	ldr	r3, [pc, #204]	; (8008d68 <LPS22HH_0_Probe+0x174>)
 8008c9c:	4a30      	ldr	r2, [pc, #192]	; (8008d60 <LPS22HH_0_Probe+0x16c>)
 8008c9e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008ca0:	4b32      	ldr	r3, [pc, #200]	; (8008d6c <LPS22HH_0_Probe+0x178>)
 8008ca2:	4a33      	ldr	r2, [pc, #204]	; (8008d70 <LPS22HH_0_Probe+0x17c>)
 8008ca4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11d      	bne.n	8008ce8 <LPS22HH_0_Probe+0xf4>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	d019      	beq.n	8008ce8 <LPS22HH_0_Probe+0xf4>
 8008cb4:	187b      	adds	r3, r7, r1
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d115      	bne.n	8008ce8 <LPS22HH_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008cbc:	4b2d      	ldr	r3, [pc, #180]	; (8008d74 <LPS22HH_0_Probe+0x180>)
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <LPS22HH_0_Probe+0x184>)
 8008cc2:	3203      	adds	r2, #3
 8008cc4:	0092      	lsls	r2, r2, #2
 8008cc6:	492d      	ldr	r1, [pc, #180]	; (8008d7c <LPS22HH_0_Probe+0x188>)
 8008cc8:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008cca:	4b28      	ldr	r3, [pc, #160]	; (8008d6c <LPS22HH_0_Probe+0x178>)
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	4b25      	ldr	r3, [pc, #148]	; (8008d68 <LPS22HH_0_Probe+0x174>)
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	4790      	blx	r2
 8008cd8:	1e03      	subs	r3, r0, #0
 8008cda:	d003      	beq.n	8008ce4 <LPS22HH_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cdc:	2305      	movs	r3, #5
 8008cde:	425b      	negs	r3, r3
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce2:	e001      	b.n	8008ce8 <LPS22HH_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11e      	bne.n	8008d2c <LPS22HH_0_Probe+0x138>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	d01a      	beq.n	8008d2c <LPS22HH_0_Probe+0x138>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	18fb      	adds	r3, r7, r3
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d115      	bne.n	8008d2c <LPS22HH_0_Probe+0x138>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008d00:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <LPS22HH_0_Probe+0x180>)
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <LPS22HH_0_Probe+0x184>)
 8008d06:	3203      	adds	r2, #3
 8008d08:	0092      	lsls	r2, r2, #2
 8008d0a:	491d      	ldr	r1, [pc, #116]	; (8008d80 <LPS22HH_0_Probe+0x18c>)
 8008d0c:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008d0e:	4b17      	ldr	r3, [pc, #92]	; (8008d6c <LPS22HH_0_Probe+0x178>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <LPS22HH_0_Probe+0x174>)
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	0018      	movs	r0, r3
 8008d1a:	4790      	blx	r2
 8008d1c:	1e03      	subs	r3, r0, #0
 8008d1e:	d003      	beq.n	8008d28 <LPS22HH_0_Probe+0x134>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d20:	2305      	movs	r3, #5
 8008d22:	425b      	negs	r3, r3
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d26:	e001      	b.n	8008d2c <LPS22HH_0_Probe+0x138>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <LPS22HH_0_Probe+0x14c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2204      	movs	r2, #4
 8008d36:	4013      	ands	r3, r2
 8008d38:	d002      	beq.n	8008d40 <LPS22HH_0_Probe+0x14c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d3a:	2305      	movs	r3, #5
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b011      	add	sp, #68	; 0x44
 8008d48:	bd90      	pop	{r4, r7, pc}
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	08001945 	.word	0x08001945
 8008d50:	080019c1 	.word	0x080019c1
 8008d54:	08001a89 	.word	0x08001a89
 8008d58:	08001a11 	.word	0x08001a11
 8008d5c:	08001b01 	.word	0x08001b01
 8008d60:	20000bd4 	.word	0x20000bd4
 8008d64:	20000b9c 	.word	0x20000b9c
 8008d68:	20000b60 	.word	0x20000b60
 8008d6c:	20000b90 	.word	0x20000b90
 8008d70:	20000170 	.word	0x20000170
 8008d74:	20000224 	.word	0x20000224
 8008d78:	20000b6c 	.word	0x20000b6c
 8008d7c:	20000194 	.word	0x20000194
 8008d80:	20000180 	.word	0x20000180

08008d84 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008d84:	b590      	push	{r4, r7, lr}
 8008d86:	b091      	sub	sp, #68	; 0x44
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008d90:	2120      	movs	r1, #32
 8008d92:	187b      	adds	r3, r7, r1
 8008d94:	2200      	movs	r2, #0
 8008d96:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	2295      	movs	r2, #149	; 0x95
 8008d9c:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	4a42      	ldr	r2, [pc, #264]	; (8008eac <STTS751_0_Probe+0x128>)
 8008da2:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008da4:	187b      	adds	r3, r7, r1
 8008da6:	4a42      	ldr	r2, [pc, #264]	; (8008eb0 <STTS751_0_Probe+0x12c>)
 8008da8:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008daa:	187b      	adds	r3, r7, r1
 8008dac:	4a41      	ldr	r2, [pc, #260]	; (8008eb4 <STTS751_0_Probe+0x130>)
 8008dae:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008db0:	187b      	adds	r3, r7, r1
 8008db2:	4a41      	ldr	r2, [pc, #260]	; (8008eb8 <STTS751_0_Probe+0x134>)
 8008db4:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008db6:	187b      	adds	r3, r7, r1
 8008db8:	4a40      	ldr	r2, [pc, #256]	; (8008ebc <STTS751_0_Probe+0x138>)
 8008dba:	619a      	str	r2, [r3, #24]

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008dbc:	187a      	adds	r2, r7, r1
 8008dbe:	4b40      	ldr	r3, [pc, #256]	; (8008ec0 <STTS751_0_Probe+0x13c>)
 8008dc0:	0011      	movs	r1, r2
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f7fe ff60 	bl	8007c88 <STTS751_RegisterBusIO>
 8008dc8:	1e03      	subs	r3, r0, #0
 8008dca:	d003      	beq.n	8008dd4 <STTS751_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008dcc:	2307      	movs	r3, #7
 8008dce:	425b      	negs	r3, r3
 8008dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd2:	e065      	b.n	8008ea0 <STTS751_0_Probe+0x11c>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008dd4:	231f      	movs	r3, #31
 8008dd6:	18fa      	adds	r2, r7, r3
 8008dd8:	4b39      	ldr	r3, [pc, #228]	; (8008ec0 <STTS751_0_Probe+0x13c>)
 8008dda:	0011      	movs	r1, r2
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7fe ffed 	bl	8007dbc <STTS751_ReadID>
 8008de2:	1e03      	subs	r3, r0, #0
 8008de4:	d003      	beq.n	8008dee <STTS751_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008de6:	2307      	movs	r3, #7
 8008de8:	425b      	negs	r3, r3
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dec:	e058      	b.n	8008ea0 <STTS751_0_Probe+0x11c>
  }
  else if (id != STTS751_ID_MAN)
 8008dee:	231f      	movs	r3, #31
 8008df0:	18fb      	adds	r3, r7, r3
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b53      	cmp	r3, #83	; 0x53
 8008df6:	d003      	beq.n	8008e00 <STTS751_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008df8:	2307      	movs	r3, #7
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dfe:	e04f      	b.n	8008ea0 <STTS751_0_Probe+0x11c>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008e00:	240c      	movs	r4, #12
 8008e02:	193a      	adds	r2, r7, r4
 8008e04:	4b2e      	ldr	r3, [pc, #184]	; (8008ec0 <STTS751_0_Probe+0x13c>)
 8008e06:	0011      	movs	r1, r2
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f7fe fff3 	bl	8007df4 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008e0e:	0021      	movs	r1, r4
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	001a      	movs	r2, r3
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008e1e:	187b      	adds	r3, r7, r1
 8008e20:	789b      	ldrb	r3, [r3, #2]
 8008e22:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008e24:	431a      	orrs	r2, r3
 8008e26:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <STTS751_0_Probe+0x140>)
 8008e28:	609a      	str	r2, [r3, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008e2a:	4b27      	ldr	r3, [pc, #156]	; (8008ec8 <STTS751_0_Probe+0x144>)
 8008e2c:	4a24      	ldr	r2, [pc, #144]	; (8008ec0 <STTS751_0_Probe+0x13c>)
 8008e2e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8008e30:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <STTS751_0_Probe+0x148>)
 8008e32:	4a27      	ldr	r2, [pc, #156]	; (8008ed0 <STTS751_0_Probe+0x14c>)
 8008e34:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11d      	bne.n	8008e78 <STTS751_0_Probe+0xf4>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4013      	ands	r3, r2
 8008e42:	d019      	beq.n	8008e78 <STTS751_0_Probe+0xf4>
 8008e44:	187b      	adds	r3, r7, r1
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d115      	bne.n	8008e78 <STTS751_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008e4c:	4b21      	ldr	r3, [pc, #132]	; (8008ed4 <STTS751_0_Probe+0x150>)
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	4b21      	ldr	r3, [pc, #132]	; (8008ed8 <STTS751_0_Probe+0x154>)
 8008e52:	3206      	adds	r2, #6
 8008e54:	0092      	lsls	r2, r2, #2
 8008e56:	4921      	ldr	r1, [pc, #132]	; (8008edc <STTS751_0_Probe+0x158>)
 8008e58:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008e5a:	4b1c      	ldr	r3, [pc, #112]	; (8008ecc <STTS751_0_Probe+0x148>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <STTS751_0_Probe+0x144>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	0018      	movs	r0, r3
 8008e66:	4790      	blx	r2
 8008e68:	1e03      	subs	r3, r0, #0
 8008e6a:	d003      	beq.n	8008e74 <STTS751_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e6c:	2305      	movs	r3, #5
 8008e6e:	425b      	negs	r3, r3
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e72:	e001      	b.n	8008e78 <STTS751_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <STTS751_0_Probe+0x108>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2204      	movs	r2, #4
 8008e82:	4013      	ands	r3, r2
 8008e84:	d002      	beq.n	8008e8c <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e86:	2305      	movs	r3, #5
 8008e88:	425b      	negs	r3, r3
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <STTS751_0_Probe+0x11c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2202      	movs	r2, #2
 8008e96:	4013      	ands	r3, r2
 8008e98:	d002      	beq.n	8008ea0 <STTS751_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e9a:	2305      	movs	r3, #5
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b011      	add	sp, #68	; 0x44
 8008ea8:	bd90      	pop	{r4, r7, pc}
 8008eaa:	46c0      	nop			; (mov r8, r8)
 8008eac:	08001945 	.word	0x08001945
 8008eb0:	080019c1 	.word	0x080019c1
 8008eb4:	08001a89 	.word	0x08001a89
 8008eb8:	08001a11 	.word	0x08001a11
 8008ebc:	08001b01 	.word	0x08001b01
 8008ec0:	20000c00 	.word	0x20000c00
 8008ec4:	20000b9c 	.word	0x20000b9c
 8008ec8:	20000b60 	.word	0x20000b60
 8008ecc:	20000b90 	.word	0x20000b90
 8008ed0:	20000200 	.word	0x20000200
 8008ed4:	20000224 	.word	0x20000224
 8008ed8:	20000b6c 	.word	0x20000b6c
 8008edc:	20000210 	.word	0x20000210

08008ee0 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08e      	sub	sp, #56	; 0x38
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d100      	bne.n	8008efe <IKS01A3_MOTION_SENSOR_Init+0x1e>
 8008efc:	e079      	b.n	8008ff2 <IKS01A3_MOTION_SENSOR_Init+0x112>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d900      	bls.n	8008f06 <IKS01A3_MOTION_SENSOR_Init+0x26>
 8008f04:	e0ac      	b.n	8009060 <IKS01A3_MOTION_SENSOR_Init+0x180>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <IKS01A3_MOTION_SENSOR_Init+0x34>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d038      	beq.n	8008f84 <IKS01A3_MOTION_SENSOR_Init+0xa4>
 8008f12:	e0a5      	b.n	8009060 <IKS01A3_MOTION_SENSOR_Init+0x180>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	0018      	movs	r0, r3
 8008f18:	f000 fa3e 	bl	8009398 <LSM6DSO_0_Probe>
 8008f1c:	1e03      	subs	r3, r0, #0
 8008f1e:	d002      	beq.n	8008f26 <IKS01A3_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 8008f20:	2301      	movs	r3, #1
 8008f22:	425b      	negs	r3, r3
 8008f24:	e0db      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008f26:	4b70      	ldr	r3, [pc, #448]	; (80090e8 <IKS01A3_MOTION_SENSOR_Init+0x208>)
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	0092      	lsls	r2, r2, #2
 8008f2c:	58d3      	ldr	r3, [r2, r3]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	4a6e      	ldr	r2, [pc, #440]	; (80090ec <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	0089      	lsls	r1, r1, #2
 8008f36:	588a      	ldr	r2, [r1, r2]
 8008f38:	210c      	movs	r1, #12
 8008f3a:	1879      	adds	r1, r7, r1
 8008f3c:	0010      	movs	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	1e03      	subs	r3, r0, #0
 8008f42:	d002      	beq.n	8008f4a <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008f44:	2307      	movs	r3, #7
 8008f46:	425b      	negs	r3, r3
 8008f48:	e0c9      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <IKS01A3_MOTION_SENSOR_Init+0x7c>
      {
        component_functions |= MOTION_ACCELERO;
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	2202      	movs	r2, #2
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	18fb      	adds	r3, r7, r3
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d103      	bne.n	8008f6e <IKS01A3_MOTION_SENSOR_Init+0x8e>
      {
        component_functions |= MOTION_GYRO;
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	2201      	movs	r2, #1
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008f6e:	230c      	movs	r3, #12
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	789b      	ldrb	r3, [r3, #2]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d000      	beq.n	8008f7a <IKS01A3_MOTION_SENSOR_Init+0x9a>
 8008f78:	e076      	b.n	8009068 <IKS01A3_MOTION_SENSOR_Init+0x188>
      {
        component_functions |= MOTION_MAGNETO;
 8008f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008f82:	e071      	b.n	8009068 <IKS01A3_MOTION_SENSOR_Init+0x188>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	0018      	movs	r0, r3
 8008f88:	f000 facc 	bl	8009524 <LIS2DW12_0_Probe>
 8008f8c:	1e03      	subs	r3, r0, #0
 8008f8e:	d002      	beq.n	8008f96 <IKS01A3_MOTION_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8008f90:	2301      	movs	r3, #1
 8008f92:	425b      	negs	r3, r3
 8008f94:	e0a3      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008f96:	4b54      	ldr	r3, [pc, #336]	; (80090e8 <IKS01A3_MOTION_SENSOR_Init+0x208>)
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	0092      	lsls	r2, r2, #2
 8008f9c:	58d3      	ldr	r3, [r2, r3]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	4a52      	ldr	r2, [pc, #328]	; (80090ec <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	0089      	lsls	r1, r1, #2
 8008fa6:	588a      	ldr	r2, [r1, r2]
 8008fa8:	210c      	movs	r1, #12
 8008faa:	1879      	adds	r1, r7, r1
 8008fac:	0010      	movs	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	1e03      	subs	r3, r0, #0
 8008fb2:	d002      	beq.n	8008fba <IKS01A3_MOTION_SENSOR_Init+0xda>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008fb4:	2307      	movs	r3, #7
 8008fb6:	425b      	negs	r3, r3
 8008fb8:	e091      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 8008fba:	230c      	movs	r3, #12
 8008fbc:	18fb      	adds	r3, r7, r3
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d103      	bne.n	8008fcc <IKS01A3_MOTION_SENSOR_Init+0xec>
      {
        component_functions |= MOTION_ACCELERO;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008fcc:	230c      	movs	r3, #12
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d103      	bne.n	8008fde <IKS01A3_MOTION_SENSOR_Init+0xfe>
      {
        component_functions |= MOTION_GYRO;
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	2201      	movs	r2, #1
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008fde:	230c      	movs	r3, #12
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	789b      	ldrb	r3, [r3, #2]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d141      	bne.n	800906c <IKS01A3_MOTION_SENSOR_Init+0x18c>
      {
        component_functions |= MOTION_MAGNETO;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	2204      	movs	r2, #4
 8008fec:	4313      	orrs	r3, r2
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008ff0:	e03c      	b.n	800906c <IKS01A3_MOTION_SENSOR_Init+0x18c>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f000 fb43 	bl	8009680 <LIS2MDL_0_Probe>
 8008ffa:	1e03      	subs	r3, r0, #0
 8008ffc:	d002      	beq.n	8009004 <IKS01A3_MOTION_SENSOR_Init+0x124>
      {
        return BSP_ERROR_NO_INIT;
 8008ffe:	2301      	movs	r3, #1
 8009000:	425b      	negs	r3, r3
 8009002:	e06c      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009004:	4b38      	ldr	r3, [pc, #224]	; (80090e8 <IKS01A3_MOTION_SENSOR_Init+0x208>)
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	0092      	lsls	r2, r2, #2
 800900a:	58d3      	ldr	r3, [r2, r3]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	4a37      	ldr	r2, [pc, #220]	; (80090ec <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	0089      	lsls	r1, r1, #2
 8009014:	588a      	ldr	r2, [r1, r2]
 8009016:	210c      	movs	r1, #12
 8009018:	1879      	adds	r1, r7, r1
 800901a:	0010      	movs	r0, r2
 800901c:	4798      	blx	r3
 800901e:	1e03      	subs	r3, r0, #0
 8009020:	d002      	beq.n	8009028 <IKS01A3_MOTION_SENSOR_Init+0x148>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009022:	2307      	movs	r3, #7
 8009024:	425b      	negs	r3, r3
 8009026:	e05a      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 8009028:	230c      	movs	r3, #12
 800902a:	18fb      	adds	r3, r7, r3
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d103      	bne.n	800903a <IKS01A3_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_ACCELERO;
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	2202      	movs	r2, #2
 8009036:	4313      	orrs	r3, r2
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800903a:	230c      	movs	r3, #12
 800903c:	18fb      	adds	r3, r7, r3
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d103      	bne.n	800904c <IKS01A3_MOTION_SENSOR_Init+0x16c>
      {
        component_functions |= MOTION_GYRO;
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	2201      	movs	r2, #1
 8009048:	4313      	orrs	r3, r2
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800904c:	230c      	movs	r3, #12
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	789b      	ldrb	r3, [r3, #2]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d10c      	bne.n	8009070 <IKS01A3_MOTION_SENSOR_Init+0x190>
      {
        component_functions |= MOTION_MAGNETO;
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	2204      	movs	r2, #4
 800905a:	4313      	orrs	r3, r2
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800905e:	e007      	b.n	8009070 <IKS01A3_MOTION_SENSOR_Init+0x190>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009060:	2302      	movs	r3, #2
 8009062:	425b      	negs	r3, r3
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009066:	e004      	b.n	8009072 <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 8009068:	46c0      	nop			; (mov r8, r8)
 800906a:	e002      	b.n	8009072 <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 800906c:	46c0      	nop			; (mov r8, r8)
 800906e:	e000      	b.n	8009072 <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 8009070:	46c0      	nop			; (mov r8, r8)
  }

  if (ret != BSP_ERROR_NONE)
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <IKS01A3_MOTION_SENSOR_Init+0x19c>
  {
    return ret;
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	e030      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800907c:	2300      	movs	r3, #0
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009080:	e029      	b.n	80090d6 <IKS01A3_MOTION_SENSOR_Init+0x1f6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009086:	4013      	ands	r3, r2
 8009088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908a:	429a      	cmp	r2, r3
 800908c:	d11d      	bne.n	80090ca <IKS01A3_MOTION_SENSOR_Init+0x1ea>
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009092:	4013      	ands	r3, r2
 8009094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009096:	429a      	cmp	r2, r3
 8009098:	d117      	bne.n	80090ca <IKS01A3_MOTION_SENSOR_Init+0x1ea>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800909a:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <IKS01A3_MOTION_SENSOR_Init+0x210>)
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	0092      	lsls	r2, r2, #2
 80090a0:	58d0      	ldr	r0, [r2, r3]
 80090a2:	4914      	ldr	r1, [pc, #80]	; (80090f4 <IKS01A3_MOTION_SENSOR_Init+0x214>)
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	0013      	movs	r3, r2
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	189b      	adds	r3, r3, r2
 80090ac:	181b      	adds	r3, r3, r0
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	585b      	ldr	r3, [r3, r1]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	0089      	lsls	r1, r1, #2
 80090ba:	588a      	ldr	r2, [r1, r2]
 80090bc:	0010      	movs	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	1e03      	subs	r3, r0, #0
 80090c2:	d002      	beq.n	80090ca <IKS01A3_MOTION_SENSOR_Init+0x1ea>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80090c4:	2305      	movs	r3, #5
 80090c6:	425b      	negs	r3, r3
 80090c8:	e009      	b.n	80090de <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
    }
    function = function << 1;
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	3301      	adds	r3, #1
 80090d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d9d2      	bls.n	8009082 <IKS01A3_MOTION_SENSOR_Init+0x1a2>
  }

  return ret;
 80090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090de:	0018      	movs	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	b00e      	add	sp, #56	; 0x38
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	20000c60 	.word	0x20000c60
 80090ec:	20000c30 	.word	0x20000c30
 80090f0:	20000238 	.word	0x20000238
 80090f4:	20000c3c 	.word	0x20000c3c

080090f8 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d903      	bls.n	8009110 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009108:	2302      	movs	r3, #2
 800910a:	425b      	negs	r3, r3
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	e027      	b.n	8009160 <IKS01A3_MOTION_SENSOR_Enable+0x68>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009110:	4b16      	ldr	r3, [pc, #88]	; (800916c <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	58d3      	ldr	r3, [r2, r3]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	4013      	ands	r3, r2
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d11b      	bne.n	800915a <IKS01A3_MOTION_SENSOR_Enable+0x62>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	0092      	lsls	r2, r2, #2
 8009128:	58d0      	ldr	r0, [r2, r3]
 800912a:	4912      	ldr	r1, [pc, #72]	; (8009174 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	0013      	movs	r3, r2
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	189b      	adds	r3, r3, r2
 8009134:	181b      	adds	r3, r3, r0
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	585b      	ldr	r3, [r3, r1]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a0e      	ldr	r2, [pc, #56]	; (8009178 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	0089      	lsls	r1, r1, #2
 8009142:	588a      	ldr	r2, [r1, r2]
 8009144:	0010      	movs	r0, r2
 8009146:	4798      	blx	r3
 8009148:	1e03      	subs	r3, r0, #0
 800914a:	d003      	beq.n	8009154 <IKS01A3_MOTION_SENSOR_Enable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800914c:	2305      	movs	r3, #5
 800914e:	425b      	negs	r3, r3
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e005      	b.n	8009160 <IKS01A3_MOTION_SENSOR_Enable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e002      	b.n	8009160 <IKS01A3_MOTION_SENSOR_Enable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800915a:	2302      	movs	r3, #2
 800915c:	425b      	negs	r3, r3
 800915e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009160:	68fb      	ldr	r3, [r7, #12]
}
 8009162:	0018      	movs	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	b004      	add	sp, #16
 8009168:	bd80      	pop	{r7, pc}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	20000c6c 	.word	0x20000c6c
 8009170:	20000238 	.word	0x20000238
 8009174:	20000c3c 	.word	0x20000c3c
 8009178:	20000c30 	.word	0x20000c30

0800917c <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d903      	bls.n	8009194 <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800918c:	2302      	movs	r3, #2
 800918e:	425b      	negs	r3, r3
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	e027      	b.n	80091e4 <IKS01A3_MOTION_SENSOR_Disable+0x68>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009194:	4b16      	ldr	r3, [pc, #88]	; (80091f0 <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	0092      	lsls	r2, r2, #2
 800919a:	58d3      	ldr	r3, [r2, r3]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	4013      	ands	r3, r2
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d11b      	bne.n	80091de <IKS01A3_MOTION_SENSOR_Disable+0x62>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80091a6:	4b13      	ldr	r3, [pc, #76]	; (80091f4 <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	0092      	lsls	r2, r2, #2
 80091ac:	58d0      	ldr	r0, [r2, r3]
 80091ae:	4912      	ldr	r1, [pc, #72]	; (80091f8 <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	0013      	movs	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	189b      	adds	r3, r3, r2
 80091b8:	181b      	adds	r3, r3, r0
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	585b      	ldr	r3, [r3, r1]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4a0e      	ldr	r2, [pc, #56]	; (80091fc <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	0089      	lsls	r1, r1, #2
 80091c6:	588a      	ldr	r2, [r1, r2]
 80091c8:	0010      	movs	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	1e03      	subs	r3, r0, #0
 80091ce:	d003      	beq.n	80091d8 <IKS01A3_MOTION_SENSOR_Disable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80091d0:	2305      	movs	r3, #5
 80091d2:	425b      	negs	r3, r3
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e005      	b.n	80091e4 <IKS01A3_MOTION_SENSOR_Disable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	e002      	b.n	80091e4 <IKS01A3_MOTION_SENSOR_Disable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80091de:	2302      	movs	r3, #2
 80091e0:	425b      	negs	r3, r3
 80091e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80091e4:	68fb      	ldr	r3, [r7, #12]
}
 80091e6:	0018      	movs	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	b004      	add	sp, #16
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	46c0      	nop			; (mov r8, r8)
 80091f0:	20000c6c 	.word	0x20000c6c
 80091f4:	20000238 	.word	0x20000238
 80091f8:	20000c3c 	.word	0x20000c3c
 80091fc:	20000c30 	.word	0x20000c30

08009200 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d903      	bls.n	800921a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009212:	2302      	movs	r3, #2
 8009214:	425b      	negs	r3, r3
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e028      	b.n	800926c <IKS01A3_MOTION_SENSOR_GetAxes+0x6c>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800921a:	4b17      	ldr	r3, [pc, #92]	; (8009278 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	0092      	lsls	r2, r2, #2
 8009220:	58d3      	ldr	r3, [r2, r3]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4013      	ands	r3, r2
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	429a      	cmp	r2, r3
 800922a:	d11c      	bne.n	8009266 <IKS01A3_MOTION_SENSOR_GetAxes+0x66>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800922c:	4b13      	ldr	r3, [pc, #76]	; (800927c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	0092      	lsls	r2, r2, #2
 8009232:	58d0      	ldr	r0, [r2, r3]
 8009234:	4912      	ldr	r1, [pc, #72]	; (8009280 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	0013      	movs	r3, r2
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	189b      	adds	r3, r3, r2
 800923e:	181b      	adds	r3, r3, r0
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	585b      	ldr	r3, [r3, r1]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	4a0f      	ldr	r2, [pc, #60]	; (8009284 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009248:	68f9      	ldr	r1, [r7, #12]
 800924a:	0089      	lsls	r1, r1, #2
 800924c:	588a      	ldr	r2, [r1, r2]
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	0010      	movs	r0, r2
 8009252:	4798      	blx	r3
 8009254:	1e03      	subs	r3, r0, #0
 8009256:	d003      	beq.n	8009260 <IKS01A3_MOTION_SENSOR_GetAxes+0x60>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009258:	2305      	movs	r3, #5
 800925a:	425b      	negs	r3, r3
 800925c:	617b      	str	r3, [r7, #20]
 800925e:	e005      	b.n	800926c <IKS01A3_MOTION_SENSOR_GetAxes+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	e002      	b.n	800926c <IKS01A3_MOTION_SENSOR_GetAxes+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009266:	2302      	movs	r3, #2
 8009268:	425b      	negs	r3, r3
 800926a:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800926c:	697b      	ldr	r3, [r7, #20]
}
 800926e:	0018      	movs	r0, r3
 8009270:	46bd      	mov	sp, r7
 8009272:	b006      	add	sp, #24
 8009274:	bd80      	pop	{r7, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	20000c6c 	.word	0x20000c6c
 800927c:	20000238 	.word	0x20000238
 8009280:	20000c3c 	.word	0x20000c3c
 8009284:	20000c30 	.word	0x20000c30

08009288 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d903      	bls.n	80092a2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800929a:	2302      	movs	r3, #2
 800929c:	425b      	negs	r3, r3
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e028      	b.n	80092f4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80092a2:	4b17      	ldr	r3, [pc, #92]	; (8009300 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x78>)
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	0092      	lsls	r2, r2, #2
 80092a8:	58d3      	ldr	r3, [r2, r3]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4013      	ands	r3, r2
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d11c      	bne.n	80092ee <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80092b4:	4b13      	ldr	r3, [pc, #76]	; (8009304 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	58d0      	ldr	r0, [r2, r3]
 80092bc:	4912      	ldr	r1, [pc, #72]	; (8009308 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	0013      	movs	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	189b      	adds	r3, r3, r2
 80092c6:	181b      	adds	r3, r3, r0
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	585b      	ldr	r3, [r3, r1]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	4a0f      	ldr	r2, [pc, #60]	; (800930c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80092d0:	68f9      	ldr	r1, [r7, #12]
 80092d2:	0089      	lsls	r1, r1, #2
 80092d4:	588a      	ldr	r2, [r1, r2]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	0010      	movs	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	1e03      	subs	r3, r0, #0
 80092de:	d003      	beq.n	80092e8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x60>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092e0:	2305      	movs	r3, #5
 80092e2:	425b      	negs	r3, r3
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	e005      	b.n	80092f4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e002      	b.n	80092f4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80092ee:	2302      	movs	r3, #2
 80092f0:	425b      	negs	r3, r3
 80092f2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80092f4:	697b      	ldr	r3, [r7, #20]
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b006      	add	sp, #24
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	20000c6c 	.word	0x20000c6c
 8009304:	20000238 	.word	0x20000238
 8009308:	20000c3c 	.word	0x20000c3c
 800930c:	20000c30 	.word	0x20000c30

08009310 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d903      	bls.n	800932a <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009322:	2302      	movs	r3, #2
 8009324:	425b      	negs	r3, r3
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	e028      	b.n	800937c <IKS01A3_MOTION_SENSOR_SetFullScale+0x6c>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800932a:	4b17      	ldr	r3, [pc, #92]	; (8009388 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	0092      	lsls	r2, r2, #2
 8009330:	58d3      	ldr	r3, [r2, r3]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4013      	ands	r3, r2
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	429a      	cmp	r2, r3
 800933a:	d11c      	bne.n	8009376 <IKS01A3_MOTION_SENSOR_SetFullScale+0x66>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800933c:	4b13      	ldr	r3, [pc, #76]	; (800938c <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	0092      	lsls	r2, r2, #2
 8009342:	58d0      	ldr	r0, [r2, r3]
 8009344:	4912      	ldr	r1, [pc, #72]	; (8009390 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	0013      	movs	r3, r2
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	189b      	adds	r3, r3, r2
 800934e:	181b      	adds	r3, r3, r0
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	585b      	ldr	r3, [r3, r1]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	4a0f      	ldr	r2, [pc, #60]	; (8009394 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8009358:	68f9      	ldr	r1, [r7, #12]
 800935a:	0089      	lsls	r1, r1, #2
 800935c:	588a      	ldr	r2, [r1, r2]
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	0010      	movs	r0, r2
 8009362:	4798      	blx	r3
 8009364:	1e03      	subs	r3, r0, #0
 8009366:	d003      	beq.n	8009370 <IKS01A3_MOTION_SENSOR_SetFullScale+0x60>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009368:	2305      	movs	r3, #5
 800936a:	425b      	negs	r3, r3
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e005      	b.n	800937c <IKS01A3_MOTION_SENSOR_SetFullScale+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	e002      	b.n	800937c <IKS01A3_MOTION_SENSOR_SetFullScale+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009376:	2302      	movs	r3, #2
 8009378:	425b      	negs	r3, r3
 800937a:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800937c:	697b      	ldr	r3, [r7, #20]
}
 800937e:	0018      	movs	r0, r3
 8009380:	46bd      	mov	sp, r7
 8009382:	b006      	add	sp, #24
 8009384:	bd80      	pop	{r7, pc}
 8009386:	46c0      	nop			; (mov r8, r8)
 8009388:	20000c6c 	.word	0x20000c6c
 800938c:	20000238 	.word	0x20000238
 8009390:	20000c3c 	.word	0x20000c3c
 8009394:	20000c30 	.word	0x20000c30

08009398 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b093      	sub	sp, #76	; 0x4c
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80093a4:	2128      	movs	r1, #40	; 0x28
 80093a6:	187b      	adds	r3, r7, r1
 80093a8:	2200      	movs	r2, #0
 80093aa:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80093ac:	187b      	adds	r3, r7, r1
 80093ae:	22d7      	movs	r2, #215	; 0xd7
 80093b0:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	4a4d      	ldr	r2, [pc, #308]	; (80094ec <LSM6DSO_0_Probe+0x154>)
 80093b6:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	4a4d      	ldr	r2, [pc, #308]	; (80094f0 <LSM6DSO_0_Probe+0x158>)
 80093bc:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80093be:	187b      	adds	r3, r7, r1
 80093c0:	4a4c      	ldr	r2, [pc, #304]	; (80094f4 <LSM6DSO_0_Probe+0x15c>)
 80093c2:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80093c4:	187b      	adds	r3, r7, r1
 80093c6:	4a4c      	ldr	r2, [pc, #304]	; (80094f8 <LSM6DSO_0_Probe+0x160>)
 80093c8:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 80093ca:	187b      	adds	r3, r7, r1
 80093cc:	4a4b      	ldr	r2, [pc, #300]	; (80094fc <LSM6DSO_0_Probe+0x164>)
 80093ce:	619a      	str	r2, [r3, #24]

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80093d0:	187a      	adds	r2, r7, r1
 80093d2:	4b4b      	ldr	r3, [pc, #300]	; (8009500 <LSM6DSO_0_Probe+0x168>)
 80093d4:	0011      	movs	r1, r2
 80093d6:	0018      	movs	r0, r3
 80093d8:	f7fc fc1c 	bl	8005c14 <LSM6DSO_RegisterBusIO>
 80093dc:	1e03      	subs	r3, r0, #0
 80093de:	d003      	beq.n	80093e8 <LSM6DSO_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093e0:	2307      	movs	r3, #7
 80093e2:	425b      	negs	r3, r3
 80093e4:	647b      	str	r3, [r7, #68]	; 0x44
 80093e6:	e07b      	b.n	80094e0 <LSM6DSO_0_Probe+0x148>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80093e8:	2327      	movs	r3, #39	; 0x27
 80093ea:	18fa      	adds	r2, r7, r3
 80093ec:	4b44      	ldr	r3, [pc, #272]	; (8009500 <LSM6DSO_0_Probe+0x168>)
 80093ee:	0011      	movs	r1, r2
 80093f0:	0018      	movs	r0, r3
 80093f2:	f7fc fd09 	bl	8005e08 <LSM6DSO_ReadID>
 80093f6:	1e03      	subs	r3, r0, #0
 80093f8:	d003      	beq.n	8009402 <LSM6DSO_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093fa:	2307      	movs	r3, #7
 80093fc:	425b      	negs	r3, r3
 80093fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009400:	e06e      	b.n	80094e0 <LSM6DSO_0_Probe+0x148>
  }
  else if (id != LSM6DSO_ID)
 8009402:	2327      	movs	r3, #39	; 0x27
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b6c      	cmp	r3, #108	; 0x6c
 800940a:	d003      	beq.n	8009414 <LSM6DSO_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800940c:	2307      	movs	r3, #7
 800940e:	425b      	negs	r3, r3
 8009410:	647b      	str	r3, [r7, #68]	; 0x44
 8009412:	e065      	b.n	80094e0 <LSM6DSO_0_Probe+0x148>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009414:	2408      	movs	r4, #8
 8009416:	193a      	adds	r2, r7, r4
 8009418:	4b39      	ldr	r3, [pc, #228]	; (8009500 <LSM6DSO_0_Probe+0x168>)
 800941a:	0011      	movs	r1, r2
 800941c:	0018      	movs	r0, r3
 800941e:	f7fc fd09 	bl	8005e34 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009422:	0021      	movs	r1, r4
 8009424:	187b      	adds	r3, r7, r1
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	001a      	movs	r2, r3
 800942a:	187b      	adds	r3, r7, r1
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	431a      	orrs	r2, r3
 8009432:	187b      	adds	r3, r7, r1
 8009434:	789b      	ldrb	r3, [r3, #2]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	431a      	orrs	r2, r3
 800943a:	4b32      	ldr	r3, [pc, #200]	; (8009504 <LSM6DSO_0_Probe+0x16c>)
 800943c:	601a      	str	r2, [r3, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800943e:	4b32      	ldr	r3, [pc, #200]	; (8009508 <LSM6DSO_0_Probe+0x170>)
 8009440:	4a2f      	ldr	r2, [pc, #188]	; (8009500 <LSM6DSO_0_Probe+0x168>)
 8009442:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009444:	4b31      	ldr	r3, [pc, #196]	; (800950c <LSM6DSO_0_Probe+0x174>)
 8009446:	4a32      	ldr	r2, [pc, #200]	; (8009510 <LSM6DSO_0_Probe+0x178>)
 8009448:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800944a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800944c:	2b00      	cmp	r3, #0
 800944e:	d11c      	bne.n	800948a <LSM6DSO_0_Probe+0xf2>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	4013      	ands	r3, r2
 8009456:	d018      	beq.n	800948a <LSM6DSO_0_Probe+0xf2>
 8009458:	187b      	adds	r3, r7, r1
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d114      	bne.n	800948a <LSM6DSO_0_Probe+0xf2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009460:	4b2c      	ldr	r3, [pc, #176]	; (8009514 <LSM6DSO_0_Probe+0x17c>)
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	4b2c      	ldr	r3, [pc, #176]	; (8009518 <LSM6DSO_0_Probe+0x180>)
 8009466:	0092      	lsls	r2, r2, #2
 8009468:	492c      	ldr	r1, [pc, #176]	; (800951c <LSM6DSO_0_Probe+0x184>)
 800946a:	50d1      	str	r1, [r2, r3]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800946c:	4b27      	ldr	r3, [pc, #156]	; (800950c <LSM6DSO_0_Probe+0x174>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b25      	ldr	r3, [pc, #148]	; (8009508 <LSM6DSO_0_Probe+0x170>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	0018      	movs	r0, r3
 8009478:	4790      	blx	r2
 800947a:	1e03      	subs	r3, r0, #0
 800947c:	d003      	beq.n	8009486 <LSM6DSO_0_Probe+0xee>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800947e:	2305      	movs	r3, #5
 8009480:	425b      	negs	r3, r3
 8009482:	647b      	str	r3, [r7, #68]	; 0x44
 8009484:	e001      	b.n	800948a <LSM6DSO_0_Probe+0xf2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009486:	2300      	movs	r3, #0
 8009488:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800948a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11d      	bne.n	80094cc <LSM6DSO_0_Probe+0x134>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	4013      	ands	r3, r2
 8009496:	d019      	beq.n	80094cc <LSM6DSO_0_Probe+0x134>
 8009498:	2308      	movs	r3, #8
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d114      	bne.n	80094cc <LSM6DSO_0_Probe+0x134>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <LSM6DSO_0_Probe+0x17c>)
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	4b1c      	ldr	r3, [pc, #112]	; (8009518 <LSM6DSO_0_Probe+0x180>)
 80094a8:	0092      	lsls	r2, r2, #2
 80094aa:	491d      	ldr	r1, [pc, #116]	; (8009520 <LSM6DSO_0_Probe+0x188>)
 80094ac:	50d1      	str	r1, [r2, r3]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80094ae:	4b17      	ldr	r3, [pc, #92]	; (800950c <LSM6DSO_0_Probe+0x174>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4b14      	ldr	r3, [pc, #80]	; (8009508 <LSM6DSO_0_Probe+0x170>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	0018      	movs	r0, r3
 80094ba:	4790      	blx	r2
 80094bc:	1e03      	subs	r3, r0, #0
 80094be:	d003      	beq.n	80094c8 <LSM6DSO_0_Probe+0x130>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80094c0:	2305      	movs	r3, #5
 80094c2:	425b      	negs	r3, r3
 80094c4:	647b      	str	r3, [r7, #68]	; 0x44
 80094c6:	e001      	b.n	80094cc <LSM6DSO_0_Probe+0x134>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80094cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <LSM6DSO_0_Probe+0x148>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2204      	movs	r2, #4
 80094d6:	4013      	ands	r3, r2
 80094d8:	d002      	beq.n	80094e0 <LSM6DSO_0_Probe+0x148>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80094da:	2305      	movs	r3, #5
 80094dc:	425b      	negs	r3, r3
 80094de:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80094e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80094e2:	0018      	movs	r0, r3
 80094e4:	46bd      	mov	sp, r7
 80094e6:	b013      	add	sp, #76	; 0x4c
 80094e8:	bd90      	pop	{r4, r7, pc}
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	08001945 	.word	0x08001945
 80094f0:	080019c1 	.word	0x080019c1
 80094f4:	08001a89 	.word	0x08001a89
 80094f8:	08001a11 	.word	0x08001a11
 80094fc:	08001b01 	.word	0x08001b01
 8009500:	20000c78 	.word	0x20000c78
 8009504:	20000c6c 	.word	0x20000c6c
 8009508:	20000c30 	.word	0x20000c30
 800950c:	20000c60 	.word	0x20000c60
 8009510:	200001a8 	.word	0x200001a8
 8009514:	20000238 	.word	0x20000238
 8009518:	20000c3c 	.word	0x20000c3c
 800951c:	200001dc 	.word	0x200001dc
 8009520:	200001b8 	.word	0x200001b8

08009524 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009524:	b590      	push	{r4, r7, lr}
 8009526:	b093      	sub	sp, #76	; 0x4c
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800952c:	2300      	movs	r3, #0
 800952e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009530:	2128      	movs	r1, #40	; 0x28
 8009532:	187b      	adds	r3, r7, r1
 8009534:	2200      	movs	r2, #0
 8009536:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009538:	187b      	adds	r3, r7, r1
 800953a:	2233      	movs	r2, #51	; 0x33
 800953c:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800953e:	187b      	adds	r3, r7, r1
 8009540:	4a42      	ldr	r2, [pc, #264]	; (800964c <LIS2DW12_0_Probe+0x128>)
 8009542:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009544:	187b      	adds	r3, r7, r1
 8009546:	4a42      	ldr	r2, [pc, #264]	; (8009650 <LIS2DW12_0_Probe+0x12c>)
 8009548:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800954a:	187b      	adds	r3, r7, r1
 800954c:	4a41      	ldr	r2, [pc, #260]	; (8009654 <LIS2DW12_0_Probe+0x130>)
 800954e:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009550:	187b      	adds	r3, r7, r1
 8009552:	4a41      	ldr	r2, [pc, #260]	; (8009658 <LIS2DW12_0_Probe+0x134>)
 8009554:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009556:	187b      	adds	r3, r7, r1
 8009558:	4a40      	ldr	r2, [pc, #256]	; (800965c <LIS2DW12_0_Probe+0x138>)
 800955a:	619a      	str	r2, [r3, #24]

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800955c:	187a      	adds	r2, r7, r1
 800955e:	4b40      	ldr	r3, [pc, #256]	; (8009660 <LIS2DW12_0_Probe+0x13c>)
 8009560:	0011      	movs	r1, r2
 8009562:	0018      	movs	r0, r3
 8009564:	f7f9 fa8c 	bl	8002a80 <LIS2DW12_RegisterBusIO>
 8009568:	1e03      	subs	r3, r0, #0
 800956a:	d003      	beq.n	8009574 <LIS2DW12_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800956c:	2307      	movs	r3, #7
 800956e:	425b      	negs	r3, r3
 8009570:	647b      	str	r3, [r7, #68]	; 0x44
 8009572:	e065      	b.n	8009640 <LIS2DW12_0_Probe+0x11c>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009574:	2327      	movs	r3, #39	; 0x27
 8009576:	18fa      	adds	r2, r7, r3
 8009578:	4b39      	ldr	r3, [pc, #228]	; (8009660 <LIS2DW12_0_Probe+0x13c>)
 800957a:	0011      	movs	r1, r2
 800957c:	0018      	movs	r0, r3
 800957e:	f7f9 fb62 	bl	8002c46 <LIS2DW12_ReadID>
 8009582:	1e03      	subs	r3, r0, #0
 8009584:	d003      	beq.n	800958e <LIS2DW12_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009586:	2307      	movs	r3, #7
 8009588:	425b      	negs	r3, r3
 800958a:	647b      	str	r3, [r7, #68]	; 0x44
 800958c:	e058      	b.n	8009640 <LIS2DW12_0_Probe+0x11c>
  }
  else if (id != LIS2DW12_ID)
 800958e:	2327      	movs	r3, #39	; 0x27
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b44      	cmp	r3, #68	; 0x44
 8009596:	d003      	beq.n	80095a0 <LIS2DW12_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009598:	2307      	movs	r3, #7
 800959a:	425b      	negs	r3, r3
 800959c:	647b      	str	r3, [r7, #68]	; 0x44
 800959e:	e04f      	b.n	8009640 <LIS2DW12_0_Probe+0x11c>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80095a0:	2408      	movs	r4, #8
 80095a2:	193a      	adds	r2, r7, r4
 80095a4:	4b2e      	ldr	r3, [pc, #184]	; (8009660 <LIS2DW12_0_Probe+0x13c>)
 80095a6:	0011      	movs	r1, r2
 80095a8:	0018      	movs	r0, r3
 80095aa:	f7f9 fb63 	bl	8002c74 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80095ae:	0021      	movs	r1, r4
 80095b0:	187b      	adds	r3, r7, r1
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	001a      	movs	r2, r3
 80095b6:	187b      	adds	r3, r7, r1
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	431a      	orrs	r2, r3
 80095be:	187b      	adds	r3, r7, r1
 80095c0:	789b      	ldrb	r3, [r3, #2]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	431a      	orrs	r2, r3
 80095c6:	4b27      	ldr	r3, [pc, #156]	; (8009664 <LIS2DW12_0_Probe+0x140>)
 80095c8:	605a      	str	r2, [r3, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80095ca:	4b27      	ldr	r3, [pc, #156]	; (8009668 <LIS2DW12_0_Probe+0x144>)
 80095cc:	4a24      	ldr	r2, [pc, #144]	; (8009660 <LIS2DW12_0_Probe+0x13c>)
 80095ce:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80095d0:	4b26      	ldr	r3, [pc, #152]	; (800966c <LIS2DW12_0_Probe+0x148>)
 80095d2:	4a27      	ldr	r2, [pc, #156]	; (8009670 <LIS2DW12_0_Probe+0x14c>)
 80095d4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80095d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11d      	bne.n	8009618 <LIS2DW12_0_Probe+0xf4>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	4013      	ands	r3, r2
 80095e2:	d019      	beq.n	8009618 <LIS2DW12_0_Probe+0xf4>
 80095e4:	187b      	adds	r3, r7, r1
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d115      	bne.n	8009618 <LIS2DW12_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80095ec:	4b21      	ldr	r3, [pc, #132]	; (8009674 <LIS2DW12_0_Probe+0x150>)
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	4b21      	ldr	r3, [pc, #132]	; (8009678 <LIS2DW12_0_Probe+0x154>)
 80095f2:	3203      	adds	r2, #3
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	4921      	ldr	r1, [pc, #132]	; (800967c <LIS2DW12_0_Probe+0x158>)
 80095f8:	50d1      	str	r1, [r2, r3]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80095fa:	4b1c      	ldr	r3, [pc, #112]	; (800966c <LIS2DW12_0_Probe+0x148>)
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	4b19      	ldr	r3, [pc, #100]	; (8009668 <LIS2DW12_0_Probe+0x144>)
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	0018      	movs	r0, r3
 8009606:	4790      	blx	r2
 8009608:	1e03      	subs	r3, r0, #0
 800960a:	d003      	beq.n	8009614 <LIS2DW12_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800960c:	2305      	movs	r3, #5
 800960e:	425b      	negs	r3, r3
 8009610:	647b      	str	r3, [r7, #68]	; 0x44
 8009612:	e001      	b.n	8009618 <LIS2DW12_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009614:	2300      	movs	r3, #0
 8009616:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <LIS2DW12_0_Probe+0x108>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	4013      	ands	r3, r2
 8009624:	d002      	beq.n	800962c <LIS2DW12_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009626:	2305      	movs	r3, #5
 8009628:	425b      	negs	r3, r3
 800962a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800962c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <LIS2DW12_0_Probe+0x11c>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2204      	movs	r2, #4
 8009636:	4013      	ands	r3, r2
 8009638:	d002      	beq.n	8009640 <LIS2DW12_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800963a:	2305      	movs	r3, #5
 800963c:	425b      	negs	r3, r3
 800963e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009642:	0018      	movs	r0, r3
 8009644:	46bd      	mov	sp, r7
 8009646:	b013      	add	sp, #76	; 0x4c
 8009648:	bd90      	pop	{r4, r7, pc}
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	08001945 	.word	0x08001945
 8009650:	080019c1 	.word	0x080019c1
 8009654:	08001a89 	.word	0x08001a89
 8009658:	08001a11 	.word	0x08001a11
 800965c:	08001b01 	.word	0x08001b01
 8009660:	20000ca8 	.word	0x20000ca8
 8009664:	20000c6c 	.word	0x20000c6c
 8009668:	20000c30 	.word	0x20000c30
 800966c:	20000c60 	.word	0x20000c60
 8009670:	20000108 	.word	0x20000108
 8009674:	20000238 	.word	0x20000238
 8009678:	20000c3c 	.word	0x20000c3c
 800967c:	20000118 	.word	0x20000118

08009680 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b093      	sub	sp, #76	; 0x4c
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009688:	2300      	movs	r3, #0
 800968a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800968c:	2128      	movs	r1, #40	; 0x28
 800968e:	187b      	adds	r3, r7, r1
 8009690:	2200      	movs	r2, #0
 8009692:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009694:	187b      	adds	r3, r7, r1
 8009696:	223d      	movs	r2, #61	; 0x3d
 8009698:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800969a:	187b      	adds	r3, r7, r1
 800969c:	4a42      	ldr	r2, [pc, #264]	; (80097a8 <LIS2MDL_0_Probe+0x128>)
 800969e:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80096a0:	187b      	adds	r3, r7, r1
 80096a2:	4a42      	ldr	r2, [pc, #264]	; (80097ac <LIS2MDL_0_Probe+0x12c>)
 80096a4:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80096a6:	187b      	adds	r3, r7, r1
 80096a8:	4a41      	ldr	r2, [pc, #260]	; (80097b0 <LIS2MDL_0_Probe+0x130>)
 80096aa:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80096ac:	187b      	adds	r3, r7, r1
 80096ae:	4a41      	ldr	r2, [pc, #260]	; (80097b4 <LIS2MDL_0_Probe+0x134>)
 80096b0:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	4a40      	ldr	r2, [pc, #256]	; (80097b8 <LIS2MDL_0_Probe+0x138>)
 80096b6:	619a      	str	r2, [r3, #24]

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80096b8:	187a      	adds	r2, r7, r1
 80096ba:	4b40      	ldr	r3, [pc, #256]	; (80097bc <LIS2MDL_0_Probe+0x13c>)
 80096bc:	0011      	movs	r1, r2
 80096be:	0018      	movs	r0, r3
 80096c0:	f7fa fb68 	bl	8003d94 <LIS2MDL_RegisterBusIO>
 80096c4:	1e03      	subs	r3, r0, #0
 80096c6:	d003      	beq.n	80096d0 <LIS2MDL_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096c8:	2307      	movs	r3, #7
 80096ca:	425b      	negs	r3, r3
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
 80096ce:	e065      	b.n	800979c <LIS2MDL_0_Probe+0x11c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80096d0:	2327      	movs	r3, #39	; 0x27
 80096d2:	18fa      	adds	r2, r7, r3
 80096d4:	4b39      	ldr	r3, [pc, #228]	; (80097bc <LIS2MDL_0_Probe+0x13c>)
 80096d6:	0011      	movs	r1, r2
 80096d8:	0018      	movs	r0, r3
 80096da:	f7fa fc72 	bl	8003fc2 <LIS2MDL_ReadID>
 80096de:	1e03      	subs	r3, r0, #0
 80096e0:	d003      	beq.n	80096ea <LIS2MDL_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096e2:	2307      	movs	r3, #7
 80096e4:	425b      	negs	r3, r3
 80096e6:	647b      	str	r3, [r7, #68]	; 0x44
 80096e8:	e058      	b.n	800979c <LIS2MDL_0_Probe+0x11c>
  }
  else if (id != LIS2MDL_ID)
 80096ea:	2327      	movs	r3, #39	; 0x27
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b40      	cmp	r3, #64	; 0x40
 80096f2:	d003      	beq.n	80096fc <LIS2MDL_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096f4:	2307      	movs	r3, #7
 80096f6:	425b      	negs	r3, r3
 80096f8:	647b      	str	r3, [r7, #68]	; 0x44
 80096fa:	e04f      	b.n	800979c <LIS2MDL_0_Probe+0x11c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80096fc:	2408      	movs	r4, #8
 80096fe:	193a      	adds	r2, r7, r4
 8009700:	4b2e      	ldr	r3, [pc, #184]	; (80097bc <LIS2MDL_0_Probe+0x13c>)
 8009702:	0011      	movs	r1, r2
 8009704:	0018      	movs	r0, r3
 8009706:	f7fa fc81 	bl	800400c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800970a:	0021      	movs	r1, r4
 800970c:	187b      	adds	r3, r7, r1
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	001a      	movs	r2, r3
 8009712:	187b      	adds	r3, r7, r1
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	431a      	orrs	r2, r3
 800971a:	187b      	adds	r3, r7, r1
 800971c:	789b      	ldrb	r3, [r3, #2]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	431a      	orrs	r2, r3
 8009722:	4b27      	ldr	r3, [pc, #156]	; (80097c0 <LIS2MDL_0_Probe+0x140>)
 8009724:	609a      	str	r2, [r3, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009726:	4b27      	ldr	r3, [pc, #156]	; (80097c4 <LIS2MDL_0_Probe+0x144>)
 8009728:	4a24      	ldr	r2, [pc, #144]	; (80097bc <LIS2MDL_0_Probe+0x13c>)
 800972a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800972c:	4b26      	ldr	r3, [pc, #152]	; (80097c8 <LIS2MDL_0_Probe+0x148>)
 800972e:	4a27      	ldr	r2, [pc, #156]	; (80097cc <LIS2MDL_0_Probe+0x14c>)
 8009730:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11d      	bne.n	8009774 <LIS2MDL_0_Probe+0xf4>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2204      	movs	r2, #4
 800973c:	4013      	ands	r3, r2
 800973e:	d019      	beq.n	8009774 <LIS2MDL_0_Probe+0xf4>
 8009740:	187b      	adds	r3, r7, r1
 8009742:	789b      	ldrb	r3, [r3, #2]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d115      	bne.n	8009774 <LIS2MDL_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009748:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <LIS2MDL_0_Probe+0x150>)
 800974a:	691a      	ldr	r2, [r3, #16]
 800974c:	4b21      	ldr	r3, [pc, #132]	; (80097d4 <LIS2MDL_0_Probe+0x154>)
 800974e:	3206      	adds	r2, #6
 8009750:	0092      	lsls	r2, r2, #2
 8009752:	4921      	ldr	r1, [pc, #132]	; (80097d8 <LIS2MDL_0_Probe+0x158>)
 8009754:	50d1      	str	r1, [r2, r3]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009756:	4b1c      	ldr	r3, [pc, #112]	; (80097c8 <LIS2MDL_0_Probe+0x148>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	4b19      	ldr	r3, [pc, #100]	; (80097c4 <LIS2MDL_0_Probe+0x144>)
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	0018      	movs	r0, r3
 8009762:	4790      	blx	r2
 8009764:	1e03      	subs	r3, r0, #0
 8009766:	d003      	beq.n	8009770 <LIS2MDL_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009768:	2305      	movs	r3, #5
 800976a:	425b      	negs	r3, r3
 800976c:	647b      	str	r3, [r7, #68]	; 0x44
 800976e:	e001      	b.n	8009774 <LIS2MDL_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009770:	2300      	movs	r3, #0
 8009772:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009776:	2b00      	cmp	r3, #0
 8009778:	d106      	bne.n	8009788 <LIS2MDL_0_Probe+0x108>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2202      	movs	r2, #2
 800977e:	4013      	ands	r3, r2
 8009780:	d002      	beq.n	8009788 <LIS2MDL_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009782:	2305      	movs	r3, #5
 8009784:	425b      	negs	r3, r3
 8009786:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <LIS2MDL_0_Probe+0x11c>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	4013      	ands	r3, r2
 8009794:	d002      	beq.n	800979c <LIS2MDL_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009796:	2305      	movs	r3, #5
 8009798:	425b      	negs	r3, r3
 800979a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800979c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800979e:	0018      	movs	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b013      	add	sp, #76	; 0x4c
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	08001945 	.word	0x08001945
 80097ac:	080019c1 	.word	0x080019c1
 80097b0:	08001a89 	.word	0x08001a89
 80097b4:	08001a11 	.word	0x08001a11
 80097b8:	08001b01 	.word	0x08001b01
 80097bc:	20000cdc 	.word	0x20000cdc
 80097c0:	20000c6c 	.word	0x20000c6c
 80097c4:	20000c30 	.word	0x20000c30
 80097c8:	20000c60 	.word	0x20000c60
 80097cc:	2000013c 	.word	0x2000013c
 80097d0:	20000238 	.word	0x20000238
 80097d4:	20000c3c 	.word	0x20000c3c
 80097d8:	2000014c 	.word	0x2000014c

080097dc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	0002      	movs	r2, r0
 80097e4:	1dfb      	adds	r3, r7, #7
 80097e6:	701a      	strb	r2, [r3, #0]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80097e8:	1dfb      	adds	r3, r7, #7
 80097ea:	781a      	ldrb	r2, [r3, #0]
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <BSP_LED_Init+0x24>)
 80097ee:	0092      	lsls	r2, r2, #2
 80097f0:	58d3      	ldr	r3, [r2, r3]
 80097f2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	0018      	movs	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b002      	add	sp, #8
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	08015918 	.word	0x08015918

08009804 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	0002      	movs	r2, r0
 800980c:	1dfb      	adds	r3, r7, #7
 800980e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8009810:	1dfb      	adds	r3, r7, #7
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	4b06      	ldr	r3, [pc, #24]	; (8009830 <BSP_LED_On+0x2c>)
 8009816:	0092      	lsls	r2, r2, #2
 8009818:	58d3      	ldr	r3, [r2, r3]
 800981a:	2120      	movs	r1, #32
 800981c:	2201      	movs	r2, #1
 800981e:	0018      	movs	r0, r3
 8009820:	f001 f8e3 	bl	800a9ea <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009824:	2300      	movs	r3, #0
}
 8009826:	0018      	movs	r0, r3
 8009828:	46bd      	mov	sp, r7
 800982a:	b002      	add	sp, #8
 800982c:	bd80      	pop	{r7, pc}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	2000024c 	.word	0x2000024c

08009834 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	0002      	movs	r2, r0
 800983c:	1dfb      	adds	r3, r7, #7
 800983e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8009840:	1dfb      	adds	r3, r7, #7
 8009842:	781a      	ldrb	r2, [r3, #0]
 8009844:	4b06      	ldr	r3, [pc, #24]	; (8009860 <BSP_LED_Off+0x2c>)
 8009846:	0092      	lsls	r2, r2, #2
 8009848:	58d3      	ldr	r3, [r2, r3]
 800984a:	2120      	movs	r1, #32
 800984c:	2200      	movs	r2, #0
 800984e:	0018      	movs	r0, r3
 8009850:	f001 f8cb 	bl	800a9ea <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009854:	2300      	movs	r3, #0
}
 8009856:	0018      	movs	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	b002      	add	sp, #8
 800985c:	bd80      	pop	{r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	2000024c 	.word	0x2000024c

08009864 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b089      	sub	sp, #36	; 0x24
 8009868:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800986a:	4b1f      	ldr	r3, [pc, #124]	; (80098e8 <LED_USER_GPIO_Init+0x84>)
 800986c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986e:	4b1e      	ldr	r3, [pc, #120]	; (80098e8 <LED_USER_GPIO_Init+0x84>)
 8009870:	2101      	movs	r1, #1
 8009872:	430a      	orrs	r2, r1
 8009874:	62da      	str	r2, [r3, #44]	; 0x2c
 8009876:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <LED_USER_GPIO_Init+0x84>)
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	2201      	movs	r2, #1
 800987c:	4013      	ands	r3, r2
 800987e:	60bb      	str	r3, [r7, #8]
 8009880:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009882:	240c      	movs	r4, #12
 8009884:	193b      	adds	r3, r7, r4
 8009886:	0018      	movs	r0, r3
 8009888:	2314      	movs	r3, #20
 800988a:	001a      	movs	r2, r3
 800988c:	2100      	movs	r1, #0
 800988e:	f009 fc20 	bl	80130d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <LED_USER_GPIO_Init+0x84>)
 8009894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009896:	4b14      	ldr	r3, [pc, #80]	; (80098e8 <LED_USER_GPIO_Init+0x84>)
 8009898:	2101      	movs	r1, #1
 800989a:	430a      	orrs	r2, r1
 800989c:	62da      	str	r2, [r3, #44]	; 0x2c
 800989e:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <LED_USER_GPIO_Init+0x84>)
 80098a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a2:	2201      	movs	r2, #1
 80098a4:	4013      	ands	r3, r2
 80098a6:	607b      	str	r3, [r7, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80098aa:	23a0      	movs	r3, #160	; 0xa0
 80098ac:	05db      	lsls	r3, r3, #23
 80098ae:	2200      	movs	r2, #0
 80098b0:	2120      	movs	r1, #32
 80098b2:	0018      	movs	r0, r3
 80098b4:	f001 f899 	bl	800a9ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80098b8:	0021      	movs	r1, r4
 80098ba:	187b      	adds	r3, r7, r1
 80098bc:	2220      	movs	r2, #32
 80098be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098c0:	187b      	adds	r3, r7, r1
 80098c2:	2201      	movs	r2, #1
 80098c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c6:	187b      	adds	r3, r7, r1
 80098c8:	2200      	movs	r2, #0
 80098ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098cc:	187b      	adds	r3, r7, r1
 80098ce:	2200      	movs	r2, #0
 80098d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80098d2:	187a      	adds	r2, r7, r1
 80098d4:	23a0      	movs	r3, #160	; 0xa0
 80098d6:	05db      	lsls	r3, r3, #23
 80098d8:	0011      	movs	r1, r2
 80098da:	0018      	movs	r0, r3
 80098dc:	f000 fe08 	bl	800a4f0 <HAL_GPIO_Init>

}
 80098e0:	46c0      	nop			; (mov r8, r8)
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b009      	add	sp, #36	; 0x24
 80098e6:	bd90      	pop	{r4, r7, pc}
 80098e8:	40021000 	.word	0x40021000

080098ec <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	0002      	movs	r2, r0
 80098f4:	1dfb      	adds	r3, r7, #7
 80098f6:	701a      	strb	r2, [r3, #0]
 80098f8:	1dbb      	adds	r3, r7, #6
 80098fa:	1c0a      	adds	r2, r1, #0
 80098fc:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8009902:	1dfb      	adds	r3, r7, #7
 8009904:	781a      	ldrb	r2, [r3, #0]
 8009906:	4b21      	ldr	r3, [pc, #132]	; (800998c <BSP_PB_Init+0xa0>)
 8009908:	0092      	lsls	r2, r2, #2
 800990a:	58d3      	ldr	r3, [r2, r3]
 800990c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800990e:	1dbb      	adds	r3, r7, #6
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d134      	bne.n	8009980 <BSP_PB_Init+0x94>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8009916:	1dfb      	adds	r3, r7, #7
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	00da      	lsls	r2, r3, #3
 800991c:	4b1c      	ldr	r3, [pc, #112]	; (8009990 <BSP_PB_Init+0xa4>)
 800991e:	18d0      	adds	r0, r2, r3
 8009920:	1dfb      	adds	r3, r7, #7
 8009922:	781a      	ldrb	r2, [r3, #0]
 8009924:	4b1b      	ldr	r3, [pc, #108]	; (8009994 <BSP_PB_Init+0xa8>)
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	58d3      	ldr	r3, [r2, r3]
 800992a:	0019      	movs	r1, r3
 800992c:	f000 fda9 	bl	800a482 <HAL_EXTI_GetHandle>
 8009930:	1e03      	subs	r3, r0, #0
 8009932:	d003      	beq.n	800993c <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009934:	2304      	movs	r3, #4
 8009936:	425b      	negs	r3, r3
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e021      	b.n	8009980 <BSP_PB_Init+0x94>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800993c:	1dfb      	adds	r3, r7, #7
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	00da      	lsls	r2, r3, #3
 8009942:	4b13      	ldr	r3, [pc, #76]	; (8009990 <BSP_PB_Init+0xa4>)
 8009944:	18d0      	adds	r0, r2, r3
 8009946:	1dfb      	adds	r3, r7, #7
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	4b13      	ldr	r3, [pc, #76]	; (8009998 <BSP_PB_Init+0xac>)
 800994c:	0092      	lsls	r2, r2, #2
 800994e:	58d3      	ldr	r3, [r2, r3]
 8009950:	001a      	movs	r2, r3
 8009952:	2100      	movs	r1, #0
 8009954:	f000 fd74 	bl	800a440 <HAL_EXTI_RegisterCallback>
 8009958:	1e03      	subs	r3, r0, #0
 800995a:	d003      	beq.n	8009964 <BSP_PB_Init+0x78>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800995c:	2304      	movs	r3, #4
 800995e:	425b      	negs	r3, r3
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e00d      	b.n	8009980 <BSP_PB_Init+0x94>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8009964:	2007      	movs	r0, #7
 8009966:	1dfb      	adds	r3, r7, #7
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	4b0c      	ldr	r3, [pc, #48]	; (800999c <BSP_PB_Init+0xb0>)
 800996c:	0092      	lsls	r2, r2, #2
 800996e:	58d3      	ldr	r3, [r2, r3]
 8009970:	2200      	movs	r2, #0
 8009972:	0019      	movs	r1, r3
 8009974:	f000 faa4 	bl	8009ec0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8009978:	2307      	movs	r3, #7
 800997a:	0018      	movs	r0, r3
 800997c:	f000 fab5 	bl	8009eea <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009980:	68fb      	ldr	r3, [r7, #12]
}
 8009982:	0018      	movs	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	b004      	add	sp, #16
 8009988:	bd80      	pop	{r7, pc}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	0801591c 	.word	0x0801591c
 8009990:	20000254 	.word	0x20000254
 8009994:	08015920 	.word	0x08015920
 8009998:	08015924 	.word	0x08015924
 800999c:	08015928 	.word	0x08015928

080099a0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	0002      	movs	r2, r0
 80099a8:	1dfb      	adds	r3, r7, #7
 80099aa:	701a      	strb	r2, [r3, #0]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80099ac:	1dfb      	adds	r3, r7, #7
 80099ae:	781a      	ldrb	r2, [r3, #0]
 80099b0:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <BSP_PB_GetState+0x34>)
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	58d3      	ldr	r3, [r2, r3]
 80099b6:	2280      	movs	r2, #128	; 0x80
 80099b8:	0192      	lsls	r2, r2, #6
 80099ba:	0011      	movs	r1, r2
 80099bc:	0018      	movs	r0, r3
 80099be:	f000 fff7 	bl	800a9b0 <HAL_GPIO_ReadPin>
 80099c2:	0003      	movs	r3, r0
 80099c4:	425a      	negs	r2, r3
 80099c6:	4153      	adcs	r3, r2
 80099c8:	b2db      	uxtb	r3, r3
}
 80099ca:	0018      	movs	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	b002      	add	sp, #8
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	20000250 	.word	0x20000250

080099d8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80099dc:	2000      	movs	r0, #0
 80099de:	f004 fc4b 	bl	800e278 <BSP_PB_Callback>
}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b089      	sub	sp, #36	; 0x24
 80099ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80099ee:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <BUTTON_USER_GPIO_Init+0x70>)
 80099f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f2:	4b19      	ldr	r3, [pc, #100]	; (8009a58 <BUTTON_USER_GPIO_Init+0x70>)
 80099f4:	2104      	movs	r1, #4
 80099f6:	430a      	orrs	r2, r1
 80099f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80099fa:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <BUTTON_USER_GPIO_Init+0x70>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	2204      	movs	r2, #4
 8009a00:	4013      	ands	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
 8009a04:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a06:	240c      	movs	r4, #12
 8009a08:	193b      	adds	r3, r7, r4
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	2314      	movs	r3, #20
 8009a0e:	001a      	movs	r2, r3
 8009a10:	2100      	movs	r1, #0
 8009a12:	f009 fb5e 	bl	80130d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a16:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <BUTTON_USER_GPIO_Init+0x70>)
 8009a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <BUTTON_USER_GPIO_Init+0x70>)
 8009a1c:	2104      	movs	r1, #4
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a22:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <BUTTON_USER_GPIO_Init+0x70>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	2204      	movs	r2, #4
 8009a28:	4013      	ands	r3, r2
 8009a2a:	607b      	str	r3, [r7, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8009a2e:	193b      	adds	r3, r7, r4
 8009a30:	2280      	movs	r2, #128	; 0x80
 8009a32:	0192      	lsls	r2, r2, #6
 8009a34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009a36:	193b      	adds	r3, r7, r4
 8009a38:	2284      	movs	r2, #132	; 0x84
 8009a3a:	0392      	lsls	r2, r2, #14
 8009a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a3e:	193b      	adds	r3, r7, r4
 8009a40:	2200      	movs	r2, #0
 8009a42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8009a44:	193b      	adds	r3, r7, r4
 8009a46:	4a05      	ldr	r2, [pc, #20]	; (8009a5c <BUTTON_USER_GPIO_Init+0x74>)
 8009a48:	0019      	movs	r1, r3
 8009a4a:	0010      	movs	r0, r2
 8009a4c:	f000 fd50 	bl	800a4f0 <HAL_GPIO_Init>

}
 8009a50:	46c0      	nop			; (mov r8, r8)
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b009      	add	sp, #36	; 0x24
 8009a56:	bd90      	pop	{r4, r7, pc}
 8009a58:	40021000 	.word	0x40021000
 8009a5c:	50000800 	.word	0x50000800

08009a60 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	0002      	movs	r2, r0
 8009a68:	1dfb      	adds	r3, r7, #7
 8009a6a:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8009a70:	1dfb      	adds	r3, r7, #7
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d903      	bls.n	8009a80 <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	425b      	negs	r3, r3
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	e027      	b.n	8009ad0 <BSP_COM_Init+0x70>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8009a80:	1dfb      	adds	r3, r7, #7
 8009a82:	7819      	ldrb	r1, [r3, #0]
 8009a84:	1dfb      	adds	r3, r7, #7
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	4b14      	ldr	r3, [pc, #80]	; (8009adc <BSP_COM_Init+0x7c>)
 8009a8a:	0089      	lsls	r1, r1, #2
 8009a8c:	58c8      	ldr	r0, [r1, r3]
 8009a8e:	4914      	ldr	r1, [pc, #80]	; (8009ae0 <BSP_COM_Init+0x80>)
 8009a90:	0013      	movs	r3, r2
 8009a92:	015b      	lsls	r3, r3, #5
 8009a94:	189b      	adds	r3, r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	5058      	str	r0, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8009a9a:	1dfb      	adds	r3, r7, #7
 8009a9c:	781a      	ldrb	r2, [r3, #0]
 8009a9e:	0013      	movs	r3, r2
 8009aa0:	015b      	lsls	r3, r3, #5
 8009aa2:	189b      	adds	r3, r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4a0e      	ldr	r2, [pc, #56]	; (8009ae0 <BSP_COM_Init+0x80>)
 8009aa8:	189b      	adds	r3, r3, r2
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f000 f854 	bl	8009b58 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8009ab0:	1dfb      	adds	r3, r7, #7
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	0013      	movs	r3, r2
 8009ab6:	015b      	lsls	r3, r3, #5
 8009ab8:	189b      	adds	r3, r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4a08      	ldr	r2, [pc, #32]	; (8009ae0 <BSP_COM_Init+0x80>)
 8009abe:	189b      	adds	r3, r3, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f000 f80f 	bl	8009ae4 <MX_USART2_UART_Init>
 8009ac6:	1e03      	subs	r3, r0, #0
 8009ac8:	d002      	beq.n	8009ad0 <BSP_COM_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009aca:	2304      	movs	r3, #4
 8009acc:	425b      	negs	r3, r3
 8009ace:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
}
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	b004      	add	sp, #16
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	46c0      	nop			; (mov r8, r8)
 8009adc:	2000025c 	.word	0x2000025c
 8009ae0:	20000d08 	.word	0x20000d08

08009ae4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8009ae4:	b590      	push	{r4, r7, lr}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009aec:	240f      	movs	r4, #15
 8009aee:	193b      	adds	r3, r7, r4
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a17      	ldr	r2, [pc, #92]	; (8009b54 <MX_USART2_UART_Init+0x70>)
 8009af8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	22e1      	movs	r2, #225	; 0xe1
 8009afe:	0252      	lsls	r2, r2, #9
 8009b00:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	220c      	movs	r2, #12
 8009b18:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	0018      	movs	r0, r3
 8009b36:	f003 f869 	bl	800cc0c <HAL_UART_Init>
 8009b3a:	1e03      	subs	r3, r0, #0
 8009b3c:	d002      	beq.n	8009b44 <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8009b3e:	193b      	adds	r3, r7, r4
 8009b40:	2201      	movs	r2, #1
 8009b42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009b44:	230f      	movs	r3, #15
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	781b      	ldrb	r3, [r3, #0]
}
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	b005      	add	sp, #20
 8009b50:	bd90      	pop	{r4, r7, pc}
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	40004400 	.word	0x40004400

08009b58 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b089      	sub	sp, #36	; 0x24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b60:	4b34      	ldr	r3, [pc, #208]	; (8009c34 <USART2_MspInit+0xdc>)
 8009b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b64:	4b33      	ldr	r3, [pc, #204]	; (8009c34 <USART2_MspInit+0xdc>)
 8009b66:	2180      	movs	r1, #128	; 0x80
 8009b68:	0289      	lsls	r1, r1, #10
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b6e:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <USART2_MspInit+0xdc>)
 8009b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b72:	4b30      	ldr	r3, [pc, #192]	; (8009c34 <USART2_MspInit+0xdc>)
 8009b74:	2101      	movs	r1, #1
 8009b76:	430a      	orrs	r2, r1
 8009b78:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <USART2_MspInit+0xdc>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4013      	ands	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]
 8009b84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8009b86:	240c      	movs	r4, #12
 8009b88:	193b      	adds	r3, r7, r4
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b8e:	193b      	adds	r3, r7, r4
 8009b90:	2202      	movs	r2, #2
 8009b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b94:	193b      	adds	r3, r7, r4
 8009b96:	2200      	movs	r2, #0
 8009b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b9a:	193b      	adds	r3, r7, r4
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8009ba0:	193b      	adds	r3, r7, r4
 8009ba2:	2204      	movs	r2, #4
 8009ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8009ba6:	193a      	adds	r2, r7, r4
 8009ba8:	23a0      	movs	r3, #160	; 0xa0
 8009baa:	05db      	lsls	r3, r3, #23
 8009bac:	0011      	movs	r1, r2
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f000 fc9e 	bl	800a4f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8009bb4:	0021      	movs	r1, r4
 8009bb6:	187b      	adds	r3, r7, r1
 8009bb8:	2208      	movs	r2, #8
 8009bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bbc:	187b      	adds	r3, r7, r1
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc2:	187b      	adds	r3, r7, r1
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	2203      	movs	r2, #3
 8009bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8009bce:	187b      	adds	r3, r7, r1
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8009bd4:	187a      	adds	r2, r7, r1
 8009bd6:	23a0      	movs	r3, #160	; 0xa0
 8009bd8:	05db      	lsls	r3, r3, #23
 8009bda:	0011      	movs	r1, r2
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f000 fc87 	bl	800a4f0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel5;
 8009be2:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <USART2_MspInit+0xe0>)
 8009be4:	4a15      	ldr	r2, [pc, #84]	; (8009c3c <USART2_MspInit+0xe4>)
 8009be6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8009be8:	4b13      	ldr	r3, [pc, #76]	; (8009c38 <USART2_MspInit+0xe0>)
 8009bea:	2204      	movs	r2, #4
 8009bec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <USART2_MspInit+0xe0>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bf4:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <USART2_MspInit+0xe0>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009bfa:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <USART2_MspInit+0xe0>)
 8009bfc:	2280      	movs	r2, #128	; 0x80
 8009bfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c0e:	2220      	movs	r2, #32
 8009c10:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8009c18:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f000 fa56 	bl	800a0cc <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a05      	ldr	r2, [pc, #20]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c24:	671a      	str	r2, [r3, #112]	; 0x70
 8009c26:	4b04      	ldr	r3, [pc, #16]	; (8009c38 <USART2_MspInit+0xe0>)
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8009c2c:	46c0      	nop			; (mov r8, r8)
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	b009      	add	sp, #36	; 0x24
 8009c32:	bd90      	pop	{r4, r7, pc}
 8009c34:	40021000 	.word	0x40021000
 8009c38:	20000d8c 	.word	0x20000d8c
 8009c3c:	40020058 	.word	0x40020058

08009c40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009c46:	1dfb      	adds	r3, r7, #7
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <HAL_Init+0x3c>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <HAL_Init+0x3c>)
 8009c52:	2140      	movs	r1, #64	; 0x40
 8009c54:	430a      	orrs	r2, r1
 8009c56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009c58:	2000      	movs	r0, #0
 8009c5a:	f000 f811 	bl	8009c80 <HAL_InitTick>
 8009c5e:	1e03      	subs	r3, r0, #0
 8009c60:	d003      	beq.n	8009c6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009c62:	1dfb      	adds	r3, r7, #7
 8009c64:	2201      	movs	r2, #1
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	e001      	b.n	8009c6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009c6a:	f7f7 fdef 	bl	800184c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009c6e:	1dfb      	adds	r3, r7, #7
 8009c70:	781b      	ldrb	r3, [r3, #0]
}
 8009c72:	0018      	movs	r0, r3
 8009c74:	46bd      	mov	sp, r7
 8009c76:	b002      	add	sp, #8
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	40022000 	.word	0x40022000

08009c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c80:	b590      	push	{r4, r7, lr}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c88:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <HAL_InitTick+0x5c>)
 8009c8a:	681c      	ldr	r4, [r3, #0]
 8009c8c:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <HAL_InitTick+0x60>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	0019      	movs	r1, r3
 8009c92:	23fa      	movs	r3, #250	; 0xfa
 8009c94:	0098      	lsls	r0, r3, #2
 8009c96:	f7f6 fa41 	bl	800011c <__udivsi3>
 8009c9a:	0003      	movs	r3, r0
 8009c9c:	0019      	movs	r1, r3
 8009c9e:	0020      	movs	r0, r4
 8009ca0:	f7f6 fa3c 	bl	800011c <__udivsi3>
 8009ca4:	0003      	movs	r3, r0
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f000 f92f 	bl	8009f0a <HAL_SYSTICK_Config>
 8009cac:	1e03      	subs	r3, r0, #0
 8009cae:	d001      	beq.n	8009cb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e00f      	b.n	8009cd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d80b      	bhi.n	8009cd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	425b      	negs	r3, r3
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f000 f8fc 	bl	8009ec0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cc8:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <HAL_InitTick+0x64>)
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
}
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	b003      	add	sp, #12
 8009cda:	bd90      	pop	{r4, r7, pc}
 8009cdc:	200000cc 	.word	0x200000cc
 8009ce0:	20000264 	.word	0x20000264
 8009ce4:	20000260 	.word	0x20000260

08009ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <HAL_IncTick+0x1c>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	001a      	movs	r2, r3
 8009cf2:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <HAL_IncTick+0x20>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	18d2      	adds	r2, r2, r3
 8009cf8:	4b03      	ldr	r3, [pc, #12]	; (8009d08 <HAL_IncTick+0x20>)
 8009cfa:	601a      	str	r2, [r3, #0]
}
 8009cfc:	46c0      	nop			; (mov r8, r8)
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	46c0      	nop			; (mov r8, r8)
 8009d04:	20000264 	.word	0x20000264
 8009d08:	20000dd4 	.word	0x20000dd4

08009d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8009d10:	4b02      	ldr	r3, [pc, #8]	; (8009d1c <HAL_GetTick+0x10>)
 8009d12:	681b      	ldr	r3, [r3, #0]
}
 8009d14:	0018      	movs	r0, r3
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	20000dd4 	.word	0x20000dd4

08009d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d28:	f7ff fff0 	bl	8009d0c <HAL_GetTick>
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	3301      	adds	r3, #1
 8009d38:	d005      	beq.n	8009d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d3a:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <HAL_Delay+0x44>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	001a      	movs	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	189b      	adds	r3, r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	f7ff ffe0 	bl	8009d0c <HAL_GetTick>
 8009d4c:	0002      	movs	r2, r0
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d8f7      	bhi.n	8009d48 <HAL_Delay+0x28>
  {
  }
}
 8009d58:	46c0      	nop			; (mov r8, r8)
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	b004      	add	sp, #16
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	46c0      	nop			; (mov r8, r8)
 8009d64:	20000264 	.word	0x20000264

08009d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	0002      	movs	r2, r0
 8009d70:	1dfb      	adds	r3, r7, #7
 8009d72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009d74:	1dfb      	adds	r3, r7, #7
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7a:	d809      	bhi.n	8009d90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d7c:	1dfb      	adds	r3, r7, #7
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	001a      	movs	r2, r3
 8009d82:	231f      	movs	r3, #31
 8009d84:	401a      	ands	r2, r3
 8009d86:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <__NVIC_EnableIRQ+0x30>)
 8009d88:	2101      	movs	r1, #1
 8009d8a:	4091      	lsls	r1, r2
 8009d8c:	000a      	movs	r2, r1
 8009d8e:	601a      	str	r2, [r3, #0]
  }
}
 8009d90:	46c0      	nop			; (mov r8, r8)
 8009d92:	46bd      	mov	sp, r7
 8009d94:	b002      	add	sp, #8
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000e100 	.word	0xe000e100

08009d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009d9c:	b590      	push	{r4, r7, lr}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	0002      	movs	r2, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	1dfb      	adds	r3, r7, #7
 8009da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009daa:	1dfb      	adds	r3, r7, #7
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b7f      	cmp	r3, #127	; 0x7f
 8009db0:	d828      	bhi.n	8009e04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009db2:	4a2f      	ldr	r2, [pc, #188]	; (8009e70 <__NVIC_SetPriority+0xd4>)
 8009db4:	1dfb      	adds	r3, r7, #7
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	089b      	lsrs	r3, r3, #2
 8009dbc:	33c0      	adds	r3, #192	; 0xc0
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	589b      	ldr	r3, [r3, r2]
 8009dc2:	1dfa      	adds	r2, r7, #7
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	0011      	movs	r1, r2
 8009dc8:	2203      	movs	r2, #3
 8009dca:	400a      	ands	r2, r1
 8009dcc:	00d2      	lsls	r2, r2, #3
 8009dce:	21ff      	movs	r1, #255	; 0xff
 8009dd0:	4091      	lsls	r1, r2
 8009dd2:	000a      	movs	r2, r1
 8009dd4:	43d2      	mvns	r2, r2
 8009dd6:	401a      	ands	r2, r3
 8009dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	019b      	lsls	r3, r3, #6
 8009dde:	22ff      	movs	r2, #255	; 0xff
 8009de0:	401a      	ands	r2, r3
 8009de2:	1dfb      	adds	r3, r7, #7
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	0018      	movs	r0, r3
 8009de8:	2303      	movs	r3, #3
 8009dea:	4003      	ands	r3, r0
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009df0:	481f      	ldr	r0, [pc, #124]	; (8009e70 <__NVIC_SetPriority+0xd4>)
 8009df2:	1dfb      	adds	r3, r7, #7
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b25b      	sxtb	r3, r3
 8009df8:	089b      	lsrs	r3, r3, #2
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	33c0      	adds	r3, #192	; 0xc0
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009e02:	e031      	b.n	8009e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e04:	4a1b      	ldr	r2, [pc, #108]	; (8009e74 <__NVIC_SetPriority+0xd8>)
 8009e06:	1dfb      	adds	r3, r7, #7
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	0019      	movs	r1, r3
 8009e0c:	230f      	movs	r3, #15
 8009e0e:	400b      	ands	r3, r1
 8009e10:	3b08      	subs	r3, #8
 8009e12:	089b      	lsrs	r3, r3, #2
 8009e14:	3306      	adds	r3, #6
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	18d3      	adds	r3, r2, r3
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	1dfa      	adds	r2, r7, #7
 8009e20:	7812      	ldrb	r2, [r2, #0]
 8009e22:	0011      	movs	r1, r2
 8009e24:	2203      	movs	r2, #3
 8009e26:	400a      	ands	r2, r1
 8009e28:	00d2      	lsls	r2, r2, #3
 8009e2a:	21ff      	movs	r1, #255	; 0xff
 8009e2c:	4091      	lsls	r1, r2
 8009e2e:	000a      	movs	r2, r1
 8009e30:	43d2      	mvns	r2, r2
 8009e32:	401a      	ands	r2, r3
 8009e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	019b      	lsls	r3, r3, #6
 8009e3a:	22ff      	movs	r2, #255	; 0xff
 8009e3c:	401a      	ands	r2, r3
 8009e3e:	1dfb      	adds	r3, r7, #7
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	0018      	movs	r0, r3
 8009e44:	2303      	movs	r3, #3
 8009e46:	4003      	ands	r3, r0
 8009e48:	00db      	lsls	r3, r3, #3
 8009e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e4c:	4809      	ldr	r0, [pc, #36]	; (8009e74 <__NVIC_SetPriority+0xd8>)
 8009e4e:	1dfb      	adds	r3, r7, #7
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	001c      	movs	r4, r3
 8009e54:	230f      	movs	r3, #15
 8009e56:	4023      	ands	r3, r4
 8009e58:	3b08      	subs	r3, #8
 8009e5a:	089b      	lsrs	r3, r3, #2
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	3306      	adds	r3, #6
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	18c3      	adds	r3, r0, r3
 8009e64:	3304      	adds	r3, #4
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	46c0      	nop			; (mov r8, r8)
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b003      	add	sp, #12
 8009e6e:	bd90      	pop	{r4, r7, pc}
 8009e70:	e000e100 	.word	0xe000e100
 8009e74:	e000ed00 	.word	0xe000ed00

08009e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	1e5a      	subs	r2, r3, #1
 8009e84:	2380      	movs	r3, #128	; 0x80
 8009e86:	045b      	lsls	r3, r3, #17
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d301      	bcc.n	8009e90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e010      	b.n	8009eb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e90:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <SysTick_Config+0x44>)
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	3a01      	subs	r2, #1
 8009e96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e98:	2301      	movs	r3, #1
 8009e9a:	425b      	negs	r3, r3
 8009e9c:	2103      	movs	r1, #3
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f7ff ff7c 	bl	8009d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <SysTick_Config+0x44>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009eaa:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <SysTick_Config+0x44>)
 8009eac:	2207      	movs	r2, #7
 8009eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	b002      	add	sp, #8
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	e000e010 	.word	0xe000e010

08009ec0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	210f      	movs	r1, #15
 8009ecc:	187b      	adds	r3, r7, r1
 8009ece:	1c02      	adds	r2, r0, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	b25b      	sxtb	r3, r3
 8009eda:	0011      	movs	r1, r2
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7ff ff5d 	bl	8009d9c <__NVIC_SetPriority>
}
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b004      	add	sp, #16
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	0002      	movs	r2, r0
 8009ef2:	1dfb      	adds	r3, r7, #7
 8009ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ef6:	1dfb      	adds	r3, r7, #7
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	b25b      	sxtb	r3, r3
 8009efc:	0018      	movs	r0, r3
 8009efe:	f7ff ff33 	bl	8009d68 <__NVIC_EnableIRQ>
}
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b002      	add	sp, #8
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	0018      	movs	r0, r3
 8009f16:	f7ff ffaf 	bl	8009e78 <SysTick_Config>
 8009f1a:	0003      	movs	r3, r0
}
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	b002      	add	sp, #8
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e056      	b.n	8009fe4 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	7f5b      	ldrb	r3, [r3, #29]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f7f7 fc93 	bl	8001874 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2202      	movs	r2, #2
 8009f52:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	791b      	ldrb	r3, [r3, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10c      	bne.n	8009f76 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a22      	ldr	r2, [pc, #136]	; (8009fec <HAL_CRC_Init+0xc8>)
 8009f62:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2118      	movs	r1, #24
 8009f70:	438a      	bics	r2, r1
 8009f72:	609a      	str	r2, [r3, #8]
 8009f74:	e00b      	b.n	8009f8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6899      	ldr	r1, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 f835 	bl	8009ff0 <HAL_CRCEx_Polynomial_Set>
 8009f86:	1e03      	subs	r3, r0, #0
 8009f88:	d001      	beq.n	8009f8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e02a      	b.n	8009fe4 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	795b      	ldrb	r3, [r3, #5]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4252      	negs	r2, r2
 8009f9e:	611a      	str	r2, [r3, #16]
 8009fa0:	e004      	b.n	8009fac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6912      	ldr	r2, [r2, #16]
 8009faa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	2260      	movs	r2, #96	; 0x60
 8009fb4:	4393      	bics	r3, r2
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695a      	ldr	r2, [r3, #20]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2280      	movs	r2, #128	; 0x80
 8009fcc:	4393      	bics	r3, r2
 8009fce:	0019      	movs	r1, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	699a      	ldr	r2, [r3, #24]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	b002      	add	sp, #8
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	04c11db7 	.word	0x04c11db7

08009ff0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ffc:	2317      	movs	r3, #23
 8009ffe:	18fb      	adds	r3, r7, r3
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a004:	231f      	movs	r3, #31
 800a006:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a008:	46c0      	nop			; (mov r8, r8)
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	613a      	str	r2, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d008      	beq.n	800a026 <HAL_CRCEx_Polynomial_Set+0x36>
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	221f      	movs	r2, #31
 800a018:	4013      	ands	r3, r2
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	40da      	lsrs	r2, r3
 800a01e:	0013      	movs	r3, r2
 800a020:	2201      	movs	r2, #1
 800a022:	4013      	ands	r3, r2
 800a024:	d0f1      	beq.n	800a00a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b18      	cmp	r3, #24
 800a02a:	d00f      	beq.n	800a04c <HAL_CRCEx_Polynomial_Set+0x5c>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b18      	cmp	r3, #24
 800a030:	d824      	bhi.n	800a07c <HAL_CRCEx_Polynomial_Set+0x8c>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b10      	cmp	r3, #16
 800a036:	d011      	beq.n	800a05c <HAL_CRCEx_Polynomial_Set+0x6c>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d81e      	bhi.n	800a07c <HAL_CRCEx_Polynomial_Set+0x8c>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d020      	beq.n	800a086 <HAL_CRCEx_Polynomial_Set+0x96>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b08      	cmp	r3, #8
 800a048:	d010      	beq.n	800a06c <HAL_CRCEx_Polynomial_Set+0x7c>
 800a04a:	e017      	b.n	800a07c <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d91b      	bls.n	800a08a <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 800a052:	2317      	movs	r3, #23
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	2201      	movs	r2, #1
 800a058:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a05a:	e016      	b.n	800a08a <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b07      	cmp	r3, #7
 800a060:	d915      	bls.n	800a08e <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 800a062:	2317      	movs	r3, #23
 800a064:	18fb      	adds	r3, r7, r3
 800a066:	2201      	movs	r2, #1
 800a068:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a06a:	e010      	b.n	800a08e <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b0f      	cmp	r3, #15
 800a070:	d90f      	bls.n	800a092 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800a072:	2317      	movs	r3, #23
 800a074:	18fb      	adds	r3, r7, r3
 800a076:	2201      	movs	r2, #1
 800a078:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a07a:	e00a      	b.n	800a092 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a07c:	2317      	movs	r3, #23
 800a07e:	18fb      	adds	r3, r7, r3
 800a080:	2201      	movs	r2, #1
 800a082:	701a      	strb	r2, [r3, #0]
      break;
 800a084:	e006      	b.n	800a094 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a086:	46c0      	nop			; (mov r8, r8)
 800a088:	e004      	b.n	800a094 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a08a:	46c0      	nop			; (mov r8, r8)
 800a08c:	e002      	b.n	800a094 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a08e:	46c0      	nop			; (mov r8, r8)
 800a090:	e000      	b.n	800a094 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a092:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800a094:	2317      	movs	r3, #23
 800a096:	18fb      	adds	r3, r7, r3
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10e      	bne.n	800a0bc <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	2218      	movs	r2, #24
 800a0ae:	4393      	bics	r3, r2
 800a0b0:	0019      	movs	r1, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a0bc:	2317      	movs	r3, #23
 800a0be:	18fb      	adds	r3, r7, r3
 800a0c0:	781b      	ldrb	r3, [r3, #0]
}
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b006      	add	sp, #24
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e061      	b.n	800a1a2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a32      	ldr	r2, [pc, #200]	; (800a1ac <HAL_DMA_Init+0xe0>)
 800a0e4:	4694      	mov	ip, r2
 800a0e6:	4463      	add	r3, ip
 800a0e8:	2114      	movs	r1, #20
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f7f6 f816 	bl	800011c <__udivsi3>
 800a0f0:	0003      	movs	r3, r0
 800a0f2:	009a      	lsls	r2, r3, #2
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a2d      	ldr	r2, [pc, #180]	; (800a1b0 <HAL_DMA_Init+0xe4>)
 800a0fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2225      	movs	r2, #37	; 0x25
 800a102:	2102      	movs	r1, #2
 800a104:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4a28      	ldr	r2, [pc, #160]	; (800a1b4 <HAL_DMA_Init+0xe8>)
 800a112:	4013      	ands	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a11e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a12a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	01db      	lsls	r3, r3, #7
 800a154:	429a      	cmp	r2, r3
 800a156:	d018      	beq.n	800a18a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a158:	4b17      	ldr	r3, [pc, #92]	; (800a1b8 <HAL_DMA_Init+0xec>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a160:	211c      	movs	r1, #28
 800a162:	400b      	ands	r3, r1
 800a164:	210f      	movs	r1, #15
 800a166:	4099      	lsls	r1, r3
 800a168:	000b      	movs	r3, r1
 800a16a:	43d9      	mvns	r1, r3
 800a16c:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <HAL_DMA_Init+0xec>)
 800a16e:	400a      	ands	r2, r1
 800a170:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a172:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_DMA_Init+0xec>)
 800a174:	6819      	ldr	r1, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	201c      	movs	r0, #28
 800a180:	4003      	ands	r3, r0
 800a182:	409a      	lsls	r2, r3
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <HAL_DMA_Init+0xec>)
 800a186:	430a      	orrs	r2, r1
 800a188:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2225      	movs	r2, #37	; 0x25
 800a194:	2101      	movs	r1, #1
 800a196:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2224      	movs	r2, #36	; 0x24
 800a19c:	2100      	movs	r1, #0
 800a19e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	b004      	add	sp, #16
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	bffdfff8 	.word	0xbffdfff8
 800a1b0:	40020000 	.word	0x40020000
 800a1b4:	ffff800f 	.word	0xffff800f
 800a1b8:	400200a8 	.word	0x400200a8

0800a1bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ca:	2317      	movs	r3, #23
 800a1cc:	18fb      	adds	r3, r7, r3
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2224      	movs	r2, #36	; 0x24
 800a1d6:	5c9b      	ldrb	r3, [r3, r2]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_DMA_Start_IT+0x24>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e04f      	b.n	800a280 <HAL_DMA_Start_IT+0xc4>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2224      	movs	r2, #36	; 0x24
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2225      	movs	r2, #37	; 0x25
 800a1ec:	5c9b      	ldrb	r3, [r3, r2]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d13a      	bne.n	800a26a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2225      	movs	r2, #37	; 0x25
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2101      	movs	r1, #1
 800a20e:	438a      	bics	r2, r1
 800a210:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f8e3 	bl	800a3e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	210e      	movs	r1, #14
 800a232:	430a      	orrs	r2, r1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e00f      	b.n	800a258 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2104      	movs	r1, #4
 800a244:	438a      	bics	r2, r1
 800a246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	210a      	movs	r1, #10
 800a254:	430a      	orrs	r2, r1
 800a256:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2101      	movs	r1, #1
 800a264:	430a      	orrs	r2, r1
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	e007      	b.n	800a27a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2224      	movs	r2, #36	; 0x24
 800a26e:	2100      	movs	r1, #0
 800a270:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a272:	2317      	movs	r3, #23
 800a274:	18fb      	adds	r3, r7, r3
 800a276:	2202      	movs	r2, #2
 800a278:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a27a:	2317      	movs	r3, #23
 800a27c:	18fb      	adds	r3, r7, r3
 800a27e:	781b      	ldrb	r3, [r3, #0]
}
 800a280:	0018      	movs	r0, r3
 800a282:	46bd      	mov	sp, r7
 800a284:	b006      	add	sp, #24
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a4:	221c      	movs	r2, #28
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	2204      	movs	r2, #4
 800a2aa:	409a      	lsls	r2, r3
 800a2ac:	0013      	movs	r3, r2
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	d026      	beq.n	800a302 <HAL_DMA_IRQHandler+0x7a>
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	d022      	beq.n	800a302 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d107      	bne.n	800a2d8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2104      	movs	r1, #4
 800a2d4:	438a      	bics	r2, r1
 800a2d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2dc:	221c      	movs	r2, #28
 800a2de:	401a      	ands	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2104      	movs	r1, #4
 800a2e6:	4091      	lsls	r1, r2
 800a2e8:	000a      	movs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d100      	bne.n	800a2f6 <HAL_DMA_IRQHandler+0x6e>
 800a2f4:	e071      	b.n	800a3da <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	0010      	movs	r0, r2
 800a2fe:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800a300:	e06b      	b.n	800a3da <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a306:	221c      	movs	r2, #28
 800a308:	4013      	ands	r3, r2
 800a30a:	2202      	movs	r2, #2
 800a30c:	409a      	lsls	r2, r3
 800a30e:	0013      	movs	r3, r2
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4013      	ands	r3, r2
 800a314:	d02d      	beq.n	800a372 <HAL_DMA_IRQHandler+0xea>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2202      	movs	r2, #2
 800a31a:	4013      	ands	r3, r2
 800a31c:	d029      	beq.n	800a372 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2220      	movs	r2, #32
 800a326:	4013      	ands	r3, r2
 800a328:	d10b      	bne.n	800a342 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	210a      	movs	r1, #10
 800a336:	438a      	bics	r2, r1
 800a338:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2225      	movs	r2, #37	; 0x25
 800a33e:	2101      	movs	r1, #1
 800a340:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a346:	221c      	movs	r2, #28
 800a348:	401a      	ands	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	2102      	movs	r1, #2
 800a350:	4091      	lsls	r1, r2
 800a352:	000a      	movs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2224      	movs	r2, #36	; 0x24
 800a35a:	2100      	movs	r1, #0
 800a35c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d039      	beq.n	800a3da <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	0010      	movs	r0, r2
 800a36e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a370:	e033      	b.n	800a3da <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a376:	221c      	movs	r2, #28
 800a378:	4013      	ands	r3, r2
 800a37a:	2208      	movs	r2, #8
 800a37c:	409a      	lsls	r2, r3
 800a37e:	0013      	movs	r3, r2
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4013      	ands	r3, r2
 800a384:	d02a      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x154>
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	2208      	movs	r2, #8
 800a38a:	4013      	ands	r3, r2
 800a38c:	d026      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	210e      	movs	r1, #14
 800a39a:	438a      	bics	r2, r1
 800a39c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a2:	221c      	movs	r2, #28
 800a3a4:	401a      	ands	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	4091      	lsls	r1, r2
 800a3ae:	000a      	movs	r2, r1
 800a3b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2225      	movs	r2, #37	; 0x25
 800a3bc:	2101      	movs	r1, #1
 800a3be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2224      	movs	r2, #36	; 0x24
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d005      	beq.n	800a3dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	0010      	movs	r0, r2
 800a3d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a3da:	46c0      	nop			; (mov r8, r8)
 800a3dc:	46c0      	nop			; (mov r8, r8)
}
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	b004      	add	sp, #16
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	221c      	movs	r2, #28
 800a3f8:	401a      	ands	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	2101      	movs	r1, #1
 800a400:	4091      	lsls	r1, r2
 800a402:	000a      	movs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	2b10      	cmp	r3, #16
 800a414:	d108      	bne.n	800a428 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a426:	e007      	b.n	800a438 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	60da      	str	r2, [r3, #12]
}
 800a438:	46c0      	nop			; (mov r8, r8)
 800a43a:	46bd      	mov	sp, r7
 800a43c:	b004      	add	sp, #16
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	607a      	str	r2, [r7, #4]
 800a44a:	200b      	movs	r0, #11
 800a44c:	183b      	adds	r3, r7, r0
 800a44e:	1c0a      	adds	r2, r1, #0
 800a450:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a452:	2317      	movs	r3, #23
 800a454:	18fb      	adds	r3, r7, r3
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800a45a:	183b      	adds	r3, r7, r0
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d103      	bne.n	800a46a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	605a      	str	r2, [r3, #4]
      break;
 800a468:	e004      	b.n	800a474 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 800a46a:	2317      	movs	r3, #23
 800a46c:	18fb      	adds	r3, r7, r3
 800a46e:	2201      	movs	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
      break;
 800a472:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800a474:	2317      	movs	r3, #23
 800a476:	18fb      	adds	r3, r7, r3
 800a478:	781b      	ldrb	r3, [r3, #0]
}
 800a47a:	0018      	movs	r0, r3
 800a47c:	46bd      	mov	sp, r7
 800a47e:	b006      	add	sp, #24
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e003      	b.n	800a49e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a49c:	2300      	movs	r3, #0
  }
}
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	221f      	movs	r2, #31
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	409a      	lsls	r2, r3
 800a4bc:	0013      	movs	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a4c0:	4b0a      	ldr	r3, [pc, #40]	; (800a4ec <HAL_EXTI_IRQHandler+0x44>)
 800a4c2:	695a      	ldr	r2, [r3, #20]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <HAL_EXTI_IRQHandler+0x44>)
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d002      	beq.n	800a4e4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4798      	blx	r3
    }
  }
}
 800a4e4:	46c0      	nop			; (mov r8, r8)
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	b004      	add	sp, #16
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	40010400 	.word	0x40010400

0800a4f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800a506:	e155      	b.n	800a7b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2101      	movs	r1, #1
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	4091      	lsls	r1, r2
 800a512:	000a      	movs	r2, r1
 800a514:	4013      	ands	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d100      	bne.n	800a520 <HAL_GPIO_Init+0x30>
 800a51e:	e146      	b.n	800a7ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2203      	movs	r2, #3
 800a526:	4013      	ands	r3, r2
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d005      	beq.n	800a538 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2203      	movs	r2, #3
 800a532:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a534:	2b02      	cmp	r3, #2
 800a536:	d130      	bne.n	800a59a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	2203      	movs	r2, #3
 800a544:	409a      	lsls	r2, r3
 800a546:	0013      	movs	r3, r2
 800a548:	43da      	mvns	r2, r3
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	4013      	ands	r3, r2
 800a54e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	409a      	lsls	r2, r3
 800a55a:	0013      	movs	r3, r2
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a56e:	2201      	movs	r2, #1
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	409a      	lsls	r2, r3
 800a574:	0013      	movs	r3, r2
 800a576:	43da      	mvns	r2, r3
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	4013      	ands	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	091b      	lsrs	r3, r3, #4
 800a584:	2201      	movs	r2, #1
 800a586:	401a      	ands	r2, r3
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	409a      	lsls	r2, r3
 800a58c:	0013      	movs	r3, r2
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	4313      	orrs	r3, r2
 800a592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	2203      	movs	r2, #3
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d017      	beq.n	800a5d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	2203      	movs	r2, #3
 800a5b2:	409a      	lsls	r2, r3
 800a5b4:	0013      	movs	r3, r2
 800a5b6:	43da      	mvns	r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	409a      	lsls	r2, r3
 800a5c8:	0013      	movs	r3, r2
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2203      	movs	r2, #3
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d123      	bne.n	800a62a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	08da      	lsrs	r2, r3, #3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3208      	adds	r2, #8
 800a5ea:	0092      	lsls	r2, r2, #2
 800a5ec:	58d3      	ldr	r3, [r2, r3]
 800a5ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	2207      	movs	r2, #7
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	220f      	movs	r2, #15
 800a5fa:	409a      	lsls	r2, r3
 800a5fc:	0013      	movs	r3, r2
 800a5fe:	43da      	mvns	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	4013      	ands	r3, r2
 800a604:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	691a      	ldr	r2, [r3, #16]
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2107      	movs	r1, #7
 800a60e:	400b      	ands	r3, r1
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	409a      	lsls	r2, r3
 800a614:	0013      	movs	r3, r2
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4313      	orrs	r3, r2
 800a61a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	08da      	lsrs	r2, r3, #3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3208      	adds	r2, #8
 800a624:	0092      	lsls	r2, r2, #2
 800a626:	6939      	ldr	r1, [r7, #16]
 800a628:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	2203      	movs	r2, #3
 800a636:	409a      	lsls	r2, r3
 800a638:	0013      	movs	r3, r2
 800a63a:	43da      	mvns	r2, r3
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	4013      	ands	r3, r2
 800a640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2203      	movs	r2, #3
 800a648:	401a      	ands	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	409a      	lsls	r2, r3
 800a650:	0013      	movs	r3, r2
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	23c0      	movs	r3, #192	; 0xc0
 800a664:	029b      	lsls	r3, r3, #10
 800a666:	4013      	ands	r3, r2
 800a668:	d100      	bne.n	800a66c <HAL_GPIO_Init+0x17c>
 800a66a:	e0a0      	b.n	800a7ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a66c:	4b57      	ldr	r3, [pc, #348]	; (800a7cc <HAL_GPIO_Init+0x2dc>)
 800a66e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a670:	4b56      	ldr	r3, [pc, #344]	; (800a7cc <HAL_GPIO_Init+0x2dc>)
 800a672:	2101      	movs	r1, #1
 800a674:	430a      	orrs	r2, r1
 800a676:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a678:	4a55      	ldr	r2, [pc, #340]	; (800a7d0 <HAL_GPIO_Init+0x2e0>)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	089b      	lsrs	r3, r3, #2
 800a67e:	3302      	adds	r3, #2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	589b      	ldr	r3, [r3, r2]
 800a684:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2203      	movs	r2, #3
 800a68a:	4013      	ands	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	220f      	movs	r2, #15
 800a690:	409a      	lsls	r2, r3
 800a692:	0013      	movs	r3, r2
 800a694:	43da      	mvns	r2, r3
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	4013      	ands	r3, r2
 800a69a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	23a0      	movs	r3, #160	; 0xa0
 800a6a0:	05db      	lsls	r3, r3, #23
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d01f      	beq.n	800a6e6 <HAL_GPIO_Init+0x1f6>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a4a      	ldr	r2, [pc, #296]	; (800a7d4 <HAL_GPIO_Init+0x2e4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d019      	beq.n	800a6e2 <HAL_GPIO_Init+0x1f2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a49      	ldr	r2, [pc, #292]	; (800a7d8 <HAL_GPIO_Init+0x2e8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d013      	beq.n	800a6de <HAL_GPIO_Init+0x1ee>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a48      	ldr	r2, [pc, #288]	; (800a7dc <HAL_GPIO_Init+0x2ec>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d00d      	beq.n	800a6da <HAL_GPIO_Init+0x1ea>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a47      	ldr	r2, [pc, #284]	; (800a7e0 <HAL_GPIO_Init+0x2f0>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d007      	beq.n	800a6d6 <HAL_GPIO_Init+0x1e6>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a46      	ldr	r2, [pc, #280]	; (800a7e4 <HAL_GPIO_Init+0x2f4>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d101      	bne.n	800a6d2 <HAL_GPIO_Init+0x1e2>
 800a6ce:	2305      	movs	r3, #5
 800a6d0:	e00a      	b.n	800a6e8 <HAL_GPIO_Init+0x1f8>
 800a6d2:	2306      	movs	r3, #6
 800a6d4:	e008      	b.n	800a6e8 <HAL_GPIO_Init+0x1f8>
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	e006      	b.n	800a6e8 <HAL_GPIO_Init+0x1f8>
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e004      	b.n	800a6e8 <HAL_GPIO_Init+0x1f8>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e002      	b.n	800a6e8 <HAL_GPIO_Init+0x1f8>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <HAL_GPIO_Init+0x1f8>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	2103      	movs	r1, #3
 800a6ec:	400a      	ands	r2, r1
 800a6ee:	0092      	lsls	r2, r2, #2
 800a6f0:	4093      	lsls	r3, r2
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6f8:	4935      	ldr	r1, [pc, #212]	; (800a7d0 <HAL_GPIO_Init+0x2e0>)
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	089b      	lsrs	r3, r3, #2
 800a6fe:	3302      	adds	r3, #2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a706:	4b38      	ldr	r3, [pc, #224]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	43da      	mvns	r2, r3
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	4013      	ands	r3, r2
 800a714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	2380      	movs	r3, #128	; 0x80
 800a71c:	025b      	lsls	r3, r3, #9
 800a71e:	4013      	ands	r3, r2
 800a720:	d003      	beq.n	800a72a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a72a:	4b2f      	ldr	r3, [pc, #188]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800a730:	4b2d      	ldr	r3, [pc, #180]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	43da      	mvns	r2, r3
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	4013      	ands	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	2380      	movs	r3, #128	; 0x80
 800a746:	029b      	lsls	r3, r3, #10
 800a748:	4013      	ands	r3, r2
 800a74a:	d003      	beq.n	800a754 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4313      	orrs	r3, r2
 800a752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a754:	4b24      	ldr	r3, [pc, #144]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	43da      	mvns	r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	4013      	ands	r3, r2
 800a768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	2380      	movs	r3, #128	; 0x80
 800a770:	035b      	lsls	r3, r3, #13
 800a772:	4013      	ands	r3, r2
 800a774:	d003      	beq.n	800a77e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a77e:	4b1a      	ldr	r3, [pc, #104]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a784:	4b18      	ldr	r3, [pc, #96]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	43da      	mvns	r2, r3
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	4013      	ands	r3, r2
 800a792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	2380      	movs	r3, #128	; 0x80
 800a79a:	039b      	lsls	r3, r3, #14
 800a79c:	4013      	ands	r3, r2
 800a79e:	d003      	beq.n	800a7a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <HAL_GPIO_Init+0x2f8>)
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	40da      	lsrs	r2, r3
 800a7bc:	1e13      	subs	r3, r2, #0
 800a7be:	d000      	beq.n	800a7c2 <HAL_GPIO_Init+0x2d2>
 800a7c0:	e6a2      	b.n	800a508 <HAL_GPIO_Init+0x18>
  }
}
 800a7c2:	46c0      	nop			; (mov r8, r8)
 800a7c4:	46c0      	nop			; (mov r8, r8)
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b006      	add	sp, #24
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40021000 	.word	0x40021000
 800a7d0:	40010000 	.word	0x40010000
 800a7d4:	50000400 	.word	0x50000400
 800a7d8:	50000800 	.word	0x50000800
 800a7dc:	50000c00 	.word	0x50000c00
 800a7e0:	50001000 	.word	0x50001000
 800a7e4:	50001c00 	.word	0x50001c00
 800a7e8:	40010400 	.word	0x40010400

0800a7ec <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a7fe:	2300      	movs	r3, #0
 800a800:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a802:	e0bc      	b.n	800a97e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a804:	2201      	movs	r2, #1
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	409a      	lsls	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	4013      	ands	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d100      	bne.n	800a818 <HAL_GPIO_DeInit+0x2c>
 800a816:	e0af      	b.n	800a978 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a818:	4a5e      	ldr	r2, [pc, #376]	; (800a994 <HAL_GPIO_DeInit+0x1a8>)
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	089b      	lsrs	r3, r3, #2
 800a81e:	3302      	adds	r3, #2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	589b      	ldr	r3, [r3, r2]
 800a824:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2203      	movs	r2, #3
 800a82a:	4013      	ands	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	220f      	movs	r2, #15
 800a830:	409a      	lsls	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	4013      	ands	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	23a0      	movs	r3, #160	; 0xa0
 800a83c:	05db      	lsls	r3, r3, #23
 800a83e:	429a      	cmp	r2, r3
 800a840:	d01f      	beq.n	800a882 <HAL_GPIO_DeInit+0x96>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a54      	ldr	r2, [pc, #336]	; (800a998 <HAL_GPIO_DeInit+0x1ac>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d019      	beq.n	800a87e <HAL_GPIO_DeInit+0x92>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a53      	ldr	r2, [pc, #332]	; (800a99c <HAL_GPIO_DeInit+0x1b0>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d013      	beq.n	800a87a <HAL_GPIO_DeInit+0x8e>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a52      	ldr	r2, [pc, #328]	; (800a9a0 <HAL_GPIO_DeInit+0x1b4>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00d      	beq.n	800a876 <HAL_GPIO_DeInit+0x8a>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a51      	ldr	r2, [pc, #324]	; (800a9a4 <HAL_GPIO_DeInit+0x1b8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d007      	beq.n	800a872 <HAL_GPIO_DeInit+0x86>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a50      	ldr	r2, [pc, #320]	; (800a9a8 <HAL_GPIO_DeInit+0x1bc>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d101      	bne.n	800a86e <HAL_GPIO_DeInit+0x82>
 800a86a:	2305      	movs	r3, #5
 800a86c:	e00a      	b.n	800a884 <HAL_GPIO_DeInit+0x98>
 800a86e:	2306      	movs	r3, #6
 800a870:	e008      	b.n	800a884 <HAL_GPIO_DeInit+0x98>
 800a872:	2304      	movs	r3, #4
 800a874:	e006      	b.n	800a884 <HAL_GPIO_DeInit+0x98>
 800a876:	2303      	movs	r3, #3
 800a878:	e004      	b.n	800a884 <HAL_GPIO_DeInit+0x98>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e002      	b.n	800a884 <HAL_GPIO_DeInit+0x98>
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <HAL_GPIO_DeInit+0x98>
 800a882:	2300      	movs	r3, #0
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	2103      	movs	r1, #3
 800a888:	400a      	ands	r2, r1
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	4093      	lsls	r3, r2
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	429a      	cmp	r2, r3
 800a892:	d132      	bne.n	800a8fa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a894:	4b45      	ldr	r3, [pc, #276]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	43d9      	mvns	r1, r3
 800a89c:	4b43      	ldr	r3, [pc, #268]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a89e:	400a      	ands	r2, r1
 800a8a0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a8a2:	4b42      	ldr	r3, [pc, #264]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	43d9      	mvns	r1, r3
 800a8aa:	4b40      	ldr	r3, [pc, #256]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a8ac:	400a      	ands	r2, r1
 800a8ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a8b0:	4b3e      	ldr	r3, [pc, #248]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a8b2:	689a      	ldr	r2, [r3, #8]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	43d9      	mvns	r1, r3
 800a8b8:	4b3c      	ldr	r3, [pc, #240]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a8ba:	400a      	ands	r2, r1
 800a8bc:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a8be:	4b3b      	ldr	r3, [pc, #236]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	43d9      	mvns	r1, r3
 800a8c6:	4b39      	ldr	r3, [pc, #228]	; (800a9ac <HAL_GPIO_DeInit+0x1c0>)
 800a8c8:	400a      	ands	r2, r1
 800a8ca:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	220f      	movs	r2, #15
 800a8d6:	409a      	lsls	r2, r3
 800a8d8:	0013      	movs	r3, r2
 800a8da:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a8dc:	4a2d      	ldr	r2, [pc, #180]	; (800a994 <HAL_GPIO_DeInit+0x1a8>)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	089b      	lsrs	r3, r3, #2
 800a8e2:	3302      	adds	r3, #2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	589a      	ldr	r2, [r3, r2]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	43d9      	mvns	r1, r3
 800a8ec:	4829      	ldr	r0, [pc, #164]	; (800a994 <HAL_GPIO_DeInit+0x1a8>)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	089b      	lsrs	r3, r3, #2
 800a8f2:	400a      	ands	r2, r1
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	2103      	movs	r1, #3
 800a904:	4099      	lsls	r1, r3
 800a906:	000b      	movs	r3, r1
 800a908:	431a      	orrs	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	08da      	lsrs	r2, r3, #3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3208      	adds	r2, #8
 800a916:	0092      	lsls	r2, r2, #2
 800a918:	58d3      	ldr	r3, [r2, r3]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	2107      	movs	r1, #7
 800a91e:	400a      	ands	r2, r1
 800a920:	0092      	lsls	r2, r2, #2
 800a922:	210f      	movs	r1, #15
 800a924:	4091      	lsls	r1, r2
 800a926:	000a      	movs	r2, r1
 800a928:	43d1      	mvns	r1, r2
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	08d2      	lsrs	r2, r2, #3
 800a92e:	4019      	ands	r1, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3208      	adds	r2, #8
 800a934:	0092      	lsls	r2, r2, #2
 800a936:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	0052      	lsls	r2, r2, #1
 800a940:	2103      	movs	r1, #3
 800a942:	4091      	lsls	r1, r2
 800a944:	000a      	movs	r2, r1
 800a946:	43d2      	mvns	r2, r2
 800a948:	401a      	ands	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2101      	movs	r1, #1
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	4091      	lsls	r1, r2
 800a958:	000a      	movs	r2, r1
 800a95a:	43d2      	mvns	r2, r2
 800a95c:	401a      	ands	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	0052      	lsls	r2, r2, #1
 800a96a:	2103      	movs	r1, #3
 800a96c:	4091      	lsls	r1, r2
 800a96e:	000a      	movs	r2, r1
 800a970:	43d2      	mvns	r2, r2
 800a972:	401a      	ands	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	3301      	adds	r3, #1
 800a97c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	40da      	lsrs	r2, r3
 800a984:	1e13      	subs	r3, r2, #0
 800a986:	d000      	beq.n	800a98a <HAL_GPIO_DeInit+0x19e>
 800a988:	e73c      	b.n	800a804 <HAL_GPIO_DeInit+0x18>
  }
}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	46c0      	nop			; (mov r8, r8)
 800a98e:	46bd      	mov	sp, r7
 800a990:	b006      	add	sp, #24
 800a992:	bd80      	pop	{r7, pc}
 800a994:	40010000 	.word	0x40010000
 800a998:	50000400 	.word	0x50000400
 800a99c:	50000800 	.word	0x50000800
 800a9a0:	50000c00 	.word	0x50000c00
 800a9a4:	50001000 	.word	0x50001000
 800a9a8:	50001c00 	.word	0x50001c00
 800a9ac:	40010400 	.word	0x40010400

0800a9b0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	000a      	movs	r2, r1
 800a9ba:	1cbb      	adds	r3, r7, #2
 800a9bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	1cba      	adds	r2, r7, #2
 800a9c4:	8812      	ldrh	r2, [r2, #0]
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	d004      	beq.n	800a9d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a9ca:	230f      	movs	r3, #15
 800a9cc:	18fb      	adds	r3, r7, r3
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	e003      	b.n	800a9dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a9d4:	230f      	movs	r3, #15
 800a9d6:	18fb      	adds	r3, r7, r3
 800a9d8:	2200      	movs	r2, #0
 800a9da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a9dc:	230f      	movs	r3, #15
 800a9de:	18fb      	adds	r3, r7, r3
 800a9e0:	781b      	ldrb	r3, [r3, #0]
}
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	b004      	add	sp, #16
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	0008      	movs	r0, r1
 800a9f4:	0011      	movs	r1, r2
 800a9f6:	1cbb      	adds	r3, r7, #2
 800a9f8:	1c02      	adds	r2, r0, #0
 800a9fa:	801a      	strh	r2, [r3, #0]
 800a9fc:	1c7b      	adds	r3, r7, #1
 800a9fe:	1c0a      	adds	r2, r1, #0
 800aa00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aa02:	1c7b      	adds	r3, r7, #1
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d004      	beq.n	800aa14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa0a:	1cbb      	adds	r3, r7, #2
 800aa0c:	881a      	ldrh	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800aa12:	e003      	b.n	800aa1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800aa14:	1cbb      	adds	r3, r7, #2
 800aa16:	881a      	ldrh	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aa1c:	46c0      	nop			; (mov r8, r8)
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	b002      	add	sp, #8
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e082      	b.n	800ab3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2241      	movs	r2, #65	; 0x41
 800aa3a:	5c9b      	ldrb	r3, [r3, r2]
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d107      	bne.n	800aa52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2240      	movs	r2, #64	; 0x40
 800aa46:	2100      	movs	r1, #0
 800aa48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 f8af 	bl	800abb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2241      	movs	r2, #65	; 0x41
 800aa56:	2124      	movs	r1, #36	; 0x24
 800aa58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2101      	movs	r1, #1
 800aa66:	438a      	bics	r2, r1
 800aa68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4934      	ldr	r1, [pc, #208]	; (800ab44 <HAL_I2C_Init+0x120>)
 800aa74:	400a      	ands	r2, r1
 800aa76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4931      	ldr	r1, [pc, #196]	; (800ab48 <HAL_I2C_Init+0x124>)
 800aa84:	400a      	ands	r2, r1
 800aa86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d108      	bne.n	800aaa2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2180      	movs	r1, #128	; 0x80
 800aa9a:	0209      	lsls	r1, r1, #8
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	609a      	str	r2, [r3, #8]
 800aaa0:	e007      	b.n	800aab2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	689a      	ldr	r2, [r3, #8]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2184      	movs	r1, #132	; 0x84
 800aaac:	0209      	lsls	r1, r1, #8
 800aaae:	430a      	orrs	r2, r1
 800aab0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d104      	bne.n	800aac4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2280      	movs	r2, #128	; 0x80
 800aac0:	0112      	lsls	r2, r2, #4
 800aac2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	491f      	ldr	r1, [pc, #124]	; (800ab4c <HAL_I2C_Init+0x128>)
 800aad0:	430a      	orrs	r2, r1
 800aad2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	491a      	ldr	r1, [pc, #104]	; (800ab48 <HAL_I2C_Init+0x124>)
 800aae0:	400a      	ands	r2, r1
 800aae2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	431a      	orrs	r2, r3
 800aaee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	69d9      	ldr	r1, [r3, #28]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1a      	ldr	r2, [r3, #32]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	430a      	orrs	r2, r1
 800ab0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2101      	movs	r1, #1
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2241      	movs	r2, #65	; 0x41
 800ab28:	2120      	movs	r1, #32
 800ab2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2242      	movs	r2, #66	; 0x42
 800ab36:	2100      	movs	r1, #0
 800ab38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	b002      	add	sp, #8
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	f0ffffff 	.word	0xf0ffffff
 800ab48:	ffff7fff 	.word	0xffff7fff
 800ab4c:	02008000 	.word	0x02008000

0800ab50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e022      	b.n	800aba8 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2241      	movs	r2, #65	; 0x41
 800ab66:	2124      	movs	r1, #36	; 0x24
 800ab68:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2101      	movs	r1, #1
 800ab76:	438a      	bics	r2, r1
 800ab78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	0018      	movs	r0, r3
 800ab7e:	f000 f81f 	bl	800abc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2241      	movs	r2, #65	; 0x41
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2242      	movs	r2, #66	; 0x42
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2240      	movs	r2, #64	; 0x40
 800aba2:	2100      	movs	r1, #0
 800aba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	0018      	movs	r0, r3
 800abaa:	46bd      	mov	sp, r7
 800abac:	b002      	add	sp, #8
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800abb8:	46c0      	nop			; (mov r8, r8)
 800abba:	46bd      	mov	sp, r7
 800abbc:	b002      	add	sp, #8
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800abc8:	46c0      	nop			; (mov r8, r8)
 800abca:	46bd      	mov	sp, r7
 800abcc:	b002      	add	sp, #8
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abd0:	b590      	push	{r4, r7, lr}
 800abd2:	b089      	sub	sp, #36	; 0x24
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	000c      	movs	r4, r1
 800abda:	0010      	movs	r0, r2
 800abdc:	0019      	movs	r1, r3
 800abde:	230a      	movs	r3, #10
 800abe0:	18fb      	adds	r3, r7, r3
 800abe2:	1c22      	adds	r2, r4, #0
 800abe4:	801a      	strh	r2, [r3, #0]
 800abe6:	2308      	movs	r3, #8
 800abe8:	18fb      	adds	r3, r7, r3
 800abea:	1c02      	adds	r2, r0, #0
 800abec:	801a      	strh	r2, [r3, #0]
 800abee:	1dbb      	adds	r3, r7, #6
 800abf0:	1c0a      	adds	r2, r1, #0
 800abf2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2241      	movs	r2, #65	; 0x41
 800abf8:	5c9b      	ldrb	r3, [r3, r2]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b20      	cmp	r3, #32
 800abfe:	d000      	beq.n	800ac02 <HAL_I2C_Mem_Write+0x32>
 800ac00:	e10c      	b.n	800ae1c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <HAL_I2C_Mem_Write+0x42>
 800ac08:	232c      	movs	r3, #44	; 0x2c
 800ac0a:	18fb      	adds	r3, r7, r3
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d105      	bne.n	800ac1e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2280      	movs	r2, #128	; 0x80
 800ac16:	0092      	lsls	r2, r2, #2
 800ac18:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e0ff      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2240      	movs	r2, #64	; 0x40
 800ac22:	5c9b      	ldrb	r3, [r3, r2]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d101      	bne.n	800ac2c <HAL_I2C_Mem_Write+0x5c>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	e0f8      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2240      	movs	r2, #64	; 0x40
 800ac30:	2101      	movs	r1, #1
 800ac32:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ac34:	f7ff f86a 	bl	8009d0c <HAL_GetTick>
 800ac38:	0003      	movs	r3, r0
 800ac3a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ac3c:	2380      	movs	r3, #128	; 0x80
 800ac3e:	0219      	lsls	r1, r3, #8
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	2319      	movs	r3, #25
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f000 fb21 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800ac4e:	1e03      	subs	r3, r0, #0
 800ac50:	d001      	beq.n	800ac56 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e0e3      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2241      	movs	r2, #65	; 0x41
 800ac5a:	2121      	movs	r1, #33	; 0x21
 800ac5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2242      	movs	r2, #66	; 0x42
 800ac62:	2140      	movs	r1, #64	; 0x40
 800ac64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	222c      	movs	r2, #44	; 0x2c
 800ac76:	18ba      	adds	r2, r7, r2
 800ac78:	8812      	ldrh	r2, [r2, #0]
 800ac7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac82:	1dbb      	adds	r3, r7, #6
 800ac84:	881c      	ldrh	r4, [r3, #0]
 800ac86:	2308      	movs	r3, #8
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	881a      	ldrh	r2, [r3, #0]
 800ac8c:	230a      	movs	r3, #10
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	8819      	ldrh	r1, [r3, #0]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	0023      	movs	r3, r4
 800ac9e:	f000 fa0f 	bl	800b0c0 <I2C_RequestMemoryWrite>
 800aca2:	1e03      	subs	r3, r0, #0
 800aca4:	d005      	beq.n	800acb2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2240      	movs	r2, #64	; 0x40
 800acaa:	2100      	movs	r1, #0
 800acac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e0b5      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	2bff      	cmp	r3, #255	; 0xff
 800acba:	d911      	bls.n	800ace0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	22ff      	movs	r2, #255	; 0xff
 800acc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	2380      	movs	r3, #128	; 0x80
 800acca:	045c      	lsls	r4, r3, #17
 800accc:	230a      	movs	r3, #10
 800acce:	18fb      	adds	r3, r7, r3
 800acd0:	8819      	ldrh	r1, [r3, #0]
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	2300      	movs	r3, #0
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	0023      	movs	r3, r4
 800acda:	f000 fc0d 	bl	800b4f8 <I2C_TransferConfig>
 800acde:	e012      	b.n	800ad06 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	2380      	movs	r3, #128	; 0x80
 800acf2:	049c      	lsls	r4, r3, #18
 800acf4:	230a      	movs	r3, #10
 800acf6:	18fb      	adds	r3, r7, r3
 800acf8:	8819      	ldrh	r1, [r3, #0]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	2300      	movs	r3, #0
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	0023      	movs	r3, r4
 800ad02:	f000 fbf9 	bl	800b4f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f000 fafe 	bl	800b30e <I2C_WaitOnTXISFlagUntilTimeout>
 800ad12:	1e03      	subs	r3, r0, #0
 800ad14:	d001      	beq.n	800ad1a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e081      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad42:	3b01      	subs	r3, #1
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d03a      	beq.n	800adca <HAL_I2C_Mem_Write+0x1fa>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d136      	bne.n	800adca <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	0013      	movs	r3, r2
 800ad66:	2200      	movs	r2, #0
 800ad68:	2180      	movs	r1, #128	; 0x80
 800ad6a:	f000 fa91 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800ad6e:	1e03      	subs	r3, r0, #0
 800ad70:	d001      	beq.n	800ad76 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e053      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2bff      	cmp	r3, #255	; 0xff
 800ad7e:	d911      	bls.n	800ada4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	22ff      	movs	r2, #255	; 0xff
 800ad84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	2380      	movs	r3, #128	; 0x80
 800ad8e:	045c      	lsls	r4, r3, #17
 800ad90:	230a      	movs	r3, #10
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	8819      	ldrh	r1, [r3, #0]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	0023      	movs	r3, r4
 800ad9e:	f000 fbab 	bl	800b4f8 <I2C_TransferConfig>
 800ada2:	e012      	b.n	800adca <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	2380      	movs	r3, #128	; 0x80
 800adb6:	049c      	lsls	r4, r3, #18
 800adb8:	230a      	movs	r3, #10
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	8819      	ldrh	r1, [r3, #0]
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	2300      	movs	r3, #0
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	0023      	movs	r3, r4
 800adc6:	f000 fb97 	bl	800b4f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adce:	b29b      	uxth	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d198      	bne.n	800ad06 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	0018      	movs	r0, r3
 800addc:	f000 fad6 	bl	800b38c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ade0:	1e03      	subs	r3, r0, #0
 800ade2:	d001      	beq.n	800ade8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e01a      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2220      	movs	r2, #32
 800adee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	490b      	ldr	r1, [pc, #44]	; (800ae28 <HAL_I2C_Mem_Write+0x258>)
 800adfc:	400a      	ands	r2, r1
 800adfe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2241      	movs	r2, #65	; 0x41
 800ae04:	2120      	movs	r1, #32
 800ae06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2242      	movs	r2, #66	; 0x42
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2240      	movs	r2, #64	; 0x40
 800ae14:	2100      	movs	r1, #0
 800ae16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e000      	b.n	800ae1e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800ae1c:	2302      	movs	r3, #2
  }
}
 800ae1e:	0018      	movs	r0, r3
 800ae20:	46bd      	mov	sp, r7
 800ae22:	b007      	add	sp, #28
 800ae24:	bd90      	pop	{r4, r7, pc}
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	fe00e800 	.word	0xfe00e800

0800ae2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b089      	sub	sp, #36	; 0x24
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	000c      	movs	r4, r1
 800ae36:	0010      	movs	r0, r2
 800ae38:	0019      	movs	r1, r3
 800ae3a:	230a      	movs	r3, #10
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	1c22      	adds	r2, r4, #0
 800ae40:	801a      	strh	r2, [r3, #0]
 800ae42:	2308      	movs	r3, #8
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	1c02      	adds	r2, r0, #0
 800ae48:	801a      	strh	r2, [r3, #0]
 800ae4a:	1dbb      	adds	r3, r7, #6
 800ae4c:	1c0a      	adds	r2, r1, #0
 800ae4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2241      	movs	r2, #65	; 0x41
 800ae54:	5c9b      	ldrb	r3, [r3, r2]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b20      	cmp	r3, #32
 800ae5a:	d000      	beq.n	800ae5e <HAL_I2C_Mem_Read+0x32>
 800ae5c:	e110      	b.n	800b080 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <HAL_I2C_Mem_Read+0x42>
 800ae64:	232c      	movs	r3, #44	; 0x2c
 800ae66:	18fb      	adds	r3, r7, r3
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d105      	bne.n	800ae7a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2280      	movs	r2, #128	; 0x80
 800ae72:	0092      	lsls	r2, r2, #2
 800ae74:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e103      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2240      	movs	r2, #64	; 0x40
 800ae7e:	5c9b      	ldrb	r3, [r3, r2]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d101      	bne.n	800ae88 <HAL_I2C_Mem_Read+0x5c>
 800ae84:	2302      	movs	r3, #2
 800ae86:	e0fc      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2240      	movs	r2, #64	; 0x40
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ae90:	f7fe ff3c 	bl	8009d0c <HAL_GetTick>
 800ae94:	0003      	movs	r3, r0
 800ae96:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ae98:	2380      	movs	r3, #128	; 0x80
 800ae9a:	0219      	lsls	r1, r3, #8
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	2319      	movs	r3, #25
 800aea4:	2201      	movs	r2, #1
 800aea6:	f000 f9f3 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800aeaa:	1e03      	subs	r3, r0, #0
 800aeac:	d001      	beq.n	800aeb2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e0e7      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2241      	movs	r2, #65	; 0x41
 800aeb6:	2122      	movs	r1, #34	; 0x22
 800aeb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2242      	movs	r2, #66	; 0x42
 800aebe:	2140      	movs	r1, #64	; 0x40
 800aec0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	222c      	movs	r2, #44	; 0x2c
 800aed2:	18ba      	adds	r2, r7, r2
 800aed4:	8812      	ldrh	r2, [r2, #0]
 800aed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aede:	1dbb      	adds	r3, r7, #6
 800aee0:	881c      	ldrh	r4, [r3, #0]
 800aee2:	2308      	movs	r3, #8
 800aee4:	18fb      	adds	r3, r7, r3
 800aee6:	881a      	ldrh	r2, [r3, #0]
 800aee8:	230a      	movs	r3, #10
 800aeea:	18fb      	adds	r3, r7, r3
 800aeec:	8819      	ldrh	r1, [r3, #0]
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	0023      	movs	r3, r4
 800aefa:	f000 f945 	bl	800b188 <I2C_RequestMemoryRead>
 800aefe:	1e03      	subs	r3, r0, #0
 800af00:	d005      	beq.n	800af0e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2240      	movs	r2, #64	; 0x40
 800af06:	2100      	movs	r1, #0
 800af08:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e0b9      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af12:	b29b      	uxth	r3, r3
 800af14:	2bff      	cmp	r3, #255	; 0xff
 800af16:	d911      	bls.n	800af3c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	22ff      	movs	r2, #255	; 0xff
 800af1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af22:	b2da      	uxtb	r2, r3
 800af24:	2380      	movs	r3, #128	; 0x80
 800af26:	045c      	lsls	r4, r3, #17
 800af28:	230a      	movs	r3, #10
 800af2a:	18fb      	adds	r3, r7, r3
 800af2c:	8819      	ldrh	r1, [r3, #0]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	4b56      	ldr	r3, [pc, #344]	; (800b08c <HAL_I2C_Mem_Read+0x260>)
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	0023      	movs	r3, r4
 800af36:	f000 fadf 	bl	800b4f8 <I2C_TransferConfig>
 800af3a:	e012      	b.n	800af62 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af40:	b29a      	uxth	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	2380      	movs	r3, #128	; 0x80
 800af4e:	049c      	lsls	r4, r3, #18
 800af50:	230a      	movs	r3, #10
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	8819      	ldrh	r1, [r3, #0]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	4b4c      	ldr	r3, [pc, #304]	; (800b08c <HAL_I2C_Mem_Read+0x260>)
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	0023      	movs	r3, r4
 800af5e:	f000 facb 	bl	800b4f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800af62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	0013      	movs	r3, r2
 800af6c:	2200      	movs	r2, #0
 800af6e:	2104      	movs	r1, #4
 800af70:	f000 f98e 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800af74:	1e03      	subs	r3, r0, #0
 800af76:	d001      	beq.n	800af7c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e082      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af98:	3b01      	subs	r3, #1
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d03a      	beq.n	800b02e <HAL_I2C_Mem_Read+0x202>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d136      	bne.n	800b02e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	0013      	movs	r3, r2
 800afca:	2200      	movs	r2, #0
 800afcc:	2180      	movs	r1, #128	; 0x80
 800afce:	f000 f95f 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800afd2:	1e03      	subs	r3, r0, #0
 800afd4:	d001      	beq.n	800afda <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e053      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2bff      	cmp	r3, #255	; 0xff
 800afe2:	d911      	bls.n	800b008 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	22ff      	movs	r2, #255	; 0xff
 800afe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	2380      	movs	r3, #128	; 0x80
 800aff2:	045c      	lsls	r4, r3, #17
 800aff4:	230a      	movs	r3, #10
 800aff6:	18fb      	adds	r3, r7, r3
 800aff8:	8819      	ldrh	r1, [r3, #0]
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	2300      	movs	r3, #0
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	0023      	movs	r3, r4
 800b002:	f000 fa79 	bl	800b4f8 <I2C_TransferConfig>
 800b006:	e012      	b.n	800b02e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b016:	b2da      	uxtb	r2, r3
 800b018:	2380      	movs	r3, #128	; 0x80
 800b01a:	049c      	lsls	r4, r3, #18
 800b01c:	230a      	movs	r3, #10
 800b01e:	18fb      	adds	r3, r7, r3
 800b020:	8819      	ldrh	r1, [r3, #0]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	2300      	movs	r3, #0
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	0023      	movs	r3, r4
 800b02a:	f000 fa65 	bl	800b4f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b032:	b29b      	uxth	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d194      	bne.n	800af62 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	0018      	movs	r0, r3
 800b040:	f000 f9a4 	bl	800b38c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b044:	1e03      	subs	r3, r0, #0
 800b046:	d001      	beq.n	800b04c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e01a      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2220      	movs	r2, #32
 800b052:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	490c      	ldr	r1, [pc, #48]	; (800b090 <HAL_I2C_Mem_Read+0x264>)
 800b060:	400a      	ands	r2, r1
 800b062:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2241      	movs	r2, #65	; 0x41
 800b068:	2120      	movs	r1, #32
 800b06a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2242      	movs	r2, #66	; 0x42
 800b070:	2100      	movs	r1, #0
 800b072:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2240      	movs	r2, #64	; 0x40
 800b078:	2100      	movs	r1, #0
 800b07a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	e000      	b.n	800b082 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800b080:	2302      	movs	r3, #2
  }
}
 800b082:	0018      	movs	r0, r3
 800b084:	46bd      	mov	sp, r7
 800b086:	b007      	add	sp, #28
 800b088:	bd90      	pop	{r4, r7, pc}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	80002400 	.word	0x80002400
 800b090:	fe00e800 	.word	0xfe00e800

0800b094 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2241      	movs	r2, #65	; 0x41
 800b0a0:	5c9b      	ldrb	r3, [r3, r2]
 800b0a2:	b2db      	uxtb	r3, r3
}
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	b002      	add	sp, #8
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b0c0:	b5b0      	push	{r4, r5, r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	000c      	movs	r4, r1
 800b0ca:	0010      	movs	r0, r2
 800b0cc:	0019      	movs	r1, r3
 800b0ce:	250a      	movs	r5, #10
 800b0d0:	197b      	adds	r3, r7, r5
 800b0d2:	1c22      	adds	r2, r4, #0
 800b0d4:	801a      	strh	r2, [r3, #0]
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	18fb      	adds	r3, r7, r3
 800b0da:	1c02      	adds	r2, r0, #0
 800b0dc:	801a      	strh	r2, [r3, #0]
 800b0de:	1dbb      	adds	r3, r7, #6
 800b0e0:	1c0a      	adds	r2, r1, #0
 800b0e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b0e4:	1dbb      	adds	r3, r7, #6
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	2380      	movs	r3, #128	; 0x80
 800b0ec:	045c      	lsls	r4, r3, #17
 800b0ee:	197b      	adds	r3, r7, r5
 800b0f0:	8819      	ldrh	r1, [r3, #0]
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	4b23      	ldr	r3, [pc, #140]	; (800b184 <I2C_RequestMemoryWrite+0xc4>)
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	0023      	movs	r3, r4
 800b0fa:	f000 f9fd 	bl	800b4f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b100:	6a39      	ldr	r1, [r7, #32]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	0018      	movs	r0, r3
 800b106:	f000 f902 	bl	800b30e <I2C_WaitOnTXISFlagUntilTimeout>
 800b10a:	1e03      	subs	r3, r0, #0
 800b10c:	d001      	beq.n	800b112 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e033      	b.n	800b17a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b112:	1dbb      	adds	r3, r7, #6
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d107      	bne.n	800b12a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b11a:	2308      	movs	r3, #8
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b2da      	uxtb	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	629a      	str	r2, [r3, #40]	; 0x28
 800b128:	e019      	b.n	800b15e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b12a:	2308      	movs	r3, #8
 800b12c:	18fb      	adds	r3, r7, r3
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	0a1b      	lsrs	r3, r3, #8
 800b132:	b29b      	uxth	r3, r3
 800b134:	b2da      	uxtb	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13e:	6a39      	ldr	r1, [r7, #32]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	0018      	movs	r0, r3
 800b144:	f000 f8e3 	bl	800b30e <I2C_WaitOnTXISFlagUntilTimeout>
 800b148:	1e03      	subs	r3, r0, #0
 800b14a:	d001      	beq.n	800b150 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e014      	b.n	800b17a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b150:	2308      	movs	r3, #8
 800b152:	18fb      	adds	r3, r7, r3
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	b2da      	uxtb	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b15e:	6a3a      	ldr	r2, [r7, #32]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	0013      	movs	r3, r2
 800b168:	2200      	movs	r2, #0
 800b16a:	2180      	movs	r1, #128	; 0x80
 800b16c:	f000 f890 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800b170:	1e03      	subs	r3, r0, #0
 800b172:	d001      	beq.n	800b178 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e000      	b.n	800b17a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	0018      	movs	r0, r3
 800b17c:	46bd      	mov	sp, r7
 800b17e:	b004      	add	sp, #16
 800b180:	bdb0      	pop	{r4, r5, r7, pc}
 800b182:	46c0      	nop			; (mov r8, r8)
 800b184:	80002000 	.word	0x80002000

0800b188 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b188:	b5b0      	push	{r4, r5, r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	000c      	movs	r4, r1
 800b192:	0010      	movs	r0, r2
 800b194:	0019      	movs	r1, r3
 800b196:	250a      	movs	r5, #10
 800b198:	197b      	adds	r3, r7, r5
 800b19a:	1c22      	adds	r2, r4, #0
 800b19c:	801a      	strh	r2, [r3, #0]
 800b19e:	2308      	movs	r3, #8
 800b1a0:	18fb      	adds	r3, r7, r3
 800b1a2:	1c02      	adds	r2, r0, #0
 800b1a4:	801a      	strh	r2, [r3, #0]
 800b1a6:	1dbb      	adds	r3, r7, #6
 800b1a8:	1c0a      	adds	r2, r1, #0
 800b1aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b1ac:	1dbb      	adds	r3, r7, #6
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	197b      	adds	r3, r7, r5
 800b1b4:	8819      	ldrh	r1, [r3, #0]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	4b23      	ldr	r3, [pc, #140]	; (800b248 <I2C_RequestMemoryRead+0xc0>)
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f000 f99b 	bl	800b4f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c4:	6a39      	ldr	r1, [r7, #32]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f000 f8a0 	bl	800b30e <I2C_WaitOnTXISFlagUntilTimeout>
 800b1ce:	1e03      	subs	r3, r0, #0
 800b1d0:	d001      	beq.n	800b1d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e033      	b.n	800b23e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b1d6:	1dbb      	adds	r3, r7, #6
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d107      	bne.n	800b1ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b1de:	2308      	movs	r3, #8
 800b1e0:	18fb      	adds	r3, r7, r3
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	629a      	str	r2, [r3, #40]	; 0x28
 800b1ec:	e019      	b.n	800b222 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b1ee:	2308      	movs	r3, #8
 800b1f0:	18fb      	adds	r3, r7, r3
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	0a1b      	lsrs	r3, r3, #8
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b202:	6a39      	ldr	r1, [r7, #32]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	0018      	movs	r0, r3
 800b208:	f000 f881 	bl	800b30e <I2C_WaitOnTXISFlagUntilTimeout>
 800b20c:	1e03      	subs	r3, r0, #0
 800b20e:	d001      	beq.n	800b214 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e014      	b.n	800b23e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b214:	2308      	movs	r3, #8
 800b216:	18fb      	adds	r3, r7, r3
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b222:	6a3a      	ldr	r2, [r7, #32]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	0013      	movs	r3, r2
 800b22c:	2200      	movs	r2, #0
 800b22e:	2140      	movs	r1, #64	; 0x40
 800b230:	f000 f82e 	bl	800b290 <I2C_WaitOnFlagUntilTimeout>
 800b234:	1e03      	subs	r3, r0, #0
 800b236:	d001      	beq.n	800b23c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e000      	b.n	800b23e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	0018      	movs	r0, r3
 800b240:	46bd      	mov	sp, r7
 800b242:	b004      	add	sp, #16
 800b244:	bdb0      	pop	{r4, r5, r7, pc}
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	80002000 	.word	0x80002000

0800b24c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	2202      	movs	r2, #2
 800b25c:	4013      	ands	r3, r2
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d103      	bne.n	800b26a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2200      	movs	r2, #0
 800b268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	2201      	movs	r2, #1
 800b272:	4013      	ands	r3, r2
 800b274:	2b01      	cmp	r3, #1
 800b276:	d007      	beq.n	800b288 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699a      	ldr	r2, [r3, #24]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2101      	movs	r1, #1
 800b284:	430a      	orrs	r2, r1
 800b286:	619a      	str	r2, [r3, #24]
  }
}
 800b288:	46c0      	nop			; (mov r8, r8)
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b002      	add	sp, #8
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	1dfb      	adds	r3, r7, #7
 800b29e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2a0:	e021      	b.n	800b2e6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	d01e      	beq.n	800b2e6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2a8:	f7fe fd30 	bl	8009d0c <HAL_GetTick>
 800b2ac:	0002      	movs	r2, r0
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d302      	bcc.n	800b2be <I2C_WaitOnFlagUntilTimeout+0x2e>
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d113      	bne.n	800b2e6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2241      	movs	r2, #65	; 0x41
 800b2ce:	2120      	movs	r1, #32
 800b2d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2242      	movs	r2, #66	; 0x42
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2240      	movs	r2, #64	; 0x40
 800b2de:	2100      	movs	r1, #0
 800b2e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e00f      	b.n	800b306 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	425a      	negs	r2, r3
 800b2f6:	4153      	adcs	r3, r2
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	001a      	movs	r2, r3
 800b2fc:	1dfb      	adds	r3, r7, #7
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d0ce      	beq.n	800b2a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	0018      	movs	r0, r3
 800b308:	46bd      	mov	sp, r7
 800b30a:	b004      	add	sp, #16
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b31a:	e02b      	b.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	68b9      	ldr	r1, [r7, #8]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	0018      	movs	r0, r3
 800b324:	f000 f86e 	bl	800b404 <I2C_IsAcknowledgeFailed>
 800b328:	1e03      	subs	r3, r0, #0
 800b32a:	d001      	beq.n	800b330 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e029      	b.n	800b384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3301      	adds	r3, #1
 800b334:	d01e      	beq.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b336:	f7fe fce9 	bl	8009d0c <HAL_GetTick>
 800b33a:	0002      	movs	r2, r0
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	429a      	cmp	r2, r3
 800b344:	d302      	bcc.n	800b34c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d113      	bne.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b350:	2220      	movs	r2, #32
 800b352:	431a      	orrs	r2, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2241      	movs	r2, #65	; 0x41
 800b35c:	2120      	movs	r1, #32
 800b35e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2242      	movs	r2, #66	; 0x42
 800b364:	2100      	movs	r1, #0
 800b366:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2240      	movs	r2, #64	; 0x40
 800b36c:	2100      	movs	r1, #0
 800b36e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e007      	b.n	800b384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2202      	movs	r2, #2
 800b37c:	4013      	ands	r3, r2
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d1cc      	bne.n	800b31c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	0018      	movs	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	b004      	add	sp, #16
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b398:	e028      	b.n	800b3ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f000 f82f 	bl	800b404 <I2C_IsAcknowledgeFailed>
 800b3a6:	1e03      	subs	r3, r0, #0
 800b3a8:	d001      	beq.n	800b3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e026      	b.n	800b3fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ae:	f7fe fcad 	bl	8009d0c <HAL_GetTick>
 800b3b2:	0002      	movs	r2, r0
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d302      	bcc.n	800b3c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d113      	bne.n	800b3ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2241      	movs	r2, #65	; 0x41
 800b3d4:	2120      	movs	r1, #32
 800b3d6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2242      	movs	r2, #66	; 0x42
 800b3dc:	2100      	movs	r1, #0
 800b3de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2240      	movs	r2, #64	; 0x40
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e007      	b.n	800b3fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	2220      	movs	r2, #32
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	d1cf      	bne.n	800b39a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	46bd      	mov	sp, r7
 800b400:	b004      	add	sp, #16
 800b402:	bd80      	pop	{r7, pc}

0800b404 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	2210      	movs	r2, #16
 800b418:	4013      	ands	r3, r2
 800b41a:	2b10      	cmp	r3, #16
 800b41c:	d164      	bne.n	800b4e8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	2380      	movs	r3, #128	; 0x80
 800b426:	049b      	lsls	r3, r3, #18
 800b428:	401a      	ands	r2, r3
 800b42a:	2380      	movs	r3, #128	; 0x80
 800b42c:	049b      	lsls	r3, r3, #18
 800b42e:	429a      	cmp	r2, r3
 800b430:	d02b      	beq.n	800b48a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2180      	movs	r1, #128	; 0x80
 800b43e:	01c9      	lsls	r1, r1, #7
 800b440:	430a      	orrs	r2, r1
 800b442:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b444:	e021      	b.n	800b48a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	3301      	adds	r3, #1
 800b44a:	d01e      	beq.n	800b48a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b44c:	f7fe fc5e 	bl	8009d0c <HAL_GetTick>
 800b450:	0002      	movs	r2, r0
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d302      	bcc.n	800b462 <I2C_IsAcknowledgeFailed+0x5e>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d113      	bne.n	800b48a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b466:	2220      	movs	r2, #32
 800b468:	431a      	orrs	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2241      	movs	r2, #65	; 0x41
 800b472:	2120      	movs	r1, #32
 800b474:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2242      	movs	r2, #66	; 0x42
 800b47a:	2100      	movs	r1, #0
 800b47c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2240      	movs	r2, #64	; 0x40
 800b482:	2100      	movs	r1, #0
 800b484:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e02f      	b.n	800b4ea <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	2220      	movs	r2, #32
 800b492:	4013      	ands	r3, r2
 800b494:	2b20      	cmp	r3, #32
 800b496:	d1d6      	bne.n	800b446 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2210      	movs	r2, #16
 800b49e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f7ff fece 	bl	800b24c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	490e      	ldr	r1, [pc, #56]	; (800b4f4 <I2C_IsAcknowledgeFailed+0xf0>)
 800b4bc:	400a      	ands	r2, r1
 800b4be:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2241      	movs	r2, #65	; 0x41
 800b4d0:	2120      	movs	r1, #32
 800b4d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2242      	movs	r2, #66	; 0x42
 800b4d8:	2100      	movs	r1, #0
 800b4da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2240      	movs	r2, #64	; 0x40
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	0018      	movs	r0, r3
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	b004      	add	sp, #16
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	fe00e800 	.word	0xfe00e800

0800b4f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	0008      	movs	r0, r1
 800b502:	0011      	movs	r1, r2
 800b504:	607b      	str	r3, [r7, #4]
 800b506:	240a      	movs	r4, #10
 800b508:	193b      	adds	r3, r7, r4
 800b50a:	1c02      	adds	r2, r0, #0
 800b50c:	801a      	strh	r2, [r3, #0]
 800b50e:	2009      	movs	r0, #9
 800b510:	183b      	adds	r3, r7, r0
 800b512:	1c0a      	adds	r2, r1, #0
 800b514:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	6a3a      	ldr	r2, [r7, #32]
 800b51e:	0d51      	lsrs	r1, r2, #21
 800b520:	2280      	movs	r2, #128	; 0x80
 800b522:	00d2      	lsls	r2, r2, #3
 800b524:	400a      	ands	r2, r1
 800b526:	490e      	ldr	r1, [pc, #56]	; (800b560 <I2C_TransferConfig+0x68>)
 800b528:	430a      	orrs	r2, r1
 800b52a:	43d2      	mvns	r2, r2
 800b52c:	401a      	ands	r2, r3
 800b52e:	0011      	movs	r1, r2
 800b530:	193b      	adds	r3, r7, r4
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	059b      	lsls	r3, r3, #22
 800b536:	0d9a      	lsrs	r2, r3, #22
 800b538:	183b      	adds	r3, r7, r0
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	0418      	lsls	r0, r3, #16
 800b53e:	23ff      	movs	r3, #255	; 0xff
 800b540:	041b      	lsls	r3, r3, #16
 800b542:	4003      	ands	r3, r0
 800b544:	431a      	orrs	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	431a      	orrs	r2, r3
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	431a      	orrs	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800b556:	46c0      	nop			; (mov r8, r8)
 800b558:	46bd      	mov	sp, r7
 800b55a:	b005      	add	sp, #20
 800b55c:	bd90      	pop	{r4, r7, pc}
 800b55e:	46c0      	nop			; (mov r8, r8)
 800b560:	03ff63ff 	.word	0x03ff63ff

0800b564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2241      	movs	r2, #65	; 0x41
 800b572:	5c9b      	ldrb	r3, [r3, r2]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b20      	cmp	r3, #32
 800b578:	d138      	bne.n	800b5ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2240      	movs	r2, #64	; 0x40
 800b57e:	5c9b      	ldrb	r3, [r3, r2]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d101      	bne.n	800b588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b584:	2302      	movs	r3, #2
 800b586:	e032      	b.n	800b5ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2240      	movs	r2, #64	; 0x40
 800b58c:	2101      	movs	r1, #1
 800b58e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2241      	movs	r2, #65	; 0x41
 800b594:	2124      	movs	r1, #36	; 0x24
 800b596:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	438a      	bics	r2, r1
 800b5a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4911      	ldr	r1, [pc, #68]	; (800b5f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b5b4:	400a      	ands	r2, r1
 800b5b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6819      	ldr	r1, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2241      	movs	r2, #65	; 0x41
 800b5dc:	2120      	movs	r1, #32
 800b5de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	; 0x40
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e000      	b.n	800b5ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b5ec:	2302      	movs	r3, #2
  }
}
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	b002      	add	sp, #8
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	46c0      	nop			; (mov r8, r8)
 800b5f8:	ffffefff 	.word	0xffffefff

0800b5fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2241      	movs	r2, #65	; 0x41
 800b60a:	5c9b      	ldrb	r3, [r3, r2]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b20      	cmp	r3, #32
 800b610:	d139      	bne.n	800b686 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2240      	movs	r2, #64	; 0x40
 800b616:	5c9b      	ldrb	r3, [r3, r2]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d101      	bne.n	800b620 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e033      	b.n	800b688 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2240      	movs	r2, #64	; 0x40
 800b624:	2101      	movs	r1, #1
 800b626:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2241      	movs	r2, #65	; 0x41
 800b62c:	2124      	movs	r1, #36	; 0x24
 800b62e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2101      	movs	r1, #1
 800b63c:	438a      	bics	r2, r1
 800b63e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4a11      	ldr	r2, [pc, #68]	; (800b690 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	021b      	lsls	r3, r3, #8
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	4313      	orrs	r3, r2
 800b658:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2101      	movs	r1, #1
 800b66e:	430a      	orrs	r2, r1
 800b670:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2241      	movs	r2, #65	; 0x41
 800b676:	2120      	movs	r1, #32
 800b678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2240      	movs	r2, #64	; 0x40
 800b67e:	2100      	movs	r1, #0
 800b680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e000      	b.n	800b688 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b686:	2302      	movs	r3, #2
  }
}
 800b688:	0018      	movs	r0, r3
 800b68a:	46bd      	mov	sp, r7
 800b68c:	b004      	add	sp, #16
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	fffff0ff 	.word	0xfffff0ff

0800b694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b694:	b5b0      	push	{r4, r5, r7, lr}
 800b696:	b08a      	sub	sp, #40	; 0x28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d102      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	f000 fbbf 	bl	800be26 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6a8:	4bc9      	ldr	r3, [pc, #804]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	220c      	movs	r2, #12
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b6b2:	4bc7      	ldr	r3, [pc, #796]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	2380      	movs	r3, #128	; 0x80
 800b6b8:	025b      	lsls	r3, r3, #9
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	d100      	bne.n	800b6ca <HAL_RCC_OscConfig+0x36>
 800b6c8:	e07e      	b.n	800b7c8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	2b08      	cmp	r3, #8
 800b6ce:	d007      	beq.n	800b6e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	2b0c      	cmp	r3, #12
 800b6d4:	d112      	bne.n	800b6fc <HAL_RCC_OscConfig+0x68>
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	2380      	movs	r3, #128	; 0x80
 800b6da:	025b      	lsls	r3, r3, #9
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d10d      	bne.n	800b6fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6e0:	4bbb      	ldr	r3, [pc, #748]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	2380      	movs	r3, #128	; 0x80
 800b6e6:	029b      	lsls	r3, r3, #10
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	d100      	bne.n	800b6ee <HAL_RCC_OscConfig+0x5a>
 800b6ec:	e06b      	b.n	800b7c6 <HAL_RCC_OscConfig+0x132>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d167      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f000 fb95 	bl	800be26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	2380      	movs	r3, #128	; 0x80
 800b702:	025b      	lsls	r3, r3, #9
 800b704:	429a      	cmp	r2, r3
 800b706:	d107      	bne.n	800b718 <HAL_RCC_OscConfig+0x84>
 800b708:	4bb1      	ldr	r3, [pc, #708]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	4bb0      	ldr	r3, [pc, #704]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b70e:	2180      	movs	r1, #128	; 0x80
 800b710:	0249      	lsls	r1, r1, #9
 800b712:	430a      	orrs	r2, r1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e027      	b.n	800b768 <HAL_RCC_OscConfig+0xd4>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	23a0      	movs	r3, #160	; 0xa0
 800b71e:	02db      	lsls	r3, r3, #11
 800b720:	429a      	cmp	r2, r3
 800b722:	d10e      	bne.n	800b742 <HAL_RCC_OscConfig+0xae>
 800b724:	4baa      	ldr	r3, [pc, #680]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	4ba9      	ldr	r3, [pc, #676]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b72a:	2180      	movs	r1, #128	; 0x80
 800b72c:	02c9      	lsls	r1, r1, #11
 800b72e:	430a      	orrs	r2, r1
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	4ba7      	ldr	r3, [pc, #668]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	4ba6      	ldr	r3, [pc, #664]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b738:	2180      	movs	r1, #128	; 0x80
 800b73a:	0249      	lsls	r1, r1, #9
 800b73c:	430a      	orrs	r2, r1
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e012      	b.n	800b768 <HAL_RCC_OscConfig+0xd4>
 800b742:	4ba3      	ldr	r3, [pc, #652]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	4ba2      	ldr	r3, [pc, #648]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b748:	49a2      	ldr	r1, [pc, #648]	; (800b9d4 <HAL_RCC_OscConfig+0x340>)
 800b74a:	400a      	ands	r2, r1
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	4ba0      	ldr	r3, [pc, #640]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	2380      	movs	r3, #128	; 0x80
 800b754:	025b      	lsls	r3, r3, #9
 800b756:	4013      	ands	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4b9c      	ldr	r3, [pc, #624]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	4b9b      	ldr	r3, [pc, #620]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b762:	499d      	ldr	r1, [pc, #628]	; (800b9d8 <HAL_RCC_OscConfig+0x344>)
 800b764:	400a      	ands	r2, r1
 800b766:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d015      	beq.n	800b79c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b770:	f7fe facc 	bl	8009d0c <HAL_GetTick>
 800b774:	0003      	movs	r3, r0
 800b776:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b778:	e009      	b.n	800b78e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b77a:	f7fe fac7 	bl	8009d0c <HAL_GetTick>
 800b77e:	0002      	movs	r2, r0
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	2b64      	cmp	r3, #100	; 0x64
 800b786:	d902      	bls.n	800b78e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b788:	2303      	movs	r3, #3
 800b78a:	f000 fb4c 	bl	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b78e:	4b90      	ldr	r3, [pc, #576]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	2380      	movs	r3, #128	; 0x80
 800b794:	029b      	lsls	r3, r3, #10
 800b796:	4013      	ands	r3, r2
 800b798:	d0ef      	beq.n	800b77a <HAL_RCC_OscConfig+0xe6>
 800b79a:	e015      	b.n	800b7c8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b79c:	f7fe fab6 	bl	8009d0c <HAL_GetTick>
 800b7a0:	0003      	movs	r3, r0
 800b7a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b7a4:	e008      	b.n	800b7b8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7a6:	f7fe fab1 	bl	8009d0c <HAL_GetTick>
 800b7aa:	0002      	movs	r2, r0
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	2b64      	cmp	r3, #100	; 0x64
 800b7b2:	d901      	bls.n	800b7b8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	e336      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b7b8:	4b85      	ldr	r3, [pc, #532]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	029b      	lsls	r3, r3, #10
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	d1f0      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x112>
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	d100      	bne.n	800b7d4 <HAL_RCC_OscConfig+0x140>
 800b7d2:	e099      	b.n	800b908 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	2220      	movs	r2, #32
 800b7de:	4013      	ands	r3, r2
 800b7e0:	d009      	beq.n	800b7f6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800b7e2:	4b7b      	ldr	r3, [pc, #492]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b7a      	ldr	r3, [pc, #488]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b7e8:	2120      	movs	r1, #32
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	4393      	bics	r3, r2
 800b7f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d005      	beq.n	800b808 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	2b0c      	cmp	r3, #12
 800b800:	d13e      	bne.n	800b880 <HAL_RCC_OscConfig+0x1ec>
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d13b      	bne.n	800b880 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800b808:	4b71      	ldr	r3, [pc, #452]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2204      	movs	r2, #4
 800b80e:	4013      	ands	r3, r2
 800b810:	d004      	beq.n	800b81c <HAL_RCC_OscConfig+0x188>
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	e304      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b81c:	4b6c      	ldr	r3, [pc, #432]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	4a6e      	ldr	r2, [pc, #440]	; (800b9dc <HAL_RCC_OscConfig+0x348>)
 800b822:	4013      	ands	r3, r2
 800b824:	0019      	movs	r1, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	021a      	lsls	r2, r3, #8
 800b82c:	4b68      	ldr	r3, [pc, #416]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b82e:	430a      	orrs	r2, r1
 800b830:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b832:	4b67      	ldr	r3, [pc, #412]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2209      	movs	r2, #9
 800b838:	4393      	bics	r3, r2
 800b83a:	0019      	movs	r1, r3
 800b83c:	4b64      	ldr	r3, [pc, #400]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b840:	430a      	orrs	r2, r1
 800b842:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b844:	f000 fc42 	bl	800c0cc <HAL_RCC_GetSysClockFreq>
 800b848:	0001      	movs	r1, r0
 800b84a:	4b61      	ldr	r3, [pc, #388]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	091b      	lsrs	r3, r3, #4
 800b850:	220f      	movs	r2, #15
 800b852:	4013      	ands	r3, r2
 800b854:	4a62      	ldr	r2, [pc, #392]	; (800b9e0 <HAL_RCC_OscConfig+0x34c>)
 800b856:	5cd3      	ldrb	r3, [r2, r3]
 800b858:	000a      	movs	r2, r1
 800b85a:	40da      	lsrs	r2, r3
 800b85c:	4b61      	ldr	r3, [pc, #388]	; (800b9e4 <HAL_RCC_OscConfig+0x350>)
 800b85e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800b860:	4b61      	ldr	r3, [pc, #388]	; (800b9e8 <HAL_RCC_OscConfig+0x354>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2513      	movs	r5, #19
 800b866:	197c      	adds	r4, r7, r5
 800b868:	0018      	movs	r0, r3
 800b86a:	f7fe fa09 	bl	8009c80 <HAL_InitTick>
 800b86e:	0003      	movs	r3, r0
 800b870:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800b872:	197b      	adds	r3, r7, r5
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d046      	beq.n	800b908 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800b87a:	197b      	adds	r3, r7, r5
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	e2d2      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	2b00      	cmp	r3, #0
 800b884:	d027      	beq.n	800b8d6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b886:	4b52      	ldr	r3, [pc, #328]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2209      	movs	r2, #9
 800b88c:	4393      	bics	r3, r2
 800b88e:	0019      	movs	r1, r3
 800b890:	4b4f      	ldr	r3, [pc, #316]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b894:	430a      	orrs	r2, r1
 800b896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b898:	f7fe fa38 	bl	8009d0c <HAL_GetTick>
 800b89c:	0003      	movs	r3, r0
 800b89e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8a0:	e008      	b.n	800b8b4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8a2:	f7fe fa33 	bl	8009d0c <HAL_GetTick>
 800b8a6:	0002      	movs	r2, r0
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d901      	bls.n	800b8b4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e2b8      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8b4:	4b46      	ldr	r3, [pc, #280]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2204      	movs	r2, #4
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	d0f1      	beq.n	800b8a2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8be:	4b44      	ldr	r3, [pc, #272]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	4a46      	ldr	r2, [pc, #280]	; (800b9dc <HAL_RCC_OscConfig+0x348>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	0019      	movs	r1, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	021a      	lsls	r2, r3, #8
 800b8ce:	4b40      	ldr	r3, [pc, #256]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	605a      	str	r2, [r3, #4]
 800b8d4:	e018      	b.n	800b908 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8d6:	4b3e      	ldr	r3, [pc, #248]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b3d      	ldr	r3, [pc, #244]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b8dc:	2101      	movs	r1, #1
 800b8de:	438a      	bics	r2, r1
 800b8e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8e2:	f7fe fa13 	bl	8009d0c <HAL_GetTick>
 800b8e6:	0003      	movs	r3, r0
 800b8e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b8ea:	e008      	b.n	800b8fe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8ec:	f7fe fa0e 	bl	8009d0c <HAL_GetTick>
 800b8f0:	0002      	movs	r2, r0
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d901      	bls.n	800b8fe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e293      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b8fe:	4b34      	ldr	r3, [pc, #208]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2204      	movs	r2, #4
 800b904:	4013      	ands	r3, r2
 800b906:	d1f1      	bne.n	800b8ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2210      	movs	r2, #16
 800b90e:	4013      	ands	r3, r2
 800b910:	d100      	bne.n	800b914 <HAL_RCC_OscConfig+0x280>
 800b912:	e0a2      	b.n	800ba5a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d140      	bne.n	800b99c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b91a:	4b2d      	ldr	r3, [pc, #180]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	2380      	movs	r3, #128	; 0x80
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4013      	ands	r3, r2
 800b924:	d005      	beq.n	800b932 <HAL_RCC_OscConfig+0x29e>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	69db      	ldr	r3, [r3, #28]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e279      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b932:	4b27      	ldr	r3, [pc, #156]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	4a2d      	ldr	r2, [pc, #180]	; (800b9ec <HAL_RCC_OscConfig+0x358>)
 800b938:	4013      	ands	r3, r2
 800b93a:	0019      	movs	r1, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b940:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b942:	430a      	orrs	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b946:	4b22      	ldr	r3, [pc, #136]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	0a19      	lsrs	r1, r3, #8
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	061a      	lsls	r2, r3, #24
 800b954:	4b1e      	ldr	r3, [pc, #120]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b956:	430a      	orrs	r2, r1
 800b958:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95e:	0b5b      	lsrs	r3, r3, #13
 800b960:	3301      	adds	r3, #1
 800b962:	2280      	movs	r2, #128	; 0x80
 800b964:	0212      	lsls	r2, r2, #8
 800b966:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800b968:	4b19      	ldr	r3, [pc, #100]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	091b      	lsrs	r3, r3, #4
 800b96e:	210f      	movs	r1, #15
 800b970:	400b      	ands	r3, r1
 800b972:	491b      	ldr	r1, [pc, #108]	; (800b9e0 <HAL_RCC_OscConfig+0x34c>)
 800b974:	5ccb      	ldrb	r3, [r1, r3]
 800b976:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b978:	4b1a      	ldr	r3, [pc, #104]	; (800b9e4 <HAL_RCC_OscConfig+0x350>)
 800b97a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800b97c:	4b1a      	ldr	r3, [pc, #104]	; (800b9e8 <HAL_RCC_OscConfig+0x354>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2513      	movs	r5, #19
 800b982:	197c      	adds	r4, r7, r5
 800b984:	0018      	movs	r0, r3
 800b986:	f7fe f97b 	bl	8009c80 <HAL_InitTick>
 800b98a:	0003      	movs	r3, r0
 800b98c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800b98e:	197b      	adds	r3, r7, r5
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d061      	beq.n	800ba5a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800b996:	197b      	adds	r3, r7, r5
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	e244      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d040      	beq.n	800ba26 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	4b09      	ldr	r3, [pc, #36]	; (800b9d0 <HAL_RCC_OscConfig+0x33c>)
 800b9aa:	2180      	movs	r1, #128	; 0x80
 800b9ac:	0049      	lsls	r1, r1, #1
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9b2:	f7fe f9ab 	bl	8009d0c <HAL_GetTick>
 800b9b6:	0003      	movs	r3, r0
 800b9b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b9ba:	e019      	b.n	800b9f0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b9bc:	f7fe f9a6 	bl	8009d0c <HAL_GetTick>
 800b9c0:	0002      	movs	r2, r0
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d912      	bls.n	800b9f0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e22b      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	40021000 	.word	0x40021000
 800b9d4:	fffeffff 	.word	0xfffeffff
 800b9d8:	fffbffff 	.word	0xfffbffff
 800b9dc:	ffffe0ff 	.word	0xffffe0ff
 800b9e0:	08015278 	.word	0x08015278
 800b9e4:	200000cc 	.word	0x200000cc
 800b9e8:	20000260 	.word	0x20000260
 800b9ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b9f0:	4bca      	ldr	r3, [pc, #808]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	2380      	movs	r3, #128	; 0x80
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	d0df      	beq.n	800b9bc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b9fc:	4bc7      	ldr	r3, [pc, #796]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	4ac7      	ldr	r2, [pc, #796]	; (800bd20 <HAL_RCC_OscConfig+0x68c>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	0019      	movs	r1, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba0a:	4bc4      	ldr	r3, [pc, #784]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ba10:	4bc2      	ldr	r3, [pc, #776]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	0a19      	lsrs	r1, r3, #8
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a1b      	ldr	r3, [r3, #32]
 800ba1c:	061a      	lsls	r2, r3, #24
 800ba1e:	4bbf      	ldr	r3, [pc, #764]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba20:	430a      	orrs	r2, r1
 800ba22:	605a      	str	r2, [r3, #4]
 800ba24:	e019      	b.n	800ba5a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ba26:	4bbd      	ldr	r3, [pc, #756]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	4bbc      	ldr	r3, [pc, #752]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba2c:	49bd      	ldr	r1, [pc, #756]	; (800bd24 <HAL_RCC_OscConfig+0x690>)
 800ba2e:	400a      	ands	r2, r1
 800ba30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba32:	f7fe f96b 	bl	8009d0c <HAL_GetTick>
 800ba36:	0003      	movs	r3, r0
 800ba38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ba3a:	e008      	b.n	800ba4e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba3c:	f7fe f966 	bl	8009d0c <HAL_GetTick>
 800ba40:	0002      	movs	r2, r0
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d901      	bls.n	800ba4e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e1eb      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ba4e:	4bb3      	ldr	r3, [pc, #716]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	2380      	movs	r3, #128	; 0x80
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4013      	ands	r3, r2
 800ba58:	d1f0      	bne.n	800ba3c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2208      	movs	r2, #8
 800ba60:	4013      	ands	r3, r2
 800ba62:	d036      	beq.n	800bad2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d019      	beq.n	800baa0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba6c:	4bab      	ldr	r3, [pc, #684]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba70:	4baa      	ldr	r3, [pc, #680]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba72:	2101      	movs	r1, #1
 800ba74:	430a      	orrs	r2, r1
 800ba76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba78:	f7fe f948 	bl	8009d0c <HAL_GetTick>
 800ba7c:	0003      	movs	r3, r0
 800ba7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba80:	e008      	b.n	800ba94 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba82:	f7fe f943 	bl	8009d0c <HAL_GetTick>
 800ba86:	0002      	movs	r2, r0
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d901      	bls.n	800ba94 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e1c8      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba94:	4ba1      	ldr	r3, [pc, #644]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800ba96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba98:	2202      	movs	r2, #2
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	d0f1      	beq.n	800ba82 <HAL_RCC_OscConfig+0x3ee>
 800ba9e:	e018      	b.n	800bad2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800baa0:	4b9e      	ldr	r3, [pc, #632]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800baa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baa4:	4b9d      	ldr	r3, [pc, #628]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800baa6:	2101      	movs	r1, #1
 800baa8:	438a      	bics	r2, r1
 800baaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800baac:	f7fe f92e 	bl	8009d0c <HAL_GetTick>
 800bab0:	0003      	movs	r3, r0
 800bab2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bab4:	e008      	b.n	800bac8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bab6:	f7fe f929 	bl	8009d0c <HAL_GetTick>
 800baba:	0002      	movs	r2, r0
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d901      	bls.n	800bac8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e1ae      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bac8:	4b94      	ldr	r3, [pc, #592]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800baca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bacc:	2202      	movs	r2, #2
 800bace:	4013      	ands	r3, r2
 800bad0:	d1f1      	bne.n	800bab6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2204      	movs	r2, #4
 800bad8:	4013      	ands	r3, r2
 800bada:	d100      	bne.n	800bade <HAL_RCC_OscConfig+0x44a>
 800badc:	e0ae      	b.n	800bc3c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bade:	2023      	movs	r0, #35	; 0x23
 800bae0:	183b      	adds	r3, r7, r0
 800bae2:	2200      	movs	r2, #0
 800bae4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bae6:	4b8d      	ldr	r3, [pc, #564]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baea:	2380      	movs	r3, #128	; 0x80
 800baec:	055b      	lsls	r3, r3, #21
 800baee:	4013      	ands	r3, r2
 800baf0:	d109      	bne.n	800bb06 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800baf2:	4b8a      	ldr	r3, [pc, #552]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800baf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baf6:	4b89      	ldr	r3, [pc, #548]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800baf8:	2180      	movs	r1, #128	; 0x80
 800bafa:	0549      	lsls	r1, r1, #21
 800bafc:	430a      	orrs	r2, r1
 800bafe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800bb00:	183b      	adds	r3, r7, r0
 800bb02:	2201      	movs	r2, #1
 800bb04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb06:	4b88      	ldr	r3, [pc, #544]	; (800bd28 <HAL_RCC_OscConfig+0x694>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	2380      	movs	r3, #128	; 0x80
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	4013      	ands	r3, r2
 800bb10:	d11a      	bne.n	800bb48 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bb12:	4b85      	ldr	r3, [pc, #532]	; (800bd28 <HAL_RCC_OscConfig+0x694>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b84      	ldr	r3, [pc, #528]	; (800bd28 <HAL_RCC_OscConfig+0x694>)
 800bb18:	2180      	movs	r1, #128	; 0x80
 800bb1a:	0049      	lsls	r1, r1, #1
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb20:	f7fe f8f4 	bl	8009d0c <HAL_GetTick>
 800bb24:	0003      	movs	r3, r0
 800bb26:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb28:	e008      	b.n	800bb3c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb2a:	f7fe f8ef 	bl	8009d0c <HAL_GetTick>
 800bb2e:	0002      	movs	r2, r0
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	2b64      	cmp	r3, #100	; 0x64
 800bb36:	d901      	bls.n	800bb3c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e174      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb3c:	4b7a      	ldr	r3, [pc, #488]	; (800bd28 <HAL_RCC_OscConfig+0x694>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	2380      	movs	r3, #128	; 0x80
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	4013      	ands	r3, r2
 800bb46:	d0f0      	beq.n	800bb2a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	2380      	movs	r3, #128	; 0x80
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d107      	bne.n	800bb64 <HAL_RCC_OscConfig+0x4d0>
 800bb54:	4b71      	ldr	r3, [pc, #452]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb58:	4b70      	ldr	r3, [pc, #448]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb5a:	2180      	movs	r1, #128	; 0x80
 800bb5c:	0049      	lsls	r1, r1, #1
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	651a      	str	r2, [r3, #80]	; 0x50
 800bb62:	e031      	b.n	800bbc8 <HAL_RCC_OscConfig+0x534>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10c      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4f2>
 800bb6c:	4b6b      	ldr	r3, [pc, #428]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb70:	4b6a      	ldr	r3, [pc, #424]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb72:	496c      	ldr	r1, [pc, #432]	; (800bd24 <HAL_RCC_OscConfig+0x690>)
 800bb74:	400a      	ands	r2, r1
 800bb76:	651a      	str	r2, [r3, #80]	; 0x50
 800bb78:	4b68      	ldr	r3, [pc, #416]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb7c:	4b67      	ldr	r3, [pc, #412]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb7e:	496b      	ldr	r1, [pc, #428]	; (800bd2c <HAL_RCC_OscConfig+0x698>)
 800bb80:	400a      	ands	r2, r1
 800bb82:	651a      	str	r2, [r3, #80]	; 0x50
 800bb84:	e020      	b.n	800bbc8 <HAL_RCC_OscConfig+0x534>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	689a      	ldr	r2, [r3, #8]
 800bb8a:	23a0      	movs	r3, #160	; 0xa0
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d10e      	bne.n	800bbb0 <HAL_RCC_OscConfig+0x51c>
 800bb92:	4b62      	ldr	r3, [pc, #392]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb96:	4b61      	ldr	r3, [pc, #388]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bb98:	2180      	movs	r1, #128	; 0x80
 800bb9a:	00c9      	lsls	r1, r1, #3
 800bb9c:	430a      	orrs	r2, r1
 800bb9e:	651a      	str	r2, [r3, #80]	; 0x50
 800bba0:	4b5e      	ldr	r3, [pc, #376]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bba4:	4b5d      	ldr	r3, [pc, #372]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bba6:	2180      	movs	r1, #128	; 0x80
 800bba8:	0049      	lsls	r1, r1, #1
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
 800bbae:	e00b      	b.n	800bbc8 <HAL_RCC_OscConfig+0x534>
 800bbb0:	4b5a      	ldr	r3, [pc, #360]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bbb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbb4:	4b59      	ldr	r3, [pc, #356]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bbb6:	495b      	ldr	r1, [pc, #364]	; (800bd24 <HAL_RCC_OscConfig+0x690>)
 800bbb8:	400a      	ands	r2, r1
 800bbba:	651a      	str	r2, [r3, #80]	; 0x50
 800bbbc:	4b57      	ldr	r3, [pc, #348]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bbbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbc0:	4b56      	ldr	r3, [pc, #344]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bbc2:	495a      	ldr	r1, [pc, #360]	; (800bd2c <HAL_RCC_OscConfig+0x698>)
 800bbc4:	400a      	ands	r2, r1
 800bbc6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d015      	beq.n	800bbfc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbd0:	f7fe f89c 	bl	8009d0c <HAL_GetTick>
 800bbd4:	0003      	movs	r3, r0
 800bbd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbd8:	e009      	b.n	800bbee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbda:	f7fe f897 	bl	8009d0c <HAL_GetTick>
 800bbde:	0002      	movs	r2, r0
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	4a52      	ldr	r2, [pc, #328]	; (800bd30 <HAL_RCC_OscConfig+0x69c>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d901      	bls.n	800bbee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e11b      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbee:	4b4b      	ldr	r3, [pc, #300]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bbf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbf2:	2380      	movs	r3, #128	; 0x80
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	d0ef      	beq.n	800bbda <HAL_RCC_OscConfig+0x546>
 800bbfa:	e014      	b.n	800bc26 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbfc:	f7fe f886 	bl	8009d0c <HAL_GetTick>
 800bc00:	0003      	movs	r3, r0
 800bc02:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc04:	e009      	b.n	800bc1a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc06:	f7fe f881 	bl	8009d0c <HAL_GetTick>
 800bc0a:	0002      	movs	r2, r0
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	4a47      	ldr	r2, [pc, #284]	; (800bd30 <HAL_RCC_OscConfig+0x69c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d901      	bls.n	800bc1a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800bc16:	2303      	movs	r3, #3
 800bc18:	e105      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc1a:	4b40      	ldr	r3, [pc, #256]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc1e:	2380      	movs	r3, #128	; 0x80
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4013      	ands	r3, r2
 800bc24:	d1ef      	bne.n	800bc06 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800bc26:	2323      	movs	r3, #35	; 0x23
 800bc28:	18fb      	adds	r3, r7, r3
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d105      	bne.n	800bc3c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc30:	4b3a      	ldr	r3, [pc, #232]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc34:	4b39      	ldr	r3, [pc, #228]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc36:	493f      	ldr	r1, [pc, #252]	; (800bd34 <HAL_RCC_OscConfig+0x6a0>)
 800bc38:	400a      	ands	r2, r1
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2220      	movs	r2, #32
 800bc42:	4013      	ands	r3, r2
 800bc44:	d049      	beq.n	800bcda <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d026      	beq.n	800bc9c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800bc4e:	4b33      	ldr	r3, [pc, #204]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc50:	689a      	ldr	r2, [r3, #8]
 800bc52:	4b32      	ldr	r3, [pc, #200]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc54:	2101      	movs	r1, #1
 800bc56:	430a      	orrs	r2, r1
 800bc58:	609a      	str	r2, [r3, #8]
 800bc5a:	4b30      	ldr	r3, [pc, #192]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc5e:	4b2f      	ldr	r3, [pc, #188]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc60:	2101      	movs	r1, #1
 800bc62:	430a      	orrs	r2, r1
 800bc64:	635a      	str	r2, [r3, #52]	; 0x34
 800bc66:	4b34      	ldr	r3, [pc, #208]	; (800bd38 <HAL_RCC_OscConfig+0x6a4>)
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	4b33      	ldr	r3, [pc, #204]	; (800bd38 <HAL_RCC_OscConfig+0x6a4>)
 800bc6c:	2180      	movs	r1, #128	; 0x80
 800bc6e:	0189      	lsls	r1, r1, #6
 800bc70:	430a      	orrs	r2, r1
 800bc72:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc74:	f7fe f84a 	bl	8009d0c <HAL_GetTick>
 800bc78:	0003      	movs	r3, r0
 800bc7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc7c:	e008      	b.n	800bc90 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc7e:	f7fe f845 	bl	8009d0c <HAL_GetTick>
 800bc82:	0002      	movs	r2, r0
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d901      	bls.n	800bc90 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e0ca      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc90:	4b22      	ldr	r3, [pc, #136]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	2202      	movs	r2, #2
 800bc96:	4013      	ands	r3, r2
 800bc98:	d0f1      	beq.n	800bc7e <HAL_RCC_OscConfig+0x5ea>
 800bc9a:	e01e      	b.n	800bcda <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800bc9c:	4b1f      	ldr	r3, [pc, #124]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	4b1e      	ldr	r3, [pc, #120]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bca2:	2101      	movs	r1, #1
 800bca4:	438a      	bics	r2, r1
 800bca6:	609a      	str	r2, [r3, #8]
 800bca8:	4b23      	ldr	r3, [pc, #140]	; (800bd38 <HAL_RCC_OscConfig+0x6a4>)
 800bcaa:	6a1a      	ldr	r2, [r3, #32]
 800bcac:	4b22      	ldr	r3, [pc, #136]	; (800bd38 <HAL_RCC_OscConfig+0x6a4>)
 800bcae:	4923      	ldr	r1, [pc, #140]	; (800bd3c <HAL_RCC_OscConfig+0x6a8>)
 800bcb0:	400a      	ands	r2, r1
 800bcb2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcb4:	f7fe f82a 	bl	8009d0c <HAL_GetTick>
 800bcb8:	0003      	movs	r3, r0
 800bcba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bcbc:	e008      	b.n	800bcd0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bcbe:	f7fe f825 	bl	8009d0c <HAL_GetTick>
 800bcc2:	0002      	movs	r2, r0
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d901      	bls.n	800bcd0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e0aa      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bcd0:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	d1f1      	bne.n	800bcbe <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d100      	bne.n	800bce4 <HAL_RCC_OscConfig+0x650>
 800bce2:	e09f      	b.n	800be24 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2b0c      	cmp	r3, #12
 800bce8:	d100      	bne.n	800bcec <HAL_RCC_OscConfig+0x658>
 800bcea:	e078      	b.n	800bdde <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d159      	bne.n	800bda8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcf4:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	4b08      	ldr	r3, [pc, #32]	; (800bd1c <HAL_RCC_OscConfig+0x688>)
 800bcfa:	4911      	ldr	r1, [pc, #68]	; (800bd40 <HAL_RCC_OscConfig+0x6ac>)
 800bcfc:	400a      	ands	r2, r1
 800bcfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd00:	f7fe f804 	bl	8009d0c <HAL_GetTick>
 800bd04:	0003      	movs	r3, r0
 800bd06:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bd08:	e01c      	b.n	800bd44 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd0a:	f7fd ffff 	bl	8009d0c <HAL_GetTick>
 800bd0e:	0002      	movs	r2, r0
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d915      	bls.n	800bd44 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e084      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
 800bd1c:	40021000 	.word	0x40021000
 800bd20:	ffff1fff 	.word	0xffff1fff
 800bd24:	fffffeff 	.word	0xfffffeff
 800bd28:	40007000 	.word	0x40007000
 800bd2c:	fffffbff 	.word	0xfffffbff
 800bd30:	00001388 	.word	0x00001388
 800bd34:	efffffff 	.word	0xefffffff
 800bd38:	40010000 	.word	0x40010000
 800bd3c:	ffffdfff 	.word	0xffffdfff
 800bd40:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bd44:	4b3a      	ldr	r3, [pc, #232]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	2380      	movs	r3, #128	; 0x80
 800bd4a:	049b      	lsls	r3, r3, #18
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	d1dc      	bne.n	800bd0a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd50:	4b37      	ldr	r3, [pc, #220]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4a37      	ldr	r2, [pc, #220]	; (800be34 <HAL_RCC_OscConfig+0x7a0>)
 800bd56:	4013      	ands	r3, r2
 800bd58:	0019      	movs	r1, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd62:	431a      	orrs	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	4b31      	ldr	r3, [pc, #196]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd70:	4b2f      	ldr	r3, [pc, #188]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	4b2e      	ldr	r3, [pc, #184]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bd76:	2180      	movs	r1, #128	; 0x80
 800bd78:	0449      	lsls	r1, r1, #17
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd7e:	f7fd ffc5 	bl	8009d0c <HAL_GetTick>
 800bd82:	0003      	movs	r3, r0
 800bd84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800bd86:	e008      	b.n	800bd9a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd88:	f7fd ffc0 	bl	8009d0c <HAL_GetTick>
 800bd8c:	0002      	movs	r2, r0
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d901      	bls.n	800bd9a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e045      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800bd9a:	4b25      	ldr	r3, [pc, #148]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	2380      	movs	r3, #128	; 0x80
 800bda0:	049b      	lsls	r3, r3, #18
 800bda2:	4013      	ands	r3, r2
 800bda4:	d0f0      	beq.n	800bd88 <HAL_RCC_OscConfig+0x6f4>
 800bda6:	e03d      	b.n	800be24 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bda8:	4b21      	ldr	r3, [pc, #132]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	4b20      	ldr	r3, [pc, #128]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bdae:	4922      	ldr	r1, [pc, #136]	; (800be38 <HAL_RCC_OscConfig+0x7a4>)
 800bdb0:	400a      	ands	r2, r1
 800bdb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdb4:	f7fd ffaa 	bl	8009d0c <HAL_GetTick>
 800bdb8:	0003      	movs	r3, r0
 800bdba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bdbc:	e008      	b.n	800bdd0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdbe:	f7fd ffa5 	bl	8009d0c <HAL_GetTick>
 800bdc2:	0002      	movs	r2, r0
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d901      	bls.n	800bdd0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e02a      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bdd0:	4b17      	ldr	r3, [pc, #92]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	2380      	movs	r3, #128	; 0x80
 800bdd6:	049b      	lsls	r3, r3, #18
 800bdd8:	4013      	ands	r3, r2
 800bdda:	d1f0      	bne.n	800bdbe <HAL_RCC_OscConfig+0x72a>
 800bddc:	e022      	b.n	800be24 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e01d      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bdea:	4b11      	ldr	r3, [pc, #68]	; (800be30 <HAL_RCC_OscConfig+0x79c>)
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	2380      	movs	r3, #128	; 0x80
 800bdf4:	025b      	lsls	r3, r3, #9
 800bdf6:	401a      	ands	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d10f      	bne.n	800be20 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	23f0      	movs	r3, #240	; 0xf0
 800be04:	039b      	lsls	r3, r3, #14
 800be06:	401a      	ands	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d107      	bne.n	800be20 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	23c0      	movs	r3, #192	; 0xc0
 800be14:	041b      	lsls	r3, r3, #16
 800be16:	401a      	ands	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d001      	beq.n	800be24 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	0018      	movs	r0, r3
 800be28:	46bd      	mov	sp, r7
 800be2a:	b00a      	add	sp, #40	; 0x28
 800be2c:	bdb0      	pop	{r4, r5, r7, pc}
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	40021000 	.word	0x40021000
 800be34:	ff02ffff 	.word	0xff02ffff
 800be38:	feffffff 	.word	0xfeffffff

0800be3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be3c:	b5b0      	push	{r4, r5, r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e128      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800be50:	4b96      	ldr	r3, [pc, #600]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2201      	movs	r2, #1
 800be56:	4013      	ands	r3, r2
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d91e      	bls.n	800be9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be5e:	4b93      	ldr	r3, [pc, #588]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2201      	movs	r2, #1
 800be64:	4393      	bics	r3, r2
 800be66:	0019      	movs	r1, r3
 800be68:	4b90      	ldr	r3, [pc, #576]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800be70:	f7fd ff4c 	bl	8009d0c <HAL_GetTick>
 800be74:	0003      	movs	r3, r0
 800be76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be78:	e009      	b.n	800be8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be7a:	f7fd ff47 	bl	8009d0c <HAL_GetTick>
 800be7e:	0002      	movs	r2, r0
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	4a8a      	ldr	r2, [pc, #552]	; (800c0b0 <HAL_RCC_ClockConfig+0x274>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d901      	bls.n	800be8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e109      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be8e:	4b87      	ldr	r3, [pc, #540]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2201      	movs	r2, #1
 800be94:	4013      	ands	r3, r2
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d1ee      	bne.n	800be7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2202      	movs	r2, #2
 800bea2:	4013      	ands	r3, r2
 800bea4:	d009      	beq.n	800beba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bea6:	4b83      	ldr	r3, [pc, #524]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	22f0      	movs	r2, #240	; 0xf0
 800beac:	4393      	bics	r3, r2
 800beae:	0019      	movs	r1, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	689a      	ldr	r2, [r3, #8]
 800beb4:	4b7f      	ldr	r3, [pc, #508]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800beb6:	430a      	orrs	r2, r1
 800beb8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2201      	movs	r2, #1
 800bec0:	4013      	ands	r3, r2
 800bec2:	d100      	bne.n	800bec6 <HAL_RCC_ClockConfig+0x8a>
 800bec4:	e089      	b.n	800bfda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d107      	bne.n	800bede <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bece:	4b79      	ldr	r3, [pc, #484]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	2380      	movs	r3, #128	; 0x80
 800bed4:	029b      	lsls	r3, r3, #10
 800bed6:	4013      	ands	r3, r2
 800bed8:	d120      	bne.n	800bf1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e0e1      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d107      	bne.n	800bef6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bee6:	4b73      	ldr	r3, [pc, #460]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	2380      	movs	r3, #128	; 0x80
 800beec:	049b      	lsls	r3, r3, #18
 800beee:	4013      	ands	r3, r2
 800bef0:	d114      	bne.n	800bf1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e0d5      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d106      	bne.n	800bf0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800befe:	4b6d      	ldr	r3, [pc, #436]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2204      	movs	r2, #4
 800bf04:	4013      	ands	r3, r2
 800bf06:	d109      	bne.n	800bf1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e0ca      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800bf0c:	4b69      	ldr	r3, [pc, #420]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	2380      	movs	r3, #128	; 0x80
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4013      	ands	r3, r2
 800bf16:	d101      	bne.n	800bf1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e0c2      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf1c:	4b65      	ldr	r3, [pc, #404]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	2203      	movs	r2, #3
 800bf22:	4393      	bics	r3, r2
 800bf24:	0019      	movs	r1, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	4b62      	ldr	r3, [pc, #392]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf30:	f7fd feec 	bl	8009d0c <HAL_GetTick>
 800bf34:	0003      	movs	r3, r0
 800bf36:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d111      	bne.n	800bf64 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf40:	e009      	b.n	800bf56 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf42:	f7fd fee3 	bl	8009d0c <HAL_GetTick>
 800bf46:	0002      	movs	r2, r0
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	4a58      	ldr	r2, [pc, #352]	; (800c0b0 <HAL_RCC_ClockConfig+0x274>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d901      	bls.n	800bf56 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e0a5      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf56:	4b57      	ldr	r3, [pc, #348]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	220c      	movs	r2, #12
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	d1ef      	bne.n	800bf42 <HAL_RCC_ClockConfig+0x106>
 800bf62:	e03a      	b.n	800bfda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d111      	bne.n	800bf90 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bf6c:	e009      	b.n	800bf82 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf6e:	f7fd fecd 	bl	8009d0c <HAL_GetTick>
 800bf72:	0002      	movs	r2, r0
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	4a4d      	ldr	r2, [pc, #308]	; (800c0b0 <HAL_RCC_ClockConfig+0x274>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d901      	bls.n	800bf82 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e08f      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bf82:	4b4c      	ldr	r3, [pc, #304]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	220c      	movs	r2, #12
 800bf88:	4013      	ands	r3, r2
 800bf8a:	2b0c      	cmp	r3, #12
 800bf8c:	d1ef      	bne.n	800bf6e <HAL_RCC_ClockConfig+0x132>
 800bf8e:	e024      	b.n	800bfda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d11b      	bne.n	800bfd0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf98:	e009      	b.n	800bfae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf9a:	f7fd feb7 	bl	8009d0c <HAL_GetTick>
 800bf9e:	0002      	movs	r2, r0
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	4a42      	ldr	r2, [pc, #264]	; (800c0b0 <HAL_RCC_ClockConfig+0x274>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d901      	bls.n	800bfae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e079      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800bfae:	4b41      	ldr	r3, [pc, #260]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	220c      	movs	r2, #12
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d1ef      	bne.n	800bf9a <HAL_RCC_ClockConfig+0x15e>
 800bfba:	e00e      	b.n	800bfda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfbc:	f7fd fea6 	bl	8009d0c <HAL_GetTick>
 800bfc0:	0002      	movs	r2, r0
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	4a3a      	ldr	r2, [pc, #232]	; (800c0b0 <HAL_RCC_ClockConfig+0x274>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d901      	bls.n	800bfd0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e068      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800bfd0:	4b38      	ldr	r3, [pc, #224]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	220c      	movs	r2, #12
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	d1f0      	bne.n	800bfbc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bfda:	4b34      	ldr	r3, [pc, #208]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d21e      	bcs.n	800c026 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfe8:	4b30      	ldr	r3, [pc, #192]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2201      	movs	r2, #1
 800bfee:	4393      	bics	r3, r2
 800bff0:	0019      	movs	r1, r3
 800bff2:	4b2e      	ldr	r3, [pc, #184]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	430a      	orrs	r2, r1
 800bff8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bffa:	f7fd fe87 	bl	8009d0c <HAL_GetTick>
 800bffe:	0003      	movs	r3, r0
 800c000:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c002:	e009      	b.n	800c018 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c004:	f7fd fe82 	bl	8009d0c <HAL_GetTick>
 800c008:	0002      	movs	r2, r0
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	4a28      	ldr	r2, [pc, #160]	; (800c0b0 <HAL_RCC_ClockConfig+0x274>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d901      	bls.n	800c018 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e044      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c018:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <HAL_RCC_ClockConfig+0x270>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2201      	movs	r2, #1
 800c01e:	4013      	ands	r3, r2
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	429a      	cmp	r2, r3
 800c024:	d1ee      	bne.n	800c004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2204      	movs	r2, #4
 800c02c:	4013      	ands	r3, r2
 800c02e:	d009      	beq.n	800c044 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c030:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	4a20      	ldr	r2, [pc, #128]	; (800c0b8 <HAL_RCC_ClockConfig+0x27c>)
 800c036:	4013      	ands	r3, r2
 800c038:	0019      	movs	r1, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68da      	ldr	r2, [r3, #12]
 800c03e:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800c040:	430a      	orrs	r2, r1
 800c042:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2208      	movs	r2, #8
 800c04a:	4013      	ands	r3, r2
 800c04c:	d00a      	beq.n	800c064 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c04e:	4b19      	ldr	r3, [pc, #100]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	4a1a      	ldr	r2, [pc, #104]	; (800c0bc <HAL_RCC_ClockConfig+0x280>)
 800c054:	4013      	ands	r3, r2
 800c056:	0019      	movs	r1, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	00da      	lsls	r2, r3, #3
 800c05e:	4b15      	ldr	r3, [pc, #84]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800c060:	430a      	orrs	r2, r1
 800c062:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c064:	f000 f832 	bl	800c0cc <HAL_RCC_GetSysClockFreq>
 800c068:	0001      	movs	r1, r0
 800c06a:	4b12      	ldr	r3, [pc, #72]	; (800c0b4 <HAL_RCC_ClockConfig+0x278>)
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	091b      	lsrs	r3, r3, #4
 800c070:	220f      	movs	r2, #15
 800c072:	4013      	ands	r3, r2
 800c074:	4a12      	ldr	r2, [pc, #72]	; (800c0c0 <HAL_RCC_ClockConfig+0x284>)
 800c076:	5cd3      	ldrb	r3, [r2, r3]
 800c078:	000a      	movs	r2, r1
 800c07a:	40da      	lsrs	r2, r3
 800c07c:	4b11      	ldr	r3, [pc, #68]	; (800c0c4 <HAL_RCC_ClockConfig+0x288>)
 800c07e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c080:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <HAL_RCC_ClockConfig+0x28c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	250b      	movs	r5, #11
 800c086:	197c      	adds	r4, r7, r5
 800c088:	0018      	movs	r0, r3
 800c08a:	f7fd fdf9 	bl	8009c80 <HAL_InitTick>
 800c08e:	0003      	movs	r3, r0
 800c090:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800c092:	197b      	adds	r3, r7, r5
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d002      	beq.n	800c0a0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800c09a:	197b      	adds	r3, r7, r5
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	e000      	b.n	800c0a2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	0018      	movs	r0, r3
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	b004      	add	sp, #16
 800c0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0aa:	46c0      	nop			; (mov r8, r8)
 800c0ac:	40022000 	.word	0x40022000
 800c0b0:	00001388 	.word	0x00001388
 800c0b4:	40021000 	.word	0x40021000
 800c0b8:	fffff8ff 	.word	0xfffff8ff
 800c0bc:	ffffc7ff 	.word	0xffffc7ff
 800c0c0:	08015278 	.word	0x08015278
 800c0c4:	200000cc 	.word	0x200000cc
 800c0c8:	20000260 	.word	0x20000260

0800c0cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c0cc:	b5b0      	push	{r4, r5, r7, lr}
 800c0ce:	b08e      	sub	sp, #56	; 0x38
 800c0d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800c0d2:	4b4c      	ldr	r3, [pc, #304]	; (800c204 <HAL_RCC_GetSysClockFreq+0x138>)
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c0d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0da:	230c      	movs	r3, #12
 800c0dc:	4013      	ands	r3, r2
 800c0de:	2b0c      	cmp	r3, #12
 800c0e0:	d014      	beq.n	800c10c <HAL_RCC_GetSysClockFreq+0x40>
 800c0e2:	d900      	bls.n	800c0e6 <HAL_RCC_GetSysClockFreq+0x1a>
 800c0e4:	e07b      	b.n	800c1de <HAL_RCC_GetSysClockFreq+0x112>
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d002      	beq.n	800c0f0 <HAL_RCC_GetSysClockFreq+0x24>
 800c0ea:	2b08      	cmp	r3, #8
 800c0ec:	d00b      	beq.n	800c106 <HAL_RCC_GetSysClockFreq+0x3a>
 800c0ee:	e076      	b.n	800c1de <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800c0f0:	4b44      	ldr	r3, [pc, #272]	; (800c204 <HAL_RCC_GetSysClockFreq+0x138>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	d002      	beq.n	800c100 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800c0fa:	4b43      	ldr	r3, [pc, #268]	; (800c208 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c0fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800c0fe:	e07c      	b.n	800c1fa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800c100:	4b42      	ldr	r3, [pc, #264]	; (800c20c <HAL_RCC_GetSysClockFreq+0x140>)
 800c102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c104:	e079      	b.n	800c1fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c106:	4b42      	ldr	r3, [pc, #264]	; (800c210 <HAL_RCC_GetSysClockFreq+0x144>)
 800c108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c10a:	e076      	b.n	800c1fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10e:	0c9a      	lsrs	r2, r3, #18
 800c110:	230f      	movs	r3, #15
 800c112:	401a      	ands	r2, r3
 800c114:	4b3f      	ldr	r3, [pc, #252]	; (800c214 <HAL_RCC_GetSysClockFreq+0x148>)
 800c116:	5c9b      	ldrb	r3, [r3, r2]
 800c118:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	0d9a      	lsrs	r2, r3, #22
 800c11e:	2303      	movs	r3, #3
 800c120:	4013      	ands	r3, r2
 800c122:	3301      	adds	r3, #1
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c126:	4b37      	ldr	r3, [pc, #220]	; (800c204 <HAL_RCC_GetSysClockFreq+0x138>)
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	2380      	movs	r3, #128	; 0x80
 800c12c:	025b      	lsls	r3, r3, #9
 800c12e:	4013      	ands	r3, r2
 800c130:	d01a      	beq.n	800c168 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	61bb      	str	r3, [r7, #24]
 800c136:	2300      	movs	r3, #0
 800c138:	61fb      	str	r3, [r7, #28]
 800c13a:	4a35      	ldr	r2, [pc, #212]	; (800c210 <HAL_RCC_GetSysClockFreq+0x144>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	69b8      	ldr	r0, [r7, #24]
 800c140:	69f9      	ldr	r1, [r7, #28]
 800c142:	f7f4 f9bb 	bl	80004bc <__aeabi_lmul>
 800c146:	0002      	movs	r2, r0
 800c148:	000b      	movs	r3, r1
 800c14a:	0010      	movs	r0, r2
 800c14c:	0019      	movs	r1, r3
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	613b      	str	r3, [r7, #16]
 800c152:	2300      	movs	r3, #0
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f7f4 f98f 	bl	800047c <__aeabi_uldivmod>
 800c15e:	0002      	movs	r2, r0
 800c160:	000b      	movs	r3, r1
 800c162:	0013      	movs	r3, r2
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
 800c166:	e037      	b.n	800c1d8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800c168:	4b26      	ldr	r3, [pc, #152]	; (800c204 <HAL_RCC_GetSysClockFreq+0x138>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2210      	movs	r2, #16
 800c16e:	4013      	ands	r3, r2
 800c170:	d01a      	beq.n	800c1a8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	60bb      	str	r3, [r7, #8]
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
 800c17a:	4a23      	ldr	r2, [pc, #140]	; (800c208 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c17c:	2300      	movs	r3, #0
 800c17e:	68b8      	ldr	r0, [r7, #8]
 800c180:	68f9      	ldr	r1, [r7, #12]
 800c182:	f7f4 f99b 	bl	80004bc <__aeabi_lmul>
 800c186:	0002      	movs	r2, r0
 800c188:	000b      	movs	r3, r1
 800c18a:	0010      	movs	r0, r2
 800c18c:	0019      	movs	r1, r3
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	603b      	str	r3, [r7, #0]
 800c192:	2300      	movs	r3, #0
 800c194:	607b      	str	r3, [r7, #4]
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f7f4 f96f 	bl	800047c <__aeabi_uldivmod>
 800c19e:	0002      	movs	r2, r0
 800c1a0:	000b      	movs	r3, r1
 800c1a2:	0013      	movs	r3, r2
 800c1a4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a6:	e017      	b.n	800c1d8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	0019      	movs	r1, r3
 800c1b0:	4a16      	ldr	r2, [pc, #88]	; (800c20c <HAL_RCC_GetSysClockFreq+0x140>)
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f7f4 f982 	bl	80004bc <__aeabi_lmul>
 800c1b8:	0002      	movs	r2, r0
 800c1ba:	000b      	movs	r3, r1
 800c1bc:	0010      	movs	r0, r2
 800c1be:	0019      	movs	r1, r3
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	001c      	movs	r4, r3
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	001d      	movs	r5, r3
 800c1c8:	0022      	movs	r2, r4
 800c1ca:	002b      	movs	r3, r5
 800c1cc:	f7f4 f956 	bl	800047c <__aeabi_uldivmod>
 800c1d0:	0002      	movs	r2, r0
 800c1d2:	000b      	movs	r3, r1
 800c1d4:	0013      	movs	r3, r2
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c1dc:	e00d      	b.n	800c1fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800c1de:	4b09      	ldr	r3, [pc, #36]	; (800c204 <HAL_RCC_GetSysClockFreq+0x138>)
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	0b5b      	lsrs	r3, r3, #13
 800c1e4:	2207      	movs	r2, #7
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	2280      	movs	r2, #128	; 0x80
 800c1f0:	0212      	lsls	r2, r2, #8
 800c1f2:	409a      	lsls	r2, r3
 800c1f4:	0013      	movs	r3, r2
 800c1f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c1f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	46bd      	mov	sp, r7
 800c200:	b00e      	add	sp, #56	; 0x38
 800c202:	bdb0      	pop	{r4, r5, r7, pc}
 800c204:	40021000 	.word	0x40021000
 800c208:	003d0900 	.word	0x003d0900
 800c20c:	00f42400 	.word	0x00f42400
 800c210:	007a1200 	.word	0x007a1200
 800c214:	08015290 	.word	0x08015290

0800c218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c21c:	4b02      	ldr	r3, [pc, #8]	; (800c228 <HAL_RCC_GetHCLKFreq+0x10>)
 800c21e:	681b      	ldr	r3, [r3, #0]
}
 800c220:	0018      	movs	r0, r3
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	46c0      	nop			; (mov r8, r8)
 800c228:	200000cc 	.word	0x200000cc

0800c22c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c230:	f7ff fff2 	bl	800c218 <HAL_RCC_GetHCLKFreq>
 800c234:	0001      	movs	r1, r0
 800c236:	4b06      	ldr	r3, [pc, #24]	; (800c250 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	0a1b      	lsrs	r3, r3, #8
 800c23c:	2207      	movs	r2, #7
 800c23e:	4013      	ands	r3, r2
 800c240:	4a04      	ldr	r2, [pc, #16]	; (800c254 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c242:	5cd3      	ldrb	r3, [r2, r3]
 800c244:	40d9      	lsrs	r1, r3
 800c246:	000b      	movs	r3, r1
}
 800c248:	0018      	movs	r0, r3
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	46c0      	nop			; (mov r8, r8)
 800c250:	40021000 	.word	0x40021000
 800c254:	08015288 	.word	0x08015288

0800c258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c25c:	f7ff ffdc 	bl	800c218 <HAL_RCC_GetHCLKFreq>
 800c260:	0001      	movs	r1, r0
 800c262:	4b06      	ldr	r3, [pc, #24]	; (800c27c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	0adb      	lsrs	r3, r3, #11
 800c268:	2207      	movs	r2, #7
 800c26a:	4013      	ands	r3, r2
 800c26c:	4a04      	ldr	r2, [pc, #16]	; (800c280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c26e:	5cd3      	ldrb	r3, [r2, r3]
 800c270:	40d9      	lsrs	r1, r3
 800c272:	000b      	movs	r3, r1
}
 800c274:	0018      	movs	r0, r3
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	46c0      	nop			; (mov r8, r8)
 800c27c:	40021000 	.word	0x40021000
 800c280:	08015288 	.word	0x08015288

0800c284 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800c28c:	2317      	movs	r3, #23
 800c28e:	18fb      	adds	r3, r7, r3
 800c290:	2200      	movs	r2, #0
 800c292:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2220      	movs	r2, #32
 800c29a:	4013      	ands	r3, r2
 800c29c:	d106      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	2380      	movs	r3, #128	; 0x80
 800c2a4:	011b      	lsls	r3, r3, #4
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	d100      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x28>
 800c2aa:	e0d9      	b.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c2ac:	4ba4      	ldr	r3, [pc, #656]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2b0:	2380      	movs	r3, #128	; 0x80
 800c2b2:	055b      	lsls	r3, r3, #21
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	d10a      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2b8:	4ba1      	ldr	r3, [pc, #644]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2bc:	4ba0      	ldr	r3, [pc, #640]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c2be:	2180      	movs	r1, #128	; 0x80
 800c2c0:	0549      	lsls	r1, r1, #21
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800c2c6:	2317      	movs	r3, #23
 800c2c8:	18fb      	adds	r3, r7, r3
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2ce:	4b9d      	ldr	r3, [pc, #628]	; (800c544 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	2380      	movs	r3, #128	; 0x80
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	d11a      	bne.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c2da:	4b9a      	ldr	r3, [pc, #616]	; (800c544 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4b99      	ldr	r3, [pc, #612]	; (800c544 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c2e0:	2180      	movs	r1, #128	; 0x80
 800c2e2:	0049      	lsls	r1, r1, #1
 800c2e4:	430a      	orrs	r2, r1
 800c2e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c2e8:	f7fd fd10 	bl	8009d0c <HAL_GetTick>
 800c2ec:	0003      	movs	r3, r0
 800c2ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2f0:	e008      	b.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2f2:	f7fd fd0b 	bl	8009d0c <HAL_GetTick>
 800c2f6:	0002      	movs	r2, r0
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b64      	cmp	r3, #100	; 0x64
 800c2fe:	d901      	bls.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800c300:	2303      	movs	r3, #3
 800c302:	e118      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c304:	4b8f      	ldr	r3, [pc, #572]	; (800c544 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	2380      	movs	r3, #128	; 0x80
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	4013      	ands	r3, r2
 800c30e:	d0f0      	beq.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800c310:	4b8b      	ldr	r3, [pc, #556]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	23c0      	movs	r3, #192	; 0xc0
 800c316:	039b      	lsls	r3, r3, #14
 800c318:	4013      	ands	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	23c0      	movs	r3, #192	; 0xc0
 800c322:	039b      	lsls	r3, r3, #14
 800c324:	4013      	ands	r3, r2
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d107      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	689a      	ldr	r2, [r3, #8]
 800c330:	23c0      	movs	r3, #192	; 0xc0
 800c332:	039b      	lsls	r3, r3, #14
 800c334:	4013      	ands	r3, r2
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d013      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	23c0      	movs	r3, #192	; 0xc0
 800c342:	029b      	lsls	r3, r3, #10
 800c344:	401a      	ands	r2, r3
 800c346:	23c0      	movs	r3, #192	; 0xc0
 800c348:	029b      	lsls	r3, r3, #10
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d10a      	bne.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c34e:	4b7c      	ldr	r3, [pc, #496]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	2380      	movs	r3, #128	; 0x80
 800c354:	029b      	lsls	r3, r3, #10
 800c356:	401a      	ands	r2, r3
 800c358:	2380      	movs	r3, #128	; 0x80
 800c35a:	029b      	lsls	r3, r3, #10
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d101      	bne.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e0e8      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800c364:	4b76      	ldr	r3, [pc, #472]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c368:	23c0      	movs	r3, #192	; 0xc0
 800c36a:	029b      	lsls	r3, r3, #10
 800c36c:	4013      	ands	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d049      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	23c0      	movs	r3, #192	; 0xc0
 800c37c:	029b      	lsls	r3, r3, #10
 800c37e:	4013      	ands	r3, r2
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	429a      	cmp	r2, r3
 800c384:	d004      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2220      	movs	r2, #32
 800c38c:	4013      	ands	r3, r2
 800c38e:	d10d      	bne.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	23c0      	movs	r3, #192	; 0xc0
 800c396:	029b      	lsls	r3, r3, #10
 800c398:	4013      	ands	r3, r2
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d034      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	2380      	movs	r3, #128	; 0x80
 800c3a6:	011b      	lsls	r3, r3, #4
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	d02e      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800c3ac:	4b64      	ldr	r3, [pc, #400]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b0:	4a65      	ldr	r2, [pc, #404]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c3b6:	4b62      	ldr	r3, [pc, #392]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3ba:	4b61      	ldr	r3, [pc, #388]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3bc:	2180      	movs	r1, #128	; 0x80
 800c3be:	0309      	lsls	r1, r1, #12
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c3c4:	4b5e      	ldr	r3, [pc, #376]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3c8:	4b5d      	ldr	r3, [pc, #372]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3ca:	4960      	ldr	r1, [pc, #384]	; (800c54c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800c3cc:	400a      	ands	r2, r1
 800c3ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800c3d0:	4b5b      	ldr	r3, [pc, #364]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	2380      	movs	r3, #128	; 0x80
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	4013      	ands	r3, r2
 800c3de:	d014      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3e0:	f7fd fc94 	bl	8009d0c <HAL_GetTick>
 800c3e4:	0003      	movs	r3, r0
 800c3e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3e8:	e009      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3ea:	f7fd fc8f 	bl	8009d0c <HAL_GetTick>
 800c3ee:	0002      	movs	r2, r0
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	4a56      	ldr	r2, [pc, #344]	; (800c550 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d901      	bls.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e09b      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3fe:	4b50      	ldr	r3, [pc, #320]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c402:	2380      	movs	r3, #128	; 0x80
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4013      	ands	r3, r2
 800c408:	d0ef      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	23c0      	movs	r3, #192	; 0xc0
 800c410:	029b      	lsls	r3, r3, #10
 800c412:	401a      	ands	r2, r3
 800c414:	23c0      	movs	r3, #192	; 0xc0
 800c416:	029b      	lsls	r3, r3, #10
 800c418:	429a      	cmp	r2, r3
 800c41a:	d10c      	bne.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800c41c:	4b48      	ldr	r3, [pc, #288]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a4c      	ldr	r2, [pc, #304]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800c422:	4013      	ands	r3, r2
 800c424:	0019      	movs	r1, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	23c0      	movs	r3, #192	; 0xc0
 800c42c:	039b      	lsls	r3, r3, #14
 800c42e:	401a      	ands	r2, r3
 800c430:	4b43      	ldr	r3, [pc, #268]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c432:	430a      	orrs	r2, r1
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	4b42      	ldr	r3, [pc, #264]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c438:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	23c0      	movs	r3, #192	; 0xc0
 800c440:	029b      	lsls	r3, r3, #10
 800c442:	401a      	ands	r2, r3
 800c444:	4b3e      	ldr	r3, [pc, #248]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c446:	430a      	orrs	r2, r1
 800c448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c44a:	2317      	movs	r3, #23
 800c44c:	18fb      	adds	r3, r7, r3
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d105      	bne.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c454:	4b3a      	ldr	r3, [pc, #232]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c458:	4b39      	ldr	r3, [pc, #228]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c45a:	493f      	ldr	r1, [pc, #252]	; (800c558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c45c:	400a      	ands	r2, r1
 800c45e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2201      	movs	r2, #1
 800c466:	4013      	ands	r3, r2
 800c468:	d009      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c46a:	4b35      	ldr	r3, [pc, #212]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46e:	2203      	movs	r2, #3
 800c470:	4393      	bics	r3, r2
 800c472:	0019      	movs	r1, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	4b31      	ldr	r3, [pc, #196]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c47a:	430a      	orrs	r2, r1
 800c47c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2202      	movs	r2, #2
 800c484:	4013      	ands	r3, r2
 800c486:	d009      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c488:	4b2d      	ldr	r3, [pc, #180]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c48c:	220c      	movs	r2, #12
 800c48e:	4393      	bics	r3, r2
 800c490:	0019      	movs	r1, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	691a      	ldr	r2, [r3, #16]
 800c496:	4b2a      	ldr	r3, [pc, #168]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c498:	430a      	orrs	r2, r1
 800c49a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2204      	movs	r2, #4
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	d009      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c4a6:	4b26      	ldr	r3, [pc, #152]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4aa:	4a2c      	ldr	r2, [pc, #176]	; (800c55c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	0019      	movs	r1, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	695a      	ldr	r2, [r3, #20]
 800c4b4:	4b22      	ldr	r3, [pc, #136]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2208      	movs	r2, #8
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	d009      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c4c4:	4b1e      	ldr	r3, [pc, #120]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4c8:	4a25      	ldr	r2, [pc, #148]	; (800c560 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	0019      	movs	r1, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	699a      	ldr	r2, [r3, #24]
 800c4d2:	4b1b      	ldr	r3, [pc, #108]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4d4:	430a      	orrs	r2, r1
 800c4d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	2380      	movs	r3, #128	; 0x80
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	d009      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c4e4:	4b16      	ldr	r3, [pc, #88]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e8:	4a17      	ldr	r2, [pc, #92]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	0019      	movs	r1, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	69da      	ldr	r2, [r3, #28]
 800c4f2:	4b13      	ldr	r3, [pc, #76]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2240      	movs	r2, #64	; 0x40
 800c4fe:	4013      	ands	r3, r2
 800c500:	d009      	beq.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c502:	4b0f      	ldr	r3, [pc, #60]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c506:	4a17      	ldr	r2, [pc, #92]	; (800c564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c508:	4013      	ands	r3, r2
 800c50a:	0019      	movs	r1, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c510:	4b0b      	ldr	r3, [pc, #44]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c512:	430a      	orrs	r2, r1
 800c514:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2280      	movs	r2, #128	; 0x80
 800c51c:	4013      	ands	r3, r2
 800c51e:	d009      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c524:	4a10      	ldr	r2, [pc, #64]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800c526:	4013      	ands	r3, r2
 800c528:	0019      	movs	r1, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1a      	ldr	r2, [r3, #32]
 800c52e:	4b04      	ldr	r3, [pc, #16]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c530:	430a      	orrs	r2, r1
 800c532:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	0018      	movs	r0, r3
 800c538:	46bd      	mov	sp, r7
 800c53a:	b006      	add	sp, #24
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	46c0      	nop			; (mov r8, r8)
 800c540:	40021000 	.word	0x40021000
 800c544:	40007000 	.word	0x40007000
 800c548:	fffcffff 	.word	0xfffcffff
 800c54c:	fff7ffff 	.word	0xfff7ffff
 800c550:	00001388 	.word	0x00001388
 800c554:	ffcfffff 	.word	0xffcfffff
 800c558:	efffffff 	.word	0xefffffff
 800c55c:	fffff3ff 	.word	0xfffff3ff
 800c560:	ffffcfff 	.word	0xffffcfff
 800c564:	fbffffff 	.word	0xfbffffff
 800c568:	fff3ffff 	.word	0xfff3ffff

0800c56c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e08e      	b.n	800c69c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2221      	movs	r2, #33	; 0x21
 800c582:	5c9b      	ldrb	r3, [r3, r2]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d107      	bne.n	800c59a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2220      	movs	r2, #32
 800c58e:	2100      	movs	r1, #0
 800c590:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	0018      	movs	r0, r3
 800c596:	f7f5 f98d 	bl	80018b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2221      	movs	r2, #33	; 0x21
 800c59e:	2102      	movs	r1, #2
 800c5a0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	22ca      	movs	r2, #202	; 0xca
 800c5a8:	625a      	str	r2, [r3, #36]	; 0x24
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2253      	movs	r2, #83	; 0x53
 800c5b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	f000 faba 	bl	800cb2e <RTC_EnterInitMode>
 800c5ba:	1e03      	subs	r3, r0, #0
 800c5bc:	d009      	beq.n	800c5d2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	22ff      	movs	r2, #255	; 0xff
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2221      	movs	r2, #33	; 0x21
 800c5ca:	2104      	movs	r1, #4
 800c5cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e064      	b.n	800c69c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4931      	ldr	r1, [pc, #196]	; (800c6a4 <HAL_RTC_Init+0x138>)
 800c5de:	400a      	ands	r2, r1
 800c5e0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6899      	ldr	r1, [r3, #8]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	699b      	ldr	r3, [r3, #24]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	430a      	orrs	r2, r1
 800c5fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	68d2      	ldr	r2, [r2, #12]
 800c608:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6919      	ldr	r1, [r3, #16]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	041a      	lsls	r2, r3, #16
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2180      	movs	r1, #128	; 0x80
 800c62a:	438a      	bics	r2, r1
 800c62c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2103      	movs	r1, #3
 800c63a:	438a      	bics	r2, r1
 800c63c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	69da      	ldr	r2, [r3, #28]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	431a      	orrs	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	430a      	orrs	r2, r1
 800c654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	2220      	movs	r2, #32
 800c65e:	4013      	ands	r3, r2
 800c660:	d113      	bne.n	800c68a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	0018      	movs	r0, r3
 800c666:	f000 fa3b 	bl	800cae0 <HAL_RTC_WaitForSynchro>
 800c66a:	1e03      	subs	r3, r0, #0
 800c66c:	d00d      	beq.n	800c68a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	22ff      	movs	r2, #255	; 0xff
 800c674:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2221      	movs	r2, #33	; 0x21
 800c67a:	2104      	movs	r1, #4
 800c67c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2220      	movs	r2, #32
 800c682:	2100      	movs	r1, #0
 800c684:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e008      	b.n	800c69c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	22ff      	movs	r2, #255	; 0xff
 800c690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2221      	movs	r2, #33	; 0x21
 800c696:	2101      	movs	r1, #1
 800c698:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c69a:	2300      	movs	r3, #0
  }
}
 800c69c:	0018      	movs	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b002      	add	sp, #8
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	ff8fffbf 	.word	0xff8fffbf

0800c6a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2220      	movs	r2, #32
 800c6b8:	5c9b      	ldrb	r3, [r3, r2]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d101      	bne.n	800c6c2 <HAL_RTC_SetTime+0x1a>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	e0ad      	b.n	800c81e <HAL_RTC_SetTime+0x176>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2221      	movs	r2, #33	; 0x21
 800c6ce:	2102      	movs	r1, #2
 800c6d0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d125      	bne.n	800c724 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	2240      	movs	r2, #64	; 0x40
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	d102      	bne.n	800c6ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	0018      	movs	r0, r3
 800c6f0:	f000 fa47 	bl	800cb82 <RTC_ByteToBcd2>
 800c6f4:	0003      	movs	r3, r0
 800c6f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	785b      	ldrb	r3, [r3, #1]
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f000 fa40 	bl	800cb82 <RTC_ByteToBcd2>
 800c702:	0003      	movs	r3, r0
 800c704:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c706:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	789b      	ldrb	r3, [r3, #2]
 800c70c:	0018      	movs	r0, r3
 800c70e:	f000 fa38 	bl	800cb82 <RTC_ByteToBcd2>
 800c712:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c714:	0022      	movs	r2, r4
 800c716:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	78db      	ldrb	r3, [r3, #3]
 800c71c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c71e:	4313      	orrs	r3, r2
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e017      	b.n	800c754 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	2240      	movs	r2, #64	; 0x40
 800c72c:	4013      	ands	r3, r2
 800c72e:	d102      	bne.n	800c736 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	2200      	movs	r2, #0
 800c734:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	785b      	ldrb	r3, [r3, #1]
 800c740:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c742:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c748:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	78db      	ldrb	r3, [r3, #3]
 800c74e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c750:	4313      	orrs	r3, r2
 800c752:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	22ca      	movs	r2, #202	; 0xca
 800c75a:	625a      	str	r2, [r3, #36]	; 0x24
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2253      	movs	r2, #83	; 0x53
 800c762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	0018      	movs	r0, r3
 800c768:	f000 f9e1 	bl	800cb2e <RTC_EnterInitMode>
 800c76c:	1e03      	subs	r3, r0, #0
 800c76e:	d00d      	beq.n	800c78c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	22ff      	movs	r2, #255	; 0xff
 800c776:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2221      	movs	r2, #33	; 0x21
 800c77c:	2104      	movs	r1, #4
 800c77e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2220      	movs	r2, #32
 800c784:	2100      	movs	r1, #0
 800c786:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	e048      	b.n	800c81e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	4925      	ldr	r1, [pc, #148]	; (800c828 <HAL_RTC_SetTime+0x180>)
 800c794:	400a      	ands	r2, r1
 800c796:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689a      	ldr	r2, [r3, #8]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4922      	ldr	r1, [pc, #136]	; (800c82c <HAL_RTC_SetTime+0x184>)
 800c7a4:	400a      	ands	r2, r1
 800c7a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6899      	ldr	r1, [r3, #8]
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	431a      	orrs	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68da      	ldr	r2, [r3, #12]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2180      	movs	r1, #128	; 0x80
 800c7cc:	438a      	bics	r2, r1
 800c7ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	4013      	ands	r3, r2
 800c7da:	d113      	bne.n	800c804 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	0018      	movs	r0, r3
 800c7e0:	f000 f97e 	bl	800cae0 <HAL_RTC_WaitForSynchro>
 800c7e4:	1e03      	subs	r3, r0, #0
 800c7e6:	d00d      	beq.n	800c804 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	22ff      	movs	r2, #255	; 0xff
 800c7ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2221      	movs	r2, #33	; 0x21
 800c7f4:	2104      	movs	r1, #4
 800c7f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2220      	movs	r2, #32
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	e00c      	b.n	800c81e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	22ff      	movs	r2, #255	; 0xff
 800c80a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2221      	movs	r2, #33	; 0x21
 800c810:	2101      	movs	r1, #1
 800c812:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2220      	movs	r2, #32
 800c818:	2100      	movs	r1, #0
 800c81a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c81c:	2300      	movs	r3, #0
  }
}
 800c81e:	0018      	movs	r0, r3
 800c820:	46bd      	mov	sp, r7
 800c822:	b007      	add	sp, #28
 800c824:	bd90      	pop	{r4, r7, pc}
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	007f7f7f 	.word	0x007f7f7f
 800c82c:	fffbffff 	.word	0xfffbffff

0800c830 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	045b      	lsls	r3, r3, #17
 800c84e:	0c5a      	lsrs	r2, r3, #17
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a22      	ldr	r2, [pc, #136]	; (800c8e4 <HAL_RTC_GetTime+0xb4>)
 800c85c:	4013      	ands	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	0c1b      	lsrs	r3, r3, #16
 800c864:	b2db      	uxtb	r3, r3
 800c866:	223f      	movs	r2, #63	; 0x3f
 800c868:	4013      	ands	r3, r2
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	0a1b      	lsrs	r3, r3, #8
 800c874:	b2db      	uxtb	r3, r3
 800c876:	227f      	movs	r2, #127	; 0x7f
 800c878:	4013      	ands	r3, r2
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	b2db      	uxtb	r3, r3
 800c884:	227f      	movs	r2, #127	; 0x7f
 800c886:	4013      	ands	r3, r2
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2240      	movs	r2, #64	; 0x40
 800c896:	4013      	ands	r3, r2
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d11a      	bne.n	800c8da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	f000 f992 	bl	800cbd2 <RTC_Bcd2ToByte>
 800c8ae:	0003      	movs	r3, r0
 800c8b0:	001a      	movs	r2, r3
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	785b      	ldrb	r3, [r3, #1]
 800c8ba:	0018      	movs	r0, r3
 800c8bc:	f000 f989 	bl	800cbd2 <RTC_Bcd2ToByte>
 800c8c0:	0003      	movs	r3, r0
 800c8c2:	001a      	movs	r2, r3
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	789b      	ldrb	r3, [r3, #2]
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	f000 f980 	bl	800cbd2 <RTC_Bcd2ToByte>
 800c8d2:	0003      	movs	r3, r0
 800c8d4:	001a      	movs	r2, r3
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	0018      	movs	r0, r3
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	b006      	add	sp, #24
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	007f7f7f 	.word	0x007f7f7f

0800c8e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8e8:	b590      	push	{r4, r7, lr}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	5c9b      	ldrb	r3, [r3, r2]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d101      	bne.n	800c902 <HAL_RTC_SetDate+0x1a>
 800c8fe:	2302      	movs	r3, #2
 800c900:	e099      	b.n	800ca36 <HAL_RTC_SetDate+0x14e>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2220      	movs	r2, #32
 800c906:	2101      	movs	r1, #1
 800c908:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2221      	movs	r2, #33	; 0x21
 800c90e:	2102      	movs	r1, #2
 800c910:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10e      	bne.n	800c936 <HAL_RTC_SetDate+0x4e>
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	785b      	ldrb	r3, [r3, #1]
 800c91c:	001a      	movs	r2, r3
 800c91e:	2310      	movs	r3, #16
 800c920:	4013      	ands	r3, r2
 800c922:	d008      	beq.n	800c936 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2210      	movs	r2, #16
 800c92a:	4393      	bics	r3, r2
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	330a      	adds	r3, #10
 800c930:	b2da      	uxtb	r2, r3
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d11c      	bne.n	800c976 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	78db      	ldrb	r3, [r3, #3]
 800c940:	0018      	movs	r0, r3
 800c942:	f000 f91e 	bl	800cb82 <RTC_ByteToBcd2>
 800c946:	0003      	movs	r3, r0
 800c948:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	785b      	ldrb	r3, [r3, #1]
 800c94e:	0018      	movs	r0, r3
 800c950:	f000 f917 	bl	800cb82 <RTC_ByteToBcd2>
 800c954:	0003      	movs	r3, r0
 800c956:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c958:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	789b      	ldrb	r3, [r3, #2]
 800c95e:	0018      	movs	r0, r3
 800c960:	f000 f90f 	bl	800cb82 <RTC_ByteToBcd2>
 800c964:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c966:	0022      	movs	r2, r4
 800c968:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c970:	4313      	orrs	r3, r2
 800c972:	617b      	str	r3, [r7, #20]
 800c974:	e00e      	b.n	800c994 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	78db      	ldrb	r3, [r3, #3]
 800c97a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	785b      	ldrb	r3, [r3, #1]
 800c980:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c982:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c988:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c990:	4313      	orrs	r3, r2
 800c992:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	22ca      	movs	r2, #202	; 0xca
 800c99a:	625a      	str	r2, [r3, #36]	; 0x24
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2253      	movs	r2, #83	; 0x53
 800c9a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f000 f8c1 	bl	800cb2e <RTC_EnterInitMode>
 800c9ac:	1e03      	subs	r3, r0, #0
 800c9ae:	d00d      	beq.n	800c9cc <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	22ff      	movs	r2, #255	; 0xff
 800c9b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2221      	movs	r2, #33	; 0x21
 800c9bc:	2104      	movs	r1, #4
 800c9be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e034      	b.n	800ca36 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	491b      	ldr	r1, [pc, #108]	; (800ca40 <HAL_RTC_SetDate+0x158>)
 800c9d4:	400a      	ands	r2, r1
 800c9d6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68da      	ldr	r2, [r3, #12]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2180      	movs	r1, #128	; 0x80
 800c9e4:	438a      	bics	r2, r1
 800c9e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	d113      	bne.n	800ca1c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	0018      	movs	r0, r3
 800c9f8:	f000 f872 	bl	800cae0 <HAL_RTC_WaitForSynchro>
 800c9fc:	1e03      	subs	r3, r0, #0
 800c9fe:	d00d      	beq.n	800ca1c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	22ff      	movs	r2, #255	; 0xff
 800ca06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2221      	movs	r2, #33	; 0x21
 800ca0c:	2104      	movs	r1, #4
 800ca0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2220      	movs	r2, #32
 800ca14:	2100      	movs	r1, #0
 800ca16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e00c      	b.n	800ca36 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	22ff      	movs	r2, #255	; 0xff
 800ca22:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2221      	movs	r2, #33	; 0x21
 800ca28:	2101      	movs	r1, #1
 800ca2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	2100      	movs	r1, #0
 800ca32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ca34:	2300      	movs	r3, #0
  }
}
 800ca36:	0018      	movs	r0, r3
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	b007      	add	sp, #28
 800ca3c:	bd90      	pop	{r4, r7, pc}
 800ca3e:	46c0      	nop			; (mov r8, r8)
 800ca40:	00ffff3f 	.word	0x00ffff3f

0800ca44 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	4a21      	ldr	r2, [pc, #132]	; (800cadc <HAL_RTC_GetDate+0x98>)
 800ca58:	4013      	ands	r3, r2
 800ca5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	0c1b      	lsrs	r3, r3, #16
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	0a1b      	lsrs	r3, r3, #8
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	221f      	movs	r2, #31
 800ca6e:	4013      	ands	r3, r2
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	223f      	movs	r2, #63	; 0x3f
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	0b5b      	lsrs	r3, r3, #13
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2207      	movs	r2, #7
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d11a      	bne.n	800cad0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	78db      	ldrb	r3, [r3, #3]
 800ca9e:	0018      	movs	r0, r3
 800caa0:	f000 f897 	bl	800cbd2 <RTC_Bcd2ToByte>
 800caa4:	0003      	movs	r3, r0
 800caa6:	001a      	movs	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	0018      	movs	r0, r3
 800cab2:	f000 f88e 	bl	800cbd2 <RTC_Bcd2ToByte>
 800cab6:	0003      	movs	r3, r0
 800cab8:	001a      	movs	r2, r3
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	789b      	ldrb	r3, [r3, #2]
 800cac2:	0018      	movs	r0, r3
 800cac4:	f000 f885 	bl	800cbd2 <RTC_Bcd2ToByte>
 800cac8:	0003      	movs	r3, r0
 800caca:	001a      	movs	r2, r3
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	0018      	movs	r0, r3
 800cad4:	46bd      	mov	sp, r7
 800cad6:	b006      	add	sp, #24
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	46c0      	nop			; (mov r8, r8)
 800cadc:	00ffff3f 	.word	0x00ffff3f

0800cae0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	21a0      	movs	r1, #160	; 0xa0
 800caf4:	438a      	bics	r2, r1
 800caf6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800caf8:	f7fd f908 	bl	8009d0c <HAL_GetTick>
 800cafc:	0003      	movs	r3, r0
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb00:	e00a      	b.n	800cb18 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb02:	f7fd f903 	bl	8009d0c <HAL_GetTick>
 800cb06:	0002      	movs	r2, r0
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	23fa      	movs	r3, #250	; 0xfa
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d901      	bls.n	800cb18 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	e006      	b.n	800cb26 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	2220      	movs	r2, #32
 800cb20:	4013      	ands	r3, r2
 800cb22:	d0ee      	beq.n	800cb02 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	0018      	movs	r0, r3
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	b004      	add	sp, #16
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	2240      	movs	r2, #64	; 0x40
 800cb3e:	4013      	ands	r3, r2
 800cb40:	d11a      	bne.n	800cb78 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2201      	movs	r2, #1
 800cb48:	4252      	negs	r2, r2
 800cb4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cb4c:	f7fd f8de 	bl	8009d0c <HAL_GetTick>
 800cb50:	0003      	movs	r3, r0
 800cb52:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cb54:	e00a      	b.n	800cb6c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cb56:	f7fd f8d9 	bl	8009d0c <HAL_GetTick>
 800cb5a:	0002      	movs	r2, r0
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	1ad2      	subs	r2, r2, r3
 800cb60:	23fa      	movs	r3, #250	; 0xfa
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d901      	bls.n	800cb6c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e006      	b.n	800cb7a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	2240      	movs	r2, #64	; 0x40
 800cb74:	4013      	ands	r3, r2
 800cb76:	d0ee      	beq.n	800cb56 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	0018      	movs	r0, r3
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	b004      	add	sp, #16
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	0002      	movs	r2, r0
 800cb8a:	1dfb      	adds	r3, r7, #7
 800cb8c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800cb92:	230b      	movs	r3, #11
 800cb94:	18fb      	adds	r3, r7, r3
 800cb96:	1dfa      	adds	r2, r7, #7
 800cb98:	7812      	ldrb	r2, [r2, #0]
 800cb9a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800cb9c:	e008      	b.n	800cbb0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3301      	adds	r3, #1
 800cba2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800cba4:	220b      	movs	r2, #11
 800cba6:	18bb      	adds	r3, r7, r2
 800cba8:	18ba      	adds	r2, r7, r2
 800cbaa:	7812      	ldrb	r2, [r2, #0]
 800cbac:	3a0a      	subs	r2, #10
 800cbae:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800cbb0:	210b      	movs	r1, #11
 800cbb2:	187b      	adds	r3, r7, r1
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b09      	cmp	r3, #9
 800cbb8:	d8f1      	bhi.n	800cb9e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	187b      	adds	r3, r7, r1
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	b2db      	uxtb	r3, r3
}
 800cbca:	0018      	movs	r0, r3
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	b004      	add	sp, #16
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b084      	sub	sp, #16
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	0002      	movs	r2, r0
 800cbda:	1dfb      	adds	r3, r7, #7
 800cbdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800cbde:	1dfb      	adds	r3, r7, #7
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	091b      	lsrs	r3, r3, #4
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	001a      	movs	r2, r3
 800cbe8:	0013      	movs	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	189b      	adds	r3, r3, r2
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	1dfb      	adds	r3, r7, #7
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	210f      	movs	r1, #15
 800cbfc:	400b      	ands	r3, r1
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	18d3      	adds	r3, r2, r3
 800cc02:	b2db      	uxtb	r3, r3
}
 800cc04:	0018      	movs	r0, r3
 800cc06:	46bd      	mov	sp, r7
 800cc08:	b004      	add	sp, #16
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e044      	b.n	800cca8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d107      	bne.n	800cc36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2274      	movs	r2, #116	; 0x74
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	0018      	movs	r0, r3
 800cc32:	f000 f83f 	bl	800ccb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2224      	movs	r2, #36	; 0x24
 800cc3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2101      	movs	r1, #1
 800cc48:	438a      	bics	r2, r1
 800cc4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	0018      	movs	r0, r3
 800cc50:	f000 f96c 	bl	800cf2c <UART_SetConfig>
 800cc54:	0003      	movs	r3, r0
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d101      	bne.n	800cc5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e024      	b.n	800cca8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	0018      	movs	r0, r3
 800cc6a:	f000 fbff 	bl	800d46c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	490d      	ldr	r1, [pc, #52]	; (800ccb0 <HAL_UART_Init+0xa4>)
 800cc7a:	400a      	ands	r2, r1
 800cc7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689a      	ldr	r2, [r3, #8]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	212a      	movs	r1, #42	; 0x2a
 800cc8a:	438a      	bics	r2, r1
 800cc8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2101      	movs	r1, #1
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	0018      	movs	r0, r3
 800cca2:	f000 fc97 	bl	800d5d4 <UART_CheckIdleState>
 800cca6:	0003      	movs	r3, r0
}
 800cca8:	0018      	movs	r0, r3
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	b002      	add	sp, #8
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	ffffb7ff 	.word	0xffffb7ff

0800ccb4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ccbc:	46c0      	nop			; (mov r8, r8)
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	b002      	add	sp, #8
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b08a      	sub	sp, #40	; 0x28
 800ccc8:	af02      	add	r7, sp, #8
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	1dbb      	adds	r3, r7, #6
 800ccd2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd8:	2b20      	cmp	r3, #32
 800ccda:	d000      	beq.n	800ccde <HAL_UART_Transmit+0x1a>
 800ccdc:	e095      	b.n	800ce0a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d003      	beq.n	800ccec <HAL_UART_Transmit+0x28>
 800cce4:	1dbb      	adds	r3, r7, #6
 800cce6:	881b      	ldrh	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e08d      	b.n	800ce0c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	2380      	movs	r3, #128	; 0x80
 800ccf6:	015b      	lsls	r3, r3, #5
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d109      	bne.n	800cd10 <HAL_UART_Transmit+0x4c>
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d105      	bne.n	800cd10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2201      	movs	r2, #1
 800cd08:	4013      	ands	r3, r2
 800cd0a:	d001      	beq.n	800cd10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e07d      	b.n	800ce0c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2274      	movs	r2, #116	; 0x74
 800cd14:	5c9b      	ldrb	r3, [r3, r2]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d101      	bne.n	800cd1e <HAL_UART_Transmit+0x5a>
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	e076      	b.n	800ce0c <HAL_UART_Transmit+0x148>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2274      	movs	r2, #116	; 0x74
 800cd22:	2101      	movs	r1, #1
 800cd24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2280      	movs	r2, #128	; 0x80
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2221      	movs	r2, #33	; 0x21
 800cd32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd34:	f7fc ffea 	bl	8009d0c <HAL_GetTick>
 800cd38:	0003      	movs	r3, r0
 800cd3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	1dba      	adds	r2, r7, #6
 800cd40:	2150      	movs	r1, #80	; 0x50
 800cd42:	8812      	ldrh	r2, [r2, #0]
 800cd44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	1dba      	adds	r2, r7, #6
 800cd4a:	2152      	movs	r1, #82	; 0x52
 800cd4c:	8812      	ldrh	r2, [r2, #0]
 800cd4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	2380      	movs	r3, #128	; 0x80
 800cd56:	015b      	lsls	r3, r3, #5
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d108      	bne.n	800cd6e <HAL_UART_Transmit+0xaa>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d104      	bne.n	800cd6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	61bb      	str	r3, [r7, #24]
 800cd6c:	e003      	b.n	800cd76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2274      	movs	r2, #116	; 0x74
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800cd7e:	e02c      	b.n	800cdda <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	0013      	movs	r3, r2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	2180      	movs	r1, #128	; 0x80
 800cd8e:	f000 fc69 	bl	800d664 <UART_WaitOnFlagUntilTimeout>
 800cd92:	1e03      	subs	r3, r0, #0
 800cd94:	d001      	beq.n	800cd9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800cd96:	2303      	movs	r3, #3
 800cd98:	e038      	b.n	800ce0c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	001a      	movs	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	05d2      	lsls	r2, r2, #23
 800cdac:	0dd2      	lsrs	r2, r2, #23
 800cdae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	3302      	adds	r3, #2
 800cdb4:	61bb      	str	r3, [r7, #24]
 800cdb6:	e007      	b.n	800cdc8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2252      	movs	r2, #82	; 0x52
 800cdcc:	5a9b      	ldrh	r3, [r3, r2]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b299      	uxth	r1, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2252      	movs	r2, #82	; 0x52
 800cdd8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2252      	movs	r2, #82	; 0x52
 800cdde:	5a9b      	ldrh	r3, [r3, r2]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1cc      	bne.n	800cd80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	0013      	movs	r3, r2
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2140      	movs	r1, #64	; 0x40
 800cdf4:	f000 fc36 	bl	800d664 <UART_WaitOnFlagUntilTimeout>
 800cdf8:	1e03      	subs	r3, r0, #0
 800cdfa:	d001      	beq.n	800ce00 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e005      	b.n	800ce0c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2220      	movs	r2, #32
 800ce04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	e000      	b.n	800ce0c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800ce0a:	2302      	movs	r3, #2
  }
}
 800ce0c:	0018      	movs	r0, r3
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	b008      	add	sp, #32
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	1dbb      	adds	r3, r7, #6
 800ce20:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce26:	2b20      	cmp	r3, #32
 800ce28:	d155      	bne.n	800ced6 <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d003      	beq.n	800ce38 <HAL_UART_Receive_DMA+0x24>
 800ce30:	1dbb      	adds	r3, r7, #6
 800ce32:	881b      	ldrh	r3, [r3, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d101      	bne.n	800ce3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e04d      	b.n	800ced8 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	689a      	ldr	r2, [r3, #8]
 800ce40:	2380      	movs	r3, #128	; 0x80
 800ce42:	015b      	lsls	r3, r3, #5
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d109      	bne.n	800ce5c <HAL_UART_Receive_DMA+0x48>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d105      	bne.n	800ce5c <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2201      	movs	r2, #1
 800ce54:	4013      	ands	r3, r2
 800ce56:	d001      	beq.n	800ce5c <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e03d      	b.n	800ced8 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    __HAL_LOCK(huart);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2274      	movs	r2, #116	; 0x74
 800ce60:	5c9b      	ldrb	r3, [r3, r2]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d101      	bne.n	800ce6a <HAL_UART_Receive_DMA+0x56>
 800ce66:	2302      	movs	r3, #2
 800ce68:	e036      	b.n	800ced8 <HAL_UART_Receive_DMA+0xc4>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2274      	movs	r2, #116	; 0x74
 800ce6e:	2101      	movs	r1, #1
 800ce70:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a18      	ldr	r2, [pc, #96]	; (800cee0 <HAL_UART_Receive_DMA+0xcc>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d020      	beq.n	800cec4 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	2380      	movs	r3, #128	; 0x80
 800ce8a:	041b      	lsls	r3, r3, #16
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	d019      	beq.n	800cec4 <HAL_UART_Receive_DMA+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce90:	f3ef 8310 	mrs	r3, PRIMASK
 800ce94:	613b      	str	r3, [r7, #16]
  return(result);
 800ce96:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce98:	61fb      	str	r3, [r7, #28]
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f383 8810 	msr	PRIMASK, r3
}
 800cea4:	46c0      	nop			; (mov r8, r8)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2180      	movs	r1, #128	; 0x80
 800ceb2:	04c9      	lsls	r1, r1, #19
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	f383 8810 	msr	PRIMASK, r3
}
 800cec2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cec4:	1dbb      	adds	r3, r7, #6
 800cec6:	881a      	ldrh	r2, [r3, #0]
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	0018      	movs	r0, r3
 800cece:	f000 fc8d 	bl	800d7ec <UART_Start_Receive_DMA>
 800ced2:	0003      	movs	r3, r0
 800ced4:	e000      	b.n	800ced8 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ced6:	2302      	movs	r3, #2
  }
}
 800ced8:	0018      	movs	r0, r3
 800ceda:	46bd      	mov	sp, r7
 800cedc:	b008      	add	sp, #32
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	40004800 	.word	0x40004800

0800cee4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ceec:	46c0      	nop			; (mov r8, r8)
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b002      	add	sp, #8
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cefc:	46c0      	nop			; (mov r8, r8)
 800cefe:	46bd      	mov	sp, r7
 800cf00:	b002      	add	sp, #8
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cf0c:	46c0      	nop			; (mov r8, r8)
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	b002      	add	sp, #8
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	000a      	movs	r2, r1
 800cf1e:	1cbb      	adds	r3, r7, #2
 800cf20:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	46bd      	mov	sp, r7
 800cf26:	b002      	add	sp, #8
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf2c:	b5b0      	push	{r4, r5, r7, lr}
 800cf2e:	b08e      	sub	sp, #56	; 0x38
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf34:	231a      	movs	r3, #26
 800cf36:	2218      	movs	r2, #24
 800cf38:	189b      	adds	r3, r3, r2
 800cf3a:	19db      	adds	r3, r3, r7
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	69db      	ldr	r3, [r3, #28]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4ac3      	ldr	r2, [pc, #780]	; (800d26c <UART_SetConfig+0x340>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	0019      	movs	r1, r3
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf6a:	430a      	orrs	r2, r1
 800cf6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	4abe      	ldr	r2, [pc, #760]	; (800d270 <UART_SetConfig+0x344>)
 800cf76:	4013      	ands	r3, r2
 800cf78:	0019      	movs	r1, r3
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	68da      	ldr	r2, [r3, #12]
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4ab8      	ldr	r2, [pc, #736]	; (800d274 <UART_SetConfig+0x348>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d004      	beq.n	800cfa0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	4ab4      	ldr	r2, [pc, #720]	; (800d278 <UART_SetConfig+0x34c>)
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	0019      	movs	r1, r3
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4ab0      	ldr	r2, [pc, #704]	; (800d27c <UART_SetConfig+0x350>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d131      	bne.n	800d024 <UART_SetConfig+0xf8>
 800cfc0:	4baf      	ldr	r3, [pc, #700]	; (800d280 <UART_SetConfig+0x354>)
 800cfc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfc4:	2203      	movs	r2, #3
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d01d      	beq.n	800d008 <UART_SetConfig+0xdc>
 800cfcc:	d823      	bhi.n	800d016 <UART_SetConfig+0xea>
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d00c      	beq.n	800cfec <UART_SetConfig+0xc0>
 800cfd2:	d820      	bhi.n	800d016 <UART_SetConfig+0xea>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <UART_SetConfig+0xb2>
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d00e      	beq.n	800cffa <UART_SetConfig+0xce>
 800cfdc:	e01b      	b.n	800d016 <UART_SetConfig+0xea>
 800cfde:	231b      	movs	r3, #27
 800cfe0:	2218      	movs	r2, #24
 800cfe2:	189b      	adds	r3, r3, r2
 800cfe4:	19db      	adds	r3, r3, r7
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	e0b4      	b.n	800d156 <UART_SetConfig+0x22a>
 800cfec:	231b      	movs	r3, #27
 800cfee:	2218      	movs	r2, #24
 800cff0:	189b      	adds	r3, r3, r2
 800cff2:	19db      	adds	r3, r3, r7
 800cff4:	2202      	movs	r2, #2
 800cff6:	701a      	strb	r2, [r3, #0]
 800cff8:	e0ad      	b.n	800d156 <UART_SetConfig+0x22a>
 800cffa:	231b      	movs	r3, #27
 800cffc:	2218      	movs	r2, #24
 800cffe:	189b      	adds	r3, r3, r2
 800d000:	19db      	adds	r3, r3, r7
 800d002:	2204      	movs	r2, #4
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	e0a6      	b.n	800d156 <UART_SetConfig+0x22a>
 800d008:	231b      	movs	r3, #27
 800d00a:	2218      	movs	r2, #24
 800d00c:	189b      	adds	r3, r3, r2
 800d00e:	19db      	adds	r3, r3, r7
 800d010:	2208      	movs	r2, #8
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e09f      	b.n	800d156 <UART_SetConfig+0x22a>
 800d016:	231b      	movs	r3, #27
 800d018:	2218      	movs	r2, #24
 800d01a:	189b      	adds	r3, r3, r2
 800d01c:	19db      	adds	r3, r3, r7
 800d01e:	2210      	movs	r2, #16
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	e098      	b.n	800d156 <UART_SetConfig+0x22a>
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a96      	ldr	r2, [pc, #600]	; (800d284 <UART_SetConfig+0x358>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d131      	bne.n	800d092 <UART_SetConfig+0x166>
 800d02e:	4b94      	ldr	r3, [pc, #592]	; (800d280 <UART_SetConfig+0x354>)
 800d030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d032:	220c      	movs	r2, #12
 800d034:	4013      	ands	r3, r2
 800d036:	2b0c      	cmp	r3, #12
 800d038:	d01d      	beq.n	800d076 <UART_SetConfig+0x14a>
 800d03a:	d823      	bhi.n	800d084 <UART_SetConfig+0x158>
 800d03c:	2b08      	cmp	r3, #8
 800d03e:	d00c      	beq.n	800d05a <UART_SetConfig+0x12e>
 800d040:	d820      	bhi.n	800d084 <UART_SetConfig+0x158>
 800d042:	2b00      	cmp	r3, #0
 800d044:	d002      	beq.n	800d04c <UART_SetConfig+0x120>
 800d046:	2b04      	cmp	r3, #4
 800d048:	d00e      	beq.n	800d068 <UART_SetConfig+0x13c>
 800d04a:	e01b      	b.n	800d084 <UART_SetConfig+0x158>
 800d04c:	231b      	movs	r3, #27
 800d04e:	2218      	movs	r2, #24
 800d050:	189b      	adds	r3, r3, r2
 800d052:	19db      	adds	r3, r3, r7
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e07d      	b.n	800d156 <UART_SetConfig+0x22a>
 800d05a:	231b      	movs	r3, #27
 800d05c:	2218      	movs	r2, #24
 800d05e:	189b      	adds	r3, r3, r2
 800d060:	19db      	adds	r3, r3, r7
 800d062:	2202      	movs	r2, #2
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	e076      	b.n	800d156 <UART_SetConfig+0x22a>
 800d068:	231b      	movs	r3, #27
 800d06a:	2218      	movs	r2, #24
 800d06c:	189b      	adds	r3, r3, r2
 800d06e:	19db      	adds	r3, r3, r7
 800d070:	2204      	movs	r2, #4
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	e06f      	b.n	800d156 <UART_SetConfig+0x22a>
 800d076:	231b      	movs	r3, #27
 800d078:	2218      	movs	r2, #24
 800d07a:	189b      	adds	r3, r3, r2
 800d07c:	19db      	adds	r3, r3, r7
 800d07e:	2208      	movs	r2, #8
 800d080:	701a      	strb	r2, [r3, #0]
 800d082:	e068      	b.n	800d156 <UART_SetConfig+0x22a>
 800d084:	231b      	movs	r3, #27
 800d086:	2218      	movs	r2, #24
 800d088:	189b      	adds	r3, r3, r2
 800d08a:	19db      	adds	r3, r3, r7
 800d08c:	2210      	movs	r2, #16
 800d08e:	701a      	strb	r2, [r3, #0]
 800d090:	e061      	b.n	800d156 <UART_SetConfig+0x22a>
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a7c      	ldr	r2, [pc, #496]	; (800d288 <UART_SetConfig+0x35c>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d106      	bne.n	800d0aa <UART_SetConfig+0x17e>
 800d09c:	231b      	movs	r3, #27
 800d09e:	2218      	movs	r2, #24
 800d0a0:	189b      	adds	r3, r3, r2
 800d0a2:	19db      	adds	r3, r3, r7
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	e055      	b.n	800d156 <UART_SetConfig+0x22a>
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a77      	ldr	r2, [pc, #476]	; (800d28c <UART_SetConfig+0x360>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d106      	bne.n	800d0c2 <UART_SetConfig+0x196>
 800d0b4:	231b      	movs	r3, #27
 800d0b6:	2218      	movs	r2, #24
 800d0b8:	189b      	adds	r3, r3, r2
 800d0ba:	19db      	adds	r3, r3, r7
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
 800d0c0:	e049      	b.n	800d156 <UART_SetConfig+0x22a>
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a6b      	ldr	r2, [pc, #428]	; (800d274 <UART_SetConfig+0x348>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d13e      	bne.n	800d14a <UART_SetConfig+0x21e>
 800d0cc:	4b6c      	ldr	r3, [pc, #432]	; (800d280 <UART_SetConfig+0x354>)
 800d0ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0d0:	23c0      	movs	r3, #192	; 0xc0
 800d0d2:	011b      	lsls	r3, r3, #4
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	22c0      	movs	r2, #192	; 0xc0
 800d0d8:	0112      	lsls	r2, r2, #4
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d027      	beq.n	800d12e <UART_SetConfig+0x202>
 800d0de:	22c0      	movs	r2, #192	; 0xc0
 800d0e0:	0112      	lsls	r2, r2, #4
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d82a      	bhi.n	800d13c <UART_SetConfig+0x210>
 800d0e6:	2280      	movs	r2, #128	; 0x80
 800d0e8:	0112      	lsls	r2, r2, #4
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d011      	beq.n	800d112 <UART_SetConfig+0x1e6>
 800d0ee:	2280      	movs	r2, #128	; 0x80
 800d0f0:	0112      	lsls	r2, r2, #4
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d822      	bhi.n	800d13c <UART_SetConfig+0x210>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d004      	beq.n	800d104 <UART_SetConfig+0x1d8>
 800d0fa:	2280      	movs	r2, #128	; 0x80
 800d0fc:	00d2      	lsls	r2, r2, #3
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00e      	beq.n	800d120 <UART_SetConfig+0x1f4>
 800d102:	e01b      	b.n	800d13c <UART_SetConfig+0x210>
 800d104:	231b      	movs	r3, #27
 800d106:	2218      	movs	r2, #24
 800d108:	189b      	adds	r3, r3, r2
 800d10a:	19db      	adds	r3, r3, r7
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]
 800d110:	e021      	b.n	800d156 <UART_SetConfig+0x22a>
 800d112:	231b      	movs	r3, #27
 800d114:	2218      	movs	r2, #24
 800d116:	189b      	adds	r3, r3, r2
 800d118:	19db      	adds	r3, r3, r7
 800d11a:	2202      	movs	r2, #2
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	e01a      	b.n	800d156 <UART_SetConfig+0x22a>
 800d120:	231b      	movs	r3, #27
 800d122:	2218      	movs	r2, #24
 800d124:	189b      	adds	r3, r3, r2
 800d126:	19db      	adds	r3, r3, r7
 800d128:	2204      	movs	r2, #4
 800d12a:	701a      	strb	r2, [r3, #0]
 800d12c:	e013      	b.n	800d156 <UART_SetConfig+0x22a>
 800d12e:	231b      	movs	r3, #27
 800d130:	2218      	movs	r2, #24
 800d132:	189b      	adds	r3, r3, r2
 800d134:	19db      	adds	r3, r3, r7
 800d136:	2208      	movs	r2, #8
 800d138:	701a      	strb	r2, [r3, #0]
 800d13a:	e00c      	b.n	800d156 <UART_SetConfig+0x22a>
 800d13c:	231b      	movs	r3, #27
 800d13e:	2218      	movs	r2, #24
 800d140:	189b      	adds	r3, r3, r2
 800d142:	19db      	adds	r3, r3, r7
 800d144:	2210      	movs	r2, #16
 800d146:	701a      	strb	r2, [r3, #0]
 800d148:	e005      	b.n	800d156 <UART_SetConfig+0x22a>
 800d14a:	231b      	movs	r3, #27
 800d14c:	2218      	movs	r2, #24
 800d14e:	189b      	adds	r3, r3, r2
 800d150:	19db      	adds	r3, r3, r7
 800d152:	2210      	movs	r2, #16
 800d154:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a46      	ldr	r2, [pc, #280]	; (800d274 <UART_SetConfig+0x348>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d000      	beq.n	800d162 <UART_SetConfig+0x236>
 800d160:	e09a      	b.n	800d298 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d162:	231b      	movs	r3, #27
 800d164:	2218      	movs	r2, #24
 800d166:	189b      	adds	r3, r3, r2
 800d168:	19db      	adds	r3, r3, r7
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	2b08      	cmp	r3, #8
 800d16e:	d01d      	beq.n	800d1ac <UART_SetConfig+0x280>
 800d170:	dc20      	bgt.n	800d1b4 <UART_SetConfig+0x288>
 800d172:	2b04      	cmp	r3, #4
 800d174:	d015      	beq.n	800d1a2 <UART_SetConfig+0x276>
 800d176:	dc1d      	bgt.n	800d1b4 <UART_SetConfig+0x288>
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <UART_SetConfig+0x256>
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d005      	beq.n	800d18c <UART_SetConfig+0x260>
 800d180:	e018      	b.n	800d1b4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d182:	f7ff f853 	bl	800c22c <HAL_RCC_GetPCLK1Freq>
 800d186:	0003      	movs	r3, r0
 800d188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d18a:	e01c      	b.n	800d1c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d18c:	4b3c      	ldr	r3, [pc, #240]	; (800d280 <UART_SetConfig+0x354>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2210      	movs	r2, #16
 800d192:	4013      	ands	r3, r2
 800d194:	d002      	beq.n	800d19c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d196:	4b3e      	ldr	r3, [pc, #248]	; (800d290 <UART_SetConfig+0x364>)
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d19a:	e014      	b.n	800d1c6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800d19c:	4b3d      	ldr	r3, [pc, #244]	; (800d294 <UART_SetConfig+0x368>)
 800d19e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1a0:	e011      	b.n	800d1c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1a2:	f7fe ff93 	bl	800c0cc <HAL_RCC_GetSysClockFreq>
 800d1a6:	0003      	movs	r3, r0
 800d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1aa:	e00c      	b.n	800d1c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ac:	2380      	movs	r3, #128	; 0x80
 800d1ae:	021b      	lsls	r3, r3, #8
 800d1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1b2:	e008      	b.n	800d1c6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d1b8:	231a      	movs	r3, #26
 800d1ba:	2218      	movs	r2, #24
 800d1bc:	189b      	adds	r3, r3, r2
 800d1be:	19db      	adds	r3, r3, r7
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	701a      	strb	r2, [r3, #0]
        break;
 800d1c4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d100      	bne.n	800d1ce <UART_SetConfig+0x2a2>
 800d1cc:	e134      	b.n	800d438 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	0013      	movs	r3, r2
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	189b      	adds	r3, r3, r2
 800d1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d305      	bcc.n	800d1ea <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d906      	bls.n	800d1f8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800d1ea:	231a      	movs	r3, #26
 800d1ec:	2218      	movs	r2, #24
 800d1ee:	189b      	adds	r3, r3, r2
 800d1f0:	19db      	adds	r3, r3, r7
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	701a      	strb	r2, [r3, #0]
 800d1f6:	e11f      	b.n	800d438 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]
 800d200:	6939      	ldr	r1, [r7, #16]
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	000b      	movs	r3, r1
 800d206:	0e1b      	lsrs	r3, r3, #24
 800d208:	0010      	movs	r0, r2
 800d20a:	0205      	lsls	r5, r0, #8
 800d20c:	431d      	orrs	r5, r3
 800d20e:	000b      	movs	r3, r1
 800d210:	021c      	lsls	r4, r3, #8
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	085b      	lsrs	r3, r3, #1
 800d218:	60bb      	str	r3, [r7, #8]
 800d21a:	2300      	movs	r3, #0
 800d21c:	60fb      	str	r3, [r7, #12]
 800d21e:	68b8      	ldr	r0, [r7, #8]
 800d220:	68f9      	ldr	r1, [r7, #12]
 800d222:	1900      	adds	r0, r0, r4
 800d224:	4169      	adcs	r1, r5
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	603b      	str	r3, [r7, #0]
 800d22c:	2300      	movs	r3, #0
 800d22e:	607b      	str	r3, [r7, #4]
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f7f3 f922 	bl	800047c <__aeabi_uldivmod>
 800d238:	0002      	movs	r2, r0
 800d23a:	000b      	movs	r3, r1
 800d23c:	0013      	movs	r3, r2
 800d23e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d242:	23c0      	movs	r3, #192	; 0xc0
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	429a      	cmp	r2, r3
 800d248:	d309      	bcc.n	800d25e <UART_SetConfig+0x332>
 800d24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d24c:	2380      	movs	r3, #128	; 0x80
 800d24e:	035b      	lsls	r3, r3, #13
 800d250:	429a      	cmp	r2, r3
 800d252:	d204      	bcs.n	800d25e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d25a:	60da      	str	r2, [r3, #12]
 800d25c:	e0ec      	b.n	800d438 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800d25e:	231a      	movs	r3, #26
 800d260:	2218      	movs	r2, #24
 800d262:	189b      	adds	r3, r3, r2
 800d264:	19db      	adds	r3, r3, r7
 800d266:	2201      	movs	r2, #1
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	e0e5      	b.n	800d438 <UART_SetConfig+0x50c>
 800d26c:	efff69f3 	.word	0xefff69f3
 800d270:	ffffcfff 	.word	0xffffcfff
 800d274:	40004800 	.word	0x40004800
 800d278:	fffff4ff 	.word	0xfffff4ff
 800d27c:	40013800 	.word	0x40013800
 800d280:	40021000 	.word	0x40021000
 800d284:	40004400 	.word	0x40004400
 800d288:	40004c00 	.word	0x40004c00
 800d28c:	40005000 	.word	0x40005000
 800d290:	003d0900 	.word	0x003d0900
 800d294:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	2380      	movs	r3, #128	; 0x80
 800d29e:	021b      	lsls	r3, r3, #8
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d000      	beq.n	800d2a6 <UART_SetConfig+0x37a>
 800d2a4:	e071      	b.n	800d38a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800d2a6:	231b      	movs	r3, #27
 800d2a8:	2218      	movs	r2, #24
 800d2aa:	189b      	adds	r3, r3, r2
 800d2ac:	19db      	adds	r3, r3, r7
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b08      	cmp	r3, #8
 800d2b2:	d822      	bhi.n	800d2fa <UART_SetConfig+0x3ce>
 800d2b4:	009a      	lsls	r2, r3, #2
 800d2b6:	4b68      	ldr	r3, [pc, #416]	; (800d458 <UART_SetConfig+0x52c>)
 800d2b8:	18d3      	adds	r3, r2, r3
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2be:	f7fe ffb5 	bl	800c22c <HAL_RCC_GetPCLK1Freq>
 800d2c2:	0003      	movs	r3, r0
 800d2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2c6:	e021      	b.n	800d30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2c8:	f7fe ffc6 	bl	800c258 <HAL_RCC_GetPCLK2Freq>
 800d2cc:	0003      	movs	r3, r0
 800d2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2d0:	e01c      	b.n	800d30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2d2:	4b62      	ldr	r3, [pc, #392]	; (800d45c <UART_SetConfig+0x530>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2210      	movs	r2, #16
 800d2d8:	4013      	ands	r3, r2
 800d2da:	d002      	beq.n	800d2e2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d2dc:	4b60      	ldr	r3, [pc, #384]	; (800d460 <UART_SetConfig+0x534>)
 800d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2e0:	e014      	b.n	800d30c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800d2e2:	4b60      	ldr	r3, [pc, #384]	; (800d464 <UART_SetConfig+0x538>)
 800d2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2e6:	e011      	b.n	800d30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2e8:	f7fe fef0 	bl	800c0cc <HAL_RCC_GetSysClockFreq>
 800d2ec:	0003      	movs	r3, r0
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f0:	e00c      	b.n	800d30c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2f2:	2380      	movs	r3, #128	; 0x80
 800d2f4:	021b      	lsls	r3, r3, #8
 800d2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f8:	e008      	b.n	800d30c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2fe:	231a      	movs	r3, #26
 800d300:	2218      	movs	r2, #24
 800d302:	189b      	adds	r3, r3, r2
 800d304:	19db      	adds	r3, r3, r7
 800d306:	2201      	movs	r2, #1
 800d308:	701a      	strb	r2, [r3, #0]
        break;
 800d30a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d100      	bne.n	800d314 <UART_SetConfig+0x3e8>
 800d312:	e091      	b.n	800d438 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	005a      	lsls	r2, r3, #1
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	085b      	lsrs	r3, r3, #1
 800d31e:	18d2      	adds	r2, r2, r3
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	0019      	movs	r1, r3
 800d326:	0010      	movs	r0, r2
 800d328:	f7f2 fef8 	bl	800011c <__udivsi3>
 800d32c:	0003      	movs	r3, r0
 800d32e:	b29b      	uxth	r3, r3
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	2b0f      	cmp	r3, #15
 800d336:	d921      	bls.n	800d37c <UART_SetConfig+0x450>
 800d338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d33a:	2380      	movs	r3, #128	; 0x80
 800d33c:	025b      	lsls	r3, r3, #9
 800d33e:	429a      	cmp	r2, r3
 800d340:	d21c      	bcs.n	800d37c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	b29a      	uxth	r2, r3
 800d346:	200e      	movs	r0, #14
 800d348:	2418      	movs	r4, #24
 800d34a:	1903      	adds	r3, r0, r4
 800d34c:	19db      	adds	r3, r3, r7
 800d34e:	210f      	movs	r1, #15
 800d350:	438a      	bics	r2, r1
 800d352:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	085b      	lsrs	r3, r3, #1
 800d358:	b29b      	uxth	r3, r3
 800d35a:	2207      	movs	r2, #7
 800d35c:	4013      	ands	r3, r2
 800d35e:	b299      	uxth	r1, r3
 800d360:	1903      	adds	r3, r0, r4
 800d362:	19db      	adds	r3, r3, r7
 800d364:	1902      	adds	r2, r0, r4
 800d366:	19d2      	adds	r2, r2, r7
 800d368:	8812      	ldrh	r2, [r2, #0]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	1902      	adds	r2, r0, r4
 800d374:	19d2      	adds	r2, r2, r7
 800d376:	8812      	ldrh	r2, [r2, #0]
 800d378:	60da      	str	r2, [r3, #12]
 800d37a:	e05d      	b.n	800d438 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800d37c:	231a      	movs	r3, #26
 800d37e:	2218      	movs	r2, #24
 800d380:	189b      	adds	r3, r3, r2
 800d382:	19db      	adds	r3, r3, r7
 800d384:	2201      	movs	r2, #1
 800d386:	701a      	strb	r2, [r3, #0]
 800d388:	e056      	b.n	800d438 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d38a:	231b      	movs	r3, #27
 800d38c:	2218      	movs	r2, #24
 800d38e:	189b      	adds	r3, r3, r2
 800d390:	19db      	adds	r3, r3, r7
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b08      	cmp	r3, #8
 800d396:	d822      	bhi.n	800d3de <UART_SetConfig+0x4b2>
 800d398:	009a      	lsls	r2, r3, #2
 800d39a:	4b33      	ldr	r3, [pc, #204]	; (800d468 <UART_SetConfig+0x53c>)
 800d39c:	18d3      	adds	r3, r2, r3
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3a2:	f7fe ff43 	bl	800c22c <HAL_RCC_GetPCLK1Freq>
 800d3a6:	0003      	movs	r3, r0
 800d3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3aa:	e021      	b.n	800d3f0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3ac:	f7fe ff54 	bl	800c258 <HAL_RCC_GetPCLK2Freq>
 800d3b0:	0003      	movs	r3, r0
 800d3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3b4:	e01c      	b.n	800d3f0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3b6:	4b29      	ldr	r3, [pc, #164]	; (800d45c <UART_SetConfig+0x530>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2210      	movs	r2, #16
 800d3bc:	4013      	ands	r3, r2
 800d3be:	d002      	beq.n	800d3c6 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d3c0:	4b27      	ldr	r3, [pc, #156]	; (800d460 <UART_SetConfig+0x534>)
 800d3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3c4:	e014      	b.n	800d3f0 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800d3c6:	4b27      	ldr	r3, [pc, #156]	; (800d464 <UART_SetConfig+0x538>)
 800d3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3ca:	e011      	b.n	800d3f0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3cc:	f7fe fe7e 	bl	800c0cc <HAL_RCC_GetSysClockFreq>
 800d3d0:	0003      	movs	r3, r0
 800d3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3d4:	e00c      	b.n	800d3f0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3d6:	2380      	movs	r3, #128	; 0x80
 800d3d8:	021b      	lsls	r3, r3, #8
 800d3da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3dc:	e008      	b.n	800d3f0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d3e2:	231a      	movs	r3, #26
 800d3e4:	2218      	movs	r2, #24
 800d3e6:	189b      	adds	r3, r3, r2
 800d3e8:	19db      	adds	r3, r3, r7
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	701a      	strb	r2, [r3, #0]
        break;
 800d3ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d020      	beq.n	800d438 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	085a      	lsrs	r2, r3, #1
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	18d2      	adds	r2, r2, r3
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	0019      	movs	r1, r3
 800d406:	0010      	movs	r0, r2
 800d408:	f7f2 fe88 	bl	800011c <__udivsi3>
 800d40c:	0003      	movs	r3, r0
 800d40e:	b29b      	uxth	r3, r3
 800d410:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	2b0f      	cmp	r3, #15
 800d416:	d909      	bls.n	800d42c <UART_SetConfig+0x500>
 800d418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d41a:	2380      	movs	r3, #128	; 0x80
 800d41c:	025b      	lsls	r3, r3, #9
 800d41e:	429a      	cmp	r2, r3
 800d420:	d204      	bcs.n	800d42c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d428:	60da      	str	r2, [r3, #12]
 800d42a:	e005      	b.n	800d438 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800d42c:	231a      	movs	r3, #26
 800d42e:	2218      	movs	r2, #24
 800d430:	189b      	adds	r3, r3, r2
 800d432:	19db      	adds	r3, r3, r7
 800d434:	2201      	movs	r2, #1
 800d436:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	2200      	movs	r2, #0
 800d43c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	2200      	movs	r2, #0
 800d442:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d444:	231a      	movs	r3, #26
 800d446:	2218      	movs	r2, #24
 800d448:	189b      	adds	r3, r3, r2
 800d44a:	19db      	adds	r3, r3, r7
 800d44c:	781b      	ldrb	r3, [r3, #0]
}
 800d44e:	0018      	movs	r0, r3
 800d450:	46bd      	mov	sp, r7
 800d452:	b00e      	add	sp, #56	; 0x38
 800d454:	bdb0      	pop	{r4, r5, r7, pc}
 800d456:	46c0      	nop			; (mov r8, r8)
 800d458:	0801592c 	.word	0x0801592c
 800d45c:	40021000 	.word	0x40021000
 800d460:	003d0900 	.word	0x003d0900
 800d464:	00f42400 	.word	0x00f42400
 800d468:	08015950 	.word	0x08015950

0800d46c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	2201      	movs	r2, #1
 800d47a:	4013      	ands	r3, r2
 800d47c:	d00b      	beq.n	800d496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	4a4a      	ldr	r2, [pc, #296]	; (800d5b0 <UART_AdvFeatureConfig+0x144>)
 800d486:	4013      	ands	r3, r2
 800d488:	0019      	movs	r1, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	430a      	orrs	r2, r1
 800d494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49a:	2202      	movs	r2, #2
 800d49c:	4013      	ands	r3, r2
 800d49e:	d00b      	beq.n	800d4b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	4a43      	ldr	r2, [pc, #268]	; (800d5b4 <UART_AdvFeatureConfig+0x148>)
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	0019      	movs	r1, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	430a      	orrs	r2, r1
 800d4b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4bc:	2204      	movs	r2, #4
 800d4be:	4013      	ands	r3, r2
 800d4c0:	d00b      	beq.n	800d4da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4a3b      	ldr	r2, [pc, #236]	; (800d5b8 <UART_AdvFeatureConfig+0x14c>)
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	0019      	movs	r1, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	430a      	orrs	r2, r1
 800d4d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4de:	2208      	movs	r2, #8
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	d00b      	beq.n	800d4fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	4a34      	ldr	r2, [pc, #208]	; (800d5bc <UART_AdvFeatureConfig+0x150>)
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	0019      	movs	r1, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	430a      	orrs	r2, r1
 800d4fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	2210      	movs	r2, #16
 800d502:	4013      	ands	r3, r2
 800d504:	d00b      	beq.n	800d51e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	4a2c      	ldr	r2, [pc, #176]	; (800d5c0 <UART_AdvFeatureConfig+0x154>)
 800d50e:	4013      	ands	r3, r2
 800d510:	0019      	movs	r1, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	430a      	orrs	r2, r1
 800d51c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d522:	2220      	movs	r2, #32
 800d524:	4013      	ands	r3, r2
 800d526:	d00b      	beq.n	800d540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	4a25      	ldr	r2, [pc, #148]	; (800d5c4 <UART_AdvFeatureConfig+0x158>)
 800d530:	4013      	ands	r3, r2
 800d532:	0019      	movs	r1, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	430a      	orrs	r2, r1
 800d53e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d544:	2240      	movs	r2, #64	; 0x40
 800d546:	4013      	ands	r3, r2
 800d548:	d01d      	beq.n	800d586 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	4a1d      	ldr	r2, [pc, #116]	; (800d5c8 <UART_AdvFeatureConfig+0x15c>)
 800d552:	4013      	ands	r3, r2
 800d554:	0019      	movs	r1, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	430a      	orrs	r2, r1
 800d560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d566:	2380      	movs	r3, #128	; 0x80
 800d568:	035b      	lsls	r3, r3, #13
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d10b      	bne.n	800d586 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	4a15      	ldr	r2, [pc, #84]	; (800d5cc <UART_AdvFeatureConfig+0x160>)
 800d576:	4013      	ands	r3, r2
 800d578:	0019      	movs	r1, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	430a      	orrs	r2, r1
 800d584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58a:	2280      	movs	r2, #128	; 0x80
 800d58c:	4013      	ands	r3, r2
 800d58e:	d00b      	beq.n	800d5a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	4a0e      	ldr	r2, [pc, #56]	; (800d5d0 <UART_AdvFeatureConfig+0x164>)
 800d598:	4013      	ands	r3, r2
 800d59a:	0019      	movs	r1, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	605a      	str	r2, [r3, #4]
  }
}
 800d5a8:	46c0      	nop			; (mov r8, r8)
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	b002      	add	sp, #8
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	fffdffff 	.word	0xfffdffff
 800d5b4:	fffeffff 	.word	0xfffeffff
 800d5b8:	fffbffff 	.word	0xfffbffff
 800d5bc:	ffff7fff 	.word	0xffff7fff
 800d5c0:	ffffefff 	.word	0xffffefff
 800d5c4:	ffffdfff 	.word	0xffffdfff
 800d5c8:	ffefffff 	.word	0xffefffff
 800d5cc:	ff9fffff 	.word	0xff9fffff
 800d5d0:	fff7ffff 	.word	0xfff7ffff

0800d5d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af02      	add	r7, sp, #8
 800d5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2280      	movs	r2, #128	; 0x80
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5e4:	f7fc fb92 	bl	8009d0c <HAL_GetTick>
 800d5e8:	0003      	movs	r3, r0
 800d5ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2208      	movs	r2, #8
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	2b08      	cmp	r3, #8
 800d5f8:	d10c      	bne.n	800d614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2280      	movs	r2, #128	; 0x80
 800d5fe:	0391      	lsls	r1, r2, #14
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	4a17      	ldr	r2, [pc, #92]	; (800d660 <UART_CheckIdleState+0x8c>)
 800d604:	9200      	str	r2, [sp, #0]
 800d606:	2200      	movs	r2, #0
 800d608:	f000 f82c 	bl	800d664 <UART_WaitOnFlagUntilTimeout>
 800d60c:	1e03      	subs	r3, r0, #0
 800d60e:	d001      	beq.n	800d614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d610:	2303      	movs	r3, #3
 800d612:	e021      	b.n	800d658 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2204      	movs	r2, #4
 800d61c:	4013      	ands	r3, r2
 800d61e:	2b04      	cmp	r3, #4
 800d620:	d10c      	bne.n	800d63c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2280      	movs	r2, #128	; 0x80
 800d626:	03d1      	lsls	r1, r2, #15
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	4a0d      	ldr	r2, [pc, #52]	; (800d660 <UART_CheckIdleState+0x8c>)
 800d62c:	9200      	str	r2, [sp, #0]
 800d62e:	2200      	movs	r2, #0
 800d630:	f000 f818 	bl	800d664 <UART_WaitOnFlagUntilTimeout>
 800d634:	1e03      	subs	r3, r0, #0
 800d636:	d001      	beq.n	800d63c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d638:	2303      	movs	r3, #3
 800d63a:	e00d      	b.n	800d658 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2220      	movs	r2, #32
 800d640:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2220      	movs	r2, #32
 800d646:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2274      	movs	r2, #116	; 0x74
 800d652:	2100      	movs	r1, #0
 800d654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	0018      	movs	r0, r3
 800d65a:	46bd      	mov	sp, r7
 800d65c:	b004      	add	sp, #16
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	01ffffff 	.word	0x01ffffff

0800d664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b094      	sub	sp, #80	; 0x50
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	1dfb      	adds	r3, r7, #7
 800d672:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d674:	e0a3      	b.n	800d7be <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d678:	3301      	adds	r3, #1
 800d67a:	d100      	bne.n	800d67e <UART_WaitOnFlagUntilTimeout+0x1a>
 800d67c:	e09f      	b.n	800d7be <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d67e:	f7fc fb45 	bl	8009d0c <HAL_GetTick>
 800d682:	0002      	movs	r2, r0
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d302      	bcc.n	800d694 <UART_WaitOnFlagUntilTimeout+0x30>
 800d68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d690:	2b00      	cmp	r3, #0
 800d692:	d13d      	bne.n	800d710 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d694:	f3ef 8310 	mrs	r3, PRIMASK
 800d698:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d69c:	647b      	str	r3, [r7, #68]	; 0x44
 800d69e:	2301      	movs	r3, #1
 800d6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	f383 8810 	msr	PRIMASK, r3
}
 800d6a8:	46c0      	nop			; (mov r8, r8)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	494c      	ldr	r1, [pc, #304]	; (800d7e8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800d6b6:	400a      	ands	r2, r1
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6bc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c0:	f383 8810 	msr	PRIMASK, r3
}
 800d6c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6ce:	643b      	str	r3, [r7, #64]	; 0x40
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	f383 8810 	msr	PRIMASK, r3
}
 800d6da:	46c0      	nop			; (mov r8, r8)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	689a      	ldr	r2, [r3, #8]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	438a      	bics	r2, r1
 800d6ea:	609a      	str	r2, [r3, #8]
 800d6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f2:	f383 8810 	msr	PRIMASK, r3
}
 800d6f6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2220      	movs	r2, #32
 800d6fc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2220      	movs	r2, #32
 800d702:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2274      	movs	r2, #116	; 0x74
 800d708:	2100      	movs	r1, #0
 800d70a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e067      	b.n	800d7e0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2204      	movs	r2, #4
 800d718:	4013      	ands	r3, r2
 800d71a:	d050      	beq.n	800d7be <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	69da      	ldr	r2, [r3, #28]
 800d722:	2380      	movs	r3, #128	; 0x80
 800d724:	011b      	lsls	r3, r3, #4
 800d726:	401a      	ands	r2, r3
 800d728:	2380      	movs	r3, #128	; 0x80
 800d72a:	011b      	lsls	r3, r3, #4
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d146      	bne.n	800d7be <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2280      	movs	r2, #128	; 0x80
 800d736:	0112      	lsls	r2, r2, #4
 800d738:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d73a:	f3ef 8310 	mrs	r3, PRIMASK
 800d73e:	613b      	str	r3, [r7, #16]
  return(result);
 800d740:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d742:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d744:	2301      	movs	r3, #1
 800d746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	f383 8810 	msr	PRIMASK, r3
}
 800d74e:	46c0      	nop			; (mov r8, r8)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4923      	ldr	r1, [pc, #140]	; (800d7e8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800d75c:	400a      	ands	r2, r1
 800d75e:	601a      	str	r2, [r3, #0]
 800d760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d762:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	f383 8810 	msr	PRIMASK, r3
}
 800d76a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d76c:	f3ef 8310 	mrs	r3, PRIMASK
 800d770:	61fb      	str	r3, [r7, #28]
  return(result);
 800d772:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d774:	64bb      	str	r3, [r7, #72]	; 0x48
 800d776:	2301      	movs	r3, #1
 800d778:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	f383 8810 	msr	PRIMASK, r3
}
 800d780:	46c0      	nop			; (mov r8, r8)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	689a      	ldr	r2, [r3, #8]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2101      	movs	r1, #1
 800d78e:	438a      	bics	r2, r1
 800d790:	609a      	str	r2, [r3, #8]
 800d792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d794:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	f383 8810 	msr	PRIMASK, r3
}
 800d79c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2220      	movs	r2, #32
 800d7a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2280      	movs	r2, #128	; 0x80
 800d7ae:	2120      	movs	r1, #32
 800d7b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2274      	movs	r2, #116	; 0x74
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d7ba:	2303      	movs	r3, #3
 800d7bc:	e010      	b.n	800d7e0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	425a      	negs	r2, r3
 800d7ce:	4153      	adcs	r3, r2
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	001a      	movs	r2, r3
 800d7d4:	1dfb      	adds	r3, r7, #7
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d100      	bne.n	800d7de <UART_WaitOnFlagUntilTimeout+0x17a>
 800d7dc:	e74b      	b.n	800d676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	0018      	movs	r0, r3
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	b014      	add	sp, #80	; 0x50
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	fffffe5f 	.word	0xfffffe5f

0800d7ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b090      	sub	sp, #64	; 0x40
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	1dbb      	adds	r3, r7, #6
 800d7f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	1dba      	adds	r2, r7, #6
 800d804:	2158      	movs	r1, #88	; 0x58
 800d806:	8812      	ldrh	r2, [r2, #0]
 800d808:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2280      	movs	r2, #128	; 0x80
 800d80e:	2100      	movs	r1, #0
 800d810:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2222      	movs	r2, #34	; 0x22
 800d816:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d02b      	beq.n	800d878 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d824:	4a3f      	ldr	r2, [pc, #252]	; (800d924 <UART_Start_Receive_DMA+0x138>)
 800d826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d82c:	4a3e      	ldr	r2, [pc, #248]	; (800d928 <UART_Start_Receive_DMA+0x13c>)
 800d82e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d834:	4a3d      	ldr	r2, [pc, #244]	; (800d92c <UART_Start_Receive_DMA+0x140>)
 800d836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d83c:	2200      	movs	r2, #0
 800d83e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3324      	adds	r3, #36	; 0x24
 800d84a:	0019      	movs	r1, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d850:	001a      	movs	r2, r3
 800d852:	1dbb      	adds	r3, r7, #6
 800d854:	881b      	ldrh	r3, [r3, #0]
 800d856:	f7fc fcb1 	bl	800a1bc <HAL_DMA_Start_IT>
 800d85a:	1e03      	subs	r3, r0, #0
 800d85c:	d00c      	beq.n	800d878 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2280      	movs	r2, #128	; 0x80
 800d862:	2110      	movs	r1, #16
 800d864:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2274      	movs	r2, #116	; 0x74
 800d86a:	2100      	movs	r1, #0
 800d86c:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2220      	movs	r2, #32
 800d872:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e050      	b.n	800d91a <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2274      	movs	r2, #116	; 0x74
 800d87c:	2100      	movs	r1, #0
 800d87e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d880:	f3ef 8310 	mrs	r3, PRIMASK
 800d884:	613b      	str	r3, [r7, #16]
  return(result);
 800d886:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d88a:	2301      	movs	r3, #1
 800d88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f383 8810 	msr	PRIMASK, r3
}
 800d894:	46c0      	nop			; (mov r8, r8)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2180      	movs	r1, #128	; 0x80
 800d8a2:	0049      	lsls	r1, r1, #1
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	f383 8810 	msr	PRIMASK, r3
}
 800d8b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d8b8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d8ba:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8be:	2301      	movs	r3, #1
 800d8c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	f383 8810 	msr	PRIMASK, r3
}
 800d8c8:	46c0      	nop			; (mov r8, r8)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689a      	ldr	r2, [r3, #8]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2101      	movs	r1, #1
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	609a      	str	r2, [r3, #8]
 800d8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	f383 8810 	msr	PRIMASK, r3
}
 800d8e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d8ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	f383 8810 	msr	PRIMASK, r3
}
 800d8fa:	46c0      	nop			; (mov r8, r8)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	689a      	ldr	r2, [r3, #8]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2140      	movs	r1, #64	; 0x40
 800d908:	430a      	orrs	r2, r1
 800d90a:	609a      	str	r2, [r3, #8]
 800d90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d90e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	f383 8810 	msr	PRIMASK, r3
}
 800d916:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	0018      	movs	r0, r3
 800d91c:	46bd      	mov	sp, r7
 800d91e:	b010      	add	sp, #64	; 0x40
 800d920:	bd80      	pop	{r7, pc}
 800d922:	46c0      	nop			; (mov r8, r8)
 800d924:	0800da3d 	.word	0x0800da3d
 800d928:	0800db65 	.word	0x0800db65
 800d92c:	0800dba1 	.word	0x0800dba1

0800d930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d938:	f3ef 8310 	mrs	r3, PRIMASK
 800d93c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d93e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d940:	617b      	str	r3, [r7, #20]
 800d942:	2301      	movs	r3, #1
 800d944:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f383 8810 	msr	PRIMASK, r3
}
 800d94c:	46c0      	nop			; (mov r8, r8)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	21c0      	movs	r1, #192	; 0xc0
 800d95a:	438a      	bics	r2, r1
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f383 8810 	msr	PRIMASK, r3
}
 800d968:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2220      	movs	r2, #32
 800d96e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800d970:	46c0      	nop			; (mov r8, r8)
 800d972:	46bd      	mov	sp, r7
 800d974:	b006      	add	sp, #24
 800d976:	bd80      	pop	{r7, pc}

0800d978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08e      	sub	sp, #56	; 0x38
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d980:	f3ef 8310 	mrs	r3, PRIMASK
 800d984:	617b      	str	r3, [r7, #20]
  return(result);
 800d986:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d988:	637b      	str	r3, [r7, #52]	; 0x34
 800d98a:	2301      	movs	r3, #1
 800d98c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	f383 8810 	msr	PRIMASK, r3
}
 800d994:	46c0      	nop			; (mov r8, r8)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4925      	ldr	r1, [pc, #148]	; (800da38 <UART_EndRxTransfer+0xc0>)
 800d9a2:	400a      	ands	r2, r1
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f383 8810 	msr	PRIMASK, r3
}
 800d9b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b6:	623b      	str	r3, [r7, #32]
  return(result);
 800d9b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9ba:	633b      	str	r3, [r7, #48]	; 0x30
 800d9bc:	2301      	movs	r3, #1
 800d9be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	f383 8810 	msr	PRIMASK, r3
}
 800d9c6:	46c0      	nop			; (mov r8, r8)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	689a      	ldr	r2, [r3, #8]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	438a      	bics	r2, r1
 800d9d6:	609a      	str	r2, [r3, #8]
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	f383 8810 	msr	PRIMASK, r3
}
 800d9e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d118      	bne.n	800da1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d9f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f383 8810 	msr	PRIMASK, r3
}
 800da00:	46c0      	nop			; (mov r8, r8)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2110      	movs	r1, #16
 800da0e:	438a      	bics	r2, r1
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	f383 8810 	msr	PRIMASK, r3
}
 800da1c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2220      	movs	r2, #32
 800da22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800da30:	46c0      	nop			; (mov r8, r8)
 800da32:	46bd      	mov	sp, r7
 800da34:	b00e      	add	sp, #56	; 0x38
 800da36:	bd80      	pop	{r7, pc}
 800da38:	fffffedf 	.word	0xfffffedf

0800da3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b094      	sub	sp, #80	; 0x50
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da48:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2220      	movs	r2, #32
 800da52:	4013      	ands	r3, r2
 800da54:	d16e      	bne.n	800db34 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800da56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da58:	225a      	movs	r2, #90	; 0x5a
 800da5a:	2100      	movs	r1, #0
 800da5c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da5e:	f3ef 8310 	mrs	r3, PRIMASK
 800da62:	61bb      	str	r3, [r7, #24]
  return(result);
 800da64:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da66:	64bb      	str	r3, [r7, #72]	; 0x48
 800da68:	2301      	movs	r3, #1
 800da6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	f383 8810 	msr	PRIMASK, r3
}
 800da72:	46c0      	nop			; (mov r8, r8)
 800da74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4938      	ldr	r1, [pc, #224]	; (800db60 <UART_DMAReceiveCplt+0x124>)
 800da80:	400a      	ands	r2, r1
 800da82:	601a      	str	r2, [r3, #0]
 800da84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	f383 8810 	msr	PRIMASK, r3
}
 800da8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da90:	f3ef 8310 	mrs	r3, PRIMASK
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da98:	647b      	str	r3, [r7, #68]	; 0x44
 800da9a:	2301      	movs	r3, #1
 800da9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	f383 8810 	msr	PRIMASK, r3
}
 800daa4:	46c0      	nop			; (mov r8, r8)
 800daa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	689a      	ldr	r2, [r3, #8]
 800daac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2101      	movs	r1, #1
 800dab2:	438a      	bics	r2, r1
 800dab4:	609a      	str	r2, [r3, #8]
 800dab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabc:	f383 8810 	msr	PRIMASK, r3
}
 800dac0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac2:	f3ef 8310 	mrs	r3, PRIMASK
 800dac6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800daca:	643b      	str	r3, [r7, #64]	; 0x40
 800dacc:	2301      	movs	r3, #1
 800dace:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad2:	f383 8810 	msr	PRIMASK, r3
}
 800dad6:	46c0      	nop			; (mov r8, r8)
 800dad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	689a      	ldr	r2, [r3, #8]
 800dade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2140      	movs	r1, #64	; 0x40
 800dae4:	438a      	bics	r2, r1
 800dae6:	609a      	str	r2, [r3, #8]
 800dae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	f383 8810 	msr	PRIMASK, r3
}
 800daf2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800daf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf6:	2220      	movs	r2, #32
 800daf8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dafc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d118      	bne.n	800db34 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db02:	f3ef 8310 	mrs	r3, PRIMASK
 800db06:	60fb      	str	r3, [r7, #12]
  return(result);
 800db08:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db0c:	2301      	movs	r3, #1
 800db0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f383 8810 	msr	PRIMASK, r3
}
 800db16:	46c0      	nop			; (mov r8, r8)
 800db18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2110      	movs	r1, #16
 800db24:	438a      	bics	r2, r1
 800db26:	601a      	str	r2, [r3, #0]
 800db28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f383 8810 	msr	PRIMASK, r3
}
 800db32:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d108      	bne.n	800db4e <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db3e:	2258      	movs	r2, #88	; 0x58
 800db40:	5a9a      	ldrh	r2, [r3, r2]
 800db42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db44:	0011      	movs	r1, r2
 800db46:	0018      	movs	r0, r3
 800db48:	f7ff f9e4 	bl	800cf14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db4c:	e003      	b.n	800db56 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800db4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db50:	0018      	movs	r0, r3
 800db52:	f7ff f9c7 	bl	800cee4 <HAL_UART_RxCpltCallback>
}
 800db56:	46c0      	nop			; (mov r8, r8)
 800db58:	46bd      	mov	sp, r7
 800db5a:	b014      	add	sp, #80	; 0x50
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	46c0      	nop			; (mov r8, r8)
 800db60:	fffffeff 	.word	0xfffffeff

0800db64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db76:	2b01      	cmp	r3, #1
 800db78:	d10a      	bne.n	800db90 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2258      	movs	r2, #88	; 0x58
 800db7e:	5a9b      	ldrh	r3, [r3, r2]
 800db80:	085b      	lsrs	r3, r3, #1
 800db82:	b29a      	uxth	r2, r3
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	0011      	movs	r1, r2
 800db88:	0018      	movs	r0, r3
 800db8a:	f7ff f9c3 	bl	800cf14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db8e:	e003      	b.n	800db98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	0018      	movs	r0, r3
 800db94:	f7ff f9ae 	bl	800cef4 <HAL_UART_RxHalfCpltCallback>
}
 800db98:	46c0      	nop			; (mov r8, r8)
 800db9a:	46bd      	mov	sp, r7
 800db9c:	b004      	add	sp, #16
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbb2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	2280      	movs	r2, #128	; 0x80
 800dbc2:	4013      	ands	r3, r2
 800dbc4:	2b80      	cmp	r3, #128	; 0x80
 800dbc6:	d10a      	bne.n	800dbde <UART_DMAError+0x3e>
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2b21      	cmp	r3, #33	; 0x21
 800dbcc:	d107      	bne.n	800dbde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	2252      	movs	r2, #82	; 0x52
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	0018      	movs	r0, r3
 800dbda:	f7ff fea9 	bl	800d930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	2240      	movs	r2, #64	; 0x40
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	2b40      	cmp	r3, #64	; 0x40
 800dbea:	d10a      	bne.n	800dc02 <UART_DMAError+0x62>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b22      	cmp	r3, #34	; 0x22
 800dbf0:	d107      	bne.n	800dc02 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	225a      	movs	r2, #90	; 0x5a
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	f7ff febb 	bl	800d978 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2280      	movs	r2, #128	; 0x80
 800dc06:	589b      	ldr	r3, [r3, r2]
 800dc08:	2210      	movs	r2, #16
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2180      	movs	r1, #128	; 0x80
 800dc10:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	0018      	movs	r0, r3
 800dc16:	f7ff f975 	bl	800cf04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc1a:	46c0      	nop			; (mov r8, r8)
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	b006      	add	sp, #24
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <MX_MEMS_Init>:
static void Temperature_Sensor_Handler(TMsg *Msg, SensorData *SD);
static void Humidity_Sensor_Handler(TMsg *Msg, SensorData *SD);
//static void TIM_Config(uint32_t Freq);

void MX_MEMS_Init(void)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 800dc26:	f000 f80f 	bl	800dc48 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800dc2a:	46c0      	nop			; (mov r8, r8)
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <MX_MEMS_Process>:

/*
 * LM background task
 */
SensorData MX_MEMS_Process(void)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  return MX_DataLogFusion_Process();
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	0018      	movs	r0, r3
 800dc3c:	f000 f87a 	bl	800dd34 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	46bd      	mov	sp, r7
 800dc44:	b002      	add	sp, #8
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800dc4e:	2101      	movs	r1, #1
 800dc50:	2000      	movs	r0, #0
 800dc52:	f7fb fe4b 	bl	80098ec <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800dc56:	2000      	movs	r0, #0
 800dc58:	f7fb fea2 	bl	80099a0 <BSP_PB_GetState>
 800dc5c:	0003      	movs	r3, r0
 800dc5e:	425a      	negs	r2, r3
 800dc60:	4153      	adcs	r3, r2
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	001a      	movs	r2, r3
 800dc66:	4b2d      	ldr	r3, [pc, #180]	; (800dd1c <MX_DataLogFusion_Init+0xd4>)
 800dc68:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f7fb fdb6 	bl	80097dc <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800dc70:	2000      	movs	r0, #0
 800dc72:	f7fb fef5 	bl	8009a60 <BSP_COM_Init>

  /* Configure Timer to run with desired algorithm frequency */
//  TIM_Config(ALGO_FREQ);

  /* Initialize (disabled) sensors */
  Init_Sensors();
 800dc76:	f000 f913 	bl	800dea0 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 800dc7a:	f001 fc5e 	bl	800f53a <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 800dc7e:	4a28      	ldr	r2, [pc, #160]	; (800dd20 <MX_DataLogFusion_Init+0xd8>)
 800dc80:	4b28      	ldr	r3, [pc, #160]	; (800dd24 <MX_DataLogFusion_Init+0xdc>)
 800dc82:	0011      	movs	r1, r2
 800dc84:	0018      	movs	r0, r3
 800dc86:	f001 fcc3 	bl	800f610 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800dc8a:	200a      	movs	r0, #10
 800dc8c:	f001 fce2 	bl	800f654 <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_CM0P_MagCal_output_t mag_cal_test;
  MotionFX_CM0P_MagCal_getParams(&mag_cal_test);
 800dc90:	1d3b      	adds	r3, r7, #4
 800dc92:	0018      	movs	r0, r3
 800dc94:	f005 f9a8 	bl	8012fe8 <MotionFX_CM0P_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.CalQuality == MFX_CM0P_CALQSTATUSBEST)
 800dc98:	1d3b      	adds	r3, r7, #4
 800dc9a:	7b1b      	ldrb	r3, [r3, #12]
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d12c      	bne.n	800dcfa <MX_DataLogFusion_Init+0xb2>
  {
    ans_float = (mag_cal_test.HI_Bias[0] * FROM_UT50_TO_MGAUSS);
 800dca0:	1d3b      	adds	r3, r7, #4
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4920      	ldr	r1, [pc, #128]	; (800dd28 <MX_DataLogFusion_Init+0xe0>)
 800dca6:	1c18      	adds	r0, r3, #0
 800dca8:	f7f3 f880 	bl	8000dac <__aeabi_fmul>
 800dcac:	1c03      	adds	r3, r0, #0
 800dcae:	617b      	str	r3, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 800dcb0:	6978      	ldr	r0, [r7, #20]
 800dcb2:	f7f3 fb65 	bl	8001380 <__aeabi_f2iz>
 800dcb6:	0002      	movs	r2, r0
 800dcb8:	4b1c      	ldr	r3, [pc, #112]	; (800dd2c <MX_DataLogFusion_Init+0xe4>)
 800dcba:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.HI_Bias[1] * FROM_UT50_TO_MGAUSS);
 800dcbc:	1d3b      	adds	r3, r7, #4
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	4919      	ldr	r1, [pc, #100]	; (800dd28 <MX_DataLogFusion_Init+0xe0>)
 800dcc2:	1c18      	adds	r0, r3, #0
 800dcc4:	f7f3 f872 	bl	8000dac <__aeabi_fmul>
 800dcc8:	1c03      	adds	r3, r0, #0
 800dcca:	617b      	str	r3, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800dccc:	6978      	ldr	r0, [r7, #20]
 800dcce:	f7f3 fb57 	bl	8001380 <__aeabi_f2iz>
 800dcd2:	0002      	movs	r2, r0
 800dcd4:	4b15      	ldr	r3, [pc, #84]	; (800dd2c <MX_DataLogFusion_Init+0xe4>)
 800dcd6:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.HI_Bias[2] * FROM_UT50_TO_MGAUSS);
 800dcd8:	1d3b      	adds	r3, r7, #4
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	4912      	ldr	r1, [pc, #72]	; (800dd28 <MX_DataLogFusion_Init+0xe0>)
 800dcde:	1c18      	adds	r0, r3, #0
 800dce0:	f7f3 f864 	bl	8000dac <__aeabi_fmul>
 800dce4:	1c03      	adds	r3, r0, #0
 800dce6:	617b      	str	r3, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800dce8:	6978      	ldr	r0, [r7, #20]
 800dcea:	f7f3 fb49 	bl	8001380 <__aeabi_f2iz>
 800dcee:	0002      	movs	r2, r0
 800dcf0:	4b0e      	ldr	r3, [pc, #56]	; (800dd2c <MX_DataLogFusion_Init+0xe4>)
 800dcf2:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800dcf4:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <MX_DataLogFusion_Init+0xe8>)
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	701a      	strb	r2, [r3, #0]
  }

  BSP_LED_On(LED2);
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f7fb fd82 	bl	8009804 <BSP_LED_On>
  HAL_Delay(500);
 800dd00:	23fa      	movs	r3, #250	; 0xfa
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	0018      	movs	r0, r3
 800dd06:	f7fc f80b 	bl	8009d20 <HAL_Delay>
  BSP_LED_Off(LED2);
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	f7fb fd92 	bl	8009834 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800dd10:	f000 fe30 	bl	800e974 <UART_StartReceiveMsg>
}
 800dd14:	46c0      	nop			; (mov r8, r8)
 800dd16:	46bd      	mov	sp, r7
 800dd18:	b006      	add	sp, #24
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20000fb8 	.word	0x20000fb8
 800dd20:	20000e00 	.word	0x20000e00
 800dd24:	20000ddc 	.word	0x20000ddc
 800dd28:	43fa0000 	.word	0x43fa0000
 800dd2c:	20000ff0 	.word	0x20000ff0
 800dd30:	20000ffc 	.word	0x20000ffc

0800dd34 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static SensorData MX_DataLogFusion_Process(void)
{
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  static TMsg msg_dat;
  static TMsg msg_cmd;
  SensorData SD = {10.0, 10.0};
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	18fb      	adds	r3, r7, r3
 800dd40:	4a4c      	ldr	r2, [pc, #304]	; (800de74 <MX_DataLogFusion_Process+0x140>)
 800dd42:	ca03      	ldmia	r2!, {r0, r1}
 800dd44:	c303      	stmia	r3!, {r0, r1}

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 800dd46:	4b4c      	ldr	r3, [pc, #304]	; (800de78 <MX_DataLogFusion_Process+0x144>)
 800dd48:	0018      	movs	r0, r3
 800dd4a:	f000 fcdf 	bl	800e70c <UART_ReceivedMSG>
 800dd4e:	0003      	movs	r3, r0
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d107      	bne.n	800dd64 <MX_DataLogFusion_Process+0x30>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800dd54:	4b48      	ldr	r3, [pc, #288]	; (800de78 <MX_DataLogFusion_Process+0x144>)
 800dd56:	791b      	ldrb	r3, [r3, #4]
 800dd58:	2b32      	cmp	r3, #50	; 0x32
 800dd5a:	d103      	bne.n	800dd64 <MX_DataLogFusion_Process+0x30>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800dd5c:	4b46      	ldr	r3, [pc, #280]	; (800de78 <MX_DataLogFusion_Process+0x144>)
 800dd5e:	0018      	movs	r0, r3
 800dd60:	f000 fea6 	bl	800eab0 <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 800dd64:	4b45      	ldr	r3, [pc, #276]	; (800de7c <MX_DataLogFusion_Process+0x148>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d120      	bne.n	800ddb0 <MX_DataLogFusion_Process+0x7c>
  {
    /* Debouncing */
    HAL_Delay(50);
 800dd6e:	2032      	movs	r0, #50	; 0x32
 800dd70:	f7fb ffd6 	bl	8009d20 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800dd74:	46c0      	nop			; (mov r8, r8)
 800dd76:	2000      	movs	r0, #0
 800dd78:	f7fb fe12 	bl	80099a0 <BSP_PB_GetState>
 800dd7c:	0002      	movs	r2, r0
 800dd7e:	4b40      	ldr	r3, [pc, #256]	; (800de80 <MX_DataLogFusion_Process+0x14c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d0f7      	beq.n	800dd76 <MX_DataLogFusion_Process+0x42>

    /* Debouncing */
    HAL_Delay(50);
 800dd86:	2032      	movs	r0, #50	; 0x32
 800dd88:	f7fb ffca 	bl	8009d20 <HAL_Delay>

    MagCalRequest = 0;
 800dd8c:	4b3b      	ldr	r3, [pc, #236]	; (800de7c <MX_DataLogFusion_Process+0x148>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 800dd92:	4b3c      	ldr	r3, [pc, #240]	; (800de84 <MX_DataLogFusion_Process+0x150>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 800dd98:	4b3b      	ldr	r3, [pc, #236]	; (800de88 <MX_DataLogFusion_Process+0x154>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800dd9e:	4b3a      	ldr	r3, [pc, #232]	; (800de88 <MX_DataLogFusion_Process+0x154>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 800dda4:	4b38      	ldr	r3, [pc, #224]	; (800de88 <MX_DataLogFusion_Process+0x154>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800ddaa:	200a      	movs	r0, #10
 800ddac:	f001 fc52 	bl	800f654 <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 800ddb0:	4b36      	ldr	r3, [pc, #216]	; (800de8c <MX_DataLogFusion_Process+0x158>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d152      	bne.n	800de60 <MX_DataLogFusion_Process+0x12c>
  {
    //SensorReadRequest = 0;

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800ddba:	4b35      	ldr	r3, [pc, #212]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddbc:	0018      	movs	r0, r3
 800ddbe:	f000 f889 	bl	800ded4 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 800ddc2:	4b33      	ldr	r3, [pc, #204]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddc4:	0018      	movs	r0, r3
 800ddc6:	f000 fa67 	bl	800e298 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddcc:	0018      	movs	r0, r3
 800ddce:	f000 fabd 	bl	800e34c <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800ddd2:	4b2f      	ldr	r3, [pc, #188]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddd4:	0018      	movs	r0, r3
 800ddd6:	f000 fb13 	bl	800e400 <Magneto_Sensor_Handler>

    Humidity_Sensor_Handler(&msg_dat, &SD);
 800ddda:	2408      	movs	r4, #8
 800dddc:	193a      	adds	r2, r7, r4
 800ddde:	4b2c      	ldr	r3, [pc, #176]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800dde0:	0011      	movs	r1, r2
 800dde2:	0018      	movs	r0, r3
 800dde4:	f000 fc5a 	bl	800e69c <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat, &SD);
 800dde8:	193a      	adds	r2, r7, r4
 800ddea:	4b29      	ldr	r3, [pc, #164]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddec:	0011      	movs	r1, r2
 800ddee:	0018      	movs	r0, r3
 800ddf0:	f000 fc1c 	bl	800e62c <Temperature_Sensor_Handler>

    Pressure_Sensor_Handler(&msg_dat);
 800ddf4:	4b26      	ldr	r3, [pc, #152]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddf6:	0018      	movs	r0, r3
 800ddf8:	f000 fbe6 	bl	800e5c8 <Pressure_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 800ddfc:	4b24      	ldr	r3, [pc, #144]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800ddfe:	0018      	movs	r0, r3
 800de00:	f000 f8e0 	bl	800dfc4 <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800de04:	4b22      	ldr	r3, [pc, #136]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800de06:	0018      	movs	r0, r3
 800de08:	f000 fe3a 	bl	800ea80 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 800de0c:	4b20      	ldr	r3, [pc, #128]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800de0e:	2277      	movs	r2, #119	; 0x77
 800de10:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 800de12:	4b20      	ldr	r3, [pc, #128]	; (800de94 <MX_DataLogFusion_Process+0x160>)
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d11e      	bne.n	800de58 <MX_DataLogFusion_Process+0x124>
    {
      OfflineDataCount--;
 800de1a:	4b1f      	ldr	r3, [pc, #124]	; (800de98 <MX_DataLogFusion_Process+0x164>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	1e5a      	subs	r2, r3, #1
 800de20:	4b1d      	ldr	r3, [pc, #116]	; (800de98 <MX_DataLogFusion_Process+0x164>)
 800de22:	601a      	str	r2, [r3, #0]
      if (OfflineDataCount < 0)
 800de24:	4b1c      	ldr	r3, [pc, #112]	; (800de98 <MX_DataLogFusion_Process+0x164>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	da02      	bge.n	800de32 <MX_DataLogFusion_Process+0xfe>
      {
        OfflineDataCount = 0;
 800de2c:	4b1a      	ldr	r3, [pc, #104]	; (800de98 <MX_DataLogFusion_Process+0x164>)
 800de2e:	2200      	movs	r2, #0
 800de30:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 800de32:	4b1a      	ldr	r3, [pc, #104]	; (800de9c <MX_DataLogFusion_Process+0x168>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	1c5a      	adds	r2, r3, #1
 800de38:	4b18      	ldr	r3, [pc, #96]	; (800de9c <MX_DataLogFusion_Process+0x168>)
 800de3a:	601a      	str	r2, [r3, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800de3c:	4b17      	ldr	r3, [pc, #92]	; (800de9c <MX_DataLogFusion_Process+0x168>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b07      	cmp	r3, #7
 800de42:	dd02      	ble.n	800de4a <MX_DataLogFusion_Process+0x116>
      {
        OfflineDataReadIndex = 0;
 800de44:	4b15      	ldr	r3, [pc, #84]	; (800de9c <MX_DataLogFusion_Process+0x168>)
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800de4a:	4b13      	ldr	r3, [pc, #76]	; (800de98 <MX_DataLogFusion_Process+0x164>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dd02      	ble.n	800de58 <MX_DataLogFusion_Process+0x124>
      {
        SensorReadRequest = 1;
 800de52:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <MX_DataLogFusion_Process+0x158>)
 800de54:	2201      	movs	r2, #1
 800de56:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800de58:	4b0d      	ldr	r3, [pc, #52]	; (800de90 <MX_DataLogFusion_Process+0x15c>)
 800de5a:	0018      	movs	r0, r3
 800de5c:	f000 fd66 	bl	800e92c <UART_SendMsg>
  }
  return SD;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2208      	movs	r2, #8
 800de64:	18ba      	adds	r2, r7, r2
 800de66:	ca03      	ldmia	r2!, {r0, r1}
 800de68:	c303      	stmia	r3!, {r0, r1}
}
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	46bd      	mov	sp, r7
 800de6e:	b005      	add	sp, #20
 800de70:	bd90      	pop	{r4, r7, pc}
 800de72:	46c0      	nop			; (mov r8, r8)
 800de74:	08015078 	.word	0x08015078
 800de78:	20001000 	.word	0x20001000
 800de7c:	20000fec 	.word	0x20000fec
 800de80:	20000fb8 	.word	0x20000fb8
 800de84:	20000ffc 	.word	0x20000ffc
 800de88:	20000ff0 	.word	0x20000ff0
 800de8c:	2000026c 	.word	0x2000026c
 800de90:	20001104 	.word	0x20001104
 800de94:	20000e04 	.word	0x20000e04
 800de98:	20000fb0 	.word	0x20000fb0
 800de9c:	20000fa8 	.word	0x20000fa8

0800dea0 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800dea4:	f001 f9fe 	bl	800f2a4 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800dea8:	f001 fa05 	bl	800f2b6 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800deac:	f001 fa0c 	bl	800f2c8 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800deb0:	f001 fa13 	bl	800f2da <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800deb4:	f001 fa1a 	bl	800f2ec <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800deb8:	f001 fa21 	bl	800f2fe <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800debc:	4b04      	ldr	r3, [pc, #16]	; (800ded0 <Init_Sensors+0x30>)
 800debe:	1c18      	adds	r0, r3, #0
 800dec0:	f001 fae6 	bl	800f490 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800dec4:	2004      	movs	r0, #4
 800dec6:	f001 faf1 	bl	800f4ac <BSP_SENSOR_ACC_SetFullScale>
}
 800deca:	46c0      	nop			; (mov r8, r8)
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	42c80000 	.word	0x42c80000

0800ded4 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b08d      	sub	sp, #52	; 0x34
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 800dedc:	232f      	movs	r3, #47	; 0x2f
 800dede:	18fb      	adds	r3, r7, r3
 800dee0:	2200      	movs	r2, #0
 800dee2:	701a      	strb	r2, [r3, #0]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800dee4:	4b33      	ldr	r3, [pc, #204]	; (800dfb4 <RTC_Handler+0xe0>)
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800deea:	4b33      	ldr	r3, [pc, #204]	; (800dfb8 <RTC_Handler+0xe4>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d126      	bne.n	800df40 <RTC_Handler+0x6c>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 800def2:	4b32      	ldr	r3, [pc, #200]	; (800dfbc <RTC_Handler+0xe8>)
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	4b32      	ldr	r3, [pc, #200]	; (800dfc0 <RTC_Handler+0xec>)
 800def8:	2134      	movs	r1, #52	; 0x34
 800defa:	434a      	muls	r2, r1
 800defc:	5cd2      	ldrb	r2, [r2, r3]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800df02:	4b2e      	ldr	r3, [pc, #184]	; (800dfbc <RTC_Handler+0xe8>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a2e      	ldr	r2, [pc, #184]	; (800dfc0 <RTC_Handler+0xec>)
 800df08:	2134      	movs	r1, #52	; 0x34
 800df0a:	434b      	muls	r3, r1
 800df0c:	18d3      	adds	r3, r2, r3
 800df0e:	3301      	adds	r3, #1
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800df16:	4b29      	ldr	r3, [pc, #164]	; (800dfbc <RTC_Handler+0xe8>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a29      	ldr	r2, [pc, #164]	; (800dfc0 <RTC_Handler+0xec>)
 800df1c:	2134      	movs	r1, #52	; 0x34
 800df1e:	434b      	muls	r3, r1
 800df20:	18d3      	adds	r3, r2, r3
 800df22:	3302      	adds	r3, #2
 800df24:	781a      	ldrb	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 800df2a:	4b24      	ldr	r3, [pc, #144]	; (800dfbc <RTC_Handler+0xe8>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a24      	ldr	r2, [pc, #144]	; (800dfc0 <RTC_Handler+0xec>)
 800df30:	2134      	movs	r1, #52	; 0x34
 800df32:	434b      	muls	r3, r1
 800df34:	18d3      	adds	r3, r2, r3
 800df36:	3303      	adds	r3, #3
 800df38:	781a      	ldrb	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 800df3e:	e035      	b.n	800dfac <RTC_Handler+0xd8>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800df40:	2408      	movs	r4, #8
 800df42:	1939      	adds	r1, r7, r4
 800df44:	4b1b      	ldr	r3, [pc, #108]	; (800dfb4 <RTC_Handler+0xe0>)
 800df46:	2200      	movs	r2, #0
 800df48:	0018      	movs	r0, r3
 800df4a:	f7fe fc71 	bl	800c830 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800df4e:	231c      	movs	r3, #28
 800df50:	18f9      	adds	r1, r7, r3
 800df52:	4b18      	ldr	r3, [pc, #96]	; (800dfb4 <RTC_Handler+0xe0>)
 800df54:	2200      	movs	r2, #0
 800df56:	0018      	movs	r0, r3
 800df58:	f7fe fd74 	bl	800ca44 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800df5c:	193b      	adds	r3, r7, r4
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	2264      	movs	r2, #100	; 0x64
 800df66:	4353      	muls	r3, r2
 800df68:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 800df6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	3301      	adds	r3, #1
 800df70:	0019      	movs	r1, r3
 800df72:	0010      	movs	r0, r2
 800df74:	f7f2 f8d2 	bl	800011c <__udivsi3>
 800df78:	0003      	movs	r3, r0
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	22ff      	movs	r2, #255	; 0xff
 800df80:	4013      	ands	r3, r2
 800df82:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 800df84:	212f      	movs	r1, #47	; 0x2f
 800df86:	187b      	adds	r3, r7, r1
 800df88:	6a3a      	ldr	r2, [r7, #32]
 800df8a:	701a      	strb	r2, [r3, #0]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800df8c:	193b      	adds	r3, r7, r4
 800df8e:	781a      	ldrb	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800df94:	193b      	adds	r3, r7, r4
 800df96:	785a      	ldrb	r2, [r3, #1]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800df9c:	193b      	adds	r3, r7, r4
 800df9e:	789a      	ldrb	r2, [r3, #2]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	187a      	adds	r2, r7, r1
 800dfa8:	7812      	ldrb	r2, [r2, #0]
 800dfaa:	729a      	strb	r2, [r3, #10]
}
 800dfac:	46c0      	nop			; (mov r8, r8)
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	b00d      	add	sp, #52	; 0x34
 800dfb2:	bd90      	pop	{r4, r7, pc}
 800dfb4:	20000ae0 	.word	0x20000ae0
 800dfb8:	20000e04 	.word	0x20000e04
 800dfbc:	20000fa8 	.word	0x20000fa8
 800dfc0:	20000e08 	.word	0x20000e08

0800dfc4 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 800dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc6:	b0ab      	sub	sp, #172	; 0xac
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	22a4      	movs	r2, #164	; 0xa4
 800dfd0:	18b9      	adds	r1, r7, r2
 800dfd2:	600b      	str	r3, [r1, #0]
  uint32_t prev_tick = 0U;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	26a0      	movs	r6, #160	; 0xa0
 800dfd8:	19b9      	adds	r1, r7, r6
 800dfda:	600b      	str	r3, [r1, #0]
  MFX_CM0P_input_t data_in;
  MFX_CM0P_input_t *pdata_in = &data_in;
 800dfdc:	2474      	movs	r4, #116	; 0x74
 800dfde:	193b      	adds	r3, r7, r4
 800dfe0:	219c      	movs	r1, #156	; 0x9c
 800dfe2:	1878      	adds	r0, r7, r1
 800dfe4:	6003      	str	r3, [r0, #0]
  MFX_CM0P_output_t data_out;
  MFX_CM0P_output_t *pdata_out = &data_out;
 800dfe6:	200c      	movs	r0, #12
 800dfe8:	183b      	adds	r3, r7, r0
 800dfea:	2598      	movs	r5, #152	; 0x98
 800dfec:	1978      	adds	r0, r7, r5
 800dfee:	6003      	str	r3, [r0, #0]

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800dff0:	4b99      	ldr	r3, [pc, #612]	; (800e258 <FX_Data_Handler+0x294>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2210      	movs	r2, #16
 800dff6:	4013      	ands	r3, r2
 800dff8:	2b10      	cmp	r3, #16
 800dffa:	d000      	beq.n	800dffe <FX_Data_Handler+0x3a>
 800dffc:	e127      	b.n	800e24e <FX_Data_Handler+0x28a>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800dffe:	4b96      	ldr	r3, [pc, #600]	; (800e258 <FX_Data_Handler+0x294>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2220      	movs	r2, #32
 800e004:	4013      	ands	r3, r2
 800e006:	2b20      	cmp	r3, #32
 800e008:	d000      	beq.n	800e00c <FX_Data_Handler+0x48>
 800e00a:	e120      	b.n	800e24e <FX_Data_Handler+0x28a>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800e00c:	4b92      	ldr	r3, [pc, #584]	; (800e258 <FX_Data_Handler+0x294>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2240      	movs	r2, #64	; 0x40
 800e012:	4013      	ands	r3, r2
 800e014:	2b40      	cmp	r3, #64	; 0x40
 800e016:	d000      	beq.n	800e01a <FX_Data_Handler+0x56>
 800e018:	e119      	b.n	800e24e <FX_Data_Handler+0x28a>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800e01a:	4b90      	ldr	r3, [pc, #576]	; (800e25c <FX_Data_Handler+0x298>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	0018      	movs	r0, r3
 800e020:	f7f3 f9ce 	bl	80013c0 <__aeabi_i2f>
 800e024:	1c03      	adds	r3, r0, #0
 800e026:	498e      	ldr	r1, [pc, #568]	; (800e260 <FX_Data_Handler+0x29c>)
 800e028:	1c18      	adds	r0, r3, #0
 800e02a:	f7f2 febf 	bl	8000dac <__aeabi_fmul>
 800e02e:	1c03      	adds	r3, r0, #0
 800e030:	1c1a      	adds	r2, r3, #0
 800e032:	193b      	adds	r3, r7, r4
 800e034:	619a      	str	r2, [r3, #24]
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800e036:	4b89      	ldr	r3, [pc, #548]	; (800e25c <FX_Data_Handler+0x298>)
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	0018      	movs	r0, r3
 800e03c:	f7f3 f9c0 	bl	80013c0 <__aeabi_i2f>
 800e040:	1c03      	adds	r3, r0, #0
 800e042:	4987      	ldr	r1, [pc, #540]	; (800e260 <FX_Data_Handler+0x29c>)
 800e044:	1c18      	adds	r0, r3, #0
 800e046:	f7f2 feb1 	bl	8000dac <__aeabi_fmul>
 800e04a:	1c03      	adds	r3, r0, #0
 800e04c:	1c1a      	adds	r2, r3, #0
 800e04e:	193b      	adds	r3, r7, r4
 800e050:	61da      	str	r2, [r3, #28]
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800e052:	4b82      	ldr	r3, [pc, #520]	; (800e25c <FX_Data_Handler+0x298>)
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	0018      	movs	r0, r3
 800e058:	f7f3 f9b2 	bl	80013c0 <__aeabi_i2f>
 800e05c:	1c03      	adds	r3, r0, #0
 800e05e:	4980      	ldr	r1, [pc, #512]	; (800e260 <FX_Data_Handler+0x29c>)
 800e060:	1c18      	adds	r0, r3, #0
 800e062:	f7f2 fea3 	bl	8000dac <__aeabi_fmul>
 800e066:	1c03      	adds	r3, r0, #0
 800e068:	1c1a      	adds	r2, r3, #0
 800e06a:	193b      	adds	r3, r7, r4
 800e06c:	621a      	str	r2, [r3, #32]

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800e06e:	4b7d      	ldr	r3, [pc, #500]	; (800e264 <FX_Data_Handler+0x2a0>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	0018      	movs	r0, r3
 800e074:	f7f3 f9a4 	bl	80013c0 <__aeabi_i2f>
 800e078:	1c03      	adds	r3, r0, #0
 800e07a:	4979      	ldr	r1, [pc, #484]	; (800e260 <FX_Data_Handler+0x29c>)
 800e07c:	1c18      	adds	r0, r3, #0
 800e07e:	f7f2 fe95 	bl	8000dac <__aeabi_fmul>
 800e082:	1c03      	adds	r3, r0, #0
 800e084:	1c1a      	adds	r2, r3, #0
 800e086:	193b      	adds	r3, r7, r4
 800e088:	60da      	str	r2, [r3, #12]
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800e08a:	4b76      	ldr	r3, [pc, #472]	; (800e264 <FX_Data_Handler+0x2a0>)
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	0018      	movs	r0, r3
 800e090:	f7f3 f996 	bl	80013c0 <__aeabi_i2f>
 800e094:	1c03      	adds	r3, r0, #0
 800e096:	4972      	ldr	r1, [pc, #456]	; (800e260 <FX_Data_Handler+0x29c>)
 800e098:	1c18      	adds	r0, r3, #0
 800e09a:	f7f2 fe87 	bl	8000dac <__aeabi_fmul>
 800e09e:	1c03      	adds	r3, r0, #0
 800e0a0:	1c1a      	adds	r2, r3, #0
 800e0a2:	193b      	adds	r3, r7, r4
 800e0a4:	611a      	str	r2, [r3, #16]
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800e0a6:	4b6f      	ldr	r3, [pc, #444]	; (800e264 <FX_Data_Handler+0x2a0>)
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	0018      	movs	r0, r3
 800e0ac:	f7f3 f988 	bl	80013c0 <__aeabi_i2f>
 800e0b0:	1c03      	adds	r3, r0, #0
 800e0b2:	496b      	ldr	r1, [pc, #428]	; (800e260 <FX_Data_Handler+0x29c>)
 800e0b4:	1c18      	adds	r0, r3, #0
 800e0b6:	f7f2 fe79 	bl	8000dac <__aeabi_fmul>
 800e0ba:	1c03      	adds	r3, r0, #0
 800e0bc:	1c1a      	adds	r2, r3, #0
 800e0be:	193b      	adds	r3, r7, r4
 800e0c0:	615a      	str	r2, [r3, #20]

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800e0c2:	4b69      	ldr	r3, [pc, #420]	; (800e268 <FX_Data_Handler+0x2a4>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	f7f3 f97a 	bl	80013c0 <__aeabi_i2f>
 800e0cc:	1c03      	adds	r3, r0, #0
 800e0ce:	4967      	ldr	r1, [pc, #412]	; (800e26c <FX_Data_Handler+0x2a8>)
 800e0d0:	1c18      	adds	r0, r3, #0
 800e0d2:	f7f2 fe6b 	bl	8000dac <__aeabi_fmul>
 800e0d6:	1c03      	adds	r3, r0, #0
 800e0d8:	1c1a      	adds	r2, r3, #0
 800e0da:	193b      	adds	r3, r7, r4
 800e0dc:	601a      	str	r2, [r3, #0]
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800e0de:	4b62      	ldr	r3, [pc, #392]	; (800e268 <FX_Data_Handler+0x2a4>)
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	0018      	movs	r0, r3
 800e0e4:	f7f3 f96c 	bl	80013c0 <__aeabi_i2f>
 800e0e8:	1c03      	adds	r3, r0, #0
 800e0ea:	4960      	ldr	r1, [pc, #384]	; (800e26c <FX_Data_Handler+0x2a8>)
 800e0ec:	1c18      	adds	r0, r3, #0
 800e0ee:	f7f2 fe5d 	bl	8000dac <__aeabi_fmul>
 800e0f2:	1c03      	adds	r3, r0, #0
 800e0f4:	1c1a      	adds	r2, r3, #0
 800e0f6:	193b      	adds	r3, r7, r4
 800e0f8:	605a      	str	r2, [r3, #4]
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800e0fa:	4b5b      	ldr	r3, [pc, #364]	; (800e268 <FX_Data_Handler+0x2a4>)
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	0018      	movs	r0, r3
 800e100:	f7f3 f95e 	bl	80013c0 <__aeabi_i2f>
 800e104:	1c03      	adds	r3, r0, #0
 800e106:	4959      	ldr	r1, [pc, #356]	; (800e26c <FX_Data_Handler+0x2a8>)
 800e108:	1c18      	adds	r0, r3, #0
 800e10a:	f7f2 fe4f 	bl	8000dac <__aeabi_fmul>
 800e10e:	1c03      	adds	r3, r0, #0
 800e110:	1c1a      	adds	r2, r3, #0
 800e112:	193b      	adds	r3, r7, r4
 800e114:	609a      	str	r2, [r3, #8]

        /* Run Sensor Fusion algorithm */
        BSP_LED_On(LED2);
 800e116:	2000      	movs	r0, #0
 800e118:	f7fb fb74 	bl	8009804 <BSP_LED_On>
        prev_tick = HAL_GetTick();
 800e11c:	f7fb fdf6 	bl	8009d0c <HAL_GetTick>
 800e120:	0003      	movs	r3, r0
 800e122:	19b8      	adds	r0, r7, r6
 800e124:	6003      	str	r3, [r0, #0]
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800e126:	4a52      	ldr	r2, [pc, #328]	; (800e270 <FX_Data_Handler+0x2ac>)
 800e128:	1978      	adds	r0, r7, r5
 800e12a:	6801      	ldr	r1, [r0, #0]
 800e12c:	239c      	movs	r3, #156	; 0x9c
 800e12e:	18fb      	adds	r3, r7, r3
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	0018      	movs	r0, r3
 800e134:	f001 fa2c 	bl	800f590 <MotionFX_manager_run>
        elapsed_time_us = (HAL_GetTick() - prev_tick) * 1000;
 800e138:	f7fb fde8 	bl	8009d0c <HAL_GetTick>
 800e13c:	0002      	movs	r2, r0
 800e13e:	19bb      	adds	r3, r7, r6
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	1ad2      	subs	r2, r2, r3
 800e144:	0013      	movs	r3, r2
 800e146:	015b      	lsls	r3, r3, #5
 800e148:	1a9b      	subs	r3, r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	189b      	adds	r3, r3, r2
 800e14e:	00db      	lsls	r3, r3, #3
 800e150:	22a4      	movs	r2, #164	; 0xa4
 800e152:	18ba      	adds	r2, r7, r2
 800e154:	6013      	str	r3, [r2, #0]
        BSP_LED_Off(LED2);
 800e156:	2000      	movs	r0, #0
 800e158:	f7fb fb6c 	bl	8009834 <BSP_LED_Off>

        if (Enabled6X == 1U)
 800e15c:	4b45      	ldr	r3, [pc, #276]	; (800e274 <FX_Data_Handler+0x2b0>)
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d136      	bne.n	800e1d2 <FX_Data_Handler+0x20e>
        {
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_6X, 4U * sizeof(float));
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	333b      	adds	r3, #59	; 0x3b
 800e168:	0018      	movs	r0, r3
 800e16a:	197b      	adds	r3, r7, r5
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	3334      	adds	r3, #52	; 0x34
 800e170:	2210      	movs	r2, #16
 800e172:	0019      	movs	r1, r3
 800e174:	f004 ffa4 	bl	80130c0 <memcpy>
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_6X, 3U * sizeof(float));
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	334b      	adds	r3, #75	; 0x4b
 800e17c:	0018      	movs	r0, r3
 800e17e:	197b      	adds	r3, r7, r5
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	335c      	adds	r3, #92	; 0x5c
 800e184:	220c      	movs	r2, #12
 800e186:	0019      	movs	r1, r3
 800e188:	f004 ff9a 	bl	80130c0 <memcpy>
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_6X, 3U * sizeof(float));
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3357      	adds	r3, #87	; 0x57
 800e190:	0018      	movs	r0, r3
 800e192:	197b      	adds	r3, r7, r5
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3344      	adds	r3, #68	; 0x44
 800e198:	220c      	movs	r2, #12
 800e19a:	0019      	movs	r1, r3
 800e19c:	f004 ff90 	bl	80130c0 <memcpy>
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3363      	adds	r3, #99	; 0x63
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	197b      	adds	r3, r7, r5
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3350      	adds	r3, #80	; 0x50
 800e1ac:	220c      	movs	r2, #12
 800e1ae:	0019      	movs	r1, r3
 800e1b0:	f004 ff86 	bl	80130c0 <memcpy>

          (void)memset(&Msg->Data[107], 0, sizeof(float));
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	336f      	adds	r3, #111	; 0x6f
 800e1b8:	2204      	movs	r2, #4
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	0018      	movs	r0, r3
 800e1be:	f004 ff88 	bl	80130d2 <memset>
          (void)memset(&Msg->Data[111], 0, sizeof(float));
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	3373      	adds	r3, #115	; 0x73
 800e1c6:	2204      	movs	r2, #4
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	0018      	movs	r0, r3
 800e1cc:	f004 ff81 	bl	80130d2 <memset>
 800e1d0:	e034      	b.n	800e23c <FX_Data_Handler+0x278>
        }
        else
        {
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_9X, 4U * sizeof(float));
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	333b      	adds	r3, #59	; 0x3b
 800e1d6:	2498      	movs	r4, #152	; 0x98
 800e1d8:	193a      	adds	r2, r7, r4
 800e1da:	6811      	ldr	r1, [r2, #0]
 800e1dc:	2210      	movs	r2, #16
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f004 ff6e 	bl	80130c0 <memcpy>
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_9X, 3U * sizeof(float));
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	334b      	adds	r3, #75	; 0x4b
 800e1e8:	0018      	movs	r0, r3
 800e1ea:	193b      	adds	r3, r7, r4
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3328      	adds	r3, #40	; 0x28
 800e1f0:	220c      	movs	r2, #12
 800e1f2:	0019      	movs	r1, r3
 800e1f4:	f004 ff64 	bl	80130c0 <memcpy>
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_9X, 3U * sizeof(float));
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3357      	adds	r3, #87	; 0x57
 800e1fc:	0018      	movs	r0, r3
 800e1fe:	193b      	adds	r3, r7, r4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3310      	adds	r3, #16
 800e204:	220c      	movs	r2, #12
 800e206:	0019      	movs	r1, r3
 800e208:	f004 ff5a 	bl	80130c0 <memcpy>
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3363      	adds	r3, #99	; 0x63
 800e210:	0018      	movs	r0, r3
 800e212:	193b      	adds	r3, r7, r4
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	331c      	adds	r3, #28
 800e218:	220c      	movs	r2, #12
 800e21a:	0019      	movs	r1, r3
 800e21c:	f004 ff50 	bl	80130c0 <memcpy>

          (void)memset(&Msg->Data[107], 0, sizeof(float));
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	336f      	adds	r3, #111	; 0x6f
 800e224:	2204      	movs	r2, #4
 800e226:	2100      	movs	r1, #0
 800e228:	0018      	movs	r0, r3
 800e22a:	f004 ff52 	bl	80130d2 <memset>
          (void)memset(&Msg->Data[111], 0, sizeof(float));
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3373      	adds	r3, #115	; 0x73
 800e232:	2204      	movs	r2, #4
 800e234:	2100      	movs	r1, #0
 800e236:	0018      	movs	r0, r3
 800e238:	f004 ff4b 	bl	80130d2 <memset>
        }

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3377      	adds	r3, #119	; 0x77
 800e240:	22a4      	movs	r2, #164	; 0xa4
 800e242:	18ba      	adds	r2, r7, r2
 800e244:	6811      	ldr	r1, [r2, #0]
 800e246:	2204      	movs	r2, #4
 800e248:	0018      	movs	r0, r3
 800e24a:	f001 fb22 	bl	800f892 <Serialize_s32>
      }
    }
  }
}
 800e24e:	46c0      	nop			; (mov r8, r8)
 800e250:	46bd      	mov	sp, r7
 800e252:	b02b      	add	sp, #172	; 0xac
 800e254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e256:	46c0      	nop			; (mov r8, r8)
 800e258:	20000268 	.word	0x20000268
 800e25c:	20000fc8 	.word	0x20000fc8
 800e260:	3a83126f 	.word	0x3a83126f
 800e264:	20000fbc 	.word	0x20000fbc
 800e268:	20000fd4 	.word	0x20000fd4
 800e26c:	3b03126f 	.word	0x3b03126f
 800e270:	3c23d70a 	.word	0x3c23d70a
 800e274:	20000fb4 	.word	0x20000fb4

0800e278 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	0002      	movs	r2, r0
 800e280:	1dfb      	adds	r3, r7, #7
 800e282:	701a      	strb	r2, [r3, #0]
  MagCalRequest = 1U;
 800e284:	4b03      	ldr	r3, [pc, #12]	; (800e294 <BSP_PB_Callback+0x1c>)
 800e286:	2201      	movs	r2, #1
 800e288:	701a      	strb	r2, [r3, #0]
}
 800e28a:	46c0      	nop			; (mov r8, r8)
 800e28c:	46bd      	mov	sp, r7
 800e28e:	b002      	add	sp, #8
 800e290:	bd80      	pop	{r7, pc}
 800e292:	46c0      	nop			; (mov r8, r8)
 800e294:	20000fec 	.word	0x20000fec

0800e298 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800e2a0:	4b25      	ldr	r3, [pc, #148]	; (800e338 <Accelero_Sensor_Handler+0xa0>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2210      	movs	r2, #16
 800e2a6:	4013      	ands	r3, r2
 800e2a8:	2b10      	cmp	r3, #16
 800e2aa:	d141      	bne.n	800e330 <Accelero_Sensor_Handler+0x98>
  {
    if (UseOfflineData == 1)
 800e2ac:	4b23      	ldr	r3, [pc, #140]	; (800e33c <Accelero_Sensor_Handler+0xa4>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d11e      	bne.n	800e2f2 <Accelero_Sensor_Handler+0x5a>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800e2b4:	4b22      	ldr	r3, [pc, #136]	; (800e340 <Accelero_Sensor_Handler+0xa8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a22      	ldr	r2, [pc, #136]	; (800e344 <Accelero_Sensor_Handler+0xac>)
 800e2ba:	2134      	movs	r1, #52	; 0x34
 800e2bc:	434b      	muls	r3, r1
 800e2be:	18d3      	adds	r3, r2, r3
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	4b20      	ldr	r3, [pc, #128]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e2c6:	601a      	str	r2, [r3, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800e2c8:	4b1d      	ldr	r3, [pc, #116]	; (800e340 <Accelero_Sensor_Handler+0xa8>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a1d      	ldr	r2, [pc, #116]	; (800e344 <Accelero_Sensor_Handler+0xac>)
 800e2ce:	2134      	movs	r1, #52	; 0x34
 800e2d0:	434b      	muls	r3, r1
 800e2d2:	18d3      	adds	r3, r2, r3
 800e2d4:	3314      	adds	r3, #20
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	4b1b      	ldr	r3, [pc, #108]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e2da:	605a      	str	r2, [r3, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 800e2dc:	4b18      	ldr	r3, [pc, #96]	; (800e340 <Accelero_Sensor_Handler+0xa8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a18      	ldr	r2, [pc, #96]	; (800e344 <Accelero_Sensor_Handler+0xac>)
 800e2e2:	2134      	movs	r1, #52	; 0x34
 800e2e4:	434b      	muls	r3, r1
 800e2e6:	18d3      	adds	r3, r2, r3
 800e2e8:	3318      	adds	r3, #24
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	4b16      	ldr	r3, [pc, #88]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e2ee:	609a      	str	r2, [r3, #8]
 800e2f0:	e003      	b.n	800e2fa <Accelero_Sensor_Handler+0x62>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 800e2f2:	4b15      	ldr	r3, [pc, #84]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f001 f877 	bl	800f3e8 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3317      	adds	r3, #23
 800e2fe:	0018      	movs	r0, r3
 800e300:	4b11      	ldr	r3, [pc, #68]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2204      	movs	r2, #4
 800e306:	0019      	movs	r1, r3
 800e308:	f001 fac3 	bl	800f892 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	331b      	adds	r3, #27
 800e310:	0018      	movs	r0, r3
 800e312:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	2204      	movs	r2, #4
 800e318:	0019      	movs	r1, r3
 800e31a:	f001 faba 	bl	800f892 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	331f      	adds	r3, #31
 800e322:	0018      	movs	r0, r3
 800e324:	4b08      	ldr	r3, [pc, #32]	; (800e348 <Accelero_Sensor_Handler+0xb0>)
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	2204      	movs	r2, #4
 800e32a:	0019      	movs	r1, r3
 800e32c:	f001 fab1 	bl	800f892 <Serialize_s32>
  }
}
 800e330:	46c0      	nop			; (mov r8, r8)
 800e332:	46bd      	mov	sp, r7
 800e334:	b002      	add	sp, #8
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20000268 	.word	0x20000268
 800e33c:	20000e04 	.word	0x20000e04
 800e340:	20000fa8 	.word	0x20000fa8
 800e344:	20000e08 	.word	0x20000e08
 800e348:	20000fbc 	.word	0x20000fbc

0800e34c <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800e354:	4b25      	ldr	r3, [pc, #148]	; (800e3ec <Gyro_Sensor_Handler+0xa0>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2220      	movs	r2, #32
 800e35a:	4013      	ands	r3, r2
 800e35c:	2b20      	cmp	r3, #32
 800e35e:	d141      	bne.n	800e3e4 <Gyro_Sensor_Handler+0x98>
  {
    if (UseOfflineData == 1)
 800e360:	4b23      	ldr	r3, [pc, #140]	; (800e3f0 <Gyro_Sensor_Handler+0xa4>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d11e      	bne.n	800e3a6 <Gyro_Sensor_Handler+0x5a>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800e368:	4b22      	ldr	r3, [pc, #136]	; (800e3f4 <Gyro_Sensor_Handler+0xa8>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a22      	ldr	r2, [pc, #136]	; (800e3f8 <Gyro_Sensor_Handler+0xac>)
 800e36e:	2134      	movs	r1, #52	; 0x34
 800e370:	434b      	muls	r3, r1
 800e372:	18d3      	adds	r3, r2, r3
 800e374:	331c      	adds	r3, #28
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	4b20      	ldr	r3, [pc, #128]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e37a:	601a      	str	r2, [r3, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800e37c:	4b1d      	ldr	r3, [pc, #116]	; (800e3f4 <Gyro_Sensor_Handler+0xa8>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a1d      	ldr	r2, [pc, #116]	; (800e3f8 <Gyro_Sensor_Handler+0xac>)
 800e382:	2134      	movs	r1, #52	; 0x34
 800e384:	434b      	muls	r3, r1
 800e386:	18d3      	adds	r3, r2, r3
 800e388:	3320      	adds	r3, #32
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	4b1b      	ldr	r3, [pc, #108]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e38e:	605a      	str	r2, [r3, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800e390:	4b18      	ldr	r3, [pc, #96]	; (800e3f4 <Gyro_Sensor_Handler+0xa8>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a18      	ldr	r2, [pc, #96]	; (800e3f8 <Gyro_Sensor_Handler+0xac>)
 800e396:	2134      	movs	r1, #52	; 0x34
 800e398:	434b      	muls	r3, r1
 800e39a:	18d3      	adds	r3, r2, r3
 800e39c:	3324      	adds	r3, #36	; 0x24
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	4b16      	ldr	r3, [pc, #88]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e3a2:	609a      	str	r2, [r3, #8]
 800e3a4:	e003      	b.n	800e3ae <Gyro_Sensor_Handler+0x62>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800e3a6:	4b15      	ldr	r3, [pc, #84]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	f001 f82b 	bl	800f404 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3323      	adds	r3, #35	; 0x23
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	4b11      	ldr	r3, [pc, #68]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2204      	movs	r2, #4
 800e3ba:	0019      	movs	r1, r3
 800e3bc:	f001 fa69 	bl	800f892 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3327      	adds	r3, #39	; 0x27
 800e3c4:	0018      	movs	r0, r3
 800e3c6:	4b0d      	ldr	r3, [pc, #52]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	2204      	movs	r2, #4
 800e3cc:	0019      	movs	r1, r3
 800e3ce:	f001 fa60 	bl	800f892 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	332b      	adds	r3, #43	; 0x2b
 800e3d6:	0018      	movs	r0, r3
 800e3d8:	4b08      	ldr	r3, [pc, #32]	; (800e3fc <Gyro_Sensor_Handler+0xb0>)
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	2204      	movs	r2, #4
 800e3de:	0019      	movs	r1, r3
 800e3e0:	f001 fa57 	bl	800f892 <Serialize_s32>
  }
}
 800e3e4:	46c0      	nop			; (mov r8, r8)
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	b002      	add	sp, #8
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20000268 	.word	0x20000268
 800e3f0:	20000e04 	.word	0x20000e04
 800e3f4:	20000fa8 	.word	0x20000fa8
 800e3f8:	20000e08 	.word	0x20000e08
 800e3fc:	20000fc8 	.word	0x20000fc8

0800e400 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b08b      	sub	sp, #44	; 0x2c
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_CM0P_MagCal_input_t mag_data_in;
  MFX_CM0P_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800e408:	4b66      	ldr	r3, [pc, #408]	; (800e5a4 <Magneto_Sensor_Handler+0x1a4>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2240      	movs	r2, #64	; 0x40
 800e40e:	4013      	ands	r3, r2
 800e410:	2b40      	cmp	r3, #64	; 0x40
 800e412:	d000      	beq.n	800e416 <Magneto_Sensor_Handler+0x16>
 800e414:	e0c1      	b.n	800e59a <Magneto_Sensor_Handler+0x19a>
  {
    if (UseOfflineData == 1)
 800e416:	4b64      	ldr	r3, [pc, #400]	; (800e5a8 <Magneto_Sensor_Handler+0x1a8>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d11e      	bne.n	800e45c <Magneto_Sensor_Handler+0x5c>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800e41e:	4b63      	ldr	r3, [pc, #396]	; (800e5ac <Magneto_Sensor_Handler+0x1ac>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a63      	ldr	r2, [pc, #396]	; (800e5b0 <Magneto_Sensor_Handler+0x1b0>)
 800e424:	2134      	movs	r1, #52	; 0x34
 800e426:	434b      	muls	r3, r1
 800e428:	18d3      	adds	r3, r2, r3
 800e42a:	3328      	adds	r3, #40	; 0x28
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	4b61      	ldr	r3, [pc, #388]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e430:	601a      	str	r2, [r3, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 800e432:	4b5e      	ldr	r3, [pc, #376]	; (800e5ac <Magneto_Sensor_Handler+0x1ac>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a5e      	ldr	r2, [pc, #376]	; (800e5b0 <Magneto_Sensor_Handler+0x1b0>)
 800e438:	2134      	movs	r1, #52	; 0x34
 800e43a:	434b      	muls	r3, r1
 800e43c:	18d3      	adds	r3, r2, r3
 800e43e:	332c      	adds	r3, #44	; 0x2c
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	4b5c      	ldr	r3, [pc, #368]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e444:	605a      	str	r2, [r3, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800e446:	4b59      	ldr	r3, [pc, #356]	; (800e5ac <Magneto_Sensor_Handler+0x1ac>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a59      	ldr	r2, [pc, #356]	; (800e5b0 <Magneto_Sensor_Handler+0x1b0>)
 800e44c:	2134      	movs	r1, #52	; 0x34
 800e44e:	434b      	muls	r3, r1
 800e450:	18d3      	adds	r3, r2, r3
 800e452:	3330      	adds	r3, #48	; 0x30
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	4b57      	ldr	r3, [pc, #348]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e458:	609a      	str	r2, [r3, #8]
 800e45a:	e083      	b.n	800e564 <Magneto_Sensor_Handler+0x164>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 800e45c:	4b55      	ldr	r3, [pc, #340]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e45e:	0018      	movs	r0, r3
 800e460:	f000 ffde 	bl	800f420 <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 800e464:	4b54      	ldr	r3, [pc, #336]	; (800e5b8 <Magneto_Sensor_Handler+0x1b8>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d166      	bne.n	800e53a <Magneto_Sensor_Handler+0x13a>
      {
        mag_data_in.Mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800e46c:	4b51      	ldr	r3, [pc, #324]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	0018      	movs	r0, r3
 800e472:	f7f2 ffa5 	bl	80013c0 <__aeabi_i2f>
 800e476:	1c03      	adds	r3, r0, #0
 800e478:	4950      	ldr	r1, [pc, #320]	; (800e5bc <Magneto_Sensor_Handler+0x1bc>)
 800e47a:	1c18      	adds	r0, r3, #0
 800e47c:	f7f2 fc96 	bl	8000dac <__aeabi_fmul>
 800e480:	1c03      	adds	r3, r0, #0
 800e482:	1c1a      	adds	r2, r3, #0
 800e484:	2418      	movs	r4, #24
 800e486:	193b      	adds	r3, r7, r4
 800e488:	601a      	str	r2, [r3, #0]
        mag_data_in.Mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800e48a:	4b4a      	ldr	r3, [pc, #296]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	0018      	movs	r0, r3
 800e490:	f7f2 ff96 	bl	80013c0 <__aeabi_i2f>
 800e494:	1c03      	adds	r3, r0, #0
 800e496:	4949      	ldr	r1, [pc, #292]	; (800e5bc <Magneto_Sensor_Handler+0x1bc>)
 800e498:	1c18      	adds	r0, r3, #0
 800e49a:	f7f2 fc87 	bl	8000dac <__aeabi_fmul>
 800e49e:	1c03      	adds	r3, r0, #0
 800e4a0:	1c1a      	adds	r2, r3, #0
 800e4a2:	193b      	adds	r3, r7, r4
 800e4a4:	605a      	str	r2, [r3, #4]
        mag_data_in.Mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800e4a6:	4b43      	ldr	r3, [pc, #268]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	f7f2 ff88 	bl	80013c0 <__aeabi_i2f>
 800e4b0:	1c03      	adds	r3, r0, #0
 800e4b2:	4942      	ldr	r1, [pc, #264]	; (800e5bc <Magneto_Sensor_Handler+0x1bc>)
 800e4b4:	1c18      	adds	r0, r3, #0
 800e4b6:	f7f2 fc79 	bl	8000dac <__aeabi_fmul>
 800e4ba:	1c03      	adds	r3, r0, #0
 800e4bc:	1c1a      	adds	r2, r3, #0
 800e4be:	0021      	movs	r1, r4
 800e4c0:	187b      	adds	r3, r7, r1
 800e4c2:	609a      	str	r2, [r3, #8]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800e4c4:	2408      	movs	r4, #8
 800e4c6:	193a      	adds	r2, r7, r4
 800e4c8:	187b      	adds	r3, r7, r1
 800e4ca:	0011      	movs	r1, r2
 800e4cc:	0018      	movs	r0, r3
 800e4ce:	f001 f8b0 	bl	800f632 <MotionFX_manager_MagCal_run>

        if (mag_data_out.CalQuality == MFX_CM0P_CALQSTATUSBEST)
 800e4d2:	193b      	adds	r3, r7, r4
 800e4d4:	7b1b      	ldrb	r3, [r3, #12]
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d12f      	bne.n	800e53a <Magneto_Sensor_Handler+0x13a>
        {
          MagCalStatus = 1;
 800e4da:	4b37      	ldr	r3, [pc, #220]	; (800e5b8 <Magneto_Sensor_Handler+0x1b8>)
 800e4dc:	2201      	movs	r2, #1
 800e4de:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.HI_Bias[0] * FROM_UT50_TO_MGAUSS);
 800e4e0:	193b      	adds	r3, r7, r4
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4936      	ldr	r1, [pc, #216]	; (800e5c0 <Magneto_Sensor_Handler+0x1c0>)
 800e4e6:	1c18      	adds	r0, r3, #0
 800e4e8:	f7f2 fc60 	bl	8000dac <__aeabi_fmul>
 800e4ec:	1c03      	adds	r3, r0, #0
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
          MagOffset.x = (int32_t)ans_float;
 800e4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f2:	f7f2 ff45 	bl	8001380 <__aeabi_f2iz>
 800e4f6:	0002      	movs	r2, r0
 800e4f8:	4b32      	ldr	r3, [pc, #200]	; (800e5c4 <Magneto_Sensor_Handler+0x1c4>)
 800e4fa:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.HI_Bias[1] * FROM_UT50_TO_MGAUSS);
 800e4fc:	193b      	adds	r3, r7, r4
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	492f      	ldr	r1, [pc, #188]	; (800e5c0 <Magneto_Sensor_Handler+0x1c0>)
 800e502:	1c18      	adds	r0, r3, #0
 800e504:	f7f2 fc52 	bl	8000dac <__aeabi_fmul>
 800e508:	1c03      	adds	r3, r0, #0
 800e50a:	627b      	str	r3, [r7, #36]	; 0x24
          MagOffset.y = (int32_t)ans_float;
 800e50c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e50e:	f7f2 ff37 	bl	8001380 <__aeabi_f2iz>
 800e512:	0002      	movs	r2, r0
 800e514:	4b2b      	ldr	r3, [pc, #172]	; (800e5c4 <Magneto_Sensor_Handler+0x1c4>)
 800e516:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.HI_Bias[2] * FROM_UT50_TO_MGAUSS);
 800e518:	193b      	adds	r3, r7, r4
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	4928      	ldr	r1, [pc, #160]	; (800e5c0 <Magneto_Sensor_Handler+0x1c0>)
 800e51e:	1c18      	adds	r0, r3, #0
 800e520:	f7f2 fc44 	bl	8000dac <__aeabi_fmul>
 800e524:	1c03      	adds	r3, r0, #0
 800e526:	627b      	str	r3, [r7, #36]	; 0x24
          MagOffset.z = (int32_t)ans_float;
 800e528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e52a:	f7f2 ff29 	bl	8001380 <__aeabi_f2iz>
 800e52e:	0002      	movs	r2, r0
 800e530:	4b24      	ldr	r3, [pc, #144]	; (800e5c4 <Magneto_Sensor_Handler+0x1c4>)
 800e532:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800e534:	200a      	movs	r0, #10
 800e536:	f001 f89a 	bl	800f66e <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800e53a:	4b1e      	ldr	r3, [pc, #120]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	4b21      	ldr	r3, [pc, #132]	; (800e5c4 <Magneto_Sensor_Handler+0x1c4>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	1ad2      	subs	r2, r2, r3
 800e544:	4b1b      	ldr	r3, [pc, #108]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e546:	601a      	str	r2, [r3, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800e548:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	4b1d      	ldr	r3, [pc, #116]	; (800e5c4 <Magneto_Sensor_Handler+0x1c4>)
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	1ad2      	subs	r2, r2, r3
 800e552:	4b18      	ldr	r3, [pc, #96]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e554:	605a      	str	r2, [r3, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800e556:	4b17      	ldr	r3, [pc, #92]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e558:	689a      	ldr	r2, [r3, #8]
 800e55a:	4b1a      	ldr	r3, [pc, #104]	; (800e5c4 <Magneto_Sensor_Handler+0x1c4>)
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	1ad2      	subs	r2, r2, r3
 800e560:	4b14      	ldr	r3, [pc, #80]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e562:	609a      	str	r2, [r3, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	332f      	adds	r3, #47	; 0x2f
 800e568:	0018      	movs	r0, r3
 800e56a:	4b12      	ldr	r3, [pc, #72]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2204      	movs	r2, #4
 800e570:	0019      	movs	r1, r3
 800e572:	f001 f98e 	bl	800f892 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3333      	adds	r3, #51	; 0x33
 800e57a:	0018      	movs	r0, r3
 800e57c:	4b0d      	ldr	r3, [pc, #52]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	2204      	movs	r2, #4
 800e582:	0019      	movs	r1, r3
 800e584:	f001 f985 	bl	800f892 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	3337      	adds	r3, #55	; 0x37
 800e58c:	0018      	movs	r0, r3
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <Magneto_Sensor_Handler+0x1b4>)
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	2204      	movs	r2, #4
 800e594:	0019      	movs	r1, r3
 800e596:	f001 f97c 	bl	800f892 <Serialize_s32>
  }
}
 800e59a:	46c0      	nop			; (mov r8, r8)
 800e59c:	46bd      	mov	sp, r7
 800e59e:	b00b      	add	sp, #44	; 0x2c
 800e5a0:	bd90      	pop	{r4, r7, pc}
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	20000268 	.word	0x20000268
 800e5a8:	20000e04 	.word	0x20000e04
 800e5ac:	20000fa8 	.word	0x20000fa8
 800e5b0:	20000e08 	.word	0x20000e08
 800e5b4:	20000fd4 	.word	0x20000fd4
 800e5b8:	20000ffc 	.word	0x20000ffc
 800e5bc:	3b03126f 	.word	0x3b03126f
 800e5c0:	43fa0000 	.word	0x43fa0000
 800e5c4:	20000ff0 	.word	0x20000ff0

0800e5c8 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800e5d0:	4b11      	ldr	r3, [pc, #68]	; (800e618 <Pressure_Sensor_Handler+0x50>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d119      	bne.n	800e610 <Pressure_Sensor_Handler+0x48>
  {
    if (UseOfflineData == 1)
 800e5dc:	4b0f      	ldr	r3, [pc, #60]	; (800e61c <Pressure_Sensor_Handler+0x54>)
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d10a      	bne.n	800e5fa <Pressure_Sensor_Handler+0x32>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <Pressure_Sensor_Handler+0x58>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a0e      	ldr	r2, [pc, #56]	; (800e624 <Pressure_Sensor_Handler+0x5c>)
 800e5ea:	2134      	movs	r1, #52	; 0x34
 800e5ec:	434b      	muls	r3, r1
 800e5ee:	18d3      	adds	r3, r2, r3
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <Pressure_Sensor_Handler+0x60>)
 800e5f6:	601a      	str	r2, [r3, #0]
 800e5f8:	e003      	b.n	800e602 <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 800e5fa:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <Pressure_Sensor_Handler+0x60>)
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	f000 ff1d 	bl	800f43c <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	330b      	adds	r3, #11
 800e606:	4908      	ldr	r1, [pc, #32]	; (800e628 <Pressure_Sensor_Handler+0x60>)
 800e608:	2204      	movs	r2, #4
 800e60a:	0018      	movs	r0, r3
 800e60c:	f004 fd58 	bl	80130c0 <memcpy>
  }
}
 800e610:	46c0      	nop			; (mov r8, r8)
 800e612:	46bd      	mov	sp, r7
 800e614:	b002      	add	sp, #8
 800e616:	bd80      	pop	{r7, pc}
 800e618:	20000268 	.word	0x20000268
 800e61c:	20000e04 	.word	0x20000e04
 800e620:	20000fa8 	.word	0x20000fa8
 800e624:	20000e08 	.word	0x20000e08
 800e628:	20000fe0 	.word	0x20000fe0

0800e62c <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg, SensorData *SD)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <Temperature_Sensor_Handler+0x5c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2202      	movs	r2, #2
 800e63c:	4013      	ands	r3, r2
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d11d      	bne.n	800e67e <Temperature_Sensor_Handler+0x52>
  {
    if (UseOfflineData == 1)
 800e642:	4b12      	ldr	r3, [pc, #72]	; (800e68c <Temperature_Sensor_Handler+0x60>)
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d10a      	bne.n	800e660 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800e64a:	4b11      	ldr	r3, [pc, #68]	; (800e690 <Temperature_Sensor_Handler+0x64>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a11      	ldr	r2, [pc, #68]	; (800e694 <Temperature_Sensor_Handler+0x68>)
 800e650:	2134      	movs	r1, #52	; 0x34
 800e652:	434b      	muls	r3, r1
 800e654:	18d3      	adds	r3, r2, r3
 800e656:	330c      	adds	r3, #12
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	4b0f      	ldr	r3, [pc, #60]	; (800e698 <Temperature_Sensor_Handler+0x6c>)
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	e003      	b.n	800e668 <Temperature_Sensor_Handler+0x3c>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 800e660:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <Temperature_Sensor_Handler+0x6c>)
 800e662:	0018      	movs	r0, r3
 800e664:	f000 fef8 	bl	800f458 <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	330f      	adds	r3, #15
 800e66c:	490a      	ldr	r1, [pc, #40]	; (800e698 <Temperature_Sensor_Handler+0x6c>)
 800e66e:	2204      	movs	r2, #4
 800e670:	0018      	movs	r0, r3
 800e672:	f004 fd25 	bl	80130c0 <memcpy>
    SD->Temperature = TempValue;
 800e676:	4b08      	ldr	r3, [pc, #32]	; (800e698 <Temperature_Sensor_Handler+0x6c>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	601a      	str	r2, [r3, #0]
  }
}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	46bd      	mov	sp, r7
 800e682:	b002      	add	sp, #8
 800e684:	bd80      	pop	{r7, pc}
 800e686:	46c0      	nop			; (mov r8, r8)
 800e688:	20000268 	.word	0x20000268
 800e68c:	20000e04 	.word	0x20000e04
 800e690:	20000fa8 	.word	0x20000fa8
 800e694:	20000e08 	.word	0x20000e08
 800e698:	20000fe4 	.word	0x20000fe4

0800e69c <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg, SensorData *SD)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800e6a6:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <Humidity_Sensor_Handler+0x5c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2204      	movs	r2, #4
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d11d      	bne.n	800e6ee <Humidity_Sensor_Handler+0x52>
  {
    if (UseOfflineData == 1)
 800e6b2:	4b12      	ldr	r3, [pc, #72]	; (800e6fc <Humidity_Sensor_Handler+0x60>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d10a      	bne.n	800e6d0 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800e6ba:	4b11      	ldr	r3, [pc, #68]	; (800e700 <Humidity_Sensor_Handler+0x64>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a11      	ldr	r2, [pc, #68]	; (800e704 <Humidity_Sensor_Handler+0x68>)
 800e6c0:	2134      	movs	r1, #52	; 0x34
 800e6c2:	434b      	muls	r3, r1
 800e6c4:	18d3      	adds	r3, r2, r3
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <Humidity_Sensor_Handler+0x6c>)
 800e6cc:	601a      	str	r2, [r3, #0]
 800e6ce:	e003      	b.n	800e6d8 <Humidity_Sensor_Handler+0x3c>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 800e6d0:	4b0d      	ldr	r3, [pc, #52]	; (800e708 <Humidity_Sensor_Handler+0x6c>)
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	f000 fece 	bl	800f474 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3313      	adds	r3, #19
 800e6dc:	490a      	ldr	r1, [pc, #40]	; (800e708 <Humidity_Sensor_Handler+0x6c>)
 800e6de:	2204      	movs	r2, #4
 800e6e0:	0018      	movs	r0, r3
 800e6e2:	f004 fced 	bl	80130c0 <memcpy>
    SD->Humidity = HumValue;
 800e6e6:	4b08      	ldr	r3, [pc, #32]	; (800e708 <Humidity_Sensor_Handler+0x6c>)
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	605a      	str	r2, [r3, #4]
  }
}
 800e6ee:	46c0      	nop			; (mov r8, r8)
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	b002      	add	sp, #8
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	46c0      	nop			; (mov r8, r8)
 800e6f8:	20000268 	.word	0x20000268
 800e6fc:	20000e04 	.word	0x20000e04
 800e700:	20000fa8 	.word	0x20000fa8
 800e704:	20000e08 	.word	0x20000e08
 800e708:	20000fe8 	.word	0x20000fe8

0800e70c <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 800e70c:	b5b0      	push	{r4, r5, r7, lr}
 800e70e:	b08a      	sub	sp, #40	; 0x28
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 800e714:	231e      	movs	r3, #30
 800e716:	18fb      	adds	r3, r7, r3
 800e718:	2200      	movs	r2, #0
 800e71a:	801a      	strh	r2, [r3, #0]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 800e71c:	4b80      	ldr	r3, [pc, #512]	; (800e920 <UART_ReceivedMSG+0x214>)
 800e71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e720:	0018      	movs	r0, r3
 800e722:	f000 f943 	bl	800e9ac <Get_DMA_Flag_Status>
 800e726:	1e03      	subs	r3, r0, #0
 800e728:	d000      	beq.n	800e72c <UART_ReceivedMSG+0x20>
 800e72a:	e0f4      	b.n	800e916 <UART_ReceivedMSG+0x20a>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 800e72c:	4b7c      	ldr	r3, [pc, #496]	; (800e920 <UART_ReceivedMSG+0x214>)
 800e72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e730:	0018      	movs	r0, r3
 800e732:	f000 f985 	bl	800ea40 <Get_DMA_Counter>
 800e736:	0003      	movs	r3, r0
 800e738:	b29a      	uxth	r2, r3
 800e73a:	201c      	movs	r0, #28
 800e73c:	183b      	adds	r3, r7, r0
 800e73e:	2180      	movs	r1, #128	; 0x80
 800e740:	0089      	lsls	r1, r1, #2
 800e742:	1a8a      	subs	r2, r1, r2
 800e744:	801a      	strh	r2, [r3, #0]

    if (dma_counter >= UartEngine.StartOfMsg)
 800e746:	4b77      	ldr	r3, [pc, #476]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e748:	889b      	ldrh	r3, [r3, #4]
 800e74a:	183a      	adds	r2, r7, r0
 800e74c:	8812      	ldrh	r2, [r2, #0]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d308      	bcc.n	800e764 <UART_ReceivedMSG+0x58>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 800e752:	4b74      	ldr	r3, [pc, #464]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e754:	889a      	ldrh	r2, [r3, #4]
 800e756:	2320      	movs	r3, #32
 800e758:	18fb      	adds	r3, r7, r3
 800e75a:	1839      	adds	r1, r7, r0
 800e75c:	8809      	ldrh	r1, [r1, #0]
 800e75e:	1a8a      	subs	r2, r1, r2
 800e760:	801a      	strh	r2, [r3, #0]
 800e762:	e00d      	b.n	800e780 <UART_ReceivedMSG+0x74>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800e764:	4b6f      	ldr	r3, [pc, #444]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e766:	889b      	ldrh	r3, [r3, #4]
 800e768:	221c      	movs	r2, #28
 800e76a:	18ba      	adds	r2, r7, r2
 800e76c:	8812      	ldrh	r2, [r2, #0]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	b29b      	uxth	r3, r3
 800e772:	2220      	movs	r2, #32
 800e774:	18ba      	adds	r2, r7, r2
 800e776:	2180      	movs	r1, #128	; 0x80
 800e778:	0089      	lsls	r1, r1, #2
 800e77a:	468c      	mov	ip, r1
 800e77c:	4463      	add	r3, ip
 800e77e:	8013      	strh	r3, [r2, #0]
    }

    j = UartEngine.StartOfMsg;
 800e780:	2324      	movs	r3, #36	; 0x24
 800e782:	18fb      	adds	r3, r7, r3
 800e784:	4a67      	ldr	r2, [pc, #412]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e786:	8892      	ldrh	r2, [r2, #4]
 800e788:	801a      	strh	r2, [r3, #0]

    for (k = 0; k < length; k++)
 800e78a:	2322      	movs	r3, #34	; 0x22
 800e78c:	18fb      	adds	r3, r7, r3
 800e78e:	2200      	movs	r2, #0
 800e790:	801a      	strh	r2, [r3, #0]
 800e792:	e0ac      	b.n	800e8ee <UART_ReceivedMSG+0x1e2>
    {
      data = UartRxBuffer[j];
 800e794:	2024      	movs	r0, #36	; 0x24
 800e796:	183b      	adds	r3, r7, r0
 800e798:	881a      	ldrh	r2, [r3, #0]
 800e79a:	231b      	movs	r3, #27
 800e79c:	18fb      	adds	r3, r7, r3
 800e79e:	4962      	ldr	r1, [pc, #392]	; (800e928 <UART_ReceivedMSG+0x21c>)
 800e7a0:	5c8a      	ldrb	r2, [r1, r2]
 800e7a2:	701a      	strb	r2, [r3, #0]
      j++;
 800e7a4:	183b      	adds	r3, r7, r0
 800e7a6:	881a      	ldrh	r2, [r3, #0]
 800e7a8:	183b      	adds	r3, r7, r0
 800e7aa:	3201      	adds	r2, #1
 800e7ac:	801a      	strh	r2, [r3, #0]

      if (j >= (uint16_t)UART_RxBufferSize)
 800e7ae:	183b      	adds	r3, r7, r0
 800e7b0:	881a      	ldrh	r2, [r3, #0]
 800e7b2:	2380      	movs	r3, #128	; 0x80
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d302      	bcc.n	800e7c0 <UART_ReceivedMSG+0xb4>
      {
        j = 0;
 800e7ba:	183b      	adds	r3, r7, r0
 800e7bc:	2200      	movs	r2, #0
 800e7be:	801a      	strh	r2, [r3, #0]
      }

      if (data == (uint8_t)TMsg_EOF)
 800e7c0:	231b      	movs	r3, #27
 800e7c2:	18fb      	adds	r3, r7, r3
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2bf0      	cmp	r3, #240	; 0xf0
 800e7c8:	d000      	beq.n	800e7cc <UART_ReceivedMSG+0xc0>
 800e7ca:	e08a      	b.n	800e8e2 <UART_ReceivedMSG+0x1d6>
      {
        j = UartEngine.StartOfMsg;
 800e7cc:	2324      	movs	r3, #36	; 0x24
 800e7ce:	18fb      	adds	r3, r7, r3
 800e7d0:	4a54      	ldr	r2, [pc, #336]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e7d2:	8892      	ldrh	r2, [r2, #4]
 800e7d4:	801a      	strh	r2, [r3, #0]

        for (i = 0; i < k; i += inc)
 800e7d6:	2326      	movs	r3, #38	; 0x26
 800e7d8:	18fb      	adds	r3, r7, r3
 800e7da:	2200      	movs	r2, #0
 800e7dc:	801a      	strh	r2, [r3, #0]
 800e7de:	e05d      	b.n	800e89c <UART_ReceivedMSG+0x190>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 800e7e0:	2124      	movs	r1, #36	; 0x24
 800e7e2:	187b      	adds	r3, r7, r1
 800e7e4:	881b      	ldrh	r3, [r3, #0]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	2318      	movs	r3, #24
 800e7ec:	18fb      	adds	r3, r7, r3
 800e7ee:	05d2      	lsls	r2, r2, #23
 800e7f0:	0dd2      	lsrs	r2, r2, #23
 800e7f2:	801a      	strh	r2, [r3, #0]

          if (source >= TMsg_MaxLen)
 800e7f4:	231e      	movs	r3, #30
 800e7f6:	18fb      	adds	r3, r7, r3
 800e7f8:	881b      	ldrh	r3, [r3, #0]
 800e7fa:	2bff      	cmp	r3, #255	; 0xff
 800e7fc:	d905      	bls.n	800e80a <UART_ReceivedMSG+0xfe>
          {
            UartEngine.StartOfMsg = j;
 800e7fe:	4b49      	ldr	r3, [pc, #292]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e800:	187a      	adds	r2, r7, r1
 800e802:	8812      	ldrh	r2, [r2, #0]
 800e804:	809a      	strh	r2, [r3, #4]
            return 0;
 800e806:	2300      	movs	r3, #0
 800e808:	e086      	b.n	800e918 <UART_ReceivedMSG+0x20c>
          }

          Source0 = UartRxBuffer[j];
 800e80a:	2324      	movs	r3, #36	; 0x24
 800e80c:	18fb      	adds	r3, r7, r3
 800e80e:	881a      	ldrh	r2, [r3, #0]
 800e810:	2017      	movs	r0, #23
 800e812:	183b      	adds	r3, r7, r0
 800e814:	4944      	ldr	r1, [pc, #272]	; (800e928 <UART_ReceivedMSG+0x21c>)
 800e816:	5c8a      	ldrb	r2, [r1, r2]
 800e818:	701a      	strb	r2, [r3, #0]
          Source1 = UartRxBuffer[j2];
 800e81a:	2418      	movs	r4, #24
 800e81c:	193b      	adds	r3, r7, r4
 800e81e:	881a      	ldrh	r2, [r3, #0]
 800e820:	2516      	movs	r5, #22
 800e822:	197b      	adds	r3, r7, r5
 800e824:	4940      	ldr	r1, [pc, #256]	; (800e928 <UART_ReceivedMSG+0x21c>)
 800e826:	5c8a      	ldrb	r2, [r1, r2]
 800e828:	701a      	strb	r2, [r3, #0]
          Dest    = &Msg->Data[source];
 800e82a:	231e      	movs	r3, #30
 800e82c:	18fb      	adds	r3, r7, r3
 800e82e:	881b      	ldrh	r3, [r3, #0]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	18d3      	adds	r3, r2, r3
 800e834:	3304      	adds	r3, #4
 800e836:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	197b      	adds	r3, r7, r5
 800e83c:	7819      	ldrb	r1, [r3, #0]
 800e83e:	183b      	adds	r3, r7, r0
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	0018      	movs	r0, r3
 800e844:	f000 ff7a 	bl	800f73c <ReverseByteStuffCopyByte2>
 800e848:	0002      	movs	r2, r0
 800e84a:	210f      	movs	r1, #15
 800e84c:	187b      	adds	r3, r7, r1
 800e84e:	701a      	strb	r2, [r3, #0]

          if (inc == 0U)
 800e850:	187b      	adds	r3, r7, r1
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d105      	bne.n	800e864 <UART_ReceivedMSG+0x158>
          {
            UartEngine.StartOfMsg = j2;
 800e858:	4b32      	ldr	r3, [pc, #200]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e85a:	193a      	adds	r2, r7, r4
 800e85c:	8812      	ldrh	r2, [r2, #0]
 800e85e:	809a      	strh	r2, [r3, #4]
            return 0;
 800e860:	2300      	movs	r3, #0
 800e862:	e059      	b.n	800e918 <UART_ReceivedMSG+0x20c>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800e864:	210f      	movs	r1, #15
 800e866:	187b      	adds	r3, r7, r1
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	2024      	movs	r0, #36	; 0x24
 800e86e:	183b      	adds	r3, r7, r0
 800e870:	881b      	ldrh	r3, [r3, #0]
 800e872:	18d3      	adds	r3, r2, r3
 800e874:	b29a      	uxth	r2, r3
 800e876:	183b      	adds	r3, r7, r0
 800e878:	05d2      	lsls	r2, r2, #23
 800e87a:	0dd2      	lsrs	r2, r2, #23
 800e87c:	801a      	strh	r2, [r3, #0]
          source++;
 800e87e:	201e      	movs	r0, #30
 800e880:	183b      	adds	r3, r7, r0
 800e882:	881a      	ldrh	r2, [r3, #0]
 800e884:	183b      	adds	r3, r7, r0
 800e886:	3201      	adds	r2, #1
 800e888:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < k; i += inc)
 800e88a:	187b      	adds	r3, r7, r1
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	b299      	uxth	r1, r3
 800e890:	2226      	movs	r2, #38	; 0x26
 800e892:	18bb      	adds	r3, r7, r2
 800e894:	18ba      	adds	r2, r7, r2
 800e896:	8812      	ldrh	r2, [r2, #0]
 800e898:	188a      	adds	r2, r1, r2
 800e89a:	801a      	strh	r2, [r3, #0]
 800e89c:	2326      	movs	r3, #38	; 0x26
 800e89e:	18fa      	adds	r2, r7, r3
 800e8a0:	2322      	movs	r3, #34	; 0x22
 800e8a2:	18fb      	adds	r3, r7, r3
 800e8a4:	8812      	ldrh	r2, [r2, #0]
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d399      	bcc.n	800e7e0 <UART_ReceivedMSG+0xd4>
        }

        Msg->Len = source;
 800e8ac:	231e      	movs	r3, #30
 800e8ae:	18fb      	adds	r3, r7, r3
 800e8b0:	881a      	ldrh	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800e8b6:	2124      	movs	r1, #36	; 0x24
 800e8b8:	187b      	adds	r3, r7, r1
 800e8ba:	881b      	ldrh	r3, [r3, #0]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	187b      	adds	r3, r7, r1
 800e8c2:	05d2      	lsls	r2, r2, #23
 800e8c4:	0dd2      	lsrs	r2, r2, #23
 800e8c6:	801a      	strh	r2, [r3, #0]
        UartEngine.StartOfMsg = j;
 800e8c8:	4b16      	ldr	r3, [pc, #88]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e8ca:	187a      	adds	r2, r7, r1
 800e8cc:	8812      	ldrh	r2, [r2, #0]
 800e8ce:	809a      	strh	r2, [r3, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	0018      	movs	r0, r3
 800e8d4:	f000 ff8c 	bl	800f7f0 <CHK_CheckAndRemove>
 800e8d8:	0003      	movs	r3, r0
 800e8da:	1e5a      	subs	r2, r3, #1
 800e8dc:	4193      	sbcs	r3, r2
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	e01a      	b.n	800e918 <UART_ReceivedMSG+0x20c>
    for (k = 0; k < length; k++)
 800e8e2:	2122      	movs	r1, #34	; 0x22
 800e8e4:	187b      	adds	r3, r7, r1
 800e8e6:	881a      	ldrh	r2, [r3, #0]
 800e8e8:	187b      	adds	r3, r7, r1
 800e8ea:	3201      	adds	r2, #1
 800e8ec:	801a      	strh	r2, [r3, #0]
 800e8ee:	2322      	movs	r3, #34	; 0x22
 800e8f0:	18fa      	adds	r2, r7, r3
 800e8f2:	2120      	movs	r1, #32
 800e8f4:	187b      	adds	r3, r7, r1
 800e8f6:	8812      	ldrh	r2, [r2, #0]
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d200      	bcs.n	800e900 <UART_ReceivedMSG+0x1f4>
 800e8fe:	e749      	b.n	800e794 <UART_ReceivedMSG+0x88>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 800e900:	187b      	adds	r3, r7, r1
 800e902:	881a      	ldrh	r2, [r3, #0]
 800e904:	2380      	movs	r3, #128	; 0x80
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	429a      	cmp	r2, r3
 800e90a:	d904      	bls.n	800e916 <UART_ReceivedMSG+0x20a>
    {
      UartEngine.StartOfMsg = dma_counter;
 800e90c:	4b05      	ldr	r3, [pc, #20]	; (800e924 <UART_ReceivedMSG+0x218>)
 800e90e:	221c      	movs	r2, #28
 800e910:	18ba      	adds	r2, r7, r2
 800e912:	8812      	ldrh	r2, [r2, #0]
 800e914:	809a      	strh	r2, [r3, #4]
    }
  }

  return 0;
 800e916:	2300      	movs	r3, #0
}
 800e918:	0018      	movs	r0, r3
 800e91a:	46bd      	mov	sp, r7
 800e91c:	b00a      	add	sp, #40	; 0x28
 800e91e:	bdb0      	pop	{r4, r5, r7, pc}
 800e920:	20000d08 	.word	0x20000d08
 800e924:	20001408 	.word	0x20001408
 800e928:	20001208 	.word	0x20001208

0800e92c <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 800e92c:	b590      	push	{r4, r7, lr}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	0018      	movs	r0, r3
 800e938:	f000 ff2b 	bl	800f792 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <UART_SendMsg+0x3c>)
 800e940:	0011      	movs	r1, r2
 800e942:	0018      	movs	r0, r3
 800e944:	f000 fecc 	bl	800f6e0 <ByteStuffCopy>
 800e948:	0002      	movs	r2, r0
 800e94a:	210e      	movs	r1, #14
 800e94c:	187b      	adds	r3, r7, r1
 800e94e:	801a      	strh	r2, [r3, #0]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800e950:	4c06      	ldr	r4, [pc, #24]	; (800e96c <UART_SendMsg+0x40>)
 800e952:	187b      	adds	r3, r7, r1
 800e954:	881a      	ldrh	r2, [r3, #0]
 800e956:	4904      	ldr	r1, [pc, #16]	; (800e968 <UART_SendMsg+0x3c>)
 800e958:	4805      	ldr	r0, [pc, #20]	; (800e970 <UART_SendMsg+0x44>)
 800e95a:	0023      	movs	r3, r4
 800e95c:	f7fe f9b2 	bl	800ccc4 <HAL_UART_Transmit>
}
 800e960:	46c0      	nop			; (mov r8, r8)
 800e962:	46bd      	mov	sp, r7
 800e964:	b005      	add	sp, #20
 800e966:	bd90      	pop	{r4, r7, pc}
 800e968:	20001410 	.word	0x20001410
 800e96c:	00001388 	.word	0x00001388
 800e970:	20000d08 	.word	0x20000d08

0800e974 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <UART_StartReceiveMsg+0x30>)
 800e97a:	4a0b      	ldr	r2, [pc, #44]	; (800e9a8 <UART_StartReceiveMsg+0x34>)
 800e97c:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800e97e:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <UART_StartReceiveMsg+0x30>)
 800e980:	2258      	movs	r2, #88	; 0x58
 800e982:	2180      	movs	r1, #128	; 0x80
 800e984:	0089      	lsls	r1, r1, #2
 800e986:	5299      	strh	r1, [r3, r2]
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800e988:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <UART_StartReceiveMsg+0x30>)
 800e98a:	2280      	movs	r2, #128	; 0x80
 800e98c:	2100      	movs	r1, #0
 800e98e:	5099      	str	r1, [r3, r2]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800e990:	2380      	movs	r3, #128	; 0x80
 800e992:	009a      	lsls	r2, r3, #2
 800e994:	4904      	ldr	r1, [pc, #16]	; (800e9a8 <UART_StartReceiveMsg+0x34>)
 800e996:	4b03      	ldr	r3, [pc, #12]	; (800e9a4 <UART_StartReceiveMsg+0x30>)
 800e998:	0018      	movs	r0, r3
 800e99a:	f7fe fa3b 	bl	800ce14 <HAL_UART_Receive_DMA>
}
 800e99e:	46c0      	nop			; (mov r8, r8)
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20000d08 	.word	0x20000d08
 800e9a8:	20001208 	.word	0x20001208

0800e9ac <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 800e9b4:	4b1b      	ldr	r3, [pc, #108]	; (800ea24 <Get_DMA_Flag_Status+0x78>)
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	491a      	ldr	r1, [pc, #104]	; (800ea28 <Get_DMA_Flag_Status+0x7c>)
 800e9be:	428b      	cmp	r3, r1
 800e9c0:	d029      	beq.n	800ea16 <Get_DMA_Flag_Status+0x6a>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4919      	ldr	r1, [pc, #100]	; (800ea2c <Get_DMA_Flag_Status+0x80>)
 800e9c8:	428b      	cmp	r3, r1
 800e9ca:	d022      	beq.n	800ea12 <Get_DMA_Flag_Status+0x66>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4917      	ldr	r1, [pc, #92]	; (800ea30 <Get_DMA_Flag_Status+0x84>)
 800e9d2:	428b      	cmp	r3, r1
 800e9d4:	d01a      	beq.n	800ea0c <Get_DMA_Flag_Status+0x60>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4916      	ldr	r1, [pc, #88]	; (800ea34 <Get_DMA_Flag_Status+0x88>)
 800e9dc:	428b      	cmp	r3, r1
 800e9de:	d012      	beq.n	800ea06 <Get_DMA_Flag_Status+0x5a>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4914      	ldr	r1, [pc, #80]	; (800ea38 <Get_DMA_Flag_Status+0x8c>)
 800e9e6:	428b      	cmp	r3, r1
 800e9e8:	d00a      	beq.n	800ea00 <Get_DMA_Flag_Status+0x54>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4913      	ldr	r1, [pc, #76]	; (800ea3c <Get_DMA_Flag_Status+0x90>)
 800e9f0:	428b      	cmp	r3, r1
 800e9f2:	d102      	bne.n	800e9fa <Get_DMA_Flag_Status+0x4e>
 800e9f4:	2380      	movs	r3, #128	; 0x80
 800e9f6:	041b      	lsls	r3, r3, #16
 800e9f8:	e00e      	b.n	800ea18 <Get_DMA_Flag_Status+0x6c>
 800e9fa:	2380      	movs	r3, #128	; 0x80
 800e9fc:	051b      	lsls	r3, r3, #20
 800e9fe:	e00b      	b.n	800ea18 <Get_DMA_Flag_Status+0x6c>
 800ea00:	2380      	movs	r3, #128	; 0x80
 800ea02:	031b      	lsls	r3, r3, #12
 800ea04:	e008      	b.n	800ea18 <Get_DMA_Flag_Status+0x6c>
 800ea06:	2380      	movs	r3, #128	; 0x80
 800ea08:	021b      	lsls	r3, r3, #8
 800ea0a:	e005      	b.n	800ea18 <Get_DMA_Flag_Status+0x6c>
 800ea0c:	2380      	movs	r3, #128	; 0x80
 800ea0e:	011b      	lsls	r3, r3, #4
 800ea10:	e002      	b.n	800ea18 <Get_DMA_Flag_Status+0x6c>
 800ea12:	2380      	movs	r3, #128	; 0x80
 800ea14:	e000      	b.n	800ea18 <Get_DMA_Flag_Status+0x6c>
 800ea16:	2308      	movs	r3, #8
 800ea18:	4013      	ands	r3, r2
}
 800ea1a:	0018      	movs	r0, r3
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	b002      	add	sp, #8
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	46c0      	nop			; (mov r8, r8)
 800ea24:	40020000 	.word	0x40020000
 800ea28:	40020008 	.word	0x40020008
 800ea2c:	4002001c 	.word	0x4002001c
 800ea30:	40020030 	.word	0x40020030
 800ea34:	40020044 	.word	0x40020044
 800ea38:	40020058 	.word	0x40020058
 800ea3c:	4002006c 	.word	0x4002006c

0800ea40 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	685b      	ldr	r3, [r3, #4]
}
 800ea4e:	0018      	movs	r0, r3
 800ea50:	46bd      	mov	sp, r7
 800ea52:	b002      	add	sp, #8
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	795a      	ldrb	r2, [r3, #5]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2232      	movs	r2, #50	; 0x32
 800ea6a:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	799b      	ldrb	r3, [r3, #6]
 800ea70:	3b80      	subs	r3, #128	; 0x80
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	719a      	strb	r2, [r3, #6]
}
 800ea78:	46c0      	nop			; (mov r8, r8)
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	b002      	add	sp, #8
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800ea88:	4b08      	ldr	r3, [pc, #32]	; (800eaac <INIT_STREAMING_HEADER+0x2c>)
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2232      	movs	r2, #50	; 0x32
 800ea96:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2203      	movs	r2, #3
 800eaa2:	601a      	str	r2, [r3, #0]
}
 800eaa4:	46c0      	nop			; (mov r8, r8)
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	b002      	add	sp, #8
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20000274 	.word	0x20000274

0800eab0 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b098      	sub	sp, #96	; 0x60
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  int ret = 1;
 800eab8:	2301      	movs	r3, #1
 800eaba:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d801      	bhi.n	800eacc <HandleMSG+0x1c>
  {
    return 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	e32c      	b.n	800f126 <HandleMSG+0x676>
  }

  if (Msg->Data[0] != DEV_ADDR)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	791b      	ldrb	r3, [r3, #4]
 800ead0:	2b32      	cmp	r3, #50	; 0x32
 800ead2:	d001      	beq.n	800ead8 <HandleMSG+0x28>
  {
    return 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	e326      	b.n	800f126 <HandleMSG+0x676>
  }

  switch (Msg->Data[2])   /* CMD */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	799b      	ldrb	r3, [r3, #6]
 800eadc:	2b7a      	cmp	r3, #122	; 0x7a
 800eade:	d100      	bne.n	800eae2 <HandleMSG+0x32>
 800eae0:	e0b6      	b.n	800ec50 <HandleMSG+0x1a0>
 800eae2:	dd00      	ble.n	800eae6 <HandleMSG+0x36>
 800eae4:	e31b      	b.n	800f11e <HandleMSG+0x66e>
 800eae6:	2b76      	cmp	r3, #118	; 0x76
 800eae8:	d100      	bne.n	800eaec <HandleMSG+0x3c>
 800eaea:	e098      	b.n	800ec1e <HandleMSG+0x16e>
 800eaec:	dd00      	ble.n	800eaf0 <HandleMSG+0x40>
 800eaee:	e316      	b.n	800f11e <HandleMSG+0x66e>
 800eaf0:	2b62      	cmp	r3, #98	; 0x62
 800eaf2:	d100      	bne.n	800eaf6 <HandleMSG+0x46>
 800eaf4:	e07a      	b.n	800ebec <HandleMSG+0x13c>
 800eaf6:	dd00      	ble.n	800eafa <HandleMSG+0x4a>
 800eaf8:	e311      	b.n	800f11e <HandleMSG+0x66e>
 800eafa:	2b12      	cmp	r3, #18
 800eafc:	dc0a      	bgt.n	800eb14 <HandleMSG+0x64>
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	dc00      	bgt.n	800eb04 <HandleMSG+0x54>
 800eb02:	e30c      	b.n	800f11e <HandleMSG+0x66e>
 800eb04:	2b12      	cmp	r3, #18
 800eb06:	d900      	bls.n	800eb0a <HandleMSG+0x5a>
 800eb08:	e309      	b.n	800f11e <HandleMSG+0x66e>
 800eb0a:	009a      	lsls	r2, r3, #2
 800eb0c:	4bb1      	ldr	r3, [pc, #708]	; (800edd4 <HandleMSG+0x324>)
 800eb0e:	18d3      	adds	r3, r2, r3
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	469f      	mov	pc, r3
 800eb14:	2b60      	cmp	r3, #96	; 0x60
 800eb16:	d050      	beq.n	800ebba <HandleMSG+0x10a>
 800eb18:	e301      	b.n	800f11e <HandleMSG+0x66e>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b03      	cmp	r3, #3
 800eb20:	d001      	beq.n	800eb26 <HandleMSG+0x76>
      {
        return 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e2ff      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	0018      	movs	r0, r3
 800eb2a:	f7ff ff94 	bl	800ea56 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2203      	movs	r2, #3
 800eb32:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	0018      	movs	r0, r3
 800eb38:	f7ff fef8 	bl	800e92c <UART_SendMsg>
      break;
 800eb3c:	e2f2      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2b03      	cmp	r3, #3
 800eb44:	d001      	beq.n	800eb4a <HandleMSG+0x9a>
      {
        return 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	e2ed      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	0018      	movs	r0, r3
 800eb4e:	f7ff ff82 	bl	800ea56 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2203      	movs	r2, #3
 800eb56:	601a      	str	r2, [r3, #0]
      break;
 800eb58:	e2e4      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d001      	beq.n	800eb66 <HandleMSG+0xb6>
      {
        return 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	e2df      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	0018      	movs	r0, r3
 800eb6a:	f7ff ff74 	bl	800ea56 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800eb6e:	230c      	movs	r3, #12
 800eb70:	18fa      	adds	r2, r7, r3
 800eb72:	2310      	movs	r3, #16
 800eb74:	18fb      	adds	r3, r7, r3
 800eb76:	0011      	movs	r1, r2
 800eb78:	0018      	movs	r0, r3
 800eb7a:	f000 fb57 	bl	800f22c <Get_PresentationString>

      i = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800eb82:	e00d      	b.n	800eba0 <HandleMSG+0xf0>
      {
        Msg->Data[3U + i] = ps[i];
 800eb84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb86:	3303      	adds	r3, #3
 800eb88:	2210      	movs	r2, #16
 800eb8a:	18b9      	adds	r1, r7, r2
 800eb8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb8e:	188a      	adds	r2, r1, r2
 800eb90:	7811      	ldrb	r1, [r2, #0]
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	18d3      	adds	r3, r2, r3
 800eb96:	1c0a      	adds	r2, r1, #0
 800eb98:	711a      	strb	r2, [r3, #4]
        i++;
 800eb9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d3ed      	bcc.n	800eb84 <HandleMSG+0xd4>
      }

      Msg->Len = 3U + i;
 800eba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebaa:	1cda      	adds	r2, r3, #3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	0018      	movs	r0, r3
 800ebb4:	f7ff feba 	bl	800e92c <UART_SendMsg>
      break;
 800ebb8:	e2b4      	b.n	800f124 <HandleMSG+0x674>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	d801      	bhi.n	800ebc6 <HandleMSG+0x116>
      {
        return 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	e2af      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	0018      	movs	r0, r3
 800ebca:	f7ff ff44 	bl	800ea56 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	3307      	adds	r3, #7
 800ebd2:	2204      	movs	r2, #4
 800ebd4:	2104      	movs	r1, #4
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f000 fe5b 	bl	800f892 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2207      	movs	r2, #7
 800ebe0:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f7ff fea1 	bl	800e92c <UART_SendMsg>
      break;
 800ebea:	e29b      	b.n	800f124 <HandleMSG+0x674>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d801      	bhi.n	800ebf8 <HandleMSG+0x148>
      {
        return 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e296      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	0018      	movs	r0, r3
 800ebfc:	f7ff ff2b 	bl	800ea56 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3307      	adds	r3, #7
 800ec04:	2204      	movs	r2, #4
 800ec06:	2101      	movs	r1, #1
 800ec08:	0018      	movs	r0, r3
 800ec0a:	f000 fe42 	bl	800f892 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2207      	movs	r2, #7
 800ec12:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	0018      	movs	r0, r3
 800ec18:	f7ff fe88 	bl	800e92c <UART_SendMsg>
      break;
 800ec1c:	e282      	b.n	800f124 <HandleMSG+0x674>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d801      	bhi.n	800ec2a <HandleMSG+0x17a>
      {
        return 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	e27d      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f7ff ff12 	bl	800ea56 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3307      	adds	r3, #7
 800ec36:	2204      	movs	r2, #4
 800ec38:	2107      	movs	r1, #7
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f000 fe29 	bl	800f892 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2207      	movs	r2, #7
 800ec44:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	0018      	movs	r0, r3
 800ec4a:	f7ff fe6f 	bl	800e92c <UART_SendMsg>
      break;
 800ec4e:	e269      	b.n	800f124 <HandleMSG+0x674>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d801      	bhi.n	800ec5c <HandleMSG+0x1ac>
      {
        return 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e264      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	0018      	movs	r0, r3
 800ec60:	f7ff fef9 	bl	800ea56 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3307      	adds	r3, #7
 800ec68:	2204      	movs	r2, #4
 800ec6a:	2103      	movs	r1, #3
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	f000 fe10 	bl	800f892 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2207      	movs	r2, #7
 800ec76:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	f7ff fe56 	bl	800e92c <UART_SendMsg>
      break;
 800ec80:	e250      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d801      	bhi.n	800ec8e <HandleMSG+0x1de>
      {
        return 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e24b      	b.n	800f126 <HandleMSG+0x676>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	3307      	adds	r3, #7
 800ec92:	2104      	movs	r1, #4
 800ec94:	0018      	movs	r0, r3
 800ec96:	f000 fdd8 	bl	800f84a <Deserialize>
 800ec9a:	0002      	movs	r2, r0
 800ec9c:	4b4e      	ldr	r3, [pc, #312]	; (800edd8 <HandleMSG+0x328>)
 800ec9e:	601a      	str	r2, [r3, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800eca0:	4b4d      	ldr	r3, [pc, #308]	; (800edd8 <HandleMSG+0x328>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2201      	movs	r2, #1
 800eca6:	4013      	ands	r3, r2
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d101      	bne.n	800ecb0 <HandleMSG+0x200>
      {
        BSP_SENSOR_PRESS_Enable();
 800ecac:	f000 fb4b 	bl	800f346 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800ecb0:	4b49      	ldr	r3, [pc, #292]	; (800edd8 <HandleMSG+0x328>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2202      	movs	r2, #2
 800ecb6:	4013      	ands	r3, r2
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d101      	bne.n	800ecc0 <HandleMSG+0x210>
      {
        BSP_SENSOR_TEMP_Enable();
 800ecbc:	f000 fb4c 	bl	800f358 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800ecc0:	4b45      	ldr	r3, [pc, #276]	; (800edd8 <HandleMSG+0x328>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2204      	movs	r2, #4
 800ecc6:	4013      	ands	r3, r2
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d101      	bne.n	800ecd0 <HandleMSG+0x220>
      {
        BSP_SENSOR_HUM_Enable();
 800eccc:	f000 fb4d 	bl	800f36a <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800ecd0:	4b41      	ldr	r3, [pc, #260]	; (800edd8 <HandleMSG+0x328>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2210      	movs	r2, #16
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	2b10      	cmp	r3, #16
 800ecda:	d101      	bne.n	800ece0 <HandleMSG+0x230>
      {
        BSP_SENSOR_ACC_Enable();
 800ecdc:	f000 fb18 	bl	800f310 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800ece0:	4b3d      	ldr	r3, [pc, #244]	; (800edd8 <HandleMSG+0x328>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2220      	movs	r2, #32
 800ece6:	4013      	ands	r3, r2
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	d101      	bne.n	800ecf0 <HandleMSG+0x240>
      {
        BSP_SENSOR_GYR_Enable();
 800ecec:	f000 fb19 	bl	800f322 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800ecf0:	4b39      	ldr	r3, [pc, #228]	; (800edd8 <HandleMSG+0x328>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2240      	movs	r2, #64	; 0x40
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	2b40      	cmp	r3, #64	; 0x40
 800ecfa:	d101      	bne.n	800ed00 <HandleMSG+0x250>
      {
        BSP_SENSOR_MAG_Enable();
 800ecfc:	f000 fb1a 	bl	800f334 <BSP_SENSOR_MAG_Enable>
      }

//      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
      DataLoggerActive = 1;
 800ed00:	4b36      	ldr	r3, [pc, #216]	; (800eddc <HandleMSG+0x32c>)
 800ed02:	2201      	movs	r2, #1
 800ed04:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	795a      	ldrb	r2, [r3, #5]
 800ed0a:	4b35      	ldr	r3, [pc, #212]	; (800ede0 <HandleMSG+0x330>)
 800ed0c:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	0018      	movs	r0, r3
 800ed12:	f7ff fea0 	bl	800ea56 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2203      	movs	r2, #3
 800ed1a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	0018      	movs	r0, r3
 800ed20:	f7ff fe04 	bl	800e92c <UART_SendMsg>
      break;
 800ed24:	e1fe      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b02      	cmp	r3, #2
 800ed2c:	d801      	bhi.n	800ed32 <HandleMSG+0x282>
      {
        return 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e1f9      	b.n	800f126 <HandleMSG+0x676>
      }

      DataLoggerActive = 0;
 800ed32:	4b2a      	ldr	r3, [pc, #168]	; (800eddc <HandleMSG+0x32c>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	701a      	strb	r2, [r3, #0]
//      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800ed38:	f000 fb20 	bl	800f37c <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800ed3c:	f000 fb27 	bl	800f38e <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800ed40:	f000 fb2e 	bl	800f3a0 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800ed44:	f000 fb35 	bl	800f3b2 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800ed48:	f000 fb3c 	bl	800f3c4 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800ed4c:	f000 fb43 	bl	800f3d6 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800ed50:	4b21      	ldr	r3, [pc, #132]	; (800edd8 <HandleMSG+0x328>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800ed56:	4b23      	ldr	r3, [pc, #140]	; (800ede4 <HandleMSG+0x334>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	0018      	movs	r0, r3
 800ed60:	f7ff fe79 	bl	800ea56 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	0018      	movs	r0, r3
 800ed68:	f7ff fde0 	bl	800e92c <UART_SendMsg>
      break;
 800ed6c:	e1da      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d801      	bhi.n	800ed7a <HandleMSG+0x2ca>
      {
        return 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	e1d5      	b.n	800f126 <HandleMSG+0x676>
      }

      BUILD_REPLY_HEADER(Msg);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	0018      	movs	r0, r3
 800ed7e:	f7ff fe6a 	bl	800ea56 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2203      	movs	r2, #3
 800ed86:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	79d8      	ldrb	r0, [r3, #7]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7a19      	ldrb	r1, [r3, #8]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	7a5b      	ldrb	r3, [r3, #9]
 800ed94:	001a      	movs	r2, r3
 800ed96:	f000 fa11 	bl	800f1bc <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	7a98      	ldrb	r0, [r3, #10]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	7ad9      	ldrb	r1, [r3, #11]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	7b1a      	ldrb	r2, [r3, #12]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	7b5b      	ldrb	r3, [r3, #13]
 800edaa:	f000 f9d3 	bl	800f154 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	0018      	movs	r0, r3
 800edb2:	f7ff fdbb 	bl	800e92c <UART_SendMsg>
      break;
 800edb6:	e1b5      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b36      	cmp	r3, #54	; 0x36
 800edbe:	d801      	bhi.n	800edc4 <HandleMSG+0x314>
      {
        return 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	e1b0      	b.n	800f126 <HandleMSG+0x676>
      }

      msg_offset = 4;
 800edc4:	2304      	movs	r3, #4
 800edc6:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	79db      	ldrb	r3, [r3, #7]
 800edcc:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800edce:	2300      	movs	r3, #0
 800edd0:	65bb      	str	r3, [r7, #88]	; 0x58
 800edd2:	e12d      	b.n	800f030 <HandleMSG+0x580>
 800edd4:	08015974 	.word	0x08015974
 800edd8:	20000268 	.word	0x20000268
 800eddc:	20000dd8 	.word	0x20000dd8
 800ede0:	20000274 	.word	0x20000274
 800ede4:	20000e04 	.word	0x20000e04
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800ede8:	4bd1      	ldr	r3, [pc, #836]	; (800f130 <HandleMSG+0x680>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2234      	movs	r2, #52	; 0x34
 800edee:	435a      	muls	r2, r3
 800edf0:	4bd0      	ldr	r3, [pc, #832]	; (800f134 <HandleMSG+0x684>)
 800edf2:	18d3      	adds	r3, r2, r3
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edf8:	188a      	adds	r2, r1, r2
 800edfa:	3204      	adds	r2, #4
 800edfc:	7812      	ldrb	r2, [r2, #0]
 800edfe:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800ee00:	4bcb      	ldr	r3, [pc, #812]	; (800f130 <HandleMSG+0x680>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2234      	movs	r2, #52	; 0x34
 800ee06:	435a      	muls	r2, r3
 800ee08:	4bca      	ldr	r3, [pc, #808]	; (800f134 <HandleMSG+0x684>)
 800ee0a:	18d3      	adds	r3, r2, r3
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee10:	3201      	adds	r2, #1
 800ee12:	6879      	ldr	r1, [r7, #4]
 800ee14:	188a      	adds	r2, r1, r2
 800ee16:	3204      	adds	r2, #4
 800ee18:	7812      	ldrb	r2, [r2, #0]
 800ee1a:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800ee1c:	4bc4      	ldr	r3, [pc, #784]	; (800f130 <HandleMSG+0x680>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2234      	movs	r2, #52	; 0x34
 800ee22:	435a      	muls	r2, r3
 800ee24:	4bc3      	ldr	r3, [pc, #780]	; (800f134 <HandleMSG+0x684>)
 800ee26:	18d3      	adds	r3, r2, r3
 800ee28:	3302      	adds	r3, #2
 800ee2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee2c:	3202      	adds	r2, #2
 800ee2e:	6879      	ldr	r1, [r7, #4]
 800ee30:	188a      	adds	r2, r1, r2
 800ee32:	3204      	adds	r2, #4
 800ee34:	7812      	ldrb	r2, [r2, #0]
 800ee36:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800ee38:	4bbd      	ldr	r3, [pc, #756]	; (800f130 <HandleMSG+0x680>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2234      	movs	r2, #52	; 0x34
 800ee3e:	435a      	muls	r2, r3
 800ee40:	4bbc      	ldr	r3, [pc, #752]	; (800f134 <HandleMSG+0x684>)
 800ee42:	18d3      	adds	r3, r2, r3
 800ee44:	3303      	adds	r3, #3
 800ee46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee48:	3203      	adds	r2, #3
 800ee4a:	6879      	ldr	r1, [r7, #4]
 800ee4c:	188a      	adds	r2, r1, r2
 800ee4e:	3204      	adds	r2, #4
 800ee50:	7812      	ldrb	r2, [r2, #0]
 800ee52:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800ee54:	4bb6      	ldr	r3, [pc, #728]	; (800f130 <HandleMSG+0x680>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2234      	movs	r2, #52	; 0x34
 800ee5a:	435a      	muls	r2, r3
 800ee5c:	4bb5      	ldr	r3, [pc, #724]	; (800f134 <HandleMSG+0x684>)
 800ee5e:	18d3      	adds	r3, r2, r3
 800ee60:	1d18      	adds	r0, r3, #4
 800ee62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee64:	3304      	adds	r3, #4
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	18d3      	adds	r3, r2, r3
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	2204      	movs	r2, #4
 800ee6e:	0019      	movs	r1, r3
 800ee70:	f004 f926 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800ee74:	4bae      	ldr	r3, [pc, #696]	; (800f130 <HandleMSG+0x680>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2234      	movs	r2, #52	; 0x34
 800ee7a:	4353      	muls	r3, r2
 800ee7c:	3308      	adds	r3, #8
 800ee7e:	001a      	movs	r2, r3
 800ee80:	4bac      	ldr	r3, [pc, #688]	; (800f134 <HandleMSG+0x684>)
 800ee82:	18d3      	adds	r3, r2, r3
 800ee84:	1d18      	adds	r0, r3, #4
 800ee86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee88:	3308      	adds	r3, #8
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	18d3      	adds	r3, r2, r3
 800ee8e:	3304      	adds	r3, #4
 800ee90:	2204      	movs	r2, #4
 800ee92:	0019      	movs	r1, r3
 800ee94:	f004 f914 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800ee98:	4ba5      	ldr	r3, [pc, #660]	; (800f130 <HandleMSG+0x680>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2234      	movs	r2, #52	; 0x34
 800ee9e:	4353      	muls	r3, r2
 800eea0:	3308      	adds	r3, #8
 800eea2:	001a      	movs	r2, r3
 800eea4:	4ba3      	ldr	r3, [pc, #652]	; (800f134 <HandleMSG+0x684>)
 800eea6:	18d0      	adds	r0, r2, r3
 800eea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeaa:	330c      	adds	r3, #12
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	18d3      	adds	r3, r2, r3
 800eeb0:	3304      	adds	r3, #4
 800eeb2:	2204      	movs	r2, #4
 800eeb4:	0019      	movs	r1, r3
 800eeb6:	f004 f903 	bl	80130c0 <memcpy>

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800eeba:	4b9d      	ldr	r3, [pc, #628]	; (800f130 <HandleMSG+0x680>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2234      	movs	r2, #52	; 0x34
 800eec0:	4353      	muls	r3, r2
 800eec2:	3310      	adds	r3, #16
 800eec4:	001a      	movs	r2, r3
 800eec6:	4b9b      	ldr	r3, [pc, #620]	; (800f134 <HandleMSG+0x684>)
 800eec8:	18d0      	adds	r0, r2, r3
 800eeca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eecc:	3310      	adds	r3, #16
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	18d3      	adds	r3, r2, r3
 800eed2:	3304      	adds	r3, #4
 800eed4:	2204      	movs	r2, #4
 800eed6:	0019      	movs	r1, r3
 800eed8:	f004 f8f2 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800eedc:	4b94      	ldr	r3, [pc, #592]	; (800f130 <HandleMSG+0x680>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2234      	movs	r2, #52	; 0x34
 800eee2:	4353      	muls	r3, r2
 800eee4:	3310      	adds	r3, #16
 800eee6:	001a      	movs	r2, r3
 800eee8:	4b92      	ldr	r3, [pc, #584]	; (800f134 <HandleMSG+0x684>)
 800eeea:	18d3      	adds	r3, r2, r3
 800eeec:	1d18      	adds	r0, r3, #4
 800eeee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eef0:	3314      	adds	r3, #20
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	18d3      	adds	r3, r2, r3
 800eef6:	3304      	adds	r3, #4
 800eef8:	2204      	movs	r2, #4
 800eefa:	0019      	movs	r1, r3
 800eefc:	f004 f8e0 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800ef00:	4b8b      	ldr	r3, [pc, #556]	; (800f130 <HandleMSG+0x680>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2234      	movs	r2, #52	; 0x34
 800ef06:	4353      	muls	r3, r2
 800ef08:	3318      	adds	r3, #24
 800ef0a:	001a      	movs	r2, r3
 800ef0c:	4b89      	ldr	r3, [pc, #548]	; (800f134 <HandleMSG+0x684>)
 800ef0e:	18d0      	adds	r0, r2, r3
 800ef10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef12:	3318      	adds	r3, #24
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	18d3      	adds	r3, r2, r3
 800ef18:	3304      	adds	r3, #4
 800ef1a:	2204      	movs	r2, #4
 800ef1c:	0019      	movs	r1, r3
 800ef1e:	f004 f8cf 	bl	80130c0 <memcpy>

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800ef22:	4b83      	ldr	r3, [pc, #524]	; (800f130 <HandleMSG+0x680>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2234      	movs	r2, #52	; 0x34
 800ef28:	4353      	muls	r3, r2
 800ef2a:	3318      	adds	r3, #24
 800ef2c:	001a      	movs	r2, r3
 800ef2e:	4b81      	ldr	r3, [pc, #516]	; (800f134 <HandleMSG+0x684>)
 800ef30:	18d3      	adds	r3, r2, r3
 800ef32:	1d18      	adds	r0, r3, #4
 800ef34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef36:	331c      	adds	r3, #28
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	18d3      	adds	r3, r2, r3
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	2204      	movs	r2, #4
 800ef40:	0019      	movs	r1, r3
 800ef42:	f004 f8bd 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800ef46:	4b7a      	ldr	r3, [pc, #488]	; (800f130 <HandleMSG+0x680>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2234      	movs	r2, #52	; 0x34
 800ef4c:	4353      	muls	r3, r2
 800ef4e:	3320      	adds	r3, #32
 800ef50:	001a      	movs	r2, r3
 800ef52:	4b78      	ldr	r3, [pc, #480]	; (800f134 <HandleMSG+0x684>)
 800ef54:	18d0      	adds	r0, r2, r3
 800ef56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef58:	3320      	adds	r3, #32
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	18d3      	adds	r3, r2, r3
 800ef5e:	3304      	adds	r3, #4
 800ef60:	2204      	movs	r2, #4
 800ef62:	0019      	movs	r1, r3
 800ef64:	f004 f8ac 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800ef68:	4b71      	ldr	r3, [pc, #452]	; (800f130 <HandleMSG+0x680>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2234      	movs	r2, #52	; 0x34
 800ef6e:	4353      	muls	r3, r2
 800ef70:	3320      	adds	r3, #32
 800ef72:	001a      	movs	r2, r3
 800ef74:	4b6f      	ldr	r3, [pc, #444]	; (800f134 <HandleMSG+0x684>)
 800ef76:	18d3      	adds	r3, r2, r3
 800ef78:	1d18      	adds	r0, r3, #4
 800ef7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef7c:	3324      	adds	r3, #36	; 0x24
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	18d3      	adds	r3, r2, r3
 800ef82:	3304      	adds	r3, #4
 800ef84:	2204      	movs	r2, #4
 800ef86:	0019      	movs	r1, r3
 800ef88:	f004 f89a 	bl	80130c0 <memcpy>

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800ef8c:	4b68      	ldr	r3, [pc, #416]	; (800f130 <HandleMSG+0x680>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2234      	movs	r2, #52	; 0x34
 800ef92:	4353      	muls	r3, r2
 800ef94:	3328      	adds	r3, #40	; 0x28
 800ef96:	001a      	movs	r2, r3
 800ef98:	4b66      	ldr	r3, [pc, #408]	; (800f134 <HandleMSG+0x684>)
 800ef9a:	18d0      	adds	r0, r2, r3
 800ef9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef9e:	3328      	adds	r3, #40	; 0x28
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	18d3      	adds	r3, r2, r3
 800efa4:	3304      	adds	r3, #4
 800efa6:	2204      	movs	r2, #4
 800efa8:	0019      	movs	r1, r3
 800efaa:	f004 f889 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800efae:	4b60      	ldr	r3, [pc, #384]	; (800f130 <HandleMSG+0x680>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2234      	movs	r2, #52	; 0x34
 800efb4:	4353      	muls	r3, r2
 800efb6:	3328      	adds	r3, #40	; 0x28
 800efb8:	001a      	movs	r2, r3
 800efba:	4b5e      	ldr	r3, [pc, #376]	; (800f134 <HandleMSG+0x684>)
 800efbc:	18d3      	adds	r3, r2, r3
 800efbe:	1d18      	adds	r0, r3, #4
 800efc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efc2:	332c      	adds	r3, #44	; 0x2c
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	18d3      	adds	r3, r2, r3
 800efc8:	3304      	adds	r3, #4
 800efca:	2204      	movs	r2, #4
 800efcc:	0019      	movs	r1, r3
 800efce:	f004 f877 	bl	80130c0 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800efd2:	4b57      	ldr	r3, [pc, #348]	; (800f130 <HandleMSG+0x680>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2234      	movs	r2, #52	; 0x34
 800efd8:	4353      	muls	r3, r2
 800efda:	3330      	adds	r3, #48	; 0x30
 800efdc:	001a      	movs	r2, r3
 800efde:	4b55      	ldr	r3, [pc, #340]	; (800f134 <HandleMSG+0x684>)
 800efe0:	18d0      	adds	r0, r2, r3
 800efe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efe4:	3330      	adds	r3, #48	; 0x30
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	18d3      	adds	r3, r2, r3
 800efea:	3304      	adds	r3, #4
 800efec:	2204      	movs	r2, #4
 800efee:	0019      	movs	r1, r3
 800eff0:	f004 f866 	bl	80130c0 <memcpy>

        msg_offset += 52;
 800eff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff6:	3334      	adds	r3, #52	; 0x34
 800eff8:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800effa:	4b4f      	ldr	r3, [pc, #316]	; (800f138 <HandleMSG+0x688>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	4b4d      	ldr	r3, [pc, #308]	; (800f138 <HandleMSG+0x688>)
 800f002:	601a      	str	r2, [r3, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800f004:	4b4c      	ldr	r3, [pc, #304]	; (800f138 <HandleMSG+0x688>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b08      	cmp	r3, #8
 800f00a:	dd02      	ble.n	800f012 <HandleMSG+0x562>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800f00c:	4b4a      	ldr	r3, [pc, #296]	; (800f138 <HandleMSG+0x688>)
 800f00e:	2208      	movs	r2, #8
 800f010:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 800f012:	4b47      	ldr	r3, [pc, #284]	; (800f130 <HandleMSG+0x680>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	4b45      	ldr	r3, [pc, #276]	; (800f130 <HandleMSG+0x680>)
 800f01a:	601a      	str	r2, [r3, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800f01c:	4b44      	ldr	r3, [pc, #272]	; (800f130 <HandleMSG+0x680>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b07      	cmp	r3, #7
 800f022:	dd02      	ble.n	800f02a <HandleMSG+0x57a>
        {
          OfflineDataWriteIndex = 0;
 800f024:	4b42      	ldr	r3, [pc, #264]	; (800f130 <HandleMSG+0x680>)
 800f026:	2200      	movs	r2, #0
 800f028:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800f02a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f02c:	3301      	adds	r3, #1
 800f02e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f034:	429a      	cmp	r2, r3
 800f036:	d200      	bcs.n	800f03a <HandleMSG+0x58a>
 800f038:	e6d6      	b.n	800ede8 <HandleMSG+0x338>
        }
      }

      SensorReadRequest = 1;
 800f03a:	4b40      	ldr	r3, [pc, #256]	; (800f13c <HandleMSG+0x68c>)
 800f03c:	2201      	movs	r2, #1
 800f03e:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	0018      	movs	r0, r3
 800f044:	f7ff fd07 	bl	800ea56 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2203      	movs	r2, #3
 800f04c:	601a      	str	r2, [r3, #0]
      break;
 800f04e:	e069      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b03      	cmp	r3, #3
 800f056:	d801      	bhi.n	800f05c <HandleMSG+0x5ac>
      {
        return 0;
 800f058:	2300      	movs	r3, #0
 800f05a:	e064      	b.n	800f126 <HandleMSG+0x676>
      }

      if (Msg->Data[3] == 1U)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	79db      	ldrb	r3, [r3, #7]
 800f060:	2b01      	cmp	r3, #1
 800f062:	d10b      	bne.n	800f07c <HandleMSG+0x5cc>
      {
        UseOfflineData = 1U;
 800f064:	4b36      	ldr	r3, [pc, #216]	; (800f140 <HandleMSG+0x690>)
 800f066:	2201      	movs	r2, #1
 800f068:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800f06a:	4b36      	ldr	r3, [pc, #216]	; (800f144 <HandleMSG+0x694>)
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	4b36      	ldr	r3, [pc, #216]	; (800f148 <HandleMSG+0x698>)
 800f070:	601a      	str	r2, [r3, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800f072:	4b34      	ldr	r3, [pc, #208]	; (800f144 <HandleMSG+0x694>)
 800f074:	2201      	movs	r2, #1
 800f076:	4252      	negs	r2, r2
 800f078:	601a      	str	r2, [r3, #0]
 800f07a:	e006      	b.n	800f08a <HandleMSG+0x5da>
//        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
      }
      else
      {
        UseOfflineData = 0U;
 800f07c:	4b30      	ldr	r3, [pc, #192]	; (800f140 <HandleMSG+0x690>)
 800f07e:	2200      	movs	r2, #0
 800f080:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800f082:	4b31      	ldr	r3, [pc, #196]	; (800f148 <HandleMSG+0x698>)
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	4b2f      	ldr	r3, [pc, #188]	; (800f144 <HandleMSG+0x694>)
 800f088:	601a      	str	r2, [r3, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	0018      	movs	r0, r3
 800f08e:	f7ff fce2 	bl	800ea56 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	0018      	movs	r0, r3
 800f096:	f7ff fc49 	bl	800e92c <UART_SendMsg>
      break;
 800f09a:	e043      	b.n	800f124 <HandleMSG+0x674>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d801      	bhi.n	800f0a8 <HandleMSG+0x5f8>
      {
        return 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	e03e      	b.n	800f126 <HandleMSG+0x676>
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	1dd8      	adds	r0, r3, #7
 800f0ac:	4b27      	ldr	r3, [pc, #156]	; (800f14c <HandleMSG+0x69c>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2204      	movs	r2, #4
 800f0b2:	0019      	movs	r1, r3
 800f0b4:	f000 fbed 	bl	800f892 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	330b      	adds	r3, #11
 800f0bc:	2201      	movs	r2, #1
 800f0be:	2130      	movs	r1, #48	; 0x30
 800f0c0:	0018      	movs	r0, r3
 800f0c2:	f000 fbe6 	bl	800f892 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	0018      	movs	r0, r3
 800f0ca:	f7ff fcc4 	bl	800ea56 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2208      	movs	r2, #8
 800f0d2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	0018      	movs	r0, r3
 800f0d8:	f7ff fc28 	bl	800e92c <UART_SendMsg>
      break;
 800f0dc:	e022      	b.n	800f124 <HandleMSG+0x674>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d801      	bhi.n	800f0ea <HandleMSG+0x63a>
      {
        return 0;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e01d      	b.n	800f126 <HandleMSG+0x676>
      }

      Enabled6X = Msg->Data[3];
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	79da      	ldrb	r2, [r3, #7]
 800f0ee:	4b18      	ldr	r3, [pc, #96]	; (800f150 <HandleMSG+0x6a0>)
 800f0f0:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 800f0f2:	4b17      	ldr	r3, [pc, #92]	; (800f150 <HandleMSG+0x6a0>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d104      	bne.n	800f104 <HandleMSG+0x654>
      {
        MotionFX_manager_stop_9X();
 800f0fa:	f000 fa81 	bl	800f600 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 800f0fe:	f000 fa67 	bl	800f5d0 <MotionFX_manager_start_6X>
 800f102:	e003      	b.n	800f10c <HandleMSG+0x65c>
      }
      else
      {
        MotionFX_manager_stop_6X();
 800f104:	f000 fa6c 	bl	800f5e0 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 800f108:	f000 fa72 	bl	800f5f0 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	0018      	movs	r0, r3
 800f110:	f7ff fca1 	bl	800ea56 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	0018      	movs	r0, r3
 800f118:	f7ff fc08 	bl	800e92c <UART_SendMsg>
      break;
 800f11c:	e002      	b.n	800f124 <HandleMSG+0x674>

    default:
      ret = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800f122:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800f124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800f126:	0018      	movs	r0, r3
 800f128:	46bd      	mov	sp, r7
 800f12a:	b018      	add	sp, #96	; 0x60
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	46c0      	nop			; (mov r8, r8)
 800f130:	20000fac 	.word	0x20000fac
 800f134:	20000e08 	.word	0x20000e08
 800f138:	20000fb0 	.word	0x20000fb0
 800f13c:	2000026c 	.word	0x2000026c
 800f140:	20000e04 	.word	0x20000e04
 800f144:	20000268 	.word	0x20000268
 800f148:	20001610 	.word	0x20001610
 800f14c:	20000270 	.word	0x20000270
 800f150:	20000fb4 	.word	0x20000fb4

0800f154 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800f154:	b5b0      	push	{r4, r5, r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	0005      	movs	r5, r0
 800f15c:	000c      	movs	r4, r1
 800f15e:	0010      	movs	r0, r2
 800f160:	0019      	movs	r1, r3
 800f162:	1dfb      	adds	r3, r7, #7
 800f164:	1c2a      	adds	r2, r5, #0
 800f166:	701a      	strb	r2, [r3, #0]
 800f168:	1dbb      	adds	r3, r7, #6
 800f16a:	1c22      	adds	r2, r4, #0
 800f16c:	701a      	strb	r2, [r3, #0]
 800f16e:	1d7b      	adds	r3, r7, #5
 800f170:	1c02      	adds	r2, r0, #0
 800f172:	701a      	strb	r2, [r3, #0]
 800f174:	1d3b      	adds	r3, r7, #4
 800f176:	1c0a      	adds	r2, r1, #0
 800f178:	701a      	strb	r2, [r3, #0]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800f17a:	210c      	movs	r1, #12
 800f17c:	187b      	adds	r3, r7, r1
 800f17e:	1dfa      	adds	r2, r7, #7
 800f180:	7812      	ldrb	r2, [r2, #0]
 800f182:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month   = m;
 800f184:	187b      	adds	r3, r7, r1
 800f186:	1dba      	adds	r2, r7, #6
 800f188:	7812      	ldrb	r2, [r2, #0]
 800f18a:	705a      	strb	r2, [r3, #1]
  sdatestructure.Date    = d;
 800f18c:	187b      	adds	r3, r7, r1
 800f18e:	1d7a      	adds	r2, r7, #5
 800f190:	7812      	ldrb	r2, [r2, #0]
 800f192:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = dw;
 800f194:	187b      	adds	r3, r7, r1
 800f196:	1d3a      	adds	r2, r7, #4
 800f198:	7812      	ldrb	r2, [r2, #0]
 800f19a:	701a      	strb	r2, [r3, #0]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800f19c:	1879      	adds	r1, r7, r1
 800f19e:	4b06      	ldr	r3, [pc, #24]	; (800f1b8 <RTC_DateRegulate+0x64>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	0018      	movs	r0, r3
 800f1a4:	f7fd fba0 	bl	800c8e8 <HAL_RTC_SetDate>
 800f1a8:	1e03      	subs	r3, r0, #0
 800f1aa:	d001      	beq.n	800f1b0 <RTC_DateRegulate+0x5c>
  {
    /* Initialization Error */
    Error_Handler();
 800f1ac:	f7f2 fb48 	bl	8001840 <Error_Handler>
  }
}
 800f1b0:	46c0      	nop			; (mov r8, r8)
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	b004      	add	sp, #16
 800f1b6:	bdb0      	pop	{r4, r5, r7, pc}
 800f1b8:	20000ae0 	.word	0x20000ae0

0800f1bc <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800f1bc:	b590      	push	{r4, r7, lr}
 800f1be:	b089      	sub	sp, #36	; 0x24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	0004      	movs	r4, r0
 800f1c4:	0008      	movs	r0, r1
 800f1c6:	0011      	movs	r1, r2
 800f1c8:	1dfb      	adds	r3, r7, #7
 800f1ca:	1c22      	adds	r2, r4, #0
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	1dbb      	adds	r3, r7, #6
 800f1d0:	1c02      	adds	r2, r0, #0
 800f1d2:	701a      	strb	r2, [r3, #0]
 800f1d4:	1d7b      	adds	r3, r7, #5
 800f1d6:	1c0a      	adds	r2, r1, #0
 800f1d8:	701a      	strb	r2, [r3, #0]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800f1da:	210c      	movs	r1, #12
 800f1dc:	187b      	adds	r3, r7, r1
 800f1de:	1dfa      	adds	r2, r7, #7
 800f1e0:	7812      	ldrb	r2, [r2, #0]
 800f1e2:	701a      	strb	r2, [r3, #0]
  stimestructure.Minutes        = mm;
 800f1e4:	187b      	adds	r3, r7, r1
 800f1e6:	1dba      	adds	r2, r7, #6
 800f1e8:	7812      	ldrb	r2, [r2, #0]
 800f1ea:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds        = ss;
 800f1ec:	187b      	adds	r3, r7, r1
 800f1ee:	1d7a      	adds	r2, r7, #5
 800f1f0:	7812      	ldrb	r2, [r2, #0]
 800f1f2:	709a      	strb	r2, [r3, #2]
  stimestructure.SubSeconds     = 0;
 800f1f4:	187b      	adds	r3, r7, r1
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	605a      	str	r2, [r3, #4]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800f1fa:	187b      	adds	r3, r7, r1
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	70da      	strb	r2, [r3, #3]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f200:	187b      	adds	r3, r7, r1
 800f202:	2200      	movs	r2, #0
 800f204:	60da      	str	r2, [r3, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800f206:	187b      	adds	r3, r7, r1
 800f208:	2200      	movs	r2, #0
 800f20a:	611a      	str	r2, [r3, #16]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800f20c:	1879      	adds	r1, r7, r1
 800f20e:	4b06      	ldr	r3, [pc, #24]	; (800f228 <RTC_TimeRegulate+0x6c>)
 800f210:	2200      	movs	r2, #0
 800f212:	0018      	movs	r0, r3
 800f214:	f7fd fa48 	bl	800c6a8 <HAL_RTC_SetTime>
 800f218:	1e03      	subs	r3, r0, #0
 800f21a:	d001      	beq.n	800f220 <RTC_TimeRegulate+0x64>
  {
    /* Initialization Error */
    Error_Handler();
 800f21c:	f7f2 fb10 	bl	8001840 <Error_Handler>
  }
}
 800f220:	46c0      	nop			; (mov r8, r8)
 800f222:	46bd      	mov	sp, r7
 800f224:	b009      	add	sp, #36	; 0x24
 800f226:	bd90      	pop	{r4, r7, pc}
 800f228:	20000ae0 	.word	0x20000ae0

0800f22c <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800f22c:	b5b0      	push	{r4, r5, r7, lr}
 800f22e:	b09e      	sub	sp, #120	; 0x78
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800f236:	2473      	movs	r4, #115	; 0x73
 800f238:	193b      	adds	r3, r7, r4
 800f23a:	220d      	movs	r2, #13
 800f23c:	701a      	strb	r2, [r3, #0]
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 800f242:	2308      	movs	r3, #8
 800f244:	18fb      	adds	r3, r7, r3
 800f246:	4a16      	ldr	r2, [pc, #88]	; (800f2a0 <Get_PresentationString+0x74>)
 800f248:	ca23      	ldmia	r2!, {r0, r1, r5}
 800f24a:	c323      	stmia	r3!, {r0, r1, r5}
 800f24c:	ca23      	ldmia	r2!, {r0, r1, r5}
 800f24e:	c323      	stmia	r3!, {r0, r1, r5}
 800f250:	ca23      	ldmia	r2!, {r0, r1, r5}
 800f252:	c323      	stmia	r3!, {r0, r1, r5}

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 800f254:	232c      	movs	r3, #44	; 0x2c
 800f256:	18fa      	adds	r2, r7, r3
 800f258:	2530      	movs	r5, #48	; 0x30
 800f25a:	197b      	adds	r3, r7, r5
 800f25c:	0011      	movs	r1, r2
 800f25e:	0018      	movs	r0, r3
 800f260:	f000 f9d6 	bl	800f610 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800f264:	193b      	adds	r3, r7, r4
 800f266:	781a      	ldrb	r2, [r3, #0]
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	429a      	cmp	r2, r3
 800f26c:	da05      	bge.n	800f27a <Get_PresentationString+0x4e>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800f26e:	193b      	adds	r3, r7, r4
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	197a      	adds	r2, r7, r5
 800f274:	18d3      	adds	r3, r2, r3
 800f276:	677b      	str	r3, [r7, #116]	; 0x74
 800f278:	e002      	b.n	800f280 <Get_PresentationString+0x54>
  }
  else
  {
    lib_version_num = lib_version_string;
 800f27a:	2330      	movs	r3, #48	; 0x30
 800f27c:	18fb      	adds	r3, r7, r3
 800f27e:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800f280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f282:	2208      	movs	r2, #8
 800f284:	18ba      	adds	r2, r7, r2
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	2140      	movs	r1, #64	; 0x40
 800f28a:	f003 ff2b 	bl	80130e4 <sniprintf>
 800f28e:	0003      	movs	r3, r0
 800f290:	001a      	movs	r2, r3
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	601a      	str	r2, [r3, #0]
}
 800f296:	46c0      	nop			; (mov r8, r8)
 800f298:	46bd      	mov	sp, r7
 800f29a:	b01e      	add	sp, #120	; 0x78
 800f29c:	bdb0      	pop	{r4, r5, r7, pc}
 800f29e:	46c0      	nop			; (mov r8, r8)
 800f2a0:	08015080 	.word	0x08015080

0800f2a4 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800f2a8:	2102      	movs	r1, #2
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	f7f9 fe18 	bl	8008ee0 <IKS01A3_MOTION_SENSOR_Init>
}
 800f2b0:	46c0      	nop			; (mov r8, r8)
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	2000      	movs	r0, #0
 800f2be:	f7f9 fe0f 	bl	8008ee0 <IKS01A3_MOTION_SENSOR_Init>
}
 800f2c2:	46c0      	nop			; (mov r8, r8)
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800f2cc:	2104      	movs	r1, #4
 800f2ce:	2002      	movs	r0, #2
 800f2d0:	f7f9 fe06 	bl	8008ee0 <IKS01A3_MOTION_SENSOR_Init>
}
 800f2d4:	46c0      	nop			; (mov r8, r8)
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800f2de:	2102      	movs	r1, #2
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	f7f9 f9ed 	bl	80086c0 <IKS01A3_ENV_SENSOR_Init>
}
 800f2e6:	46c0      	nop			; (mov r8, r8)
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	f7f9 f9e4 	bl	80086c0 <IKS01A3_ENV_SENSOR_Init>
}
 800f2f8:	46c0      	nop			; (mov r8, r8)
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800f302:	2104      	movs	r1, #4
 800f304:	2000      	movs	r0, #0
 800f306:	f7f9 f9db 	bl	80086c0 <IKS01A3_ENV_SENSOR_Init>
}
 800f30a:	46c0      	nop			; (mov r8, r8)
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800f314:	2102      	movs	r1, #2
 800f316:	2000      	movs	r0, #0
 800f318:	f7f9 feee 	bl	80090f8 <IKS01A3_MOTION_SENSOR_Enable>
}
 800f31c:	46c0      	nop			; (mov r8, r8)
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800f326:	2101      	movs	r1, #1
 800f328:	2000      	movs	r0, #0
 800f32a:	f7f9 fee5 	bl	80090f8 <IKS01A3_MOTION_SENSOR_Enable>
}
 800f32e:	46c0      	nop			; (mov r8, r8)
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800f338:	2104      	movs	r1, #4
 800f33a:	2002      	movs	r0, #2
 800f33c:	f7f9 fedc 	bl	80090f8 <IKS01A3_MOTION_SENSOR_Enable>
}
 800f340:	46c0      	nop			; (mov r8, r8)
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800f34a:	2102      	movs	r1, #2
 800f34c:	2001      	movs	r0, #1
 800f34e:	f7f9 fac3 	bl	80088d8 <IKS01A3_ENV_SENSOR_Enable>
}
 800f352:	46c0      	nop			; (mov r8, r8)
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800f35c:	2101      	movs	r1, #1
 800f35e:	2000      	movs	r0, #0
 800f360:	f7f9 faba 	bl	80088d8 <IKS01A3_ENV_SENSOR_Enable>
}
 800f364:	46c0      	nop			; (mov r8, r8)
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800f36e:	2104      	movs	r1, #4
 800f370:	2000      	movs	r0, #0
 800f372:	f7f9 fab1 	bl	80088d8 <IKS01A3_ENV_SENSOR_Enable>
}
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800f380:	2102      	movs	r1, #2
 800f382:	2000      	movs	r0, #0
 800f384:	f7f9 fefa 	bl	800917c <IKS01A3_MOTION_SENSOR_Disable>
}
 800f388:	46c0      	nop			; (mov r8, r8)
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800f38e:	b580      	push	{r7, lr}
 800f390:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800f392:	2101      	movs	r1, #1
 800f394:	2000      	movs	r0, #0
 800f396:	f7f9 fef1 	bl	800917c <IKS01A3_MOTION_SENSOR_Disable>
}
 800f39a:	46c0      	nop			; (mov r8, r8)
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800f3a4:	2104      	movs	r1, #4
 800f3a6:	2002      	movs	r0, #2
 800f3a8:	f7f9 fee8 	bl	800917c <IKS01A3_MOTION_SENSOR_Disable>
}
 800f3ac:	46c0      	nop			; (mov r8, r8)
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800f3b6:	2102      	movs	r1, #2
 800f3b8:	2001      	movs	r0, #1
 800f3ba:	f7f9 facf 	bl	800895c <IKS01A3_ENV_SENSOR_Disable>
}
 800f3be:	46c0      	nop			; (mov r8, r8)
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800f3c8:	2101      	movs	r1, #1
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	f7f9 fac6 	bl	800895c <IKS01A3_ENV_SENSOR_Disable>
}
 800f3d0:	46c0      	nop			; (mov r8, r8)
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800f3da:	2104      	movs	r1, #4
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f7f9 fabd 	bl	800895c <IKS01A3_ENV_SENSOR_Disable>
}
 800f3e2:	46c0      	nop			; (mov r8, r8)
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	001a      	movs	r2, r3
 800f3f4:	2102      	movs	r1, #2
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	f7f9 ff02 	bl	8009200 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800f3fc:	46c0      	nop			; (mov r8, r8)
 800f3fe:	46bd      	mov	sp, r7
 800f400:	b002      	add	sp, #8
 800f402:	bd80      	pop	{r7, pc}

0800f404 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	001a      	movs	r2, r3
 800f410:	2101      	movs	r1, #1
 800f412:	2000      	movs	r0, #0
 800f414:	f7f9 fef4 	bl	8009200 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800f418:	46c0      	nop			; (mov r8, r8)
 800f41a:	46bd      	mov	sp, r7
 800f41c:	b002      	add	sp, #8
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, Axes);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	001a      	movs	r2, r3
 800f42c:	2104      	movs	r1, #4
 800f42e:	2002      	movs	r0, #2
 800f430:	f7f9 fee6 	bl	8009200 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800f434:	46c0      	nop			; (mov r8, r8)
 800f436:	46bd      	mov	sp, r7
 800f438:	b002      	add	sp, #8
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, Value);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	001a      	movs	r2, r3
 800f448:	2102      	movs	r1, #2
 800f44a:	2001      	movs	r0, #1
 800f44c:	f7f9 fac8 	bl	80089e0 <IKS01A3_ENV_SENSOR_GetValue>
}
 800f450:	46c0      	nop			; (mov r8, r8)
 800f452:	46bd      	mov	sp, r7
 800f454:	b002      	add	sp, #8
 800f456:	bd80      	pop	{r7, pc}

0800f458 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, Value);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	001a      	movs	r2, r3
 800f464:	2101      	movs	r1, #1
 800f466:	2000      	movs	r0, #0
 800f468:	f7f9 faba 	bl	80089e0 <IKS01A3_ENV_SENSOR_GetValue>
}
 800f46c:	46c0      	nop			; (mov r8, r8)
 800f46e:	46bd      	mov	sp, r7
 800f470:	b002      	add	sp, #8
 800f472:	bd80      	pop	{r7, pc}

0800f474 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, Value);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	001a      	movs	r2, r3
 800f480:	2104      	movs	r1, #4
 800f482:	2000      	movs	r0, #0
 800f484:	f7f9 faac 	bl	80089e0 <IKS01A3_ENV_SENSOR_GetValue>
}
 800f488:	46c0      	nop			; (mov r8, r8)
 800f48a:	46bd      	mov	sp, r7
 800f48c:	b002      	add	sp, #8
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	1c1a      	adds	r2, r3, #0
 800f49c:	2102      	movs	r1, #2
 800f49e:	2000      	movs	r0, #0
 800f4a0:	f7f9 fef2 	bl	8009288 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 800f4a4:	46c0      	nop			; (mov r8, r8)
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	b002      	add	sp, #8
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	001a      	movs	r2, r3
 800f4b8:	2102      	movs	r1, #2
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	f7f9 ff28 	bl	8009310 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 800f4c0:	46c0      	nop			; (mov r8, r8)
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	b002      	add	sp, #8
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2273      	movs	r2, #115	; 0x73
 800f4d4:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	2265      	movs	r2, #101	; 0x65
 800f4dc:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	3302      	adds	r3, #2
 800f4e2:	2275      	movs	r2, #117	; 0x75
 800f4e4:	701a      	strb	r2, [r3, #0]
}
 800f4e6:	46c0      	nop			; (mov r8, r8)
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	b002      	add	sp, #8
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b082      	sub	sp, #8
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2273      	movs	r2, #115	; 0x73
 800f4fa:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3301      	adds	r3, #1
 800f500:	2265      	movs	r2, #101	; 0x65
 800f502:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3302      	adds	r3, #2
 800f508:	2275      	movs	r2, #117	; 0x75
 800f50a:	701a      	strb	r2, [r3, #0]
}
 800f50c:	46c0      	nop			; (mov r8, r8)
 800f50e:	46bd      	mov	sp, r7
 800f510:	b002      	add	sp, #8
 800f512:	bd80      	pop	{r7, pc}

0800f514 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	226e      	movs	r2, #110	; 0x6e
 800f520:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	3301      	adds	r3, #1
 800f526:	2265      	movs	r2, #101	; 0x65
 800f528:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3302      	adds	r3, #2
 800f52e:	2275      	movs	r2, #117	; 0x75
 800f530:	701a      	strb	r2, [r3, #0]
}
 800f532:	46c0      	nop			; (mov r8, r8)
 800f534:	46bd      	mov	sp, r7
 800f536:	b002      	add	sp, #8
 800f538:	bd80      	pop	{r7, pc}

0800f53a <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800f53a:	b5b0      	push	{r4, r5, r7, lr}
 800f53c:	b084      	sub	sp, #16
 800f53e:	af00      	add	r7, sp, #0
  char acc_orientation[4];
  char gyro_orientation[4];
  char mag_orientation[4];

  BSP_SENSOR_ACC_GetOrientation(acc_orientation);
 800f540:	240c      	movs	r4, #12
 800f542:	193b      	adds	r3, r7, r4
 800f544:	0018      	movs	r0, r3
 800f546:	f7ff ffbf 	bl	800f4c8 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(gyro_orientation);
 800f54a:	2508      	movs	r5, #8
 800f54c:	197b      	adds	r3, r7, r5
 800f54e:	0018      	movs	r0, r3
 800f550:	f7ff ffcd 	bl	800f4ee <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(mag_orientation);
 800f554:	1d3b      	adds	r3, r7, #4
 800f556:	0018      	movs	r0, r3
 800f558:	f7ff ffdc 	bl	800f514 <BSP_SENSOR_MAG_GetOrientation>

  MotionFX_CM0P_initialize(MFX_CM0P_MCU_STM32);
 800f55c:	2000      	movs	r0, #0
 800f55e:	f002 fbf7 	bl	8011d50 <MotionFX_CM0P_initialize>

  MotionFX_CM0P_setOrientation(acc_orientation, gyro_orientation, mag_orientation);
 800f562:	1d3a      	adds	r2, r7, #4
 800f564:	1979      	adds	r1, r7, r5
 800f566:	193b      	adds	r3, r7, r4
 800f568:	0018      	movs	r0, r3
 800f56a:	f002 fd05 	bl	8011f78 <MotionFX_CM0P_setOrientation>

  MotionFX_CM0P_enable_gbias(MFX_CM0P_ENGINE_ENABLE);
 800f56e:	2001      	movs	r0, #1
 800f570:	f002 fd40 	bl	8011ff4 <MotionFX_CM0P_enable_gbias>
  MotionFX_CM0P_enable_euler(MFX_CM0P_ENGINE_ENABLE);
 800f574:	2001      	movs	r0, #1
 800f576:	f002 fd31 	bl	8011fdc <MotionFX_CM0P_enable_euler>
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
 800f57a:	2000      	movs	r0, #0
 800f57c:	f002 fd16 	bl	8011fac <MotionFX_CM0P_enable_6X>
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);
 800f580:	2000      	movs	r0, #0
 800f582:	f002 fd1f 	bl	8011fc4 <MotionFX_CM0P_enable_9X>
}
 800f586:	46c0      	nop			; (mov r8, r8)
 800f588:	46bd      	mov	sp, r7
 800f58a:	b004      	add	sp, #16
 800f58c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f590 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_CM0P_input_t *data_in, MFX_CM0P_output_t *data_out, float delta_time)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800f59c:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <MotionFX_manager_run+0x38>)
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	4b0a      	ldr	r3, [pc, #40]	; (800f5cc <MotionFX_manager_run+0x3c>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d106      	bne.n	800f5b6 <MotionFX_manager_run+0x26>
  {
    MotionFX_CM0P_update(data_out, data_in, delta_time);
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	68f9      	ldr	r1, [r7, #12]
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	0018      	movs	r0, r3
 800f5b0:	f002 fd2c 	bl	801200c <MotionFX_CM0P_update>
  }
  else
  {
    discardedCount++;
  }
}
 800f5b4:	e004      	b.n	800f5c0 <MotionFX_manager_run+0x30>
    discardedCount++;
 800f5b6:	4b04      	ldr	r3, [pc, #16]	; (800f5c8 <MotionFX_manager_run+0x38>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	4b02      	ldr	r3, [pc, #8]	; (800f5c8 <MotionFX_manager_run+0x38>)
 800f5be:	601a      	str	r2, [r3, #0]
}
 800f5c0:	46c0      	nop			; (mov r8, r8)
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	b004      	add	sp, #16
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	20001614 	.word	0x20001614
 800f5cc:	20000278 	.word	0x20000278

0800f5d0 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_ENABLE);
 800f5d4:	2001      	movs	r0, #1
 800f5d6:	f002 fce9 	bl	8011fac <MotionFX_CM0P_enable_6X>
}
 800f5da:	46c0      	nop			; (mov r8, r8)
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	f002 fce1 	bl	8011fac <MotionFX_CM0P_enable_6X>
}
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_ENABLE);
 800f5f4:	2001      	movs	r0, #1
 800f5f6:	f002 fce5 	bl	8011fc4 <MotionFX_CM0P_enable_9X>
}
 800f5fa:	46c0      	nop			; (mov r8, r8)
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);
 800f604:	2000      	movs	r0, #0
 800f606:	f002 fcdd 	bl	8011fc4 <MotionFX_CM0P_enable_9X>
}
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_CM0P_GetLibVersion(version);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	0018      	movs	r0, r3
 800f61e:	f003 fd01 	bl	8013024 <MotionFX_CM0P_GetLibVersion>
 800f622:	0003      	movs	r3, r0
 800f624:	001a      	movs	r2, r3
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	601a      	str	r2, [r3, #0]
}
 800f62a:	46c0      	nop			; (mov r8, r8)
 800f62c:	46bd      	mov	sp, r7
 800f62e:	b002      	add	sp, #8
 800f630:	bd80      	pop	{r7, pc}

0800f632 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_CM0P_MagCal_input_t *data_in, MFX_CM0P_MagCal_output_t *data_out)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b082      	sub	sp, #8
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
  MotionFX_CM0P_MagCal_run(data_in);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	0018      	movs	r0, r3
 800f640:	f002 ff06 	bl	8012450 <MotionFX_CM0P_MagCal_run>
  MotionFX_CM0P_MagCal_getParams(data_out);
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	0018      	movs	r0, r3
 800f648:	f003 fcce 	bl	8012fe8 <MotionFX_CM0P_MagCal_getParams>
}
 800f64c:	46c0      	nop			; (mov r8, r8)
 800f64e:	46bd      	mov	sp, r7
 800f650:	b002      	add	sp, #8
 800f652:	bd80      	pop	{r7, pc}

0800f654 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  MotionFX_CM0P_MagCal_init(sampletime, 1);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2101      	movs	r1, #1
 800f660:	0018      	movs	r0, r3
 800f662:	f002 fe3f 	bl	80122e4 <MotionFX_CM0P_MagCal_init>
}
 800f666:	46c0      	nop			; (mov r8, r8)
 800f668:	46bd      	mov	sp, r7
 800f66a:	b002      	add	sp, #8
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b082      	sub	sp, #8
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  MotionFX_CM0P_MagCal_init(sampletime, 0);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2100      	movs	r1, #0
 800f67a:	0018      	movs	r0, r3
 800f67c:	f002 fe32 	bl	80122e4 <MotionFX_CM0P_MagCal_init>
}
 800f680:	46c0      	nop			; (mov r8, r8)
 800f682:	46bd      	mov	sp, r7
 800f684:	b002      	add	sp, #8
 800f686:	bd80      	pop	{r7, pc}

0800f688 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	000a      	movs	r2, r1
 800f692:	1cfb      	adds	r3, r7, #3
 800f694:	701a      	strb	r2, [r3, #0]
  int ret = 2;
 800f696:	2302      	movs	r3, #2
 800f698:	60fb      	str	r3, [r7, #12]

  switch (Source)
 800f69a:	1cfb      	adds	r3, r7, #3
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	2bf0      	cmp	r3, #240	; 0xf0
 800f6a0:	d002      	beq.n	800f6a8 <ByteStuffCopyByte+0x20>
 800f6a2:	2bf1      	cmp	r3, #241	; 0xf1
 800f6a4:	d008      	beq.n	800f6b8 <ByteStuffCopyByte+0x30>
 800f6a6:	e00f      	b.n	800f6c8 <ByteStuffCopyByte+0x40>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	22f1      	movs	r2, #241	; 0xf1
 800f6ac:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	22f2      	movs	r2, #242	; 0xf2
 800f6b4:	701a      	strb	r2, [r3, #0]
      break;
 800f6b6:	e00e      	b.n	800f6d6 <ByteStuffCopyByte+0x4e>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	22f1      	movs	r2, #241	; 0xf1
 800f6bc:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	22f1      	movs	r2, #241	; 0xf1
 800f6c4:	701a      	strb	r2, [r3, #0]
      break;
 800f6c6:	e006      	b.n	800f6d6 <ByteStuffCopyByte+0x4e>

    default:
      Dest[0] = Source;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	1cfa      	adds	r2, r7, #3
 800f6cc:	7812      	ldrb	r2, [r2, #0]
 800f6ce:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	60fb      	str	r3, [r7, #12]
      break;
 800f6d4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
}
 800f6d8:	0018      	movs	r0, r3
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	b004      	add	sp, #16
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	60fb      	str	r3, [r7, #12]
 800f6f2:	e011      	b.n	800f718 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	18d0      	adds	r0, r2, r3
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	18d3      	adds	r3, r2, r3
 800f700:	3304      	adds	r3, #4
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	0019      	movs	r1, r3
 800f706:	f7ff ffbf 	bl	800f688 <ByteStuffCopyByte>
 800f70a:	0002      	movs	r2, r0
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	189b      	adds	r3, r3, r2
 800f710:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	3301      	adds	r3, #1
 800f716:	60fb      	str	r3, [r7, #12]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d3e8      	bcc.n	800f6f4 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	18d3      	adds	r3, r2, r3
 800f728:	22f0      	movs	r2, #240	; 0xf0
 800f72a:	701a      	strb	r2, [r3, #0]
  count++;
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	3301      	adds	r3, #1
 800f730:	60bb      	str	r3, [r7, #8]
  return count;
 800f732:	68bb      	ldr	r3, [r7, #8]
}
 800f734:	0018      	movs	r0, r3
 800f736:	46bd      	mov	sp, r7
 800f738:	b004      	add	sp, #16
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	603a      	str	r2, [r7, #0]
 800f744:	1dfb      	adds	r3, r7, #7
 800f746:	1c02      	adds	r2, r0, #0
 800f748:	701a      	strb	r2, [r3, #0]
 800f74a:	1dbb      	adds	r3, r7, #6
 800f74c:	1c0a      	adds	r2, r1, #0
 800f74e:	701a      	strb	r2, [r3, #0]
  if (Source0 == (uint8_t)TMsg_BS)
 800f750:	1dfb      	adds	r3, r7, #7
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2bf1      	cmp	r3, #241	; 0xf1
 800f756:	d113      	bne.n	800f780 <ReverseByteStuffCopyByte2+0x44>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800f758:	1dbb      	adds	r3, r7, #6
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2bf1      	cmp	r3, #241	; 0xf1
 800f75e:	d104      	bne.n	800f76a <ReverseByteStuffCopyByte2+0x2e>
    {
      *Dest = TMsg_BS;
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	22f1      	movs	r2, #241	; 0xf1
 800f764:	701a      	strb	r2, [r3, #0]
      return 2;
 800f766:	2302      	movs	r3, #2
 800f768:	e00f      	b.n	800f78a <ReverseByteStuffCopyByte2+0x4e>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800f76a:	1dbb      	adds	r3, r7, #6
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	2bf2      	cmp	r3, #242	; 0xf2
 800f770:	d104      	bne.n	800f77c <ReverseByteStuffCopyByte2+0x40>
    {
      *Dest = TMsg_EOF;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	22f0      	movs	r2, #240	; 0xf0
 800f776:	701a      	strb	r2, [r3, #0]
      return 2;
 800f778:	2302      	movs	r3, #2
 800f77a:	e006      	b.n	800f78a <ReverseByteStuffCopyByte2+0x4e>
    }

    return 0; // invalid sequence
 800f77c:	2300      	movs	r3, #0
 800f77e:	e004      	b.n	800f78a <ReverseByteStuffCopyByte2+0x4e>
  }
  else
  {
    *Dest = Source0;
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	1dfa      	adds	r2, r7, #7
 800f784:	7812      	ldrb	r2, [r2, #0]
 800f786:	701a      	strb	r2, [r3, #0]
    return 1;
 800f788:	2301      	movs	r3, #1
  }
}
 800f78a:	0018      	movs	r0, r3
 800f78c:	46bd      	mov	sp, r7
 800f78e:	b002      	add	sp, #8
 800f790:	bd80      	pop	{r7, pc}

0800f792 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 800f792:	b580      	push	{r7, lr}
 800f794:	b084      	sub	sp, #16
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800f79a:	230f      	movs	r3, #15
 800f79c:	18fb      	adds	r3, r7, r3
 800f79e:	2200      	movs	r2, #0
 800f7a0:	701a      	strb	r2, [r3, #0]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60bb      	str	r3, [r7, #8]
 800f7a6:	e00d      	b.n	800f7c4 <CHK_ComputeAndAdd+0x32>
  {
    chk -= Msg->Data[i];
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	18d3      	adds	r3, r2, r3
 800f7ae:	3304      	adds	r3, #4
 800f7b0:	781a      	ldrb	r2, [r3, #0]
 800f7b2:	210f      	movs	r1, #15
 800f7b4:	187b      	adds	r3, r7, r1
 800f7b6:	1879      	adds	r1, r7, r1
 800f7b8:	7809      	ldrb	r1, [r1, #0]
 800f7ba:	1a8a      	subs	r2, r1, r2
 800f7bc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Msg->Len; i++)
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	60bb      	str	r3, [r7, #8]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d3ec      	bcc.n	800f7a8 <CHK_ComputeAndAdd+0x16>
  }

  Msg->Data[i] = chk;
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	18d3      	adds	r3, r2, r3
 800f7d4:	3304      	adds	r3, #4
 800f7d6:	220f      	movs	r2, #15
 800f7d8:	18ba      	adds	r2, r7, r2
 800f7da:	7812      	ldrb	r2, [r2, #0]
 800f7dc:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	601a      	str	r2, [r3, #0]
}
 800f7e8:	46c0      	nop			; (mov r8, r8)
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	b004      	add	sp, #16
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800f7f8:	230f      	movs	r3, #15
 800f7fa:	18fb      	adds	r3, r7, r3
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	701a      	strb	r2, [r3, #0]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800f800:	2300      	movs	r3, #0
 800f802:	60bb      	str	r3, [r7, #8]
 800f804:	e00d      	b.n	800f822 <CHK_CheckAndRemove+0x32>
  {
    chk += Msg->Data[i];
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	18d3      	adds	r3, r2, r3
 800f80c:	3304      	adds	r3, #4
 800f80e:	7819      	ldrb	r1, [r3, #0]
 800f810:	220f      	movs	r2, #15
 800f812:	18bb      	adds	r3, r7, r2
 800f814:	18ba      	adds	r2, r7, r2
 800f816:	7812      	ldrb	r2, [r2, #0]
 800f818:	188a      	adds	r2, r1, r2
 800f81a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Msg->Len; i++)
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	3301      	adds	r3, #1
 800f820:	60bb      	str	r3, [r7, #8]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d3ec      	bcc.n	800f806 <CHK_CheckAndRemove+0x16>
  }

  Msg->Len--;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	1e5a      	subs	r2, r3, #1
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 800f836:	230f      	movs	r3, #15
 800f838:	18fb      	adds	r3, r7, r3
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	425a      	negs	r2, r3
 800f83e:	4153      	adcs	r3, r2
 800f840:	b2db      	uxtb	r3, r3
}
 800f842:	0018      	movs	r0, r3
 800f844:	46bd      	mov	sp, r7
 800f846:	b004      	add	sp, #16
 800f848:	bd80      	pop	{r7, pc}

0800f84a <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b084      	sub	sp, #16
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
 800f852:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	3b01      	subs	r3, #1
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	18d3      	adds	r3, r2, r3
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800f864:	e00d      	b.n	800f882 <Deserialize+0x38>
  {
    app <<= 8;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	021b      	lsls	r3, r3, #8
 800f86a:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	3b01      	subs	r3, #1
 800f870:	603b      	str	r3, [r7, #0]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	18d3      	adds	r3, r2, r3
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	001a      	movs	r2, r3
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	189b      	adds	r3, r3, r2
 800f880:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1ee      	bne.n	800f866 <Deserialize+0x1c>
  }

  return app;
 800f888:	68fb      	ldr	r3, [r7, #12]
}
 800f88a:	0018      	movs	r0, r3
 800f88c:	46bd      	mov	sp, r7
 800f88e:	b004      	add	sp, #16
 800f890:	bd80      	pop	{r7, pc}

0800f892 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b086      	sub	sp, #24
 800f896:	af00      	add	r7, sp, #0
 800f898:	60f8      	str	r0, [r7, #12]
 800f89a:	60b9      	str	r1, [r7, #8]
 800f89c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800f89e:	2300      	movs	r3, #0
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	e00f      	b.n	800f8c4 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	18d3      	adds	r3, r2, r3
 800f8ae:	693a      	ldr	r2, [r7, #16]
 800f8b0:	b2d2      	uxtb	r2, r2
 800f8b2:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	0a1b      	lsrs	r3, r3, #8
 800f8b8:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	617b      	str	r3, [r7, #20]
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d3eb      	bcc.n	800f8a4 <Serialize_s32+0x12>
  }
}
 800f8cc:	46c0      	nop			; (mov r8, r8)
 800f8ce:	46c0      	nop			; (mov r8, r8)
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	b006      	add	sp, #24
 800f8d4:	bd80      	pop	{r7, pc}
	...

0800f8d8 <rotate>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	0006      	movs	r6, r0
 800f8dc:	2000      	movs	r0, #0
 800f8de:	0014      	movs	r4, r2
 800f8e0:	5608      	ldrsb	r0, [r1, r0]
 800f8e2:	000d      	movs	r5, r1
 800f8e4:	f7f1 fd6c 	bl	80013c0 <__aeabi_i2f>
 800f8e8:	6821      	ldr	r1, [r4, #0]
 800f8ea:	f7f1 fa5f 	bl	8000dac <__aeabi_fmul>
 800f8ee:	1c07      	adds	r7, r0, #0
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	5628      	ldrsb	r0, [r5, r0]
 800f8f4:	f7f1 fd64 	bl	80013c0 <__aeabi_i2f>
 800f8f8:	6861      	ldr	r1, [r4, #4]
 800f8fa:	f7f1 fa57 	bl	8000dac <__aeabi_fmul>
 800f8fe:	1c01      	adds	r1, r0, #0
 800f900:	1c38      	adds	r0, r7, #0
 800f902:	f7f0 feed 	bl	80006e0 <__aeabi_fadd>
 800f906:	1c07      	adds	r7, r0, #0
 800f908:	2002      	movs	r0, #2
 800f90a:	5628      	ldrsb	r0, [r5, r0]
 800f90c:	f7f1 fd58 	bl	80013c0 <__aeabi_i2f>
 800f910:	68a1      	ldr	r1, [r4, #8]
 800f912:	f7f1 fa4b 	bl	8000dac <__aeabi_fmul>
 800f916:	1c01      	adds	r1, r0, #0
 800f918:	1c38      	adds	r0, r7, #0
 800f91a:	f7f0 fee1 	bl	80006e0 <__aeabi_fadd>
 800f91e:	6030      	str	r0, [r6, #0]
 800f920:	2003      	movs	r0, #3
 800f922:	5628      	ldrsb	r0, [r5, r0]
 800f924:	f7f1 fd4c 	bl	80013c0 <__aeabi_i2f>
 800f928:	6821      	ldr	r1, [r4, #0]
 800f92a:	f7f1 fa3f 	bl	8000dac <__aeabi_fmul>
 800f92e:	1c07      	adds	r7, r0, #0
 800f930:	2004      	movs	r0, #4
 800f932:	5628      	ldrsb	r0, [r5, r0]
 800f934:	f7f1 fd44 	bl	80013c0 <__aeabi_i2f>
 800f938:	6861      	ldr	r1, [r4, #4]
 800f93a:	f7f1 fa37 	bl	8000dac <__aeabi_fmul>
 800f93e:	1c01      	adds	r1, r0, #0
 800f940:	1c38      	adds	r0, r7, #0
 800f942:	f7f0 fecd 	bl	80006e0 <__aeabi_fadd>
 800f946:	1c07      	adds	r7, r0, #0
 800f948:	2005      	movs	r0, #5
 800f94a:	5628      	ldrsb	r0, [r5, r0]
 800f94c:	f7f1 fd38 	bl	80013c0 <__aeabi_i2f>
 800f950:	68a1      	ldr	r1, [r4, #8]
 800f952:	f7f1 fa2b 	bl	8000dac <__aeabi_fmul>
 800f956:	1c01      	adds	r1, r0, #0
 800f958:	1c38      	adds	r0, r7, #0
 800f95a:	f7f0 fec1 	bl	80006e0 <__aeabi_fadd>
 800f95e:	6070      	str	r0, [r6, #4]
 800f960:	2006      	movs	r0, #6
 800f962:	5628      	ldrsb	r0, [r5, r0]
 800f964:	f7f1 fd2c 	bl	80013c0 <__aeabi_i2f>
 800f968:	6821      	ldr	r1, [r4, #0]
 800f96a:	f7f1 fa1f 	bl	8000dac <__aeabi_fmul>
 800f96e:	1c07      	adds	r7, r0, #0
 800f970:	2007      	movs	r0, #7
 800f972:	5628      	ldrsb	r0, [r5, r0]
 800f974:	f7f1 fd24 	bl	80013c0 <__aeabi_i2f>
 800f978:	6861      	ldr	r1, [r4, #4]
 800f97a:	f7f1 fa17 	bl	8000dac <__aeabi_fmul>
 800f97e:	1c01      	adds	r1, r0, #0
 800f980:	1c38      	adds	r0, r7, #0
 800f982:	f7f0 fead 	bl	80006e0 <__aeabi_fadd>
 800f986:	1c07      	adds	r7, r0, #0
 800f988:	2008      	movs	r0, #8
 800f98a:	5628      	ldrsb	r0, [r5, r0]
 800f98c:	f7f1 fd18 	bl	80013c0 <__aeabi_i2f>
 800f990:	68a1      	ldr	r1, [r4, #8]
 800f992:	f7f1 fa0b 	bl	8000dac <__aeabi_fmul>
 800f996:	1c01      	adds	r1, r0, #0
 800f998:	1c38      	adds	r0, r7, #0
 800f99a:	f7f0 fea1 	bl	80006e0 <__aeabi_fadd>
 800f99e:	60b0      	str	r0, [r6, #8]
 800f9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9a2:	46c0      	nop			; (mov r8, r8)

0800f9a4 <inemo_set_orientation>:
 800f9a4:	b530      	push	{r4, r5, lr}
 800f9a6:	000d      	movs	r5, r1
 800f9a8:	2209      	movs	r2, #9
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	0004      	movs	r4, r0
 800f9b0:	f003 fb8f 	bl	80130d2 <memset>
 800f9b4:	782b      	ldrb	r3, [r5, #0]
 800f9b6:	001a      	movs	r2, r3
 800f9b8:	3a42      	subs	r2, #66	; 0x42
 800f9ba:	2a17      	cmp	r2, #23
 800f9bc:	d934      	bls.n	800fa28 <inemo_set_orientation+0x84>
 800f9be:	aa01      	add	r2, sp, #4
 800f9c0:	7013      	strb	r3, [r2, #0]
 800f9c2:	786b      	ldrb	r3, [r5, #1]
 800f9c4:	0019      	movs	r1, r3
 800f9c6:	3942      	subs	r1, #66	; 0x42
 800f9c8:	2917      	cmp	r1, #23
 800f9ca:	d800      	bhi.n	800f9ce <inemo_set_orientation+0x2a>
 800f9cc:	3320      	adds	r3, #32
 800f9ce:	7053      	strb	r3, [r2, #1]
 800f9d0:	78ab      	ldrb	r3, [r5, #2]
 800f9d2:	0019      	movs	r1, r3
 800f9d4:	3942      	subs	r1, #66	; 0x42
 800f9d6:	2917      	cmp	r1, #23
 800f9d8:	d824      	bhi.n	800fa24 <inemo_set_orientation+0x80>
 800f9da:	3320      	adds	r3, #32
 800f9dc:	7093      	strb	r3, [r2, #2]
 800f9de:	7813      	ldrb	r3, [r2, #0]
 800f9e0:	3b64      	subs	r3, #100	; 0x64
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b13      	cmp	r3, #19
 800f9e6:	d805      	bhi.n	800f9f4 <inemo_set_orientation+0x50>
 800f9e8:	4928      	ldr	r1, [pc, #160]	; (800fa8c <inemo_set_orientation+0xe8>)
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	58cb      	ldr	r3, [r1, r3]
 800f9ee:	469f      	mov	pc, r3
 800f9f0:	23ff      	movs	r3, #255	; 0xff
 800f9f2:	71a3      	strb	r3, [r4, #6]
 800f9f4:	7853      	ldrb	r3, [r2, #1]
 800f9f6:	3b64      	subs	r3, #100	; 0x64
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	2b13      	cmp	r3, #19
 800f9fc:	d805      	bhi.n	800fa0a <inemo_set_orientation+0x66>
 800f9fe:	4924      	ldr	r1, [pc, #144]	; (800fa90 <inemo_set_orientation+0xec>)
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	58cb      	ldr	r3, [r1, r3]
 800fa04:	469f      	mov	pc, r3
 800fa06:	23ff      	movs	r3, #255	; 0xff
 800fa08:	71e3      	strb	r3, [r4, #7]
 800fa0a:	7893      	ldrb	r3, [r2, #2]
 800fa0c:	3b64      	subs	r3, #100	; 0x64
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b13      	cmp	r3, #19
 800fa12:	d805      	bhi.n	800fa20 <inemo_set_orientation+0x7c>
 800fa14:	4a1f      	ldr	r2, [pc, #124]	; (800fa94 <inemo_set_orientation+0xf0>)
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	58d3      	ldr	r3, [r2, r3]
 800fa1a:	469f      	mov	pc, r3
 800fa1c:	23ff      	movs	r3, #255	; 0xff
 800fa1e:	7223      	strb	r3, [r4, #8]
 800fa20:	b003      	add	sp, #12
 800fa22:	bd30      	pop	{r4, r5, pc}
 800fa24:	7093      	strb	r3, [r2, #2]
 800fa26:	e7da      	b.n	800f9de <inemo_set_orientation+0x3a>
 800fa28:	aa01      	add	r2, sp, #4
 800fa2a:	3320      	adds	r3, #32
 800fa2c:	7013      	strb	r3, [r2, #0]
 800fa2e:	e7c8      	b.n	800f9c2 <inemo_set_orientation+0x1e>
 800fa30:	23ff      	movs	r3, #255	; 0xff
 800fa32:	70a3      	strb	r3, [r4, #2]
 800fa34:	e7f4      	b.n	800fa20 <inemo_set_orientation+0x7c>
 800fa36:	2301      	movs	r3, #1
 800fa38:	7023      	strb	r3, [r4, #0]
 800fa3a:	e7db      	b.n	800f9f4 <inemo_set_orientation+0x50>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	70e3      	strb	r3, [r4, #3]
 800fa40:	e7d8      	b.n	800f9f4 <inemo_set_orientation+0x50>
 800fa42:	23ff      	movs	r3, #255	; 0xff
 800fa44:	70e3      	strb	r3, [r4, #3]
 800fa46:	e7d5      	b.n	800f9f4 <inemo_set_orientation+0x50>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	71a3      	strb	r3, [r4, #6]
 800fa4c:	e7d2      	b.n	800f9f4 <inemo_set_orientation+0x50>
 800fa4e:	23ff      	movs	r3, #255	; 0xff
 800fa50:	7023      	strb	r3, [r4, #0]
 800fa52:	e7cf      	b.n	800f9f4 <inemo_set_orientation+0x50>
 800fa54:	2301      	movs	r3, #1
 800fa56:	7063      	strb	r3, [r4, #1]
 800fa58:	e7d7      	b.n	800fa0a <inemo_set_orientation+0x66>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	7123      	strb	r3, [r4, #4]
 800fa5e:	e7d4      	b.n	800fa0a <inemo_set_orientation+0x66>
 800fa60:	23ff      	movs	r3, #255	; 0xff
 800fa62:	7123      	strb	r3, [r4, #4]
 800fa64:	e7d1      	b.n	800fa0a <inemo_set_orientation+0x66>
 800fa66:	2301      	movs	r3, #1
 800fa68:	71e3      	strb	r3, [r4, #7]
 800fa6a:	e7ce      	b.n	800fa0a <inemo_set_orientation+0x66>
 800fa6c:	23ff      	movs	r3, #255	; 0xff
 800fa6e:	7063      	strb	r3, [r4, #1]
 800fa70:	e7cb      	b.n	800fa0a <inemo_set_orientation+0x66>
 800fa72:	2301      	movs	r3, #1
 800fa74:	70a3      	strb	r3, [r4, #2]
 800fa76:	e7d3      	b.n	800fa20 <inemo_set_orientation+0x7c>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	7163      	strb	r3, [r4, #5]
 800fa7c:	e7d0      	b.n	800fa20 <inemo_set_orientation+0x7c>
 800fa7e:	23ff      	movs	r3, #255	; 0xff
 800fa80:	7163      	strb	r3, [r4, #5]
 800fa82:	e7cd      	b.n	800fa20 <inemo_set_orientation+0x7c>
 800fa84:	2301      	movs	r3, #1
 800fa86:	7223      	strb	r3, [r4, #8]
 800fa88:	e7ca      	b.n	800fa20 <inemo_set_orientation+0x7c>
 800fa8a:	46c0      	nop			; (mov r8, r8)
 800fa8c:	080150a4 	.word	0x080150a4
 800fa90:	080150f4 	.word	0x080150f4
 800fa94:	08015144 	.word	0x08015144

0800fa98 <quat_mult>:
 800fa98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa9a:	46c6      	mov	lr, r8
 800fa9c:	000c      	movs	r4, r1
 800fa9e:	b500      	push	{lr}
 800faa0:	6811      	ldr	r1, [r2, #0]
 800faa2:	0006      	movs	r6, r0
 800faa4:	68e0      	ldr	r0, [r4, #12]
 800faa6:	0015      	movs	r5, r2
 800faa8:	f7f1 f980 	bl	8000dac <__aeabi_fmul>
 800faac:	68e9      	ldr	r1, [r5, #12]
 800faae:	1c07      	adds	r7, r0, #0
 800fab0:	6820      	ldr	r0, [r4, #0]
 800fab2:	f7f1 f97b 	bl	8000dac <__aeabi_fmul>
 800fab6:	1c01      	adds	r1, r0, #0
 800fab8:	1c38      	adds	r0, r7, #0
 800faba:	f7f0 fe11 	bl	80006e0 <__aeabi_fadd>
 800fabe:	68a9      	ldr	r1, [r5, #8]
 800fac0:	1c07      	adds	r7, r0, #0
 800fac2:	6860      	ldr	r0, [r4, #4]
 800fac4:	f7f1 f972 	bl	8000dac <__aeabi_fmul>
 800fac8:	1c01      	adds	r1, r0, #0
 800faca:	1c38      	adds	r0, r7, #0
 800facc:	f7f0 fe08 	bl	80006e0 <__aeabi_fadd>
 800fad0:	6869      	ldr	r1, [r5, #4]
 800fad2:	1c07      	adds	r7, r0, #0
 800fad4:	68a0      	ldr	r0, [r4, #8]
 800fad6:	f7f1 f969 	bl	8000dac <__aeabi_fmul>
 800fada:	1c01      	adds	r1, r0, #0
 800fadc:	1c38      	adds	r0, r7, #0
 800fade:	f7f1 fa8b 	bl	8000ff8 <__aeabi_fsub>
 800fae2:	6030      	str	r0, [r6, #0]
 800fae4:	6869      	ldr	r1, [r5, #4]
 800fae6:	68e0      	ldr	r0, [r4, #12]
 800fae8:	f7f1 f960 	bl	8000dac <__aeabi_fmul>
 800faec:	68e9      	ldr	r1, [r5, #12]
 800faee:	1c07      	adds	r7, r0, #0
 800faf0:	6860      	ldr	r0, [r4, #4]
 800faf2:	f7f1 f95b 	bl	8000dac <__aeabi_fmul>
 800faf6:	1c01      	adds	r1, r0, #0
 800faf8:	1c38      	adds	r0, r7, #0
 800fafa:	f7f0 fdf1 	bl	80006e0 <__aeabi_fadd>
 800fafe:	6829      	ldr	r1, [r5, #0]
 800fb00:	1c07      	adds	r7, r0, #0
 800fb02:	68a0      	ldr	r0, [r4, #8]
 800fb04:	f7f1 f952 	bl	8000dac <__aeabi_fmul>
 800fb08:	1c01      	adds	r1, r0, #0
 800fb0a:	1c38      	adds	r0, r7, #0
 800fb0c:	f7f0 fde8 	bl	80006e0 <__aeabi_fadd>
 800fb10:	68a9      	ldr	r1, [r5, #8]
 800fb12:	1c07      	adds	r7, r0, #0
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	f7f1 f949 	bl	8000dac <__aeabi_fmul>
 800fb1a:	1c01      	adds	r1, r0, #0
 800fb1c:	1c38      	adds	r0, r7, #0
 800fb1e:	f7f1 fa6b 	bl	8000ff8 <__aeabi_fsub>
 800fb22:	6070      	str	r0, [r6, #4]
 800fb24:	68a9      	ldr	r1, [r5, #8]
 800fb26:	68e0      	ldr	r0, [r4, #12]
 800fb28:	f7f1 f940 	bl	8000dac <__aeabi_fmul>
 800fb2c:	6869      	ldr	r1, [r5, #4]
 800fb2e:	1c07      	adds	r7, r0, #0
 800fb30:	6820      	ldr	r0, [r4, #0]
 800fb32:	f7f1 f93b 	bl	8000dac <__aeabi_fmul>
 800fb36:	1c01      	adds	r1, r0, #0
 800fb38:	1c38      	adds	r0, r7, #0
 800fb3a:	f7f0 fdd1 	bl	80006e0 <__aeabi_fadd>
 800fb3e:	68e9      	ldr	r1, [r5, #12]
 800fb40:	1c07      	adds	r7, r0, #0
 800fb42:	68a0      	ldr	r0, [r4, #8]
 800fb44:	f7f1 f932 	bl	8000dac <__aeabi_fmul>
 800fb48:	1c01      	adds	r1, r0, #0
 800fb4a:	1c38      	adds	r0, r7, #0
 800fb4c:	f7f0 fdc8 	bl	80006e0 <__aeabi_fadd>
 800fb50:	6829      	ldr	r1, [r5, #0]
 800fb52:	1c07      	adds	r7, r0, #0
 800fb54:	6860      	ldr	r0, [r4, #4]
 800fb56:	f7f1 f929 	bl	8000dac <__aeabi_fmul>
 800fb5a:	1c01      	adds	r1, r0, #0
 800fb5c:	1c38      	adds	r0, r7, #0
 800fb5e:	f7f1 fa4b 	bl	8000ff8 <__aeabi_fsub>
 800fb62:	60b0      	str	r0, [r6, #8]
 800fb64:	68e9      	ldr	r1, [r5, #12]
 800fb66:	68e0      	ldr	r0, [r4, #12]
 800fb68:	f7f1 f920 	bl	8000dac <__aeabi_fmul>
 800fb6c:	6829      	ldr	r1, [r5, #0]
 800fb6e:	1c07      	adds	r7, r0, #0
 800fb70:	6820      	ldr	r0, [r4, #0]
 800fb72:	f7f1 f91b 	bl	8000dac <__aeabi_fmul>
 800fb76:	6869      	ldr	r1, [r5, #4]
 800fb78:	4680      	mov	r8, r0
 800fb7a:	6860      	ldr	r0, [r4, #4]
 800fb7c:	f7f1 f916 	bl	8000dac <__aeabi_fmul>
 800fb80:	1c01      	adds	r1, r0, #0
 800fb82:	4640      	mov	r0, r8
 800fb84:	f7f0 fdac 	bl	80006e0 <__aeabi_fadd>
 800fb88:	1c01      	adds	r1, r0, #0
 800fb8a:	1c38      	adds	r0, r7, #0
 800fb8c:	f7f1 fa34 	bl	8000ff8 <__aeabi_fsub>
 800fb90:	68a9      	ldr	r1, [r5, #8]
 800fb92:	1c07      	adds	r7, r0, #0
 800fb94:	68a0      	ldr	r0, [r4, #8]
 800fb96:	f7f1 f909 	bl	8000dac <__aeabi_fmul>
 800fb9a:	1c01      	adds	r1, r0, #0
 800fb9c:	1c38      	adds	r0, r7, #0
 800fb9e:	f7f1 fa2b 	bl	8000ff8 <__aeabi_fsub>
 800fba2:	60f0      	str	r0, [r6, #12]
 800fba4:	bc80      	pop	{r7}
 800fba6:	46b8      	mov	r8, r7
 800fba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbaa:	46c0      	nop			; (mov r8, r8)

0800fbac <quat_rot>:
 800fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbae:	46c6      	mov	lr, r8
 800fbb0:	b500      	push	{lr}
 800fbb2:	b090      	sub	sp, #64	; 0x40
 800fbb4:	000c      	movs	r4, r1
 800fbb6:	0005      	movs	r5, r0
 800fbb8:	0011      	movs	r1, r2
 800fbba:	a808      	add	r0, sp, #32
 800fbbc:	220c      	movs	r2, #12
 800fbbe:	f003 fa7f 	bl	80130c0 <memcpy>
 800fbc2:	2280      	movs	r2, #128	; 0x80
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	0612      	lsls	r2, r2, #24
 800fbc8:	4694      	mov	ip, r2
 800fbca:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	0021      	movs	r1, r4
 800fbd0:	4463      	add	r3, ip
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	6863      	ldr	r3, [r4, #4]
 800fbd6:	aa08      	add	r2, sp, #32
 800fbd8:	4463      	add	r3, ip
 800fbda:	9301      	str	r3, [sp, #4]
 800fbdc:	68a3      	ldr	r3, [r4, #8]
 800fbde:	a804      	add	r0, sp, #16
 800fbe0:	4463      	add	r3, ip
 800fbe2:	9302      	str	r3, [sp, #8]
 800fbe4:	68e3      	ldr	r3, [r4, #12]
 800fbe6:	9303      	str	r3, [sp, #12]
 800fbe8:	f7ff ff56 	bl	800fa98 <quat_mult>
 800fbec:	466a      	mov	r2, sp
 800fbee:	a904      	add	r1, sp, #16
 800fbf0:	a80c      	add	r0, sp, #48	; 0x30
 800fbf2:	f7ff ff51 	bl	800fa98 <quat_mult>
 800fbf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbf8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fbfa:	1c19      	adds	r1, r3, #0
 800fbfc:	1c18      	adds	r0, r3, #0
 800fbfe:	4698      	mov	r8, r3
 800fc00:	f7f1 f8d4 	bl	8000dac <__aeabi_fmul>
 800fc04:	1c39      	adds	r1, r7, #0
 800fc06:	1c04      	adds	r4, r0, #0
 800fc08:	1c38      	adds	r0, r7, #0
 800fc0a:	f7f1 f8cf 	bl	8000dac <__aeabi_fmul>
 800fc0e:	1c01      	adds	r1, r0, #0
 800fc10:	1c20      	adds	r0, r4, #0
 800fc12:	f7f0 fd65 	bl	80006e0 <__aeabi_fadd>
 800fc16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fc18:	1c04      	adds	r4, r0, #0
 800fc1a:	1c31      	adds	r1, r6, #0
 800fc1c:	1c30      	adds	r0, r6, #0
 800fc1e:	f7f1 f8c5 	bl	8000dac <__aeabi_fmul>
 800fc22:	1c21      	adds	r1, r4, #0
 800fc24:	f7f0 fd5c 	bl	80006e0 <__aeabi_fadd>
 800fc28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fc2a:	1c04      	adds	r4, r0, #0
 800fc2c:	1c08      	adds	r0, r1, #0
 800fc2e:	f7f1 f8bd 	bl	8000dac <__aeabi_fmul>
 800fc32:	1c21      	adds	r1, r4, #0
 800fc34:	f7f0 fd54 	bl	80006e0 <__aeabi_fadd>
 800fc38:	f003 ffd0 	bl	8013bdc <sqrtf>
 800fc3c:	1c01      	adds	r1, r0, #0
 800fc3e:	20fe      	movs	r0, #254	; 0xfe
 800fc40:	0580      	lsls	r0, r0, #22
 800fc42:	f7f0 feeb 	bl	8000a1c <__aeabi_fdiv>
 800fc46:	4641      	mov	r1, r8
 800fc48:	1c04      	adds	r4, r0, #0
 800fc4a:	f7f1 f8af 	bl	8000dac <__aeabi_fmul>
 800fc4e:	1c39      	adds	r1, r7, #0
 800fc50:	900c      	str	r0, [sp, #48]	; 0x30
 800fc52:	1c20      	adds	r0, r4, #0
 800fc54:	f7f1 f8aa 	bl	8000dac <__aeabi_fmul>
 800fc58:	1c31      	adds	r1, r6, #0
 800fc5a:	900d      	str	r0, [sp, #52]	; 0x34
 800fc5c:	1c20      	adds	r0, r4, #0
 800fc5e:	f7f1 f8a5 	bl	8000dac <__aeabi_fmul>
 800fc62:	220c      	movs	r2, #12
 800fc64:	900e      	str	r0, [sp, #56]	; 0x38
 800fc66:	a90c      	add	r1, sp, #48	; 0x30
 800fc68:	0028      	movs	r0, r5
 800fc6a:	f003 fa29 	bl	80130c0 <memcpy>
 800fc6e:	b010      	add	sp, #64	; 0x40
 800fc70:	bc80      	pop	{r7}
 800fc72:	46b8      	mov	r8, r7
 800fc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc76:	46c0      	nop			; (mov r8, r8)

0800fc78 <quat_2_euler>:
 800fc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc7a:	4645      	mov	r5, r8
 800fc7c:	4657      	mov	r7, sl
 800fc7e:	464e      	mov	r6, r9
 800fc80:	46de      	mov	lr, fp
 800fc82:	b5e0      	push	{r5, r6, r7, lr}
 800fc84:	68cf      	ldr	r7, [r1, #12]
 800fc86:	4680      	mov	r8, r0
 800fc88:	684c      	ldr	r4, [r1, #4]
 800fc8a:	688d      	ldr	r5, [r1, #8]
 800fc8c:	680e      	ldr	r6, [r1, #0]
 800fc8e:	b083      	sub	sp, #12
 800fc90:	2100      	movs	r1, #0
 800fc92:	1c38      	adds	r0, r7, #0
 800fc94:	f7f0 fbca 	bl	800042c <__aeabi_fcmplt>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d006      	beq.n	800fcaa <quat_2_euler+0x32>
 800fc9c:	2380      	movs	r3, #128	; 0x80
 800fc9e:	061b      	lsls	r3, r3, #24
 800fca0:	469c      	mov	ip, r3
 800fca2:	4464      	add	r4, ip
 800fca4:	4465      	add	r5, ip
 800fca6:	4466      	add	r6, ip
 800fca8:	4467      	add	r7, ip
 800fcaa:	1c21      	adds	r1, r4, #0
 800fcac:	1c20      	adds	r0, r4, #0
 800fcae:	f7f1 f87d 	bl	8000dac <__aeabi_fmul>
 800fcb2:	4682      	mov	sl, r0
 800fcb4:	1c29      	adds	r1, r5, #0
 800fcb6:	1c28      	adds	r0, r5, #0
 800fcb8:	f7f1 f878 	bl	8000dac <__aeabi_fmul>
 800fcbc:	4651      	mov	r1, sl
 800fcbe:	f7f0 fd0f 	bl	80006e0 <__aeabi_fadd>
 800fcc2:	1c01      	adds	r1, r0, #0
 800fcc4:	f7f0 fd0c 	bl	80006e0 <__aeabi_fadd>
 800fcc8:	1c01      	adds	r1, r0, #0
 800fcca:	20fe      	movs	r0, #254	; 0xfe
 800fccc:	0580      	lsls	r0, r0, #22
 800fcce:	f7f1 f993 	bl	8000ff8 <__aeabi_fsub>
 800fcd2:	1c39      	adds	r1, r7, #0
 800fcd4:	4681      	mov	r9, r0
 800fcd6:	1c28      	adds	r0, r5, #0
 800fcd8:	f7f1 f868 	bl	8000dac <__aeabi_fmul>
 800fcdc:	1c31      	adds	r1, r6, #0
 800fcde:	4683      	mov	fp, r0
 800fce0:	1c20      	adds	r0, r4, #0
 800fce2:	f7f1 f863 	bl	8000dac <__aeabi_fmul>
 800fce6:	1c01      	adds	r1, r0, #0
 800fce8:	4658      	mov	r0, fp
 800fcea:	f7f0 fcf9 	bl	80006e0 <__aeabi_fadd>
 800fcee:	1c01      	adds	r1, r0, #0
 800fcf0:	f7f0 fcf6 	bl	80006e0 <__aeabi_fadd>
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	f003 ff6d 	bl	8013bd4 <atan2f>
 800fcfa:	2380      	movs	r3, #128	; 0x80
 800fcfc:	4681      	mov	r9, r0
 800fcfe:	061b      	lsls	r3, r3, #24
 800fd00:	444b      	add	r3, r9
 800fd02:	1c31      	adds	r1, r6, #0
 800fd04:	1c30      	adds	r0, r6, #0
 800fd06:	469b      	mov	fp, r3
 800fd08:	f7f1 f850 	bl	8000dac <__aeabi_fmul>
 800fd0c:	4651      	mov	r1, sl
 800fd0e:	f7f0 fce7 	bl	80006e0 <__aeabi_fadd>
 800fd12:	1c01      	adds	r1, r0, #0
 800fd14:	f7f0 fce4 	bl	80006e0 <__aeabi_fadd>
 800fd18:	1c01      	adds	r1, r0, #0
 800fd1a:	20fe      	movs	r0, #254	; 0xfe
 800fd1c:	0580      	lsls	r0, r0, #22
 800fd1e:	f7f1 f96b 	bl	8000ff8 <__aeabi_fsub>
 800fd22:	1c29      	adds	r1, r5, #0
 800fd24:	9001      	str	r0, [sp, #4]
 800fd26:	1c20      	adds	r0, r4, #0
 800fd28:	f7f1 f840 	bl	8000dac <__aeabi_fmul>
 800fd2c:	1c39      	adds	r1, r7, #0
 800fd2e:	4682      	mov	sl, r0
 800fd30:	1c30      	adds	r0, r6, #0
 800fd32:	f7f1 f83b 	bl	8000dac <__aeabi_fmul>
 800fd36:	1c01      	adds	r1, r0, #0
 800fd38:	4650      	mov	r0, sl
 800fd3a:	f7f0 fcd1 	bl	80006e0 <__aeabi_fadd>
 800fd3e:	1c01      	adds	r1, r0, #0
 800fd40:	f7f0 fcce 	bl	80006e0 <__aeabi_fadd>
 800fd44:	9901      	ldr	r1, [sp, #4]
 800fd46:	f003 ff45 	bl	8013bd4 <atan2f>
 800fd4a:	2380      	movs	r3, #128	; 0x80
 800fd4c:	061b      	lsls	r3, r3, #24
 800fd4e:	469c      	mov	ip, r3
 800fd50:	1c31      	adds	r1, r6, #0
 800fd52:	4484      	add	ip, r0
 800fd54:	1c28      	adds	r0, r5, #0
 800fd56:	46e2      	mov	sl, ip
 800fd58:	f7f1 f828 	bl	8000dac <__aeabi_fmul>
 800fd5c:	1c39      	adds	r1, r7, #0
 800fd5e:	1c05      	adds	r5, r0, #0
 800fd60:	1c20      	adds	r0, r4, #0
 800fd62:	f7f1 f823 	bl	8000dac <__aeabi_fmul>
 800fd66:	1c01      	adds	r1, r0, #0
 800fd68:	1c28      	adds	r0, r5, #0
 800fd6a:	f7f1 f945 	bl	8000ff8 <__aeabi_fsub>
 800fd6e:	1c01      	adds	r1, r0, #0
 800fd70:	f7f0 fcb6 	bl	80006e0 <__aeabi_fadd>
 800fd74:	f003 ff0e 	bl	8013b94 <asinf>
 800fd78:	2100      	movs	r1, #0
 800fd7a:	1c04      	adds	r4, r0, #0
 800fd7c:	4648      	mov	r0, r9
 800fd7e:	f7f0 fb69 	bl	8000454 <__aeabi_fcmpgt>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d004      	beq.n	800fd90 <quat_2_euler+0x118>
 800fd86:	4649      	mov	r1, r9
 800fd88:	480e      	ldr	r0, [pc, #56]	; (800fdc4 <quat_2_euler+0x14c>)
 800fd8a:	f7f1 f935 	bl	8000ff8 <__aeabi_fsub>
 800fd8e:	4683      	mov	fp, r0
 800fd90:	4658      	mov	r0, fp
 800fd92:	490d      	ldr	r1, [pc, #52]	; (800fdc8 <quat_2_euler+0x150>)
 800fd94:	f7f1 f80a 	bl	8000dac <__aeabi_fmul>
 800fd98:	4643      	mov	r3, r8
 800fd9a:	490b      	ldr	r1, [pc, #44]	; (800fdc8 <quat_2_euler+0x150>)
 800fd9c:	6018      	str	r0, [r3, #0]
 800fd9e:	4650      	mov	r0, sl
 800fda0:	f7f1 f804 	bl	8000dac <__aeabi_fmul>
 800fda4:	4643      	mov	r3, r8
 800fda6:	4908      	ldr	r1, [pc, #32]	; (800fdc8 <quat_2_euler+0x150>)
 800fda8:	6058      	str	r0, [r3, #4]
 800fdaa:	1c20      	adds	r0, r4, #0
 800fdac:	f7f0 fffe 	bl	8000dac <__aeabi_fmul>
 800fdb0:	4643      	mov	r3, r8
 800fdb2:	6098      	str	r0, [r3, #8]
 800fdb4:	b003      	add	sp, #12
 800fdb6:	bcf0      	pop	{r4, r5, r6, r7}
 800fdb8:	46bb      	mov	fp, r7
 800fdba:	46b2      	mov	sl, r6
 800fdbc:	46a9      	mov	r9, r5
 800fdbe:	46a0      	mov	r8, r4
 800fdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc2:	46c0      	nop			; (mov r8, r8)
 800fdc4:	40c90fdb 	.word	0x40c90fdb
 800fdc8:	42652ee0 	.word	0x42652ee0

0800fdcc <update_accel>:
 800fdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdce:	46de      	mov	lr, fp
 800fdd0:	464e      	mov	r6, r9
 800fdd2:	4645      	mov	r5, r8
 800fdd4:	4657      	mov	r7, sl
 800fdd6:	4b60      	ldr	r3, [pc, #384]	; (800ff58 <update_accel+0x18c>)
 800fdd8:	b5e0      	push	{r5, r6, r7, lr}
 800fdda:	0004      	movs	r4, r0
 800fddc:	000d      	movs	r5, r1
 800fdde:	1c10      	adds	r0, r2, #0
 800fde0:	68d9      	ldr	r1, [r3, #12]
 800fde2:	f7f0 ffe3 	bl	8000dac <__aeabi_fmul>
 800fde6:	495d      	ldr	r1, [pc, #372]	; (800ff5c <update_accel+0x190>)
 800fde8:	1c06      	adds	r6, r0, #0
 800fdea:	f7f0 fb33 	bl	8000454 <__aeabi_fcmpgt>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d000      	beq.n	800fdf4 <update_accel+0x28>
 800fdf2:	e098      	b.n	800ff26 <update_accel+0x15a>
 800fdf4:	495a      	ldr	r1, [pc, #360]	; (800ff60 <update_accel+0x194>)
 800fdf6:	1c30      	adds	r0, r6, #0
 800fdf8:	f7f0 ffd8 	bl	8000dac <__aeabi_fmul>
 800fdfc:	1c01      	adds	r1, r0, #0
 800fdfe:	1c07      	adds	r7, r0, #0
 800fe00:	20fe      	movs	r0, #254	; 0xfe
 800fe02:	0580      	lsls	r0, r0, #22
 800fe04:	f7f1 f8f8 	bl	8000ff8 <__aeabi_fsub>
 800fe08:	4680      	mov	r8, r0
 800fe0a:	21d0      	movs	r1, #208	; 0xd0
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	0589      	lsls	r1, r1, #22
 800fe10:	0058      	lsls	r0, r3, #1
 800fe12:	0840      	lsrs	r0, r0, #1
 800fe14:	f7f0 fb0a 	bl	800042c <__aeabi_fcmplt>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d009      	beq.n	800fe30 <update_accel+0x64>
 800fe1c:	21d0      	movs	r1, #208	; 0xd0
 800fe1e:	686b      	ldr	r3, [r5, #4]
 800fe20:	0589      	lsls	r1, r1, #22
 800fe22:	0058      	lsls	r0, r3, #1
 800fe24:	0840      	lsrs	r0, r0, #1
 800fe26:	f7f0 fb01 	bl	800042c <__aeabi_fcmplt>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d000      	beq.n	800fe30 <update_accel+0x64>
 800fe2e:	e087      	b.n	800ff40 <update_accel+0x174>
 800fe30:	0023      	movs	r3, r4
 800fe32:	cd07      	ldmia	r5!, {r0, r1, r2}
 800fe34:	c307      	stmia	r3!, {r0, r1, r2}
 800fe36:	6823      	ldr	r3, [r4, #0]
 800fe38:	469b      	mov	fp, r3
 800fe3a:	6863      	ldr	r3, [r4, #4]
 800fe3c:	4659      	mov	r1, fp
 800fe3e:	469a      	mov	sl, r3
 800fe40:	68a3      	ldr	r3, [r4, #8]
 800fe42:	4658      	mov	r0, fp
 800fe44:	4699      	mov	r9, r3
 800fe46:	f7f0 ffb1 	bl	8000dac <__aeabi_fmul>
 800fe4a:	4651      	mov	r1, sl
 800fe4c:	1c05      	adds	r5, r0, #0
 800fe4e:	4650      	mov	r0, sl
 800fe50:	f7f0 ffac 	bl	8000dac <__aeabi_fmul>
 800fe54:	1c01      	adds	r1, r0, #0
 800fe56:	1c28      	adds	r0, r5, #0
 800fe58:	f7f0 fc42 	bl	80006e0 <__aeabi_fadd>
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	1c05      	adds	r5, r0, #0
 800fe60:	4648      	mov	r0, r9
 800fe62:	f7f0 ffa3 	bl	8000dac <__aeabi_fmul>
 800fe66:	1c01      	adds	r1, r0, #0
 800fe68:	1c28      	adds	r0, r5, #0
 800fe6a:	f7f0 fc39 	bl	80006e0 <__aeabi_fadd>
 800fe6e:	f003 feb5 	bl	8013bdc <sqrtf>
 800fe72:	1c01      	adds	r1, r0, #0
 800fe74:	1c06      	adds	r6, r0, #0
 800fe76:	20fe      	movs	r0, #254	; 0xfe
 800fe78:	0580      	lsls	r0, r0, #22
 800fe7a:	f7f0 fdcf 	bl	8000a1c <__aeabi_fdiv>
 800fe7e:	4659      	mov	r1, fp
 800fe80:	1c05      	adds	r5, r0, #0
 800fe82:	f7f0 ff93 	bl	8000dac <__aeabi_fmul>
 800fe86:	4651      	mov	r1, sl
 800fe88:	6020      	str	r0, [r4, #0]
 800fe8a:	1c28      	adds	r0, r5, #0
 800fe8c:	f7f0 ff8e 	bl	8000dac <__aeabi_fmul>
 800fe90:	4649      	mov	r1, r9
 800fe92:	6060      	str	r0, [r4, #4]
 800fe94:	1c28      	adds	r0, r5, #0
 800fe96:	f7f0 ff89 	bl	8000dac <__aeabi_fmul>
 800fe9a:	2385      	movs	r3, #133	; 0x85
 800fe9c:	60a0      	str	r0, [r4, #8]
 800fe9e:	5ce3      	ldrb	r3, [r4, r3]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d13d      	bne.n	800ff20 <update_accel+0x154>
 800fea4:	68e3      	ldr	r3, [r4, #12]
 800fea6:	1c30      	adds	r0, r6, #0
 800fea8:	1c19      	adds	r1, r3, #0
 800feaa:	469a      	mov	sl, r3
 800feac:	f7f1 f8a4 	bl	8000ff8 <__aeabi_fsub>
 800feb0:	1c39      	adds	r1, r7, #0
 800feb2:	1c05      	adds	r5, r0, #0
 800feb4:	f7f0 ff7a 	bl	8000dac <__aeabi_fmul>
 800feb8:	1c01      	adds	r1, r0, #0
 800feba:	4681      	mov	r9, r0
 800febc:	4650      	mov	r0, sl
 800febe:	f7f0 fc0f 	bl	80006e0 <__aeabi_fadd>
 800fec2:	4649      	mov	r1, r9
 800fec4:	1c07      	adds	r7, r0, #0
 800fec6:	1c28      	adds	r0, r5, #0
 800fec8:	f7f0 ff70 	bl	8000dac <__aeabi_fmul>
 800fecc:	6921      	ldr	r1, [r4, #16]
 800fece:	60e7      	str	r7, [r4, #12]
 800fed0:	f7f0 fc06 	bl	80006e0 <__aeabi_fadd>
 800fed4:	4641      	mov	r1, r8
 800fed6:	f7f0 ff69 	bl	8000dac <__aeabi_fmul>
 800feda:	21fe      	movs	r1, #254	; 0xfe
 800fedc:	6120      	str	r0, [r4, #16]
 800fede:	0589      	lsls	r1, r1, #22
 800fee0:	1c05      	adds	r5, r0, #0
 800fee2:	1c38      	adds	r0, r7, #0
 800fee4:	f7f1 f888 	bl	8000ff8 <__aeabi_fsub>
 800fee8:	0040      	lsls	r0, r0, #1
 800feea:	491e      	ldr	r1, [pc, #120]	; (800ff64 <update_accel+0x198>)
 800feec:	0840      	lsrs	r0, r0, #1
 800feee:	f7f0 fab1 	bl	8000454 <__aeabi_fcmpgt>
 800fef2:	2700      	movs	r7, #0
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d10b      	bne.n	800ff10 <update_accel+0x144>
 800fef8:	21fe      	movs	r1, #254	; 0xfe
 800fefa:	1c30      	adds	r0, r6, #0
 800fefc:	0589      	lsls	r1, r1, #22
 800fefe:	f7f1 f87b 	bl	8000ff8 <__aeabi_fsub>
 800ff02:	0040      	lsls	r0, r0, #1
 800ff04:	4917      	ldr	r1, [pc, #92]	; (800ff64 <update_accel+0x198>)
 800ff06:	0840      	lsrs	r0, r0, #1
 800ff08:	f7f0 faa4 	bl	8000454 <__aeabi_fcmpgt>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d00f      	beq.n	800ff30 <update_accel+0x164>
 800ff10:	238c      	movs	r3, #140	; 0x8c
 800ff12:	54e7      	strb	r7, [r4, r3]
 800ff14:	bcf0      	pop	{r4, r5, r6, r7}
 800ff16:	46bb      	mov	fp, r7
 800ff18:	46b2      	mov	sl, r6
 800ff1a:	46a9      	mov	r9, r5
 800ff1c:	46a0      	mov	r8, r4
 800ff1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff20:	2000      	movs	r0, #0
 800ff22:	1c37      	adds	r7, r6, #0
 800ff24:	e7d2      	b.n	800fecc <update_accel+0x100>
 800ff26:	2300      	movs	r3, #0
 800ff28:	27fe      	movs	r7, #254	; 0xfe
 800ff2a:	4698      	mov	r8, r3
 800ff2c:	05bf      	lsls	r7, r7, #22
 800ff2e:	e76c      	b.n	800fe0a <update_accel+0x3e>
 800ff30:	490d      	ldr	r1, [pc, #52]	; (800ff68 <update_accel+0x19c>)
 800ff32:	1c28      	adds	r0, r5, #0
 800ff34:	f7f0 fa84 	bl	8000440 <__aeabi_fcmple>
 800ff38:	0007      	movs	r7, r0
 800ff3a:	1e78      	subs	r0, r7, #1
 800ff3c:	4187      	sbcs	r7, r0
 800ff3e:	e7e7      	b.n	800ff10 <update_accel+0x144>
 800ff40:	21d0      	movs	r1, #208	; 0xd0
 800ff42:	68ab      	ldr	r3, [r5, #8]
 800ff44:	0589      	lsls	r1, r1, #22
 800ff46:	0058      	lsls	r0, r3, #1
 800ff48:	0840      	lsrs	r0, r0, #1
 800ff4a:	f7f0 fa6f 	bl	800042c <__aeabi_fcmplt>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d000      	beq.n	800ff54 <update_accel+0x188>
 800ff52:	e770      	b.n	800fe36 <update_accel+0x6a>
 800ff54:	e76c      	b.n	800fe30 <update_accel+0x64>
 800ff56:	46c0      	nop			; (mov r8, r8)
 800ff58:	20000000 	.word	0x20000000
 800ff5c:	3c23d70a 	.word	0x3c23d70a
 800ff60:	42c80000 	.word	0x42c80000
 800ff64:	3dcccccd 	.word	0x3dcccccd
 800ff68:	3d4ccccd 	.word	0x3d4ccccd

0800ff6c <calibrate>:
 800ff6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff6e:	46de      	mov	lr, fp
 800ff70:	4645      	mov	r5, r8
 800ff72:	4657      	mov	r7, sl
 800ff74:	464e      	mov	r6, r9
 800ff76:	b5e0      	push	{r5, r6, r7, lr}
 800ff78:	4b98      	ldr	r3, [pc, #608]	; (80101dc <calibrate+0x270>)
 800ff7a:	4c99      	ldr	r4, [pc, #612]	; (80101e0 <calibrate+0x274>)
 800ff7c:	44a5      	add	sp, r4
 800ff7e:	681c      	ldr	r4, [r3, #0]
 800ff80:	921d      	str	r2, [sp, #116]	; 0x74
 800ff82:	6865      	ldr	r5, [r4, #4]
 800ff84:	229e      	movs	r2, #158	; 0x9e
 800ff86:	46ac      	mov	ip, r5
 800ff88:	00d2      	lsls	r2, r2, #3
 800ff8a:	4462      	add	r2, ip
 800ff8c:	911c      	str	r1, [sp, #112]	; 0x70
 800ff8e:	921a      	str	r2, [sp, #104]	; 0x68
 800ff90:	0011      	movs	r1, r2
 800ff92:	22b4      	movs	r2, #180	; 0xb4
 800ff94:	901b      	str	r0, [sp, #108]	; 0x6c
 800ff96:	0052      	lsls	r2, r2, #1
 800ff98:	a842      	add	r0, sp, #264	; 0x108
 800ff9a:	9419      	str	r4, [sp, #100]	; 0x64
 800ff9c:	9515      	str	r5, [sp, #84]	; 0x54
 800ff9e:	f003 f88f 	bl	80130c0 <memcpy>
 800ffa2:	46ac      	mov	ip, r5
 800ffa4:	498f      	ldr	r1, [pc, #572]	; (80101e4 <calibrate+0x278>)
 800ffa6:	220c      	movs	r2, #12
 800ffa8:	4461      	add	r1, ip
 800ffaa:	a821      	add	r0, sp, #132	; 0x84
 800ffac:	f003 f888 	bl	80130c0 <memcpy>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	9316      	str	r3, [sp, #88]	; 0x58
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	9317      	str	r3, [sp, #92]	; 0x5c
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d100      	bne.n	800ffbe <calibrate+0x52>
 800ffbc:	e25b      	b.n	8010476 <calibrate+0x50a>
 800ffbe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ffc0:	21a0      	movs	r1, #160	; 0xa0
 800ffc2:	934c      	str	r3, [sp, #304]	; 0x130
 800ffc4:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800ffc6:	aa1a      	add	r2, sp, #104	; 0x68
 800ffc8:	9356      	str	r3, [sp, #344]	; 0x158
 800ffca:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800ffcc:	1852      	adds	r2, r2, r1
 800ffce:	9357      	str	r3, [sp, #348]	; 0x15c
 800ffd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ffd2:	9360      	str	r3, [sp, #384]	; 0x180
 800ffd4:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800ffd6:	9361      	str	r3, [sp, #388]	; 0x184
 800ffd8:	9b59      	ldr	r3, [sp, #356]	; 0x164
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	2380      	movs	r3, #128	; 0x80
 800ffde:	9900      	ldr	r1, [sp, #0]
 800ffe0:	50d1      	str	r1, [r2, r3]
 800ffe2:	3b7c      	subs	r3, #124	; 0x7c
 800ffe4:	469b      	mov	fp, r3
 800ffe6:	9318      	str	r3, [sp, #96]	; 0x60
 800ffe8:	22b4      	movs	r2, #180	; 0xb4
 800ffea:	a942      	add	r1, sp, #264	; 0x108
 800ffec:	0052      	lsls	r2, r2, #1
 800ffee:	a89c      	add	r0, sp, #624	; 0x270
 800fff0:	f003 f866 	bl	80130c0 <memcpy>
 800fff4:	465b      	mov	r3, fp
 800fff6:	3b01      	subs	r3, #1
 800fff8:	1c1a      	adds	r2, r3, #0
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	455b      	cmp	r3, fp
 800fffe:	d900      	bls.n	8010002 <calibrate+0x96>
 8010000:	465a      	mov	r2, fp
 8010002:	b2d3      	uxtb	r3, r2
 8010004:	9314      	str	r3, [sp, #80]	; 0x50
 8010006:	ab9c      	add	r3, sp, #624	; 0x270
 8010008:	469a      	mov	sl, r3
 801000a:	9313      	str	r3, [sp, #76]	; 0x4c
 801000c:	2304      	movs	r3, #4
 801000e:	930c      	str	r3, [sp, #48]	; 0x30
 8010010:	3b01      	subs	r3, #1
 8010012:	930a      	str	r3, [sp, #40]	; 0x28
 8010014:	3b01      	subs	r3, #1
 8010016:	9309      	str	r3, [sp, #36]	; 0x24
 8010018:	3b01      	subs	r3, #1
 801001a:	9310      	str	r3, [sp, #64]	; 0x40
 801001c:	2300      	movs	r3, #0
 801001e:	465d      	mov	r5, fp
 8010020:	9306      	str	r3, [sp, #24]
 8010022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010024:	2700      	movs	r7, #0
 8010026:	001e      	movs	r6, r3
 8010028:	001a      	movs	r2, r3
 801002a:	0019      	movs	r1, r3
 801002c:	2308      	movs	r3, #8
 801002e:	4699      	mov	r9, r3
 8010030:	3304      	adds	r3, #4
 8010032:	469b      	mov	fp, r3
 8010034:	3304      	adds	r3, #4
 8010036:	469c      	mov	ip, r3
 8010038:	44b4      	add	ip, r6
 801003a:	4663      	mov	r3, ip
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	2314      	movs	r3, #20
 8010040:	469c      	mov	ip, r3
 8010042:	44b4      	add	ip, r6
 8010044:	4663      	mov	r3, ip
 8010046:	9301      	str	r3, [sp, #4]
 8010048:	2318      	movs	r3, #24
 801004a:	469c      	mov	ip, r3
 801004c:	44b4      	add	ip, r6
 801004e:	4663      	mov	r3, ip
 8010050:	9302      	str	r3, [sp, #8]
 8010052:	231c      	movs	r3, #28
 8010054:	469c      	mov	ip, r3
 8010056:	44b4      	add	ip, r6
 8010058:	4663      	mov	r3, ip
 801005a:	9303      	str	r3, [sp, #12]
 801005c:	2320      	movs	r3, #32
 801005e:	469c      	mov	ip, r3
 8010060:	44b4      	add	ip, r6
 8010062:	4663      	mov	r3, ip
 8010064:	3224      	adds	r2, #36	; 0x24
 8010066:	9205      	str	r2, [sp, #20]
 8010068:	9304      	str	r3, [sp, #16]
 801006a:	2240      	movs	r2, #64	; 0x40
 801006c:	466b      	mov	r3, sp
 801006e:	189b      	adds	r3, r3, r2
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	9a06      	ldr	r2, [sp, #24]
 8010074:	930b      	str	r3, [sp, #44]	; 0x2c
 8010076:	1d53      	adds	r3, r2, #5
 8010078:	b2db      	uxtb	r3, r3
 801007a:	930d      	str	r3, [sp, #52]	; 0x34
 801007c:	1d93      	adds	r3, r2, #6
 801007e:	b2db      	uxtb	r3, r3
 8010080:	930e      	str	r3, [sp, #56]	; 0x38
 8010082:	1dd3      	adds	r3, r2, #7
 8010084:	b2db      	uxtb	r3, r3
 8010086:	930f      	str	r3, [sp, #60]	; 0x3c
 8010088:	0013      	movs	r3, r2
 801008a:	3308      	adds	r3, #8
 801008c:	b2db      	uxtb	r3, r3
 801008e:	9311      	str	r3, [sp, #68]	; 0x44
 8010090:	0013      	movs	r3, r2
 8010092:	3309      	adds	r3, #9
 8010094:	44b3      	add	fp, r6
 8010096:	b2db      	uxtb	r3, r3
 8010098:	9312      	str	r3, [sp, #72]	; 0x48
 801009a:	465b      	mov	r3, fp
 801009c:	44b1      	add	r9, r6
 801009e:	3104      	adds	r1, #4
 80100a0:	46cb      	mov	fp, r9
 80100a2:	4688      	mov	r8, r1
 80100a4:	46b1      	mov	r9, r6
 80100a6:	4656      	mov	r6, sl
 80100a8:	469a      	mov	sl, r3
 80100aa:	9113      	str	r1, [sp, #76]	; 0x4c
 80100ac:	9b06      	ldr	r3, [sp, #24]
 80100ae:	429f      	cmp	r7, r3
 80100b0:	d100      	bne.n	80100b4 <calibrate+0x148>
 80100b2:	e099      	b.n	80101e8 <calibrate+0x27c>
 80100b4:	464b      	mov	r3, r9
 80100b6:	6832      	ldr	r2, [r6, #0]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	1c11      	adds	r1, r2, #0
 80100bc:	1c18      	adds	r0, r3, #0
 80100be:	9307      	str	r3, [sp, #28]
 80100c0:	9208      	str	r2, [sp, #32]
 80100c2:	f7f0 fcab 	bl	8000a1c <__aeabi_fdiv>
 80100c6:	1c01      	adds	r1, r0, #0
 80100c8:	1c04      	adds	r4, r0, #0
 80100ca:	9808      	ldr	r0, [sp, #32]
 80100cc:	f7f0 fe6e 	bl	8000dac <__aeabi_fmul>
 80100d0:	1c01      	adds	r1, r0, #0
 80100d2:	9807      	ldr	r0, [sp, #28]
 80100d4:	f7f0 ff90 	bl	8000ff8 <__aeabi_fsub>
 80100d8:	464b      	mov	r3, r9
 80100da:	6018      	str	r0, [r3, #0]
 80100dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100de:	429d      	cmp	r5, r3
 80100e0:	d200      	bcs.n	80100e4 <calibrate+0x178>
 80100e2:	e081      	b.n	80101e8 <calibrate+0x27c>
 80100e4:	6871      	ldr	r1, [r6, #4]
 80100e6:	1c20      	adds	r0, r4, #0
 80100e8:	f7f0 fe60 	bl	8000dac <__aeabi_fmul>
 80100ec:	4643      	mov	r3, r8
 80100ee:	1c01      	adds	r1, r0, #0
 80100f0:	6818      	ldr	r0, [r3, #0]
 80100f2:	f7f0 ff81 	bl	8000ff8 <__aeabi_fsub>
 80100f6:	4643      	mov	r3, r8
 80100f8:	6018      	str	r0, [r3, #0]
 80100fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100fc:	42ab      	cmp	r3, r5
 80100fe:	d873      	bhi.n	80101e8 <calibrate+0x27c>
 8010100:	68b1      	ldr	r1, [r6, #8]
 8010102:	1c20      	adds	r0, r4, #0
 8010104:	f7f0 fe52 	bl	8000dac <__aeabi_fmul>
 8010108:	465b      	mov	r3, fp
 801010a:	1c01      	adds	r1, r0, #0
 801010c:	6818      	ldr	r0, [r3, #0]
 801010e:	f7f0 ff73 	bl	8000ff8 <__aeabi_fsub>
 8010112:	465b      	mov	r3, fp
 8010114:	6018      	str	r0, [r3, #0]
 8010116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010118:	429d      	cmp	r5, r3
 801011a:	d365      	bcc.n	80101e8 <calibrate+0x27c>
 801011c:	68f1      	ldr	r1, [r6, #12]
 801011e:	1c20      	adds	r0, r4, #0
 8010120:	f7f0 fe44 	bl	8000dac <__aeabi_fmul>
 8010124:	4653      	mov	r3, sl
 8010126:	1c01      	adds	r1, r0, #0
 8010128:	6818      	ldr	r0, [r3, #0]
 801012a:	f7f0 ff65 	bl	8000ff8 <__aeabi_fsub>
 801012e:	4653      	mov	r3, sl
 8010130:	6018      	str	r0, [r3, #0]
 8010132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010134:	429d      	cmp	r5, r3
 8010136:	d357      	bcc.n	80101e8 <calibrate+0x27c>
 8010138:	6931      	ldr	r1, [r6, #16]
 801013a:	1c20      	adds	r0, r4, #0
 801013c:	f7f0 fe36 	bl	8000dac <__aeabi_fmul>
 8010140:	9b00      	ldr	r3, [sp, #0]
 8010142:	1c01      	adds	r1, r0, #0
 8010144:	6818      	ldr	r0, [r3, #0]
 8010146:	f7f0 ff57 	bl	8000ff8 <__aeabi_fsub>
 801014a:	9b00      	ldr	r3, [sp, #0]
 801014c:	6018      	str	r0, [r3, #0]
 801014e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010150:	429d      	cmp	r5, r3
 8010152:	d349      	bcc.n	80101e8 <calibrate+0x27c>
 8010154:	6971      	ldr	r1, [r6, #20]
 8010156:	1c20      	adds	r0, r4, #0
 8010158:	f7f0 fe28 	bl	8000dac <__aeabi_fmul>
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	1c01      	adds	r1, r0, #0
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	f7f0 ff49 	bl	8000ff8 <__aeabi_fsub>
 8010166:	9b01      	ldr	r3, [sp, #4]
 8010168:	6018      	str	r0, [r3, #0]
 801016a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801016c:	429d      	cmp	r5, r3
 801016e:	d33b      	bcc.n	80101e8 <calibrate+0x27c>
 8010170:	69b1      	ldr	r1, [r6, #24]
 8010172:	1c20      	adds	r0, r4, #0
 8010174:	f7f0 fe1a 	bl	8000dac <__aeabi_fmul>
 8010178:	9b02      	ldr	r3, [sp, #8]
 801017a:	1c01      	adds	r1, r0, #0
 801017c:	6818      	ldr	r0, [r3, #0]
 801017e:	f7f0 ff3b 	bl	8000ff8 <__aeabi_fsub>
 8010182:	9b02      	ldr	r3, [sp, #8]
 8010184:	6018      	str	r0, [r3, #0]
 8010186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010188:	429d      	cmp	r5, r3
 801018a:	d32d      	bcc.n	80101e8 <calibrate+0x27c>
 801018c:	69f1      	ldr	r1, [r6, #28]
 801018e:	1c20      	adds	r0, r4, #0
 8010190:	f7f0 fe0c 	bl	8000dac <__aeabi_fmul>
 8010194:	9b03      	ldr	r3, [sp, #12]
 8010196:	1c01      	adds	r1, r0, #0
 8010198:	6818      	ldr	r0, [r3, #0]
 801019a:	f7f0 ff2d 	bl	8000ff8 <__aeabi_fsub>
 801019e:	9b03      	ldr	r3, [sp, #12]
 80101a0:	6018      	str	r0, [r3, #0]
 80101a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101a4:	429d      	cmp	r5, r3
 80101a6:	d31f      	bcc.n	80101e8 <calibrate+0x27c>
 80101a8:	6a31      	ldr	r1, [r6, #32]
 80101aa:	1c20      	adds	r0, r4, #0
 80101ac:	f7f0 fdfe 	bl	8000dac <__aeabi_fmul>
 80101b0:	9b04      	ldr	r3, [sp, #16]
 80101b2:	1c01      	adds	r1, r0, #0
 80101b4:	6818      	ldr	r0, [r3, #0]
 80101b6:	f7f0 ff1f 	bl	8000ff8 <__aeabi_fsub>
 80101ba:	9b04      	ldr	r3, [sp, #16]
 80101bc:	6018      	str	r0, [r3, #0]
 80101be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101c0:	429d      	cmp	r5, r3
 80101c2:	d311      	bcc.n	80101e8 <calibrate+0x27c>
 80101c4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80101c6:	1c20      	adds	r0, r4, #0
 80101c8:	f7f0 fdf0 	bl	8000dac <__aeabi_fmul>
 80101cc:	9c05      	ldr	r4, [sp, #20]
 80101ce:	1c01      	adds	r1, r0, #0
 80101d0:	6820      	ldr	r0, [r4, #0]
 80101d2:	f7f0 ff11 	bl	8000ff8 <__aeabi_fsub>
 80101d6:	6020      	str	r0, [r4, #0]
 80101d8:	e006      	b.n	80101e8 <calibrate+0x27c>
 80101da:	46c0      	nop			; (mov r8, r8)
 80101dc:	200002fc 	.word	0x200002fc
 80101e0:	fffffc24 	.word	0xfffffc24
 80101e4:	0000065c 	.word	0x0000065c
 80101e8:	9b05      	ldr	r3, [sp, #20]
 80101ea:	3701      	adds	r7, #1
 80101ec:	3328      	adds	r3, #40	; 0x28
 80101ee:	9305      	str	r3, [sp, #20]
 80101f0:	2328      	movs	r3, #40	; 0x28
 80101f2:	469c      	mov	ip, r3
 80101f4:	9b00      	ldr	r3, [sp, #0]
 80101f6:	b2ff      	uxtb	r7, r7
 80101f8:	3328      	adds	r3, #40	; 0x28
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	9b01      	ldr	r3, [sp, #4]
 80101fe:	44e1      	add	r9, ip
 8010200:	3328      	adds	r3, #40	; 0x28
 8010202:	9301      	str	r3, [sp, #4]
 8010204:	9b02      	ldr	r3, [sp, #8]
 8010206:	44e0      	add	r8, ip
 8010208:	3328      	adds	r3, #40	; 0x28
 801020a:	9302      	str	r3, [sp, #8]
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	44e3      	add	fp, ip
 8010210:	3328      	adds	r3, #40	; 0x28
 8010212:	9303      	str	r3, [sp, #12]
 8010214:	9b04      	ldr	r3, [sp, #16]
 8010216:	44e2      	add	sl, ip
 8010218:	3328      	adds	r3, #40	; 0x28
 801021a:	9304      	str	r3, [sp, #16]
 801021c:	42af      	cmp	r7, r5
 801021e:	d000      	beq.n	8010222 <calibrate+0x2b6>
 8010220:	e744      	b.n	80100ac <calibrate+0x140>
 8010222:	9b06      	ldr	r3, [sp, #24]
 8010224:	46b2      	mov	sl, r6
 8010226:	3301      	adds	r3, #1
 8010228:	b2da      	uxtb	r2, r3
 801022a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801022c:	9206      	str	r2, [sp, #24]
 801022e:	3301      	adds	r3, #1
 8010230:	9310      	str	r3, [sp, #64]	; 0x40
 8010232:	232c      	movs	r3, #44	; 0x2c
 8010234:	469c      	mov	ip, r3
 8010236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010238:	44e2      	add	sl, ip
 801023a:	3301      	adds	r3, #1
 801023c:	b2db      	uxtb	r3, r3
 801023e:	9309      	str	r3, [sp, #36]	; 0x24
 8010240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010242:	3301      	adds	r3, #1
 8010244:	b2db      	uxtb	r3, r3
 8010246:	930a      	str	r3, [sp, #40]	; 0x28
 8010248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801024a:	3301      	adds	r3, #1
 801024c:	b2db      	uxtb	r3, r3
 801024e:	930c      	str	r3, [sp, #48]	; 0x30
 8010250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010252:	429a      	cmp	r2, r3
 8010254:	d800      	bhi.n	8010258 <calibrate+0x2ec>
 8010256:	e6e4      	b.n	8010022 <calibrate+0xb6>
 8010258:	2582      	movs	r5, #130	; 0x82
 801025a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801025c:	00ad      	lsls	r5, r5, #2
 801025e:	aa1a      	add	r2, sp, #104	; 0x68
 8010260:	00a3      	lsls	r3, r4, #2
 8010262:	1952      	adds	r2, r2, r5
 8010264:	58d0      	ldr	r0, [r2, r3]
 8010266:	999c      	ldr	r1, [sp, #624]	; 0x270
 8010268:	f7f0 fbd8 	bl	8000a1c <__aeabi_fdiv>
 801026c:	0023      	movs	r3, r4
 801026e:	aa1a      	add	r2, sp, #104	; 0x68
 8010270:	330a      	adds	r3, #10
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	1952      	adds	r2, r2, r5
 8010276:	99a7      	ldr	r1, [sp, #668]	; 0x29c
 8010278:	9027      	str	r0, [sp, #156]	; 0x9c
 801027a:	4682      	mov	sl, r0
 801027c:	58d0      	ldr	r0, [r2, r3]
 801027e:	f7f0 fbcd 	bl	8000a1c <__aeabi_fdiv>
 8010282:	0023      	movs	r3, r4
 8010284:	aa1a      	add	r2, sp, #104	; 0x68
 8010286:	3314      	adds	r3, #20
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	1952      	adds	r2, r2, r5
 801028c:	99b2      	ldr	r1, [sp, #712]	; 0x2c8
 801028e:	9028      	str	r0, [sp, #160]	; 0xa0
 8010290:	58d0      	ldr	r0, [r2, r3]
 8010292:	f7f0 fbc3 	bl	8000a1c <__aeabi_fdiv>
 8010296:	2284      	movs	r2, #132	; 0x84
 8010298:	0023      	movs	r3, r4
 801029a:	a91a      	add	r1, sp, #104	; 0x68
 801029c:	1949      	adds	r1, r1, r5
 801029e:	5889      	ldr	r1, [r1, r2]
 80102a0:	331e      	adds	r3, #30
 80102a2:	aa1a      	add	r2, sp, #104	; 0x68
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	1952      	adds	r2, r2, r5
 80102a8:	9029      	str	r0, [sp, #164]	; 0xa4
 80102aa:	58d0      	ldr	r0, [r2, r3]
 80102ac:	f7f0 fbb6 	bl	8000a1c <__aeabi_fdiv>
 80102b0:	902a      	str	r0, [sp, #168]	; 0xa8
 80102b2:	2f04      	cmp	r7, #4
 80102b4:	d04b      	beq.n	801034e <calibrate+0x3e2>
 80102b6:	22b0      	movs	r2, #176	; 0xb0
 80102b8:	0023      	movs	r3, r4
 80102ba:	a91a      	add	r1, sp, #104	; 0x68
 80102bc:	1949      	adds	r1, r1, r5
 80102be:	5889      	ldr	r1, [r1, r2]
 80102c0:	3328      	adds	r3, #40	; 0x28
 80102c2:	aa1a      	add	r2, sp, #104	; 0x68
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	1952      	adds	r2, r2, r5
 80102c8:	58d0      	ldr	r0, [r2, r3]
 80102ca:	f7f0 fba7 	bl	8000a1c <__aeabi_fdiv>
 80102ce:	902b      	str	r0, [sp, #172]	; 0xac
 80102d0:	2f05      	cmp	r7, #5
 80102d2:	d03c      	beq.n	801034e <calibrate+0x3e2>
 80102d4:	22dc      	movs	r2, #220	; 0xdc
 80102d6:	0023      	movs	r3, r4
 80102d8:	a91a      	add	r1, sp, #104	; 0x68
 80102da:	1949      	adds	r1, r1, r5
 80102dc:	5889      	ldr	r1, [r1, r2]
 80102de:	3332      	adds	r3, #50	; 0x32
 80102e0:	aa1a      	add	r2, sp, #104	; 0x68
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	1952      	adds	r2, r2, r5
 80102e6:	58d0      	ldr	r0, [r2, r3]
 80102e8:	f7f0 fb98 	bl	8000a1c <__aeabi_fdiv>
 80102ec:	902c      	str	r0, [sp, #176]	; 0xb0
 80102ee:	2f06      	cmp	r7, #6
 80102f0:	d02d      	beq.n	801034e <calibrate+0x3e2>
 80102f2:	2284      	movs	r2, #132	; 0x84
 80102f4:	0023      	movs	r3, r4
 80102f6:	a91a      	add	r1, sp, #104	; 0x68
 80102f8:	0052      	lsls	r2, r2, #1
 80102fa:	1949      	adds	r1, r1, r5
 80102fc:	5889      	ldr	r1, [r1, r2]
 80102fe:	333c      	adds	r3, #60	; 0x3c
 8010300:	aa1a      	add	r2, sp, #104	; 0x68
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	1952      	adds	r2, r2, r5
 8010306:	58d0      	ldr	r0, [r2, r3]
 8010308:	f7f0 fb88 	bl	8000a1c <__aeabi_fdiv>
 801030c:	902d      	str	r0, [sp, #180]	; 0xb4
 801030e:	2f07      	cmp	r7, #7
 8010310:	d01d      	beq.n	801034e <calibrate+0x3e2>
 8010312:	229a      	movs	r2, #154	; 0x9a
 8010314:	0023      	movs	r3, r4
 8010316:	a91a      	add	r1, sp, #104	; 0x68
 8010318:	0052      	lsls	r2, r2, #1
 801031a:	1949      	adds	r1, r1, r5
 801031c:	5889      	ldr	r1, [r1, r2]
 801031e:	3346      	adds	r3, #70	; 0x46
 8010320:	aa1a      	add	r2, sp, #104	; 0x68
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	1952      	adds	r2, r2, r5
 8010326:	58d0      	ldr	r0, [r2, r3]
 8010328:	f7f0 fb78 	bl	8000a1c <__aeabi_fdiv>
 801032c:	902e      	str	r0, [sp, #184]	; 0xb8
 801032e:	2f09      	cmp	r7, #9
 8010330:	d10d      	bne.n	801034e <calibrate+0x3e2>
 8010332:	22b0      	movs	r2, #176	; 0xb0
 8010334:	0023      	movs	r3, r4
 8010336:	a91a      	add	r1, sp, #104	; 0x68
 8010338:	0052      	lsls	r2, r2, #1
 801033a:	1949      	adds	r1, r1, r5
 801033c:	5889      	ldr	r1, [r1, r2]
 801033e:	3350      	adds	r3, #80	; 0x50
 8010340:	aa1a      	add	r2, sp, #104	; 0x68
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	1952      	adds	r2, r2, r5
 8010346:	58d0      	ldr	r0, [r2, r3]
 8010348:	f7f0 fb68 	bl	8000a1c <__aeabi_fdiv>
 801034c:	902f      	str	r0, [sp, #188]	; 0xbc
 801034e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010350:	2b00      	cmp	r3, #0
 8010352:	d000      	beq.n	8010356 <calibrate+0x3ea>
 8010354:	e1b4      	b.n	80106c0 <calibrate+0x754>
 8010356:	21fc      	movs	r1, #252	; 0xfc
 8010358:	4650      	mov	r0, sl
 801035a:	0589      	lsls	r1, r1, #22
 801035c:	f7f0 fd26 	bl	8000dac <__aeabi_fmul>
 8010360:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8010362:	4bd0      	ldr	r3, [pc, #832]	; (80106a4 <calibrate+0x738>)
 8010364:	1c06      	adds	r6, r0, #0
 8010366:	1c01      	adds	r1, r0, #0
 8010368:	9027      	str	r0, [sp, #156]	; 0x9c
 801036a:	58f8      	ldr	r0, [r7, r3]
 801036c:	f7f0 f9b8 	bl	80006e0 <__aeabi_fadd>
 8010370:	21fc      	movs	r1, #252	; 0xfc
 8010372:	4bcd      	ldr	r3, [pc, #820]	; (80106a8 <calibrate+0x73c>)
 8010374:	0589      	lsls	r1, r1, #22
 8010376:	50f8      	str	r0, [r7, r3]
 8010378:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801037a:	f7f0 fd17 	bl	8000dac <__aeabi_fmul>
 801037e:	239d      	movs	r3, #157	; 0x9d
 8010380:	00db      	lsls	r3, r3, #3
 8010382:	1c05      	adds	r5, r0, #0
 8010384:	1c01      	adds	r1, r0, #0
 8010386:	9028      	str	r0, [sp, #160]	; 0xa0
 8010388:	58f8      	ldr	r0, [r7, r3]
 801038a:	f7f0 f9a9 	bl	80006e0 <__aeabi_fadd>
 801038e:	23cc      	movs	r3, #204	; 0xcc
 8010390:	21fc      	movs	r1, #252	; 0xfc
 8010392:	00db      	lsls	r3, r3, #3
 8010394:	50f8      	str	r0, [r7, r3]
 8010396:	0589      	lsls	r1, r1, #22
 8010398:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801039a:	f7f0 fd07 	bl	8000dac <__aeabi_fmul>
 801039e:	4bc3      	ldr	r3, [pc, #780]	; (80106ac <calibrate+0x740>)
 80103a0:	1c04      	adds	r4, r0, #0
 80103a2:	1c01      	adds	r1, r0, #0
 80103a4:	9029      	str	r0, [sp, #164]	; 0xa4
 80103a6:	58f8      	ldr	r0, [r7, r3]
 80103a8:	f7f0 f99a 	bl	80006e0 <__aeabi_fadd>
 80103ac:	4bc0      	ldr	r3, [pc, #768]	; (80106b0 <calibrate+0x744>)
 80103ae:	1c31      	adds	r1, r6, #0
 80103b0:	50f8      	str	r0, [r7, r3]
 80103b2:	1c30      	adds	r0, r6, #0
 80103b4:	f7f0 fcfa 	bl	8000dac <__aeabi_fmul>
 80103b8:	1c29      	adds	r1, r5, #0
 80103ba:	1c06      	adds	r6, r0, #0
 80103bc:	1c28      	adds	r0, r5, #0
 80103be:	f7f0 fcf5 	bl	8000dac <__aeabi_fmul>
 80103c2:	1c01      	adds	r1, r0, #0
 80103c4:	1c30      	adds	r0, r6, #0
 80103c6:	f7f0 f98b 	bl	80006e0 <__aeabi_fadd>
 80103ca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80103cc:	f7f0 f988 	bl	80006e0 <__aeabi_fadd>
 80103d0:	1c21      	adds	r1, r4, #0
 80103d2:	1c05      	adds	r5, r0, #0
 80103d4:	1c20      	adds	r0, r4, #0
 80103d6:	f7f0 fce9 	bl	8000dac <__aeabi_fmul>
 80103da:	1c01      	adds	r1, r0, #0
 80103dc:	1c28      	adds	r0, r5, #0
 80103de:	f7f0 f97f 	bl	80006e0 <__aeabi_fadd>
 80103e2:	f003 fbfb 	bl	8013bdc <sqrtf>
 80103e6:	4bb3      	ldr	r3, [pc, #716]	; (80106b4 <calibrate+0x748>)
 80103e8:	1c05      	adds	r5, r0, #0
 80103ea:	50f8      	str	r0, [r7, r3]
 80103ec:	ac24      	add	r4, sp, #144	; 0x90
 80103ee:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80103f0:	4bad      	ldr	r3, [pc, #692]	; (80106a8 <calibrate+0x73c>)
 80103f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80103f4:	58f1      	ldr	r1, [r6, r3]
 80103f6:	f7f0 fdff 	bl	8000ff8 <__aeabi_fsub>
 80103fa:	23cc      	movs	r3, #204	; 0xcc
 80103fc:	00db      	lsls	r3, r3, #3
 80103fe:	58f1      	ldr	r1, [r6, r3]
 8010400:	9024      	str	r0, [sp, #144]	; 0x90
 8010402:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010404:	f7f0 fdf8 	bl	8000ff8 <__aeabi_fsub>
 8010408:	4ba9      	ldr	r3, [pc, #676]	; (80106b0 <calibrate+0x744>)
 801040a:	6060      	str	r0, [r4, #4]
 801040c:	58f1      	ldr	r1, [r6, r3]
 801040e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010410:	f7f0 fdf2 	bl	8000ff8 <__aeabi_fsub>
 8010414:	60a0      	str	r0, [r4, #8]
 8010416:	1c06      	adds	r6, r0, #0
 8010418:	9924      	ldr	r1, [sp, #144]	; 0x90
 801041a:	6867      	ldr	r7, [r4, #4]
 801041c:	1c08      	adds	r0, r1, #0
 801041e:	f7f0 fcc5 	bl	8000dac <__aeabi_fmul>
 8010422:	1c39      	adds	r1, r7, #0
 8010424:	1c04      	adds	r4, r0, #0
 8010426:	1c38      	adds	r0, r7, #0
 8010428:	f7f0 fcc0 	bl	8000dac <__aeabi_fmul>
 801042c:	1c01      	adds	r1, r0, #0
 801042e:	1c20      	adds	r0, r4, #0
 8010430:	f7f0 f956 	bl	80006e0 <__aeabi_fadd>
 8010434:	1c31      	adds	r1, r6, #0
 8010436:	1c04      	adds	r4, r0, #0
 8010438:	1c30      	adds	r0, r6, #0
 801043a:	f7f0 fcb7 	bl	8000dac <__aeabi_fmul>
 801043e:	1c01      	adds	r1, r0, #0
 8010440:	1c20      	adds	r0, r4, #0
 8010442:	f7f0 f94d 	bl	80006e0 <__aeabi_fadd>
 8010446:	f003 fbc9 	bl	8013bdc <sqrtf>
 801044a:	1c29      	adds	r1, r5, #0
 801044c:	f7f0 fdd4 	bl	8000ff8 <__aeabi_fsub>
 8010450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010452:	0040      	lsls	r0, r0, #1
 8010454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010456:	0840      	lsrs	r0, r0, #1
 8010458:	f7ef fffc 	bl	8000454 <__aeabi_fcmpgt>
 801045c:	2800      	cmp	r0, #0
 801045e:	d000      	beq.n	8010462 <calibrate+0x4f6>
 8010460:	e101      	b.n	8010666 <calibrate+0x6fa>
 8010462:	2001      	movs	r0, #1
 8010464:	23f7      	movs	r3, #247	; 0xf7
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	449d      	add	sp, r3
 801046a:	bcf0      	pop	{r4, r5, r6, r7}
 801046c:	46bb      	mov	fp, r7
 801046e:	46b2      	mov	sl, r6
 8010470:	46a9      	mov	r9, r5
 8010472:	46a0      	mov	r8, r4
 8010474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010476:	20cd      	movs	r0, #205	; 0xcd
 8010478:	00c0      	lsls	r0, r0, #3
 801047a:	4684      	mov	ip, r0
 801047c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801047e:	2224      	movs	r2, #36	; 0x24
 8010480:	4463      	add	r3, ip
 8010482:	0019      	movs	r1, r3
 8010484:	a839      	add	r0, sp, #228	; 0xe4
 8010486:	f002 fe1b 	bl	80130c0 <memcpy>
 801048a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801048c:	22a0      	movs	r2, #160	; 0xa0
 801048e:	934c      	str	r3, [sp, #304]	; 0x130
 8010490:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010492:	a91a      	add	r1, sp, #104	; 0x68
 8010494:	9356      	str	r3, [sp, #344]	; 0x158
 8010496:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8010498:	1889      	adds	r1, r1, r2
 801049a:	9357      	str	r3, [sp, #348]	; 0x15c
 801049c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801049e:	9360      	str	r3, [sp, #384]	; 0x180
 80104a0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80104a2:	9361      	str	r3, [sp, #388]	; 0x184
 80104a4:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	2380      	movs	r3, #128	; 0x80
 80104aa:	9800      	ldr	r0, [sp, #0]
 80104ac:	50c8      	str	r0, [r1, r3]
 80104ae:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80104b0:	a91a      	add	r1, sp, #104	; 0x68
 80104b2:	9300      	str	r3, [sp, #0]
 80104b4:	23a0      	movs	r3, #160	; 0xa0
 80104b6:	9800      	ldr	r0, [sp, #0]
 80104b8:	1889      	adds	r1, r1, r2
 80104ba:	50c8      	str	r0, [r1, r3]
 80104bc:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80104be:	a91a      	add	r1, sp, #104	; 0x68
 80104c0:	9300      	str	r3, [sp, #0]
 80104c2:	23a4      	movs	r3, #164	; 0xa4
 80104c4:	9800      	ldr	r0, [sp, #0]
 80104c6:	1889      	adds	r1, r1, r2
 80104c8:	50c8      	str	r0, [r1, r3]
 80104ca:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 80104cc:	a91a      	add	r1, sp, #104	; 0x68
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	23a8      	movs	r3, #168	; 0xa8
 80104d2:	9800      	ldr	r0, [sp, #0]
 80104d4:	1889      	adds	r1, r1, r2
 80104d6:	50c8      	str	r0, [r1, r3]
 80104d8:	0011      	movs	r1, r2
 80104da:	a81a      	add	r0, sp, #104	; 0x68
 80104dc:	3b20      	subs	r3, #32
 80104de:	1882      	adds	r2, r0, r2
 80104e0:	58d2      	ldr	r2, [r2, r3]
 80104e2:	1840      	adds	r0, r0, r1
 80104e4:	3324      	adds	r3, #36	; 0x24
 80104e6:	50c2      	str	r2, [r0, r3]
 80104e8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80104ea:	a81a      	add	r0, sp, #104	; 0x68
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	23c8      	movs	r3, #200	; 0xc8
 80104f0:	000a      	movs	r2, r1
 80104f2:	1841      	adds	r1, r0, r1
 80104f4:	9800      	ldr	r0, [sp, #0]
 80104f6:	50c8      	str	r0, [r1, r3]
 80104f8:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80104fa:	a91a      	add	r1, sp, #104	; 0x68
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	23cc      	movs	r3, #204	; 0xcc
 8010500:	9800      	ldr	r0, [sp, #0]
 8010502:	1889      	adds	r1, r1, r2
 8010504:	50c8      	str	r0, [r1, r3]
 8010506:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8010508:	a91a      	add	r1, sp, #104	; 0x68
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	23d0      	movs	r3, #208	; 0xd0
 801050e:	9800      	ldr	r0, [sp, #0]
 8010510:	1889      	adds	r1, r1, r2
 8010512:	50c8      	str	r0, [r1, r3]
 8010514:	0011      	movs	r1, r2
 8010516:	a81a      	add	r0, sp, #104	; 0x68
 8010518:	3b44      	subs	r3, #68	; 0x44
 801051a:	1882      	adds	r2, r0, r2
 801051c:	58d2      	ldr	r2, [r2, r3]
 801051e:	1840      	adds	r0, r0, r1
 8010520:	3348      	adds	r3, #72	; 0x48
 8010522:	50c2      	str	r2, [r0, r3]
 8010524:	3b20      	subs	r3, #32
 8010526:	58c2      	ldr	r2, [r0, r3]
 8010528:	a81a      	add	r0, sp, #104	; 0x68
 801052a:	1840      	adds	r0, r0, r1
 801052c:	3324      	adds	r3, #36	; 0x24
 801052e:	50c2      	str	r2, [r0, r3]
 8010530:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8010532:	a81a      	add	r0, sp, #104	; 0x68
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	23f0      	movs	r3, #240	; 0xf0
 8010538:	000a      	movs	r2, r1
 801053a:	1841      	adds	r1, r0, r1
 801053c:	9800      	ldr	r0, [sp, #0]
 801053e:	50c8      	str	r0, [r1, r3]
 8010540:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010542:	a91a      	add	r1, sp, #104	; 0x68
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	23f4      	movs	r3, #244	; 0xf4
 8010548:	9800      	ldr	r0, [sp, #0]
 801054a:	1889      	adds	r1, r1, r2
 801054c:	50c8      	str	r0, [r1, r3]
 801054e:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8010550:	a91a      	add	r1, sp, #104	; 0x68
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	23f8      	movs	r3, #248	; 0xf8
 8010556:	9800      	ldr	r0, [sp, #0]
 8010558:	1889      	adds	r1, r1, r2
 801055a:	50c8      	str	r0, [r1, r3]
 801055c:	0011      	movs	r1, r2
 801055e:	a81a      	add	r0, sp, #104	; 0x68
 8010560:	3b68      	subs	r3, #104	; 0x68
 8010562:	1882      	adds	r2, r0, r2
 8010564:	58d2      	ldr	r2, [r2, r3]
 8010566:	1840      	adds	r0, r0, r1
 8010568:	336c      	adds	r3, #108	; 0x6c
 801056a:	50c2      	str	r2, [r0, r3]
 801056c:	3b44      	subs	r3, #68	; 0x44
 801056e:	58c2      	ldr	r2, [r0, r3]
 8010570:	a81a      	add	r0, sp, #104	; 0x68
 8010572:	1840      	adds	r0, r0, r1
 8010574:	3348      	adds	r3, #72	; 0x48
 8010576:	50c2      	str	r2, [r0, r3]
 8010578:	3b20      	subs	r3, #32
 801057a:	58c2      	ldr	r2, [r0, r3]
 801057c:	a81a      	add	r0, sp, #104	; 0x68
 801057e:	1840      	adds	r0, r0, r1
 8010580:	3324      	adds	r3, #36	; 0x24
 8010582:	50c2      	str	r2, [r0, r3]
 8010584:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8010586:	a81a      	add	r0, sp, #104	; 0x68
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	238c      	movs	r3, #140	; 0x8c
 801058c:	000a      	movs	r2, r1
 801058e:	1841      	adds	r1, r0, r1
 8010590:	9800      	ldr	r0, [sp, #0]
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	50c8      	str	r0, [r1, r3]
 8010596:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8010598:	a91a      	add	r1, sp, #104	; 0x68
 801059a:	9300      	str	r3, [sp, #0]
 801059c:	238e      	movs	r3, #142	; 0x8e
 801059e:	9800      	ldr	r0, [sp, #0]
 80105a0:	1889      	adds	r1, r1, r2
 80105a2:	005b      	lsls	r3, r3, #1
 80105a4:	50c8      	str	r0, [r1, r3]
 80105a6:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80105a8:	a91a      	add	r1, sp, #104	; 0x68
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	2390      	movs	r3, #144	; 0x90
 80105ae:	9800      	ldr	r0, [sp, #0]
 80105b0:	1889      	adds	r1, r1, r2
 80105b2:	005b      	lsls	r3, r3, #1
 80105b4:	50c8      	str	r0, [r1, r3]
 80105b6:	0011      	movs	r1, r2
 80105b8:	a81a      	add	r0, sp, #104	; 0x68
 80105ba:	3b8c      	subs	r3, #140	; 0x8c
 80105bc:	1882      	adds	r2, r0, r2
 80105be:	58d2      	ldr	r2, [r2, r3]
 80105c0:	1840      	adds	r0, r0, r1
 80105c2:	3390      	adds	r3, #144	; 0x90
 80105c4:	50c2      	str	r2, [r0, r3]
 80105c6:	3b68      	subs	r3, #104	; 0x68
 80105c8:	58c2      	ldr	r2, [r0, r3]
 80105ca:	a81a      	add	r0, sp, #104	; 0x68
 80105cc:	1840      	adds	r0, r0, r1
 80105ce:	336c      	adds	r3, #108	; 0x6c
 80105d0:	50c2      	str	r2, [r0, r3]
 80105d2:	3b44      	subs	r3, #68	; 0x44
 80105d4:	58c2      	ldr	r2, [r0, r3]
 80105d6:	a81a      	add	r0, sp, #104	; 0x68
 80105d8:	1840      	adds	r0, r0, r1
 80105da:	3348      	adds	r3, #72	; 0x48
 80105dc:	50c2      	str	r2, [r0, r3]
 80105de:	3b20      	subs	r3, #32
 80105e0:	58c2      	ldr	r2, [r0, r3]
 80105e2:	a81a      	add	r0, sp, #104	; 0x68
 80105e4:	1840      	adds	r0, r0, r1
 80105e6:	3324      	adds	r3, #36	; 0x24
 80105e8:	50c2      	str	r2, [r0, r3]
 80105ea:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 80105ec:	a81a      	add	r0, sp, #104	; 0x68
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	23a0      	movs	r3, #160	; 0xa0
 80105f2:	000a      	movs	r2, r1
 80105f4:	1841      	adds	r1, r0, r1
 80105f6:	9800      	ldr	r0, [sp, #0]
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	50c8      	str	r0, [r1, r3]
 80105fc:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80105fe:	a91a      	add	r1, sp, #104	; 0x68
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	23a2      	movs	r3, #162	; 0xa2
 8010604:	9800      	ldr	r0, [sp, #0]
 8010606:	1889      	adds	r1, r1, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	50c8      	str	r0, [r1, r3]
 801060c:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 801060e:	a91a      	add	r1, sp, #104	; 0x68
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	23a4      	movs	r3, #164	; 0xa4
 8010614:	9800      	ldr	r0, [sp, #0]
 8010616:	1889      	adds	r1, r1, r2
 8010618:	005b      	lsls	r3, r3, #1
 801061a:	50c8      	str	r0, [r1, r3]
 801061c:	0011      	movs	r1, r2
 801061e:	a81a      	add	r0, sp, #104	; 0x68
 8010620:	3bb0      	subs	r3, #176	; 0xb0
 8010622:	1882      	adds	r2, r0, r2
 8010624:	58d2      	ldr	r2, [r2, r3]
 8010626:	1840      	adds	r0, r0, r1
 8010628:	33b4      	adds	r3, #180	; 0xb4
 801062a:	50c2      	str	r2, [r0, r3]
 801062c:	3b8c      	subs	r3, #140	; 0x8c
 801062e:	58c2      	ldr	r2, [r0, r3]
 8010630:	a81a      	add	r0, sp, #104	; 0x68
 8010632:	1840      	adds	r0, r0, r1
 8010634:	3390      	adds	r3, #144	; 0x90
 8010636:	50c2      	str	r2, [r0, r3]
 8010638:	3b68      	subs	r3, #104	; 0x68
 801063a:	58c2      	ldr	r2, [r0, r3]
 801063c:	a81a      	add	r0, sp, #104	; 0x68
 801063e:	1840      	adds	r0, r0, r1
 8010640:	336c      	adds	r3, #108	; 0x6c
 8010642:	50c2      	str	r2, [r0, r3]
 8010644:	3b44      	subs	r3, #68	; 0x44
 8010646:	58c2      	ldr	r2, [r0, r3]
 8010648:	a81a      	add	r0, sp, #104	; 0x68
 801064a:	1840      	adds	r0, r0, r1
 801064c:	3348      	adds	r3, #72	; 0x48
 801064e:	50c2      	str	r2, [r0, r3]
 8010650:	3b20      	subs	r3, #32
 8010652:	58c2      	ldr	r2, [r0, r3]
 8010654:	a81a      	add	r0, sp, #104	; 0x68
 8010656:	3324      	adds	r3, #36	; 0x24
 8010658:	1841      	adds	r1, r0, r1
 801065a:	50ca      	str	r2, [r1, r3]
 801065c:	3b54      	subs	r3, #84	; 0x54
 801065e:	3bff      	subs	r3, #255	; 0xff
 8010660:	469b      	mov	fp, r3
 8010662:	9318      	str	r3, [sp, #96]	; 0x60
 8010664:	e4c0      	b.n	800ffe8 <calibrate+0x7c>
 8010666:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <calibrate+0x74c>)
 8010668:	9915      	ldr	r1, [sp, #84]	; 0x54
 801066a:	4a14      	ldr	r2, [pc, #80]	; (80106bc <calibrate+0x750>)
 801066c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801066e:	50ca      	str	r2, [r1, r3]
 8010670:	22b4      	movs	r2, #180	; 0xb4
 8010672:	2100      	movs	r1, #0
 8010674:	0052      	lsls	r2, r2, #1
 8010676:	f002 fd2c 	bl	80130d2 <memset>
 801067a:	4a0b      	ldr	r2, [pc, #44]	; (80106a8 <calibrate+0x73c>)
 801067c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801067e:	4694      	mov	ip, r2
 8010680:	6863      	ldr	r3, [r4, #4]
 8010682:	220c      	movs	r2, #12
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	4463      	add	r3, ip
 8010688:	0018      	movs	r0, r3
 801068a:	a921      	add	r1, sp, #132	; 0x84
 801068c:	f002 fd18 	bl	80130c0 <memcpy>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b01      	cmp	r3, #1
 8010698:	d101      	bne.n	801069e <calibrate+0x732>
 801069a:	f000 ff5e 	bl	801155a <calibrate+0x15ee>
 801069e:	2000      	movs	r0, #0
 80106a0:	e6e0      	b.n	8010464 <calibrate+0x4f8>
 80106a2:	46c0      	nop			; (mov r8, r8)
 80106a4:	000004e4 	.word	0x000004e4
 80106a8:	0000065c 	.word	0x0000065c
 80106ac:	000004ec 	.word	0x000004ec
 80106b0:	00000664 	.word	0x00000664
 80106b4:	0000068c 	.word	0x0000068c
 80106b8:	000004cc 	.word	0x000004cc
 80106bc:	ffff0000 	.word	0xffff0000
 80106c0:	4653      	mov	r3, sl
 80106c2:	9342      	str	r3, [sp, #264]	; 0x108
 80106c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80106c6:	2580      	movs	r5, #128	; 0x80
 80106c8:	469b      	mov	fp, r3
 80106ca:	9343      	str	r3, [sp, #268]	; 0x10c
 80106cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80106ce:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80106d0:	9344      	str	r3, [sp, #272]	; 0x110
 80106d2:	9301      	str	r3, [sp, #4]
 80106d4:	9356      	str	r3, [sp, #344]	; 0x158
 80106d6:	23a0      	movs	r3, #160	; 0xa0
 80106d8:	4659      	mov	r1, fp
 80106da:	9406      	str	r4, [sp, #24]
 80106dc:	9458      	str	r4, [sp, #352]	; 0x160
 80106de:	ae1a      	add	r6, sp, #104	; 0x68
 80106e0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80106e2:	18f6      	adds	r6, r6, r3
 80106e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80106e6:	5174      	str	r4, [r6, r5]
 80106e8:	2684      	movs	r6, #132	; 0x84
 80106ea:	9245      	str	r2, [sp, #276]	; 0x114
 80106ec:	9202      	str	r2, [sp, #8]
 80106ee:	9260      	str	r2, [sp, #384]	; 0x180
 80106f0:	22b4      	movs	r2, #180	; 0xb4
 80106f2:	914c      	str	r1, [sp, #304]	; 0x130
 80106f4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106f6:	4df3      	ldr	r5, [pc, #972]	; (8010ac4 <calibrate+0xb58>)
 80106f8:	af1a      	add	r7, sp, #104	; 0x68
 80106fa:	18ff      	adds	r7, r7, r3
 80106fc:	9104      	str	r1, [sp, #16]
 80106fe:	914d      	str	r1, [sp, #308]	; 0x134
 8010700:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8010702:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8010704:	51bd      	str	r5, [r7, r6]
 8010706:	af42      	add	r7, sp, #264	; 0x108
 8010708:	914e      	str	r1, [sp, #312]	; 0x138
 801070a:	9103      	str	r1, [sp, #12]
 801070c:	9157      	str	r1, [sp, #348]	; 0x15c
 801070e:	0039      	movs	r1, r7
 8010710:	af9c      	add	r7, sp, #624	; 0x270
 8010712:	0052      	lsls	r2, r2, #1
 8010714:	904f      	str	r0, [sp, #316]	; 0x13c
 8010716:	9005      	str	r0, [sp, #20]
 8010718:	9061      	str	r0, [sp, #388]	; 0x184
 801071a:	0038      	movs	r0, r7
 801071c:	9459      	str	r4, [sp, #356]	; 0x164
 801071e:	9407      	str	r4, [sp, #28]
 8010720:	f002 fcce 	bl	80130c0 <memcpy>
 8010724:	9f9c      	ldr	r7, [sp, #624]	; 0x270
 8010726:	98a6      	ldr	r0, [sp, #664]	; 0x298
 8010728:	1c39      	adds	r1, r7, #0
 801072a:	f7f0 f977 	bl	8000a1c <__aeabi_fdiv>
 801072e:	999d      	ldr	r1, [sp, #628]	; 0x274
 8010730:	1c04      	adds	r4, r0, #0
 8010732:	f7f0 fb3b 	bl	8000dac <__aeabi_fmul>
 8010736:	1c01      	adds	r1, r0, #0
 8010738:	98a7      	ldr	r0, [sp, #668]	; 0x29c
 801073a:	f7f0 fc5d 	bl	8000ff8 <__aeabi_fsub>
 801073e:	999e      	ldr	r1, [sp, #632]	; 0x278
 8010740:	4681      	mov	r9, r0
 8010742:	90a7      	str	r0, [sp, #668]	; 0x29c
 8010744:	1c20      	adds	r0, r4, #0
 8010746:	f7f0 fb31 	bl	8000dac <__aeabi_fmul>
 801074a:	1c01      	adds	r1, r0, #0
 801074c:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801074e:	f7f0 fc53 	bl	8000ff8 <__aeabi_fsub>
 8010752:	999f      	ldr	r1, [sp, #636]	; 0x27c
 8010754:	1c06      	adds	r6, r0, #0
 8010756:	90a8      	str	r0, [sp, #672]	; 0x2a0
 8010758:	1c20      	adds	r0, r4, #0
 801075a:	f7f0 fb27 	bl	8000dac <__aeabi_fmul>
 801075e:	1c01      	adds	r1, r0, #0
 8010760:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
 8010762:	f7f0 fc49 	bl	8000ff8 <__aeabi_fsub>
 8010766:	1c39      	adds	r1, r7, #0
 8010768:	9000      	str	r0, [sp, #0]
 801076a:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
 801076c:	9708      	str	r7, [sp, #32]
 801076e:	f7f0 f955 	bl	8000a1c <__aeabi_fdiv>
 8010772:	999d      	ldr	r1, [sp, #628]	; 0x274
 8010774:	1c07      	adds	r7, r0, #0
 8010776:	f7f0 fb19 	bl	8000dac <__aeabi_fmul>
 801077a:	1c01      	adds	r1, r0, #0
 801077c:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
 801077e:	f7f0 fc3b 	bl	8000ff8 <__aeabi_fsub>
 8010782:	999e      	ldr	r1, [sp, #632]	; 0x278
 8010784:	1c04      	adds	r4, r0, #0
 8010786:	90b1      	str	r0, [sp, #708]	; 0x2c4
 8010788:	1c38      	adds	r0, r7, #0
 801078a:	f7f0 fb0f 	bl	8000dac <__aeabi_fmul>
 801078e:	1c01      	adds	r1, r0, #0
 8010790:	98b2      	ldr	r0, [sp, #712]	; 0x2c8
 8010792:	f7f0 fc31 	bl	8000ff8 <__aeabi_fsub>
 8010796:	999f      	ldr	r1, [sp, #636]	; 0x27c
 8010798:	1c05      	adds	r5, r0, #0
 801079a:	1c38      	adds	r0, r7, #0
 801079c:	f7f0 fb06 	bl	8000dac <__aeabi_fmul>
 80107a0:	1c01      	adds	r1, r0, #0
 80107a2:	98b3      	ldr	r0, [sp, #716]	; 0x2cc
 80107a4:	f7f0 fc28 	bl	8000ff8 <__aeabi_fsub>
 80107a8:	4649      	mov	r1, r9
 80107aa:	9009      	str	r0, [sp, #36]	; 0x24
 80107ac:	989d      	ldr	r0, [sp, #628]	; 0x274
 80107ae:	f7f0 f935 	bl	8000a1c <__aeabi_fdiv>
 80107b2:	1c31      	adds	r1, r6, #0
 80107b4:	4680      	mov	r8, r0
 80107b6:	f7f0 faf9 	bl	8000dac <__aeabi_fmul>
 80107ba:	1c01      	adds	r1, r0, #0
 80107bc:	989e      	ldr	r0, [sp, #632]	; 0x278
 80107be:	f7f0 fc1b 	bl	8000ff8 <__aeabi_fsub>
 80107c2:	9900      	ldr	r1, [sp, #0]
 80107c4:	1c07      	adds	r7, r0, #0
 80107c6:	909e      	str	r0, [sp, #632]	; 0x278
 80107c8:	4640      	mov	r0, r8
 80107ca:	f7f0 faef 	bl	8000dac <__aeabi_fmul>
 80107ce:	1c01      	adds	r1, r0, #0
 80107d0:	989f      	ldr	r0, [sp, #636]	; 0x27c
 80107d2:	f7f0 fc11 	bl	8000ff8 <__aeabi_fsub>
 80107d6:	4649      	mov	r1, r9
 80107d8:	4680      	mov	r8, r0
 80107da:	1c20      	adds	r0, r4, #0
 80107dc:	f7f0 f91e 	bl	8000a1c <__aeabi_fdiv>
 80107e0:	1c31      	adds	r1, r6, #0
 80107e2:	1c04      	adds	r4, r0, #0
 80107e4:	f7f0 fae2 	bl	8000dac <__aeabi_fmul>
 80107e8:	1c01      	adds	r1, r0, #0
 80107ea:	1c28      	adds	r0, r5, #0
 80107ec:	f7f0 fc04 	bl	8000ff8 <__aeabi_fsub>
 80107f0:	9900      	ldr	r1, [sp, #0]
 80107f2:	1c05      	adds	r5, r0, #0
 80107f4:	90b2      	str	r0, [sp, #712]	; 0x2c8
 80107f6:	1c20      	adds	r0, r4, #0
 80107f8:	f7f0 fad8 	bl	8000dac <__aeabi_fmul>
 80107fc:	1c01      	adds	r1, r0, #0
 80107fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010800:	f7f0 fbfa 	bl	8000ff8 <__aeabi_fsub>
 8010804:	1c29      	adds	r1, r5, #0
 8010806:	1c04      	adds	r4, r0, #0
 8010808:	90b3      	str	r0, [sp, #716]	; 0x2cc
 801080a:	1c38      	adds	r0, r7, #0
 801080c:	f7f0 f906 	bl	8000a1c <__aeabi_fdiv>
 8010810:	1c21      	adds	r1, r4, #0
 8010812:	f7f0 facb 	bl	8000dac <__aeabi_fmul>
 8010816:	1c01      	adds	r1, r0, #0
 8010818:	4640      	mov	r0, r8
 801081a:	f7f0 fbed 	bl	8000ff8 <__aeabi_fsub>
 801081e:	1c29      	adds	r1, r5, #0
 8010820:	1c07      	adds	r7, r0, #0
 8010822:	909f      	str	r0, [sp, #636]	; 0x27c
 8010824:	1c30      	adds	r0, r6, #0
 8010826:	f7f0 f8f9 	bl	8000a1c <__aeabi_fdiv>
 801082a:	1c21      	adds	r1, r4, #0
 801082c:	f7f0 fabe 	bl	8000dac <__aeabi_fmul>
 8010830:	1c01      	adds	r1, r0, #0
 8010832:	9800      	ldr	r0, [sp, #0]
 8010834:	f7f0 fbe0 	bl	8000ff8 <__aeabi_fsub>
 8010838:	9908      	ldr	r1, [sp, #32]
 801083a:	1c06      	adds	r6, r0, #0
 801083c:	90a9      	str	r0, [sp, #676]	; 0x2a4
 801083e:	1c38      	adds	r0, r7, #0
 8010840:	f7f0 f8ec 	bl	8000a1c <__aeabi_fdiv>
 8010844:	4649      	mov	r1, r9
 8010846:	9000      	str	r0, [sp, #0]
 8010848:	1c30      	adds	r0, r6, #0
 801084a:	f7f0 f8e7 	bl	8000a1c <__aeabi_fdiv>
 801084e:	1c29      	adds	r1, r5, #0
 8010850:	4680      	mov	r8, r0
 8010852:	1c20      	adds	r0, r4, #0
 8010854:	f7f0 f8e2 	bl	8000a1c <__aeabi_fdiv>
 8010858:	1c07      	adds	r7, r0, #0
 801085a:	2080      	movs	r0, #128	; 0x80
 801085c:	9b00      	ldr	r3, [sp, #0]
 801085e:	0600      	lsls	r0, r0, #24
 8010860:	4684      	mov	ip, r0
 8010862:	001d      	movs	r5, r3
 8010864:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010866:	1c19      	adds	r1, r3, #0
 8010868:	4b97      	ldr	r3, [pc, #604]	; (8010ac8 <calibrate+0xb5c>)
 801086a:	4465      	add	r5, ip
 801086c:	58e0      	ldr	r0, [r4, r3]
 801086e:	9527      	str	r5, [sp, #156]	; 0x9c
 8010870:	f7f0 fbc2 	bl	8000ff8 <__aeabi_fsub>
 8010874:	002e      	movs	r6, r5
 8010876:	2580      	movs	r5, #128	; 0x80
 8010878:	4b94      	ldr	r3, [pc, #592]	; (8010acc <calibrate+0xb60>)
 801087a:	062d      	lsls	r5, r5, #24
 801087c:	50e0      	str	r0, [r4, r3]
 801087e:	3b75      	subs	r3, #117	; 0x75
 8010880:	3bff      	subs	r3, #255	; 0xff
 8010882:	4445      	add	r5, r8
 8010884:	58e0      	ldr	r0, [r4, r3]
 8010886:	4641      	mov	r1, r8
 8010888:	9528      	str	r5, [sp, #160]	; 0xa0
 801088a:	f7f0 fbb5 	bl	8000ff8 <__aeabi_fsub>
 801088e:	23cc      	movs	r3, #204	; 0xcc
 8010890:	00db      	lsls	r3, r3, #3
 8010892:	50e0      	str	r0, [r4, r3]
 8010894:	2080      	movs	r0, #128	; 0x80
 8010896:	0022      	movs	r2, r4
 8010898:	4b8d      	ldr	r3, [pc, #564]	; (8010ad0 <calibrate+0xb64>)
 801089a:	0600      	lsls	r0, r0, #24
 801089c:	183c      	adds	r4, r7, r0
 801089e:	1c39      	adds	r1, r7, #0
 80108a0:	9429      	str	r4, [sp, #164]	; 0xa4
 80108a2:	58d0      	ldr	r0, [r2, r3]
 80108a4:	0017      	movs	r7, r2
 80108a6:	f7f0 fba7 	bl	8000ff8 <__aeabi_fsub>
 80108aa:	4b8a      	ldr	r3, [pc, #552]	; (8010ad4 <calibrate+0xb68>)
 80108ac:	1c29      	adds	r1, r5, #0
 80108ae:	50f8      	str	r0, [r7, r3]
 80108b0:	27fe      	movs	r7, #254	; 0xfe
 80108b2:	4658      	mov	r0, fp
 80108b4:	05bf      	lsls	r7, r7, #22
 80108b6:	972a      	str	r7, [sp, #168]	; 0xa8
 80108b8:	f7f0 fa78 	bl	8000dac <__aeabi_fmul>
 80108bc:	1c31      	adds	r1, r6, #0
 80108be:	1c07      	adds	r7, r0, #0
 80108c0:	4650      	mov	r0, sl
 80108c2:	f7f0 fa73 	bl	8000dac <__aeabi_fmul>
 80108c6:	1c01      	adds	r1, r0, #0
 80108c8:	1c38      	adds	r0, r7, #0
 80108ca:	f7ef ff09 	bl	80006e0 <__aeabi_fadd>
 80108ce:	9902      	ldr	r1, [sp, #8]
 80108d0:	f7ef ff06 	bl	80006e0 <__aeabi_fadd>
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	1c07      	adds	r7, r0, #0
 80108d8:	1c21      	adds	r1, r4, #0
 80108da:	1c18      	adds	r0, r3, #0
 80108dc:	4699      	mov	r9, r3
 80108de:	f7f0 fa65 	bl	8000dac <__aeabi_fmul>
 80108e2:	1c39      	adds	r1, r7, #0
 80108e4:	f7ef fefc 	bl	80006e0 <__aeabi_fadd>
 80108e8:	1c29      	adds	r1, r5, #0
 80108ea:	9000      	str	r0, [sp, #0]
 80108ec:	9060      	str	r0, [sp, #384]	; 0x180
 80108ee:	9804      	ldr	r0, [sp, #16]
 80108f0:	f7f0 fa5c 	bl	8000dac <__aeabi_fmul>
 80108f4:	1c31      	adds	r1, r6, #0
 80108f6:	1c07      	adds	r7, r0, #0
 80108f8:	4658      	mov	r0, fp
 80108fa:	f7f0 fa57 	bl	8000dac <__aeabi_fmul>
 80108fe:	1c01      	adds	r1, r0, #0
 8010900:	1c38      	adds	r0, r7, #0
 8010902:	f7ef feed 	bl	80006e0 <__aeabi_fadd>
 8010906:	9905      	ldr	r1, [sp, #20]
 8010908:	f7ef feea 	bl	80006e0 <__aeabi_fadd>
 801090c:	1c21      	adds	r1, r4, #0
 801090e:	1c07      	adds	r7, r0, #0
 8010910:	9803      	ldr	r0, [sp, #12]
 8010912:	f7f0 fa4b 	bl	8000dac <__aeabi_fmul>
 8010916:	1c39      	adds	r1, r7, #0
 8010918:	f7ef fee2 	bl	80006e0 <__aeabi_fadd>
 801091c:	1c29      	adds	r1, r5, #0
 801091e:	4680      	mov	r8, r0
 8010920:	9061      	str	r0, [sp, #388]	; 0x184
 8010922:	9803      	ldr	r0, [sp, #12]
 8010924:	f7f0 fa42 	bl	8000dac <__aeabi_fmul>
 8010928:	464b      	mov	r3, r9
 801092a:	1c07      	adds	r7, r0, #0
 801092c:	1c31      	adds	r1, r6, #0
 801092e:	4648      	mov	r0, r9
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	f7f0 fa3b 	bl	8000dac <__aeabi_fmul>
 8010936:	1c01      	adds	r1, r0, #0
 8010938:	1c38      	adds	r0, r7, #0
 801093a:	f7ef fed1 	bl	80006e0 <__aeabi_fadd>
 801093e:	9907      	ldr	r1, [sp, #28]
 8010940:	f7ef fece 	bl	80006e0 <__aeabi_fadd>
 8010944:	1c21      	adds	r1, r4, #0
 8010946:	1c07      	adds	r7, r0, #0
 8010948:	9806      	ldr	r0, [sp, #24]
 801094a:	f7f0 fa2f 	bl	8000dac <__aeabi_fmul>
 801094e:	1c39      	adds	r1, r7, #0
 8010950:	f7ef fec6 	bl	80006e0 <__aeabi_fadd>
 8010954:	23a0      	movs	r3, #160	; 0xa0
 8010956:	2280      	movs	r2, #128	; 0x80
 8010958:	a91a      	add	r1, sp, #104	; 0x68
 801095a:	18cb      	adds	r3, r1, r3
 801095c:	5098      	str	r0, [r3, r2]
 801095e:	1c07      	adds	r7, r0, #0
 8010960:	1c31      	adds	r1, r6, #0
 8010962:	9802      	ldr	r0, [sp, #8]
 8010964:	f7f0 fa22 	bl	8000dac <__aeabi_fmul>
 8010968:	1c29      	adds	r1, r5, #0
 801096a:	4681      	mov	r9, r0
 801096c:	9805      	ldr	r0, [sp, #20]
 801096e:	f7f0 fa1d 	bl	8000dac <__aeabi_fmul>
 8010972:	1c01      	adds	r1, r0, #0
 8010974:	4648      	mov	r0, r9
 8010976:	f7ef feb3 	bl	80006e0 <__aeabi_fadd>
 801097a:	21fe      	movs	r1, #254	; 0xfe
 801097c:	0589      	lsls	r1, r1, #22
 801097e:	f7f0 fb3b 	bl	8000ff8 <__aeabi_fsub>
 8010982:	4681      	mov	r9, r0
 8010984:	1c21      	adds	r1, r4, #0
 8010986:	9807      	ldr	r0, [sp, #28]
 8010988:	f7f0 fa10 	bl	8000dac <__aeabi_fmul>
 801098c:	4649      	mov	r1, r9
 801098e:	f7ef fea7 	bl	80006e0 <__aeabi_fadd>
 8010992:	1c31      	adds	r1, r6, #0
 8010994:	4681      	mov	r9, r0
 8010996:	9800      	ldr	r0, [sp, #0]
 8010998:	f7f0 fa08 	bl	8000dac <__aeabi_fmul>
 801099c:	1c29      	adds	r1, r5, #0
 801099e:	1c06      	adds	r6, r0, #0
 80109a0:	4640      	mov	r0, r8
 80109a2:	f7f0 fa03 	bl	8000dac <__aeabi_fmul>
 80109a6:	1c31      	adds	r1, r6, #0
 80109a8:	f7ef fe9a 	bl	80006e0 <__aeabi_fadd>
 80109ac:	1c39      	adds	r1, r7, #0
 80109ae:	1c05      	adds	r5, r0, #0
 80109b0:	1c20      	adds	r0, r4, #0
 80109b2:	f7f0 f9fb 	bl	8000dac <__aeabi_fmul>
 80109b6:	1c01      	adds	r1, r0, #0
 80109b8:	1c28      	adds	r0, r5, #0
 80109ba:	f7ef fe91 	bl	80006e0 <__aeabi_fadd>
 80109be:	4649      	mov	r1, r9
 80109c0:	f7ef fe8e 	bl	80006e0 <__aeabi_fadd>
 80109c4:	23a0      	movs	r3, #160	; 0xa0
 80109c6:	2684      	movs	r6, #132	; 0x84
 80109c8:	aa1a      	add	r2, sp, #104	; 0x68
 80109ca:	18d2      	adds	r2, r2, r3
 80109cc:	5190      	str	r0, [r2, r6]
 80109ce:	1c01      	adds	r1, r0, #0
 80109d0:	20fe      	movs	r0, #254	; 0xfe
 80109d2:	0580      	lsls	r0, r0, #22
 80109d4:	f7f0 f822 	bl	8000a1c <__aeabi_fdiv>
 80109d8:	2680      	movs	r6, #128	; 0x80
 80109da:	1c05      	adds	r5, r0, #0
 80109dc:	1c01      	adds	r1, r0, #0
 80109de:	4650      	mov	r0, sl
 80109e0:	f7f0 f9e4 	bl	8000dac <__aeabi_fmul>
 80109e4:	0636      	lsls	r6, r6, #24
 80109e6:	46b4      	mov	ip, r6
 80109e8:	0002      	movs	r2, r0
 80109ea:	1c29      	adds	r1, r5, #0
 80109ec:	4462      	add	r2, ip
 80109ee:	9000      	str	r0, [sp, #0]
 80109f0:	4658      	mov	r0, fp
 80109f2:	0016      	movs	r6, r2
 80109f4:	9205      	str	r2, [sp, #20]
 80109f6:	9242      	str	r2, [sp, #264]	; 0x108
 80109f8:	f7f0 f9d8 	bl	8000dac <__aeabi_fmul>
 80109fc:	2280      	movs	r2, #128	; 0x80
 80109fe:	0612      	lsls	r2, r2, #24
 8010a00:	4694      	mov	ip, r2
 8010a02:	4484      	add	ip, r0
 8010a04:	4662      	mov	r2, ip
 8010a06:	1c04      	adds	r4, r0, #0
 8010a08:	1c29      	adds	r1, r5, #0
 8010a0a:	9801      	ldr	r0, [sp, #4]
 8010a0c:	46e0      	mov	r8, ip
 8010a0e:	9243      	str	r2, [sp, #268]	; 0x10c
 8010a10:	f7f0 f9cc 	bl	8000dac <__aeabi_fmul>
 8010a14:	2380      	movs	r3, #128	; 0x80
 8010a16:	4682      	mov	sl, r0
 8010a18:	061b      	lsls	r3, r3, #24
 8010a1a:	4453      	add	r3, sl
 8010a1c:	001f      	movs	r7, r3
 8010a1e:	9344      	str	r3, [sp, #272]	; 0x110
 8010a20:	4643      	mov	r3, r8
 8010a22:	1c29      	adds	r1, r5, #0
 8010a24:	9804      	ldr	r0, [sp, #16]
 8010a26:	934c      	str	r3, [sp, #304]	; 0x130
 8010a28:	f7f0 f9c0 	bl	8000dac <__aeabi_fmul>
 8010a2c:	2280      	movs	r2, #128	; 0x80
 8010a2e:	0612      	lsls	r2, r2, #24
 8010a30:	4694      	mov	ip, r2
 8010a32:	1c03      	adds	r3, r0, #0
 8010a34:	4463      	add	r3, ip
 8010a36:	1c29      	adds	r1, r5, #0
 8010a38:	9001      	str	r0, [sp, #4]
 8010a3a:	9803      	ldr	r0, [sp, #12]
 8010a3c:	9302      	str	r3, [sp, #8]
 8010a3e:	934d      	str	r3, [sp, #308]	; 0x134
 8010a40:	f7f0 f9b4 	bl	8000dac <__aeabi_fmul>
 8010a44:	2280      	movs	r2, #128	; 0x80
 8010a46:	4681      	mov	r9, r0
 8010a48:	0612      	lsls	r2, r2, #24
 8010a4a:	444a      	add	r2, r9
 8010a4c:	1c29      	adds	r1, r5, #0
 8010a4e:	9806      	ldr	r0, [sp, #24]
 8010a50:	4693      	mov	fp, r2
 8010a52:	924e      	str	r2, [sp, #312]	; 0x138
 8010a54:	9257      	str	r2, [sp, #348]	; 0x15c
 8010a56:	9756      	str	r7, [sp, #344]	; 0x158
 8010a58:	f7f0 f9a8 	bl	8000dac <__aeabi_fmul>
 8010a5c:	2180      	movs	r1, #128	; 0x80
 8010a5e:	0609      	lsls	r1, r1, #24
 8010a60:	468c      	mov	ip, r1
 8010a62:	0002      	movs	r2, r0
 8010a64:	9003      	str	r0, [sp, #12]
 8010a66:	4462      	add	r2, ip
 8010a68:	1c21      	adds	r1, r4, #0
 8010a6a:	1c20      	adds	r0, r4, #0
 8010a6c:	9206      	str	r2, [sp, #24]
 8010a6e:	9258      	str	r2, [sp, #352]	; 0x160
 8010a70:	f7f0 f99c 	bl	8000dac <__aeabi_fmul>
 8010a74:	4651      	mov	r1, sl
 8010a76:	1c05      	adds	r5, r0, #0
 8010a78:	9009      	str	r0, [sp, #36]	; 0x24
 8010a7a:	4650      	mov	r0, sl
 8010a7c:	f7f0 f996 	bl	8000dac <__aeabi_fmul>
 8010a80:	1c01      	adds	r1, r0, #0
 8010a82:	900a      	str	r0, [sp, #40]	; 0x28
 8010a84:	1c28      	adds	r0, r5, #0
 8010a86:	f7ef fe2b 	bl	80006e0 <__aeabi_fadd>
 8010a8a:	4649      	mov	r1, r9
 8010a8c:	1c05      	adds	r5, r0, #0
 8010a8e:	9008      	str	r0, [sp, #32]
 8010a90:	4648      	mov	r0, r9
 8010a92:	f7f0 f98b 	bl	8000dac <__aeabi_fmul>
 8010a96:	1c01      	adds	r1, r0, #0
 8010a98:	9004      	str	r0, [sp, #16]
 8010a9a:	1c28      	adds	r0, r5, #0
 8010a9c:	f7ef fe20 	bl	80006e0 <__aeabi_fadd>
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	1c05      	adds	r5, r0, #0
 8010aa4:	f7ef fcbc 	bl	8000420 <__aeabi_fcmpeq>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d101      	bne.n	8010ab0 <calibrate+0xb44>
 8010aac:	f000 fca4 	bl	80113f8 <calibrate+0x148c>
 8010ab0:	9a06      	ldr	r2, [sp, #24]
 8010ab2:	9b02      	ldr	r3, [sp, #8]
 8010ab4:	4693      	mov	fp, r2
 8010ab6:	961e      	str	r6, [sp, #120]	; 0x78
 8010ab8:	931f      	str	r3, [sp, #124]	; 0x7c
 8010aba:	9220      	str	r2, [sp, #128]	; 0x80
 8010abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010abe:	9607      	str	r6, [sp, #28]
 8010ac0:	e00a      	b.n	8010ad8 <calibrate+0xb6c>
 8010ac2:	46c0      	nop			; (mov r8, r8)
 8010ac4:	bf800000 	.word	0xbf800000
 8010ac8:	000004e4 	.word	0x000004e4
 8010acc:	0000065c 	.word	0x0000065c
 8010ad0:	000004ec 	.word	0x000004ec
 8010ad4:	00000664 	.word	0x00000664
 8010ad8:	9f05      	ldr	r7, [sp, #20]
 8010ada:	4659      	mov	r1, fp
 8010adc:	1c38      	adds	r0, r7, #0
 8010ade:	f7f0 fa8b 	bl	8000ff8 <__aeabi_fsub>
 8010ae2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8010ae4:	1c05      	adds	r5, r0, #0
 8010ae6:	1c31      	adds	r1, r6, #0
 8010ae8:	1c38      	adds	r0, r7, #0
 8010aea:	f7f0 fa85 	bl	8000ff8 <__aeabi_fsub>
 8010aee:	1c01      	adds	r1, r0, #0
 8010af0:	1c28      	adds	r0, r5, #0
 8010af2:	f7f0 f95b 	bl	8000dac <__aeabi_fmul>
 8010af6:	9908      	ldr	r1, [sp, #32]
 8010af8:	f7ef fdf2 	bl	80006e0 <__aeabi_fadd>
 8010afc:	1c01      	adds	r1, r0, #0
 8010afe:	1c07      	adds	r7, r0, #0
 8010b00:	9030      	str	r0, [sp, #192]	; 0xc0
 8010b02:	f7f0 f953 	bl	8000dac <__aeabi_fmul>
 8010b06:	4651      	mov	r1, sl
 8010b08:	4680      	mov	r8, r0
 8010b0a:	4648      	mov	r0, r9
 8010b0c:	f7f0 f94e 	bl	8000dac <__aeabi_fmul>
 8010b10:	9901      	ldr	r1, [sp, #4]
 8010b12:	1c05      	adds	r5, r0, #0
 8010b14:	900c      	str	r0, [sp, #48]	; 0x30
 8010b16:	1c30      	adds	r0, r6, #0
 8010b18:	9605      	str	r6, [sp, #20]
 8010b1a:	f7ef fde1 	bl	80006e0 <__aeabi_fadd>
 8010b1e:	1c21      	adds	r1, r4, #0
 8010b20:	f7f0 f944 	bl	8000dac <__aeabi_fmul>
 8010b24:	1c29      	adds	r1, r5, #0
 8010b26:	f7ef fddb 	bl	80006e0 <__aeabi_fadd>
 8010b2a:	9900      	ldr	r1, [sp, #0]
 8010b2c:	1c05      	adds	r5, r0, #0
 8010b2e:	4658      	mov	r0, fp
 8010b30:	f7ef fdd6 	bl	80006e0 <__aeabi_fadd>
 8010b34:	1c21      	adds	r1, r4, #0
 8010b36:	f7f0 f939 	bl	8000dac <__aeabi_fmul>
 8010b3a:	1c01      	adds	r1, r0, #0
 8010b3c:	1c28      	adds	r0, r5, #0
 8010b3e:	f7ef fdcf 	bl	80006e0 <__aeabi_fadd>
 8010b42:	1c01      	adds	r1, r0, #0
 8010b44:	1c06      	adds	r6, r0, #0
 8010b46:	9033      	str	r0, [sp, #204]	; 0xcc
 8010b48:	f7f0 f930 	bl	8000dac <__aeabi_fmul>
 8010b4c:	4641      	mov	r1, r8
 8010b4e:	1c05      	adds	r5, r0, #0
 8010b50:	4640      	mov	r0, r8
 8010b52:	f7f0 f92b 	bl	8000dac <__aeabi_fmul>
 8010b56:	1c29      	adds	r1, r5, #0
 8010b58:	4680      	mov	r8, r0
 8010b5a:	1c28      	adds	r0, r5, #0
 8010b5c:	f7f0 f926 	bl	8000dac <__aeabi_fmul>
 8010b60:	1c01      	adds	r1, r0, #0
 8010b62:	4640      	mov	r0, r8
 8010b64:	f7ef fdbc 	bl	80006e0 <__aeabi_fadd>
 8010b68:	1c21      	adds	r1, r4, #0
 8010b6a:	4680      	mov	r8, r0
 8010b6c:	4648      	mov	r0, r9
 8010b6e:	f7f0 f91d 	bl	8000dac <__aeabi_fmul>
 8010b72:	9900      	ldr	r1, [sp, #0]
 8010b74:	1c05      	adds	r5, r0, #0
 8010b76:	9008      	str	r0, [sp, #32]
 8010b78:	9805      	ldr	r0, [sp, #20]
 8010b7a:	f7ef fdb1 	bl	80006e0 <__aeabi_fadd>
 8010b7e:	9903      	ldr	r1, [sp, #12]
 8010b80:	f7ef fdae 	bl	80006e0 <__aeabi_fadd>
 8010b84:	4659      	mov	r1, fp
 8010b86:	f7ef fdab 	bl	80006e0 <__aeabi_fadd>
 8010b8a:	4651      	mov	r1, sl
 8010b8c:	f7f0 f90e 	bl	8000dac <__aeabi_fmul>
 8010b90:	1c29      	adds	r1, r5, #0
 8010b92:	f7ef fda5 	bl	80006e0 <__aeabi_fadd>
 8010b96:	1c01      	adds	r1, r0, #0
 8010b98:	1c05      	adds	r5, r0, #0
 8010b9a:	9036      	str	r0, [sp, #216]	; 0xd8
 8010b9c:	f7f0 f906 	bl	8000dac <__aeabi_fmul>
 8010ba0:	1c01      	adds	r1, r0, #0
 8010ba2:	f7f0 f903 	bl	8000dac <__aeabi_fmul>
 8010ba6:	4641      	mov	r1, r8
 8010ba8:	f7ef fd9a 	bl	80006e0 <__aeabi_fadd>
 8010bac:	f003 f816 	bl	8013bdc <sqrtf>
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	4680      	mov	r8, r0
 8010bb4:	1c38      	adds	r0, r7, #0
 8010bb6:	f7ef fc33 	bl	8000420 <__aeabi_fcmpeq>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d104      	bne.n	8010bc8 <calibrate+0xc5c>
 8010bbe:	4641      	mov	r1, r8
 8010bc0:	1c38      	adds	r0, r7, #0
 8010bc2:	f7ef ff2b 	bl	8000a1c <__aeabi_fdiv>
 8010bc6:	9030      	str	r0, [sp, #192]	; 0xc0
 8010bc8:	2100      	movs	r1, #0
 8010bca:	1c30      	adds	r0, r6, #0
 8010bcc:	f7ef fc28 	bl	8000420 <__aeabi_fcmpeq>
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d104      	bne.n	8010bde <calibrate+0xc72>
 8010bd4:	4641      	mov	r1, r8
 8010bd6:	1c30      	adds	r0, r6, #0
 8010bd8:	f7ef ff20 	bl	8000a1c <__aeabi_fdiv>
 8010bdc:	9033      	str	r0, [sp, #204]	; 0xcc
 8010bde:	2100      	movs	r1, #0
 8010be0:	1c28      	adds	r0, r5, #0
 8010be2:	f7ef fc1d 	bl	8000420 <__aeabi_fcmpeq>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d104      	bne.n	8010bf4 <calibrate+0xc88>
 8010bea:	4641      	mov	r1, r8
 8010bec:	1c28      	adds	r0, r5, #0
 8010bee:	f7ef ff15 	bl	8000a1c <__aeabi_fdiv>
 8010bf2:	9036      	str	r0, [sp, #216]	; 0xd8
 8010bf4:	9b07      	ldr	r3, [sp, #28]
 8010bf6:	9900      	ldr	r1, [sp, #0]
 8010bf8:	1c18      	adds	r0, r3, #0
 8010bfa:	4698      	mov	r8, r3
 8010bfc:	f7ef fd70 	bl	80006e0 <__aeabi_fadd>
 8010c00:	9901      	ldr	r1, [sp, #4]
 8010c02:	1c05      	adds	r5, r0, #0
 8010c04:	4658      	mov	r0, fp
 8010c06:	f7ef fd6b 	bl	80006e0 <__aeabi_fadd>
 8010c0a:	1c01      	adds	r1, r0, #0
 8010c0c:	1c28      	adds	r0, r5, #0
 8010c0e:	f7ef fd67 	bl	80006e0 <__aeabi_fadd>
 8010c12:	1c21      	adds	r1, r4, #0
 8010c14:	f7f0 f8ca 	bl	8000dac <__aeabi_fmul>
 8010c18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c1a:	f7ef fd61 	bl	80006e0 <__aeabi_fadd>
 8010c1e:	1c01      	adds	r1, r0, #0
 8010c20:	1c06      	adds	r6, r0, #0
 8010c22:	9031      	str	r0, [sp, #196]	; 0xc4
 8010c24:	f7f0 f8c2 	bl	8000dac <__aeabi_fmul>
 8010c28:	4659      	mov	r1, fp
 8010c2a:	1c07      	adds	r7, r0, #0
 8010c2c:	9802      	ldr	r0, [sp, #8]
 8010c2e:	f7f0 f9e3 	bl	8000ff8 <__aeabi_fsub>
 8010c32:	4641      	mov	r1, r8
 8010c34:	1c05      	adds	r5, r0, #0
 8010c36:	9802      	ldr	r0, [sp, #8]
 8010c38:	f7f0 f9de 	bl	8000ff8 <__aeabi_fsub>
 8010c3c:	1c01      	adds	r1, r0, #0
 8010c3e:	1c28      	adds	r0, r5, #0
 8010c40:	f7f0 f8b4 	bl	8000dac <__aeabi_fmul>
 8010c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c46:	f7ef fd4b 	bl	80006e0 <__aeabi_fadd>
 8010c4a:	9904      	ldr	r1, [sp, #16]
 8010c4c:	f7ef fd48 	bl	80006e0 <__aeabi_fadd>
 8010c50:	1c01      	adds	r1, r0, #0
 8010c52:	9034      	str	r0, [sp, #208]	; 0xd0
 8010c54:	f7f0 f8aa 	bl	8000dac <__aeabi_fmul>
 8010c58:	1c39      	adds	r1, r7, #0
 8010c5a:	1c05      	adds	r5, r0, #0
 8010c5c:	1c38      	adds	r0, r7, #0
 8010c5e:	f7f0 f8a5 	bl	8000dac <__aeabi_fmul>
 8010c62:	1c29      	adds	r1, r5, #0
 8010c64:	1c07      	adds	r7, r0, #0
 8010c66:	1c28      	adds	r0, r5, #0
 8010c68:	f7f0 f8a0 	bl	8000dac <__aeabi_fmul>
 8010c6c:	1c01      	adds	r1, r0, #0
 8010c6e:	1c38      	adds	r0, r7, #0
 8010c70:	f7ef fd36 	bl	80006e0 <__aeabi_fadd>
 8010c74:	9901      	ldr	r1, [sp, #4]
 8010c76:	1c07      	adds	r7, r0, #0
 8010c78:	4658      	mov	r0, fp
 8010c7a:	f7ef fd31 	bl	80006e0 <__aeabi_fadd>
 8010c7e:	4649      	mov	r1, r9
 8010c80:	f7f0 f894 	bl	8000dac <__aeabi_fmul>
 8010c84:	1c21      	adds	r1, r4, #0
 8010c86:	1c05      	adds	r5, r0, #0
 8010c88:	4650      	mov	r0, sl
 8010c8a:	f7f0 f88f 	bl	8000dac <__aeabi_fmul>
 8010c8e:	1c01      	adds	r1, r0, #0
 8010c90:	1c28      	adds	r0, r5, #0
 8010c92:	f7ef fd25 	bl	80006e0 <__aeabi_fadd>
 8010c96:	9903      	ldr	r1, [sp, #12]
 8010c98:	1c05      	adds	r5, r0, #0
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	f7ef fd20 	bl	80006e0 <__aeabi_fadd>
 8010ca0:	4649      	mov	r1, r9
 8010ca2:	f7f0 f883 	bl	8000dac <__aeabi_fmul>
 8010ca6:	1c01      	adds	r1, r0, #0
 8010ca8:	1c28      	adds	r0, r5, #0
 8010caa:	f7ef fd19 	bl	80006e0 <__aeabi_fadd>
 8010cae:	1c01      	adds	r1, r0, #0
 8010cb0:	1c05      	adds	r5, r0, #0
 8010cb2:	9037      	str	r0, [sp, #220]	; 0xdc
 8010cb4:	f7f0 f87a 	bl	8000dac <__aeabi_fmul>
 8010cb8:	1c01      	adds	r1, r0, #0
 8010cba:	f7f0 f877 	bl	8000dac <__aeabi_fmul>
 8010cbe:	1c39      	adds	r1, r7, #0
 8010cc0:	f7ef fd0e 	bl	80006e0 <__aeabi_fadd>
 8010cc4:	f002 ff8a 	bl	8013bdc <sqrtf>
 8010cc8:	2100      	movs	r1, #0
 8010cca:	1c07      	adds	r7, r0, #0
 8010ccc:	1c30      	adds	r0, r6, #0
 8010cce:	f7ef fba7 	bl	8000420 <__aeabi_fcmpeq>
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d104      	bne.n	8010ce0 <calibrate+0xd74>
 8010cd6:	1c39      	adds	r1, r7, #0
 8010cd8:	1c30      	adds	r0, r6, #0
 8010cda:	f7ef fe9f 	bl	8000a1c <__aeabi_fdiv>
 8010cde:	9031      	str	r0, [sp, #196]	; 0xc4
 8010ce0:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	1c30      	adds	r0, r6, #0
 8010ce6:	f7ef fb9b 	bl	8000420 <__aeabi_fcmpeq>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d104      	bne.n	8010cf8 <calibrate+0xd8c>
 8010cee:	1c39      	adds	r1, r7, #0
 8010cf0:	1c30      	adds	r0, r6, #0
 8010cf2:	f7ef fe93 	bl	8000a1c <__aeabi_fdiv>
 8010cf6:	9034      	str	r0, [sp, #208]	; 0xd0
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	1c28      	adds	r0, r5, #0
 8010cfc:	f7ef fb90 	bl	8000420 <__aeabi_fcmpeq>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d104      	bne.n	8010d0e <calibrate+0xda2>
 8010d04:	1c39      	adds	r1, r7, #0
 8010d06:	1c28      	adds	r0, r5, #0
 8010d08:	f7ef fe88 	bl	8000a1c <__aeabi_fdiv>
 8010d0c:	9037      	str	r0, [sp, #220]	; 0xdc
 8010d0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010d10:	9800      	ldr	r0, [sp, #0]
 8010d12:	f7ef fce5 	bl	80006e0 <__aeabi_fadd>
 8010d16:	4651      	mov	r1, sl
 8010d18:	f7f0 f848 	bl	8000dac <__aeabi_fmul>
 8010d1c:	9908      	ldr	r1, [sp, #32]
 8010d1e:	f7ef fcdf 	bl	80006e0 <__aeabi_fadd>
 8010d22:	9b03      	ldr	r3, [sp, #12]
 8010d24:	1c05      	adds	r5, r0, #0
 8010d26:	1c19      	adds	r1, r3, #0
 8010d28:	469b      	mov	fp, r3
 8010d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d2c:	1c18      	adds	r0, r3, #0
 8010d2e:	4698      	mov	r8, r3
 8010d30:	f7ef fcd6 	bl	80006e0 <__aeabi_fadd>
 8010d34:	4651      	mov	r1, sl
 8010d36:	f7f0 f839 	bl	8000dac <__aeabi_fmul>
 8010d3a:	1c01      	adds	r1, r0, #0
 8010d3c:	1c28      	adds	r0, r5, #0
 8010d3e:	f7ef fccf 	bl	80006e0 <__aeabi_fadd>
 8010d42:	1c01      	adds	r1, r0, #0
 8010d44:	1c05      	adds	r5, r0, #0
 8010d46:	9032      	str	r0, [sp, #200]	; 0xc8
 8010d48:	f7f0 f830 	bl	8000dac <__aeabi_fmul>
 8010d4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010d4e:	1c06      	adds	r6, r0, #0
 8010d50:	9801      	ldr	r0, [sp, #4]
 8010d52:	f7ef fcc5 	bl	80006e0 <__aeabi_fadd>
 8010d56:	4649      	mov	r1, r9
 8010d58:	f7f0 f828 	bl	8000dac <__aeabi_fmul>
 8010d5c:	1c21      	adds	r1, r4, #0
 8010d5e:	1c07      	adds	r7, r0, #0
 8010d60:	4650      	mov	r0, sl
 8010d62:	f7f0 f823 	bl	8000dac <__aeabi_fmul>
 8010d66:	1c01      	adds	r1, r0, #0
 8010d68:	1c38      	adds	r0, r7, #0
 8010d6a:	f7ef fcb9 	bl	80006e0 <__aeabi_fadd>
 8010d6e:	4659      	mov	r1, fp
 8010d70:	1c04      	adds	r4, r0, #0
 8010d72:	4640      	mov	r0, r8
 8010d74:	f7ef fcb4 	bl	80006e0 <__aeabi_fadd>
 8010d78:	4649      	mov	r1, r9
 8010d7a:	f7f0 f817 	bl	8000dac <__aeabi_fmul>
 8010d7e:	1c01      	adds	r1, r0, #0
 8010d80:	1c20      	adds	r0, r4, #0
 8010d82:	f7ef fcad 	bl	80006e0 <__aeabi_fadd>
 8010d86:	1c01      	adds	r1, r0, #0
 8010d88:	9035      	str	r0, [sp, #212]	; 0xd4
 8010d8a:	f7f0 f80f 	bl	8000dac <__aeabi_fmul>
 8010d8e:	1c01      	adds	r1, r0, #0
 8010d90:	f7f0 f80c 	bl	8000dac <__aeabi_fmul>
 8010d94:	1c31      	adds	r1, r6, #0
 8010d96:	1c04      	adds	r4, r0, #0
 8010d98:	1c30      	adds	r0, r6, #0
 8010d9a:	f7f0 f807 	bl	8000dac <__aeabi_fmul>
 8010d9e:	1c01      	adds	r1, r0, #0
 8010da0:	1c20      	adds	r0, r4, #0
 8010da2:	f7ef fc9d 	bl	80006e0 <__aeabi_fadd>
 8010da6:	9b06      	ldr	r3, [sp, #24]
 8010da8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010daa:	1c06      	adds	r6, r0, #0
 8010dac:	1c18      	adds	r0, r3, #0
 8010dae:	4647      	mov	r7, r8
 8010db0:	4698      	mov	r8, r3
 8010db2:	f7f0 f921 	bl	8000ff8 <__aeabi_fsub>
 8010db6:	1c39      	adds	r1, r7, #0
 8010db8:	1c04      	adds	r4, r0, #0
 8010dba:	4640      	mov	r0, r8
 8010dbc:	f7f0 f91c 	bl	8000ff8 <__aeabi_fsub>
 8010dc0:	1c01      	adds	r1, r0, #0
 8010dc2:	1c20      	adds	r0, r4, #0
 8010dc4:	f7ef fff2 	bl	8000dac <__aeabi_fmul>
 8010dc8:	9904      	ldr	r1, [sp, #16]
 8010dca:	1c04      	adds	r4, r0, #0
 8010dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010dce:	f7ef fc87 	bl	80006e0 <__aeabi_fadd>
 8010dd2:	1c01      	adds	r1, r0, #0
 8010dd4:	1c20      	adds	r0, r4, #0
 8010dd6:	f7ef fc83 	bl	80006e0 <__aeabi_fadd>
 8010dda:	1c01      	adds	r1, r0, #0
 8010ddc:	1c04      	adds	r4, r0, #0
 8010dde:	9038      	str	r0, [sp, #224]	; 0xe0
 8010de0:	f7ef ffe4 	bl	8000dac <__aeabi_fmul>
 8010de4:	1c01      	adds	r1, r0, #0
 8010de6:	f7ef ffe1 	bl	8000dac <__aeabi_fmul>
 8010dea:	1c31      	adds	r1, r6, #0
 8010dec:	f7ef fc78 	bl	80006e0 <__aeabi_fadd>
 8010df0:	f002 fef4 	bl	8013bdc <sqrtf>
 8010df4:	2100      	movs	r1, #0
 8010df6:	1c06      	adds	r6, r0, #0
 8010df8:	1c28      	adds	r0, r5, #0
 8010dfa:	f7ef fb11 	bl	8000420 <__aeabi_fcmpeq>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d104      	bne.n	8010e0c <calibrate+0xea0>
 8010e02:	1c31      	adds	r1, r6, #0
 8010e04:	1c28      	adds	r0, r5, #0
 8010e06:	f7ef fe09 	bl	8000a1c <__aeabi_fdiv>
 8010e0a:	9032      	str	r0, [sp, #200]	; 0xc8
 8010e0c:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 8010e0e:	2100      	movs	r1, #0
 8010e10:	1c28      	adds	r0, r5, #0
 8010e12:	f7ef fb05 	bl	8000420 <__aeabi_fcmpeq>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	d104      	bne.n	8010e24 <calibrate+0xeb8>
 8010e1a:	1c31      	adds	r1, r6, #0
 8010e1c:	1c28      	adds	r0, r5, #0
 8010e1e:	f7ef fdfd 	bl	8000a1c <__aeabi_fdiv>
 8010e22:	9035      	str	r0, [sp, #212]	; 0xd4
 8010e24:	2100      	movs	r1, #0
 8010e26:	1c20      	adds	r0, r4, #0
 8010e28:	f7ef fafa 	bl	8000420 <__aeabi_fcmpeq>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d104      	bne.n	8010e3a <calibrate+0xece>
 8010e30:	1c31      	adds	r1, r6, #0
 8010e32:	1c20      	adds	r0, r4, #0
 8010e34:	f7ef fdf2 	bl	8000a1c <__aeabi_fdiv>
 8010e38:	9038      	str	r0, [sp, #224]	; 0xe0
 8010e3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010e3c:	49cb      	ldr	r1, [pc, #812]	; (801116c <calibrate+0x1200>)
 8010e3e:	005c      	lsls	r4, r3, #1
 8010e40:	0864      	lsrs	r4, r4, #1
 8010e42:	1c20      	adds	r0, r4, #0
 8010e44:	1c27      	adds	r7, r4, #0
 8010e46:	f7ef fafb 	bl	8000440 <__aeabi_fcmple>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d100      	bne.n	8010e50 <calibrate+0xee4>
 8010e4e:	4fc7      	ldr	r7, [pc, #796]	; (801116c <calibrate+0x1200>)
 8010e50:	2100      	movs	r1, #0
 8010e52:	1c20      	adds	r0, r4, #0
 8010e54:	f7ef fb08 	bl	8000468 <__aeabi_fcmpge>
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	d100      	bne.n	8010e5e <calibrate+0xef2>
 8010e5c:	2400      	movs	r4, #0
 8010e5e:	9b05      	ldr	r3, [sp, #20]
 8010e60:	1c39      	adds	r1, r7, #0
 8010e62:	005d      	lsls	r5, r3, #1
 8010e64:	086d      	lsrs	r5, r5, #1
 8010e66:	1c28      	adds	r0, r5, #0
 8010e68:	1c2e      	adds	r6, r5, #0
 8010e6a:	f7ef fae9 	bl	8000440 <__aeabi_fcmple>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d100      	bne.n	8010e74 <calibrate+0xf08>
 8010e72:	1c3e      	adds	r6, r7, #0
 8010e74:	1c21      	adds	r1, r4, #0
 8010e76:	1c28      	adds	r0, r5, #0
 8010e78:	1c2f      	adds	r7, r5, #0
 8010e7a:	f7ef faf5 	bl	8000468 <__aeabi_fcmpge>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	d100      	bne.n	8010e84 <calibrate+0xf18>
 8010e82:	1c27      	adds	r7, r4, #0
 8010e84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e86:	1c39      	adds	r1, r7, #0
 8010e88:	005c      	lsls	r4, r3, #1
 8010e8a:	0864      	lsrs	r4, r4, #1
 8010e8c:	1c20      	adds	r0, r4, #0
 8010e8e:	46a0      	mov	r8, r4
 8010e90:	f7ef faea 	bl	8000468 <__aeabi_fcmpge>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d100      	bne.n	8010e9a <calibrate+0xf2e>
 8010e98:	46b8      	mov	r8, r7
 8010e9a:	1c31      	adds	r1, r6, #0
 8010e9c:	1c20      	adds	r0, r4, #0
 8010e9e:	1c27      	adds	r7, r4, #0
 8010ea0:	f7ef face 	bl	8000440 <__aeabi_fcmple>
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	d100      	bne.n	8010eaa <calibrate+0xf3e>
 8010ea8:	1c37      	adds	r7, r6, #0
 8010eaa:	1c39      	adds	r1, r7, #0
 8010eac:	4640      	mov	r0, r8
 8010eae:	f7ef fdb5 	bl	8000a1c <__aeabi_fdiv>
 8010eb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010eb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010eb6:	f7ef facd 	bl	8000454 <__aeabi_fcmpgt>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d001      	beq.n	8010ec2 <calibrate+0xf56>
 8010ebe:	f7ff fbd2 	bl	8010666 <calibrate+0x6fa>
 8010ec2:	9b07      	ldr	r3, [sp, #28]
 8010ec4:	0058      	lsls	r0, r3, #1
 8010ec6:	0840      	lsrs	r0, r0, #1
 8010ec8:	f002 fe88 	bl	8013bdc <sqrtf>
 8010ecc:	1c06      	adds	r6, r0, #0
 8010ece:	1c28      	adds	r0, r5, #0
 8010ed0:	f002 fe84 	bl	8013bdc <sqrtf>
 8010ed4:	1c05      	adds	r5, r0, #0
 8010ed6:	1c20      	adds	r0, r4, #0
 8010ed8:	f002 fe80 	bl	8013bdc <sqrtf>
 8010edc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010ede:	1c04      	adds	r4, r0, #0
 8010ee0:	1c19      	adds	r1, r3, #0
 8010ee2:	1c30      	adds	r0, r6, #0
 8010ee4:	9301      	str	r3, [sp, #4]
 8010ee6:	f7ef ff61 	bl	8000dac <__aeabi_fmul>
 8010eea:	23cd      	movs	r3, #205	; 0xcd
 8010eec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010eee:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8010ef0:	00db      	lsls	r3, r3, #3
 8010ef2:	50d0      	str	r0, [r2, r3]
 8010ef4:	900d      	str	r0, [sp, #52]	; 0x34
 8010ef6:	1c39      	adds	r1, r7, #0
 8010ef8:	1c28      	adds	r0, r5, #0
 8010efa:	f7ef ff57 	bl	8000dac <__aeabi_fmul>
 8010efe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f00:	4b9b      	ldr	r3, [pc, #620]	; (8011170 <calibrate+0x1204>)
 8010f02:	900c      	str	r0, [sp, #48]	; 0x30
 8010f04:	50d0      	str	r0, [r2, r3]
 8010f06:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010f08:	1c20      	adds	r0, r4, #0
 8010f0a:	1c19      	adds	r1, r3, #0
 8010f0c:	469a      	mov	sl, r3
 8010f0e:	f7ef ff4d 	bl	8000dac <__aeabi_fmul>
 8010f12:	23ce      	movs	r3, #206	; 0xce
 8010f14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f16:	00db      	lsls	r3, r3, #3
 8010f18:	50d0      	str	r0, [r2, r3]
 8010f1a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8010f1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f1e:	1c19      	adds	r1, r3, #0
 8010f20:	1c30      	adds	r0, r6, #0
 8010f22:	4699      	mov	r9, r3
 8010f24:	f7ef ff42 	bl	8000dac <__aeabi_fmul>
 8010f28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f2a:	4b92      	ldr	r3, [pc, #584]	; (8011174 <calibrate+0x1208>)
 8010f2c:	900a      	str	r0, [sp, #40]	; 0x28
 8010f2e:	50d0      	str	r0, [r2, r3]
 8010f30:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8010f32:	1c28      	adds	r0, r5, #0
 8010f34:	1c19      	adds	r1, r3, #0
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	f7ef ff38 	bl	8000dac <__aeabi_fmul>
 8010f3c:	23cf      	movs	r3, #207	; 0xcf
 8010f3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f40:	00db      	lsls	r3, r3, #3
 8010f42:	50d0      	str	r0, [r2, r3]
 8010f44:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8010f46:	9009      	str	r0, [sp, #36]	; 0x24
 8010f48:	1c19      	adds	r1, r3, #0
 8010f4a:	1c20      	adds	r0, r4, #0
 8010f4c:	469b      	mov	fp, r3
 8010f4e:	f7ef ff2d 	bl	8000dac <__aeabi_fmul>
 8010f52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f54:	4b88      	ldr	r3, [pc, #544]	; (8011178 <calibrate+0x120c>)
 8010f56:	1c31      	adds	r1, r6, #0
 8010f58:	50d0      	str	r0, [r2, r3]
 8010f5a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8010f5c:	9008      	str	r0, [sp, #32]
 8010f5e:	1c18      	adds	r0, r3, #0
 8010f60:	4698      	mov	r8, r3
 8010f62:	f7ef ff23 	bl	8000dac <__aeabi_fmul>
 8010f66:	23d0      	movs	r3, #208	; 0xd0
 8010f68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f6a:	9e37      	ldr	r6, [sp, #220]	; 0xdc
 8010f6c:	00db      	lsls	r3, r3, #3
 8010f6e:	50d0      	str	r0, [r2, r3]
 8010f70:	1c29      	adds	r1, r5, #0
 8010f72:	9005      	str	r0, [sp, #20]
 8010f74:	1c30      	adds	r0, r6, #0
 8010f76:	f7ef ff19 	bl	8000dac <__aeabi_fmul>
 8010f7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f7c:	4b7f      	ldr	r3, [pc, #508]	; (801117c <calibrate+0x1210>)
 8010f7e:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 8010f80:	50d0      	str	r0, [r2, r3]
 8010f82:	9006      	str	r0, [sp, #24]
 8010f84:	1c21      	adds	r1, r4, #0
 8010f86:	1c28      	adds	r0, r5, #0
 8010f88:	f7ef ff10 	bl	8000dac <__aeabi_fmul>
 8010f8c:	23d1      	movs	r3, #209	; 0xd1
 8010f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f90:	00db      	lsls	r3, r3, #3
 8010f92:	9007      	str	r0, [sp, #28]
 8010f94:	1c39      	adds	r1, r7, #0
 8010f96:	50d0      	str	r0, [r2, r3]
 8010f98:	4648      	mov	r0, r9
 8010f9a:	f7ef fa41 	bl	8000420 <__aeabi_fcmpeq>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d100      	bne.n	8010fa4 <calibrate+0x1038>
 8010fa2:	e2e7      	b.n	8011574 <calibrate+0x1608>
 8010fa4:	4651      	mov	r1, sl
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	f7ef fa3a 	bl	8000420 <__aeabi_fcmpeq>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d100      	bne.n	8010fb2 <calibrate+0x1046>
 8010fb0:	e2e0      	b.n	8011574 <calibrate+0x1608>
 8010fb2:	4659      	mov	r1, fp
 8010fb4:	1c30      	adds	r0, r6, #0
 8010fb6:	f7ef fa33 	bl	8000420 <__aeabi_fcmpeq>
 8010fba:	0003      	movs	r3, r0
 8010fbc:	1e58      	subs	r0, r3, #1
 8010fbe:	4183      	sbcs	r3, r0
 8010fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fc2:	9900      	ldr	r1, [sp, #0]
 8010fc4:	1c28      	adds	r0, r5, #0
 8010fc6:	f7ef fef1 	bl	8000dac <__aeabi_fmul>
 8010fca:	4659      	mov	r1, fp
 8010fcc:	1c04      	adds	r4, r0, #0
 8010fce:	1c30      	adds	r0, r6, #0
 8010fd0:	f7ef feec 	bl	8000dac <__aeabi_fmul>
 8010fd4:	1c01      	adds	r1, r0, #0
 8010fd6:	1c20      	adds	r0, r4, #0
 8010fd8:	f7f0 f80e 	bl	8000ff8 <__aeabi_fsub>
 8010fdc:	4659      	mov	r1, fp
 8010fde:	9004      	str	r0, [sp, #16]
 8010fe0:	909c      	str	r0, [sp, #624]	; 0x270
 8010fe2:	4640      	mov	r0, r8
 8010fe4:	f7ef fee2 	bl	8000dac <__aeabi_fmul>
 8010fe8:	4649      	mov	r1, r9
 8010fea:	1c04      	adds	r4, r0, #0
 8010fec:	1c28      	adds	r0, r5, #0
 8010fee:	f7ef fedd 	bl	8000dac <__aeabi_fmul>
 8010ff2:	1c01      	adds	r1, r0, #0
 8010ff4:	1c20      	adds	r0, r4, #0
 8010ff6:	f7ef ffff 	bl	8000ff8 <__aeabi_fsub>
 8010ffa:	4649      	mov	r1, r9
 8010ffc:	9002      	str	r0, [sp, #8]
 8010ffe:	909f      	str	r0, [sp, #636]	; 0x27c
 8011000:	1c30      	adds	r0, r6, #0
 8011002:	f7ef fed3 	bl	8000dac <__aeabi_fmul>
 8011006:	9900      	ldr	r1, [sp, #0]
 8011008:	1c04      	adds	r4, r0, #0
 801100a:	4640      	mov	r0, r8
 801100c:	f7ef fece 	bl	8000dac <__aeabi_fmul>
 8011010:	1c01      	adds	r1, r0, #0
 8011012:	1c20      	adds	r0, r4, #0
 8011014:	f7ef fff0 	bl	8000ff8 <__aeabi_fsub>
 8011018:	9901      	ldr	r1, [sp, #4]
 801101a:	9003      	str	r0, [sp, #12]
 801101c:	90a2      	str	r0, [sp, #648]	; 0x288
 801101e:	9804      	ldr	r0, [sp, #16]
 8011020:	f7ef fec4 	bl	8000dac <__aeabi_fmul>
 8011024:	1c39      	adds	r1, r7, #0
 8011026:	1c04      	adds	r4, r0, #0
 8011028:	9802      	ldr	r0, [sp, #8]
 801102a:	f7ef febf 	bl	8000dac <__aeabi_fmul>
 801102e:	1c01      	adds	r1, r0, #0
 8011030:	1c20      	adds	r0, r4, #0
 8011032:	f7ef fb55 	bl	80006e0 <__aeabi_fadd>
 8011036:	4651      	mov	r1, sl
 8011038:	1c04      	adds	r4, r0, #0
 801103a:	9803      	ldr	r0, [sp, #12]
 801103c:	f7ef feb6 	bl	8000dac <__aeabi_fmul>
 8011040:	1c01      	adds	r1, r0, #0
 8011042:	1c20      	adds	r0, r4, #0
 8011044:	f7ef fb4c 	bl	80006e0 <__aeabi_fadd>
 8011048:	2100      	movs	r1, #0
 801104a:	900e      	str	r0, [sp, #56]	; 0x38
 801104c:	f7ef f9e8 	bl	8000420 <__aeabi_fcmpeq>
 8011050:	2800      	cmp	r0, #0
 8011052:	d000      	beq.n	8011056 <calibrate+0x10ea>
 8011054:	e094      	b.n	8011180 <calibrate+0x1214>
 8011056:	9901      	ldr	r1, [sp, #4]
 8011058:	1c28      	adds	r0, r5, #0
 801105a:	f7ef fea7 	bl	8000dac <__aeabi_fmul>
 801105e:	4651      	mov	r1, sl
 8011060:	1c04      	adds	r4, r0, #0
 8011062:	4640      	mov	r0, r8
 8011064:	f7ef fea2 	bl	8000dac <__aeabi_fmul>
 8011068:	1c01      	adds	r1, r0, #0
 801106a:	1c20      	adds	r0, r4, #0
 801106c:	f7ef ffc4 	bl	8000ff8 <__aeabi_fsub>
 8011070:	1c39      	adds	r1, r7, #0
 8011072:	9010      	str	r0, [sp, #64]	; 0x40
 8011074:	4640      	mov	r0, r8
 8011076:	f7ef fe99 	bl	8000dac <__aeabi_fmul>
 801107a:	9901      	ldr	r1, [sp, #4]
 801107c:	1c04      	adds	r4, r0, #0
 801107e:	1c30      	adds	r0, r6, #0
 8011080:	f7ef fe94 	bl	8000dac <__aeabi_fmul>
 8011084:	1c01      	adds	r1, r0, #0
 8011086:	1c20      	adds	r0, r4, #0
 8011088:	f7ef ffb6 	bl	8000ff8 <__aeabi_fsub>
 801108c:	9901      	ldr	r1, [sp, #4]
 801108e:	4680      	mov	r8, r0
 8011090:	9800      	ldr	r0, [sp, #0]
 8011092:	f7ef fe8b 	bl	8000dac <__aeabi_fmul>
 8011096:	1c39      	adds	r1, r7, #0
 8011098:	1c04      	adds	r4, r0, #0
 801109a:	4648      	mov	r0, r9
 801109c:	f7ef fe86 	bl	8000dac <__aeabi_fmul>
 80110a0:	1c01      	adds	r1, r0, #0
 80110a2:	1c20      	adds	r0, r4, #0
 80110a4:	f7ef ffa8 	bl	8000ff8 <__aeabi_fsub>
 80110a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110aa:	9011      	str	r0, [sp, #68]	; 0x44
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d000      	beq.n	80110b2 <calibrate+0x1146>
 80110b0:	e28f      	b.n	80115d2 <calibrate+0x1666>
 80110b2:	4651      	mov	r1, sl
 80110b4:	1c30      	adds	r0, r6, #0
 80110b6:	f7ef fe79 	bl	8000dac <__aeabi_fmul>
 80110ba:	1c39      	adds	r1, r7, #0
 80110bc:	1c04      	adds	r4, r0, #0
 80110be:	1c28      	adds	r0, r5, #0
 80110c0:	f7ef fe74 	bl	8000dac <__aeabi_fmul>
 80110c4:	1c01      	adds	r1, r0, #0
 80110c6:	1c20      	adds	r0, r4, #0
 80110c8:	f7ef ff96 	bl	8000ff8 <__aeabi_fsub>
 80110cc:	1c39      	adds	r1, r7, #0
 80110ce:	909d      	str	r0, [sp, #628]	; 0x274
 80110d0:	4658      	mov	r0, fp
 80110d2:	f7ef fe6b 	bl	8000dac <__aeabi_fmul>
 80110d6:	4651      	mov	r1, sl
 80110d8:	1c04      	adds	r4, r0, #0
 80110da:	9800      	ldr	r0, [sp, #0]
 80110dc:	f7ef fe66 	bl	8000dac <__aeabi_fmul>
 80110e0:	1c01      	adds	r1, r0, #0
 80110e2:	1c20      	adds	r0, r4, #0
 80110e4:	f7ef ff88 	bl	8000ff8 <__aeabi_fsub>
 80110e8:	4651      	mov	r1, sl
 80110ea:	909e      	str	r0, [sp, #632]	; 0x278
 80110ec:	4648      	mov	r0, r9
 80110ee:	f7ef fe5d 	bl	8000dac <__aeabi_fmul>
 80110f2:	9901      	ldr	r1, [sp, #4]
 80110f4:	1c04      	adds	r4, r0, #0
 80110f6:	4658      	mov	r0, fp
 80110f8:	f7ef fe58 	bl	8000dac <__aeabi_fmul>
 80110fc:	1c01      	adds	r1, r0, #0
 80110fe:	1c20      	adds	r0, r4, #0
 8011100:	f7ef ff7a 	bl	8000ff8 <__aeabi_fsub>
 8011104:	90a1      	str	r0, [sp, #644]	; 0x284
 8011106:	20fe      	movs	r0, #254	; 0xfe
 8011108:	990e      	ldr	r1, [sp, #56]	; 0x38
 801110a:	0580      	lsls	r0, r0, #22
 801110c:	f7ef fc86 	bl	8000a1c <__aeabi_fdiv>
 8011110:	9904      	ldr	r1, [sp, #16]
 8011112:	1c04      	adds	r4, r0, #0
 8011114:	f7ef fe4a 	bl	8000dac <__aeabi_fmul>
 8011118:	1c21      	adds	r1, r4, #0
 801111a:	909c      	str	r0, [sp, #624]	; 0x270
 801111c:	989d      	ldr	r0, [sp, #628]	; 0x274
 801111e:	f7ef fe45 	bl	8000dac <__aeabi_fmul>
 8011122:	1c21      	adds	r1, r4, #0
 8011124:	909d      	str	r0, [sp, #628]	; 0x274
 8011126:	989e      	ldr	r0, [sp, #632]	; 0x278
 8011128:	f7ef fe40 	bl	8000dac <__aeabi_fmul>
 801112c:	9902      	ldr	r1, [sp, #8]
 801112e:	909e      	str	r0, [sp, #632]	; 0x278
 8011130:	1c20      	adds	r0, r4, #0
 8011132:	f7ef fe3b 	bl	8000dac <__aeabi_fmul>
 8011136:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011138:	909f      	str	r0, [sp, #636]	; 0x27c
 801113a:	1c20      	adds	r0, r4, #0
 801113c:	f7ef fe36 	bl	8000dac <__aeabi_fmul>
 8011140:	1c21      	adds	r1, r4, #0
 8011142:	90a0      	str	r0, [sp, #640]	; 0x280
 8011144:	98a1      	ldr	r0, [sp, #644]	; 0x284
 8011146:	f7ef fe31 	bl	8000dac <__aeabi_fmul>
 801114a:	9903      	ldr	r1, [sp, #12]
 801114c:	90a1      	str	r0, [sp, #644]	; 0x284
 801114e:	1c20      	adds	r0, r4, #0
 8011150:	f7ef fe2c 	bl	8000dac <__aeabi_fmul>
 8011154:	4641      	mov	r1, r8
 8011156:	90a2      	str	r0, [sp, #648]	; 0x288
 8011158:	1c20      	adds	r0, r4, #0
 801115a:	f7ef fe27 	bl	8000dac <__aeabi_fmul>
 801115e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011160:	90a3      	str	r0, [sp, #652]	; 0x28c
 8011162:	1c20      	adds	r0, r4, #0
 8011164:	f7ef fe22 	bl	8000dac <__aeabi_fmul>
 8011168:	90a4      	str	r0, [sp, #656]	; 0x290
 801116a:	e009      	b.n	8011180 <calibrate+0x1214>
 801116c:	7f7fffff 	.word	0x7f7fffff
 8011170:	0000066c 	.word	0x0000066c
 8011174:	00000674 	.word	0x00000674
 8011178:	0000067c 	.word	0x0000067c
 801117c:	00000684 	.word	0x00000684
 8011180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011182:	999c      	ldr	r1, [sp, #624]	; 0x270
 8011184:	1c18      	adds	r0, r3, #0
 8011186:	4699      	mov	r9, r3
 8011188:	f7ef fe10 	bl	8000dac <__aeabi_fmul>
 801118c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801118e:	999f      	ldr	r1, [sp, #636]	; 0x27c
 8011190:	1c04      	adds	r4, r0, #0
 8011192:	1c38      	adds	r0, r7, #0
 8011194:	f7ef fe0a 	bl	8000dac <__aeabi_fmul>
 8011198:	1c01      	adds	r1, r0, #0
 801119a:	1c20      	adds	r0, r4, #0
 801119c:	f7ef faa0 	bl	80006e0 <__aeabi_fadd>
 80111a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80111a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80111a4:	1c04      	adds	r4, r0, #0
 80111a6:	1c28      	adds	r0, r5, #0
 80111a8:	f7ef fe00 	bl	8000dac <__aeabi_fmul>
 80111ac:	1c01      	adds	r1, r0, #0
 80111ae:	1c20      	adds	r0, r4, #0
 80111b0:	f7ef fa96 	bl	80006e0 <__aeabi_fadd>
 80111b4:	999d      	ldr	r1, [sp, #628]	; 0x274
 80111b6:	4680      	mov	r8, r0
 80111b8:	9042      	str	r0, [sp, #264]	; 0x108
 80111ba:	4648      	mov	r0, r9
 80111bc:	f7ef fdf6 	bl	8000dac <__aeabi_fmul>
 80111c0:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80111c2:	1c04      	adds	r4, r0, #0
 80111c4:	1c38      	adds	r0, r7, #0
 80111c6:	f7ef fdf1 	bl	8000dac <__aeabi_fmul>
 80111ca:	1c01      	adds	r1, r0, #0
 80111cc:	1c20      	adds	r0, r4, #0
 80111ce:	f7ef fa87 	bl	80006e0 <__aeabi_fadd>
 80111d2:	99a3      	ldr	r1, [sp, #652]	; 0x28c
 80111d4:	1c04      	adds	r4, r0, #0
 80111d6:	1c28      	adds	r0, r5, #0
 80111d8:	f7ef fde8 	bl	8000dac <__aeabi_fmul>
 80111dc:	1c01      	adds	r1, r0, #0
 80111de:	1c20      	adds	r0, r4, #0
 80111e0:	f7ef fa7e 	bl	80006e0 <__aeabi_fadd>
 80111e4:	999e      	ldr	r1, [sp, #632]	; 0x278
 80111e6:	1c06      	adds	r6, r0, #0
 80111e8:	9043      	str	r0, [sp, #268]	; 0x10c
 80111ea:	904c      	str	r0, [sp, #304]	; 0x130
 80111ec:	4648      	mov	r0, r9
 80111ee:	f7ef fddd 	bl	8000dac <__aeabi_fmul>
 80111f2:	99a1      	ldr	r1, [sp, #644]	; 0x284
 80111f4:	1c04      	adds	r4, r0, #0
 80111f6:	1c38      	adds	r0, r7, #0
 80111f8:	f7ef fdd8 	bl	8000dac <__aeabi_fmul>
 80111fc:	1c01      	adds	r1, r0, #0
 80111fe:	1c20      	adds	r0, r4, #0
 8011200:	f7ef fa6e 	bl	80006e0 <__aeabi_fadd>
 8011204:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011206:	1c04      	adds	r4, r0, #0
 8011208:	1c28      	adds	r0, r5, #0
 801120a:	f7ef fdcf 	bl	8000dac <__aeabi_fmul>
 801120e:	1c01      	adds	r1, r0, #0
 8011210:	1c20      	adds	r0, r4, #0
 8011212:	f7ef fa65 	bl	80006e0 <__aeabi_fadd>
 8011216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011218:	999d      	ldr	r1, [sp, #628]	; 0x274
 801121a:	1c07      	adds	r7, r0, #0
 801121c:	9044      	str	r0, [sp, #272]	; 0x110
 801121e:	9056      	str	r0, [sp, #344]	; 0x158
 8011220:	1c18      	adds	r0, r3, #0
 8011222:	469b      	mov	fp, r3
 8011224:	f7ef fdc2 	bl	8000dac <__aeabi_fmul>
 8011228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801122a:	1c04      	adds	r4, r0, #0
 801122c:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801122e:	1c18      	adds	r0, r3, #0
 8011230:	469a      	mov	sl, r3
 8011232:	f7ef fdbb 	bl	8000dac <__aeabi_fmul>
 8011236:	1c01      	adds	r1, r0, #0
 8011238:	1c20      	adds	r0, r4, #0
 801123a:	f7ef fa51 	bl	80006e0 <__aeabi_fadd>
 801123e:	9d08      	ldr	r5, [sp, #32]
 8011240:	99a3      	ldr	r1, [sp, #652]	; 0x28c
 8011242:	1c04      	adds	r4, r0, #0
 8011244:	1c28      	adds	r0, r5, #0
 8011246:	f7ef fdb1 	bl	8000dac <__aeabi_fmul>
 801124a:	1c01      	adds	r1, r0, #0
 801124c:	1c20      	adds	r0, r4, #0
 801124e:	f7ef fa47 	bl	80006e0 <__aeabi_fadd>
 8011252:	999e      	ldr	r1, [sp, #632]	; 0x278
 8011254:	4681      	mov	r9, r0
 8011256:	904d      	str	r0, [sp, #308]	; 0x134
 8011258:	4658      	mov	r0, fp
 801125a:	f7ef fda7 	bl	8000dac <__aeabi_fmul>
 801125e:	99a1      	ldr	r1, [sp, #644]	; 0x284
 8011260:	1c04      	adds	r4, r0, #0
 8011262:	4650      	mov	r0, sl
 8011264:	f7ef fda2 	bl	8000dac <__aeabi_fmul>
 8011268:	1c01      	adds	r1, r0, #0
 801126a:	1c20      	adds	r0, r4, #0
 801126c:	f7ef fa38 	bl	80006e0 <__aeabi_fadd>
 8011270:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011272:	1c04      	adds	r4, r0, #0
 8011274:	1c28      	adds	r0, r5, #0
 8011276:	f7ef fd99 	bl	8000dac <__aeabi_fmul>
 801127a:	1c01      	adds	r1, r0, #0
 801127c:	1c20      	adds	r0, r4, #0
 801127e:	f7ef fa2f 	bl	80006e0 <__aeabi_fadd>
 8011282:	99a1      	ldr	r1, [sp, #644]	; 0x284
 8011284:	1c04      	adds	r4, r0, #0
 8011286:	904e      	str	r0, [sp, #312]	; 0x138
 8011288:	9057      	str	r0, [sp, #348]	; 0x15c
 801128a:	9806      	ldr	r0, [sp, #24]
 801128c:	f7ef fd8e 	bl	8000dac <__aeabi_fmul>
 8011290:	999e      	ldr	r1, [sp, #632]	; 0x278
 8011292:	1c05      	adds	r5, r0, #0
 8011294:	9805      	ldr	r0, [sp, #20]
 8011296:	f7ef fd89 	bl	8000dac <__aeabi_fmul>
 801129a:	1c01      	adds	r1, r0, #0
 801129c:	1c28      	adds	r0, r5, #0
 801129e:	f7ef fa1f 	bl	80006e0 <__aeabi_fadd>
 80112a2:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80112a4:	1c05      	adds	r5, r0, #0
 80112a6:	9807      	ldr	r0, [sp, #28]
 80112a8:	f7ef fd80 	bl	8000dac <__aeabi_fmul>
 80112ac:	1c01      	adds	r1, r0, #0
 80112ae:	1c28      	adds	r0, r5, #0
 80112b0:	f7ef fa16 	bl	80006e0 <__aeabi_fadd>
 80112b4:	22cd      	movs	r2, #205	; 0xcd
 80112b6:	4641      	mov	r1, r8
 80112b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112ba:	00d2      	lsls	r2, r2, #3
 80112bc:	5099      	str	r1, [r3, r2]
 80112be:	4ad3      	ldr	r2, [pc, #844]	; (801160c <calibrate+0x16a0>)
 80112c0:	9058      	str	r0, [sp, #352]	; 0x160
 80112c2:	509e      	str	r6, [r3, r2]
 80112c4:	4692      	mov	sl, r2
 80112c6:	3204      	adds	r2, #4
 80112c8:	509f      	str	r7, [r3, r2]
 80112ca:	4ad1      	ldr	r2, [pc, #836]	; (8011610 <calibrate+0x16a4>)
 80112cc:	2100      	movs	r1, #0
 80112ce:	509e      	str	r6, [r3, r2]
 80112d0:	26cf      	movs	r6, #207	; 0xcf
 80112d2:	464a      	mov	r2, r9
 80112d4:	00f6      	lsls	r6, r6, #3
 80112d6:	519a      	str	r2, [r3, r6]
 80112d8:	4ace      	ldr	r2, [pc, #824]	; (8011614 <calibrate+0x16a8>)
 80112da:	509c      	str	r4, [r3, r2]
 80112dc:	4691      	mov	r9, r2
 80112de:	3204      	adds	r2, #4
 80112e0:	509f      	str	r7, [r3, r2]
 80112e2:	4acd      	ldr	r2, [pc, #820]	; (8011618 <calibrate+0x16ac>)
 80112e4:	509c      	str	r4, [r3, r2]
 80112e6:	001a      	movs	r2, r3
 80112e8:	23d1      	movs	r3, #209	; 0xd1
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	50d0      	str	r0, [r2, r3]
 80112ee:	4bcb      	ldr	r3, [pc, #812]	; (801161c <calibrate+0x16b0>)
 80112f0:	ac24      	add	r4, sp, #144	; 0x90
 80112f2:	58d5      	ldr	r5, [r2, r3]
 80112f4:	0020      	movs	r0, r4
 80112f6:	220c      	movs	r2, #12
 80112f8:	f001 feeb 	bl	80130d2 <memset>
 80112fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d001      	beq.n	8011306 <calibrate+0x139a>
 8011302:	f7ff f874 	bl	80103ee <calibrate+0x482>
 8011306:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011308:	4bc5      	ldr	r3, [pc, #788]	; (8011620 <calibrate+0x16b4>)
 801130a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801130c:	58d1      	ldr	r1, [r2, r3]
 801130e:	f7ef fe73 	bl	8000ff8 <__aeabi_fsub>
 8011312:	23cc      	movs	r3, #204	; 0xcc
 8011314:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011316:	00db      	lsls	r3, r3, #3
 8011318:	58d1      	ldr	r1, [r2, r3]
 801131a:	1c07      	adds	r7, r0, #0
 801131c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801131e:	f7ef fe6b 	bl	8000ff8 <__aeabi_fsub>
 8011322:	4651      	mov	r1, sl
 8011324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011326:	4680      	mov	r8, r0
 8011328:	5859      	ldr	r1, [r3, r1]
 801132a:	1c38      	adds	r0, r7, #0
 801132c:	f7ef fd3e 	bl	8000dac <__aeabi_fmul>
 8011330:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011332:	f7ef f9d5 	bl	80006e0 <__aeabi_fadd>
 8011336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011338:	4682      	mov	sl, r0
 801133a:	5999      	ldr	r1, [r3, r6]
 801133c:	4640      	mov	r0, r8
 801133e:	f7ef fd35 	bl	8000dac <__aeabi_fmul>
 8011342:	1c01      	adds	r1, r0, #0
 8011344:	4650      	mov	r0, sl
 8011346:	f7ef f9cb 	bl	80006e0 <__aeabi_fadd>
 801134a:	22ce      	movs	r2, #206	; 0xce
 801134c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801134e:	00d2      	lsls	r2, r2, #3
 8011350:	5899      	ldr	r1, [r3, r2]
 8011352:	4682      	mov	sl, r0
 8011354:	1c38      	adds	r0, r7, #0
 8011356:	f7ef fd29 	bl	8000dac <__aeabi_fmul>
 801135a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801135c:	f7ef f9c0 	bl	80006e0 <__aeabi_fadd>
 8011360:	464a      	mov	r2, r9
 8011362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011364:	1c06      	adds	r6, r0, #0
 8011366:	5899      	ldr	r1, [r3, r2]
 8011368:	4640      	mov	r0, r8
 801136a:	f7ef fd1f 	bl	8000dac <__aeabi_fmul>
 801136e:	1c01      	adds	r1, r0, #0
 8011370:	1c30      	adds	r0, r6, #0
 8011372:	f7ef f9b5 	bl	80006e0 <__aeabi_fadd>
 8011376:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011378:	4baa      	ldr	r3, [pc, #680]	; (8011624 <calibrate+0x16b8>)
 801137a:	4681      	mov	r9, r0
 801137c:	58d1      	ldr	r1, [r2, r3]
 801137e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011380:	f7ef fe3a 	bl	8000ff8 <__aeabi_fsub>
 8011384:	22cd      	movs	r2, #205	; 0xcd
 8011386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011388:	00d2      	lsls	r2, r2, #3
 801138a:	5899      	ldr	r1, [r3, r2]
 801138c:	1c06      	adds	r6, r0, #0
 801138e:	1c38      	adds	r0, r7, #0
 8011390:	f7ef fd0c 	bl	8000dac <__aeabi_fmul>
 8011394:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011396:	f7ef f9a3 	bl	80006e0 <__aeabi_fadd>
 801139a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801139c:	4a9c      	ldr	r2, [pc, #624]	; (8011610 <calibrate+0x16a4>)
 801139e:	1c07      	adds	r7, r0, #0
 80113a0:	5899      	ldr	r1, [r3, r2]
 80113a2:	4640      	mov	r0, r8
 80113a4:	f7ef fd02 	bl	8000dac <__aeabi_fmul>
 80113a8:	1c01      	adds	r1, r0, #0
 80113aa:	1c38      	adds	r0, r7, #0
 80113ac:	f7ef f998 	bl	80006e0 <__aeabi_fadd>
 80113b0:	22d0      	movs	r2, #208	; 0xd0
 80113b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113b4:	00d2      	lsls	r2, r2, #3
 80113b6:	5899      	ldr	r1, [r3, r2]
 80113b8:	1c07      	adds	r7, r0, #0
 80113ba:	1c30      	adds	r0, r6, #0
 80113bc:	f7ef fcf6 	bl	8000dac <__aeabi_fmul>
 80113c0:	1c01      	adds	r1, r0, #0
 80113c2:	1c38      	adds	r0, r7, #0
 80113c4:	f7ef f98c 	bl	80006e0 <__aeabi_fadd>
 80113c8:	4b93      	ldr	r3, [pc, #588]	; (8011618 <calibrate+0x16ac>)
 80113ca:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80113cc:	9024      	str	r0, [sp, #144]	; 0x90
 80113ce:	58f9      	ldr	r1, [r7, r3]
 80113d0:	1c30      	adds	r0, r6, #0
 80113d2:	f7ef fceb 	bl	8000dac <__aeabi_fmul>
 80113d6:	4651      	mov	r1, sl
 80113d8:	f7ef f982 	bl	80006e0 <__aeabi_fadd>
 80113dc:	23d1      	movs	r3, #209	; 0xd1
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	58f9      	ldr	r1, [r7, r3]
 80113e2:	6060      	str	r0, [r4, #4]
 80113e4:	1c30      	adds	r0, r6, #0
 80113e6:	f7ef fce1 	bl	8000dac <__aeabi_fmul>
 80113ea:	4649      	mov	r1, r9
 80113ec:	f7ef f978 	bl	80006e0 <__aeabi_fadd>
 80113f0:	60a0      	str	r0, [r4, #8]
 80113f2:	1c06      	adds	r6, r0, #0
 80113f4:	f7ff f810 	bl	8010418 <calibrate+0x4ac>
 80113f8:	9900      	ldr	r1, [sp, #0]
 80113fa:	9802      	ldr	r0, [sp, #8]
 80113fc:	f7ef fdfc 	bl	8000ff8 <__aeabi_fsub>
 8011400:	9903      	ldr	r1, [sp, #12]
 8011402:	f7ef fdf9 	bl	8000ff8 <__aeabi_fsub>
 8011406:	4988      	ldr	r1, [pc, #544]	; (8011628 <calibrate+0x16bc>)
 8011408:	f7ef fcd0 	bl	8000dac <__aeabi_fmul>
 801140c:	1c06      	adds	r6, r0, #0
 801140e:	1c01      	adds	r1, r0, #0
 8011410:	9805      	ldr	r0, [sp, #20]
 8011412:	f7ef fdf1 	bl	8000ff8 <__aeabi_fsub>
 8011416:	1c31      	adds	r1, r6, #0
 8011418:	9007      	str	r0, [sp, #28]
 801141a:	9802      	ldr	r0, [sp, #8]
 801141c:	960c      	str	r6, [sp, #48]	; 0x30
 801141e:	f7ef fdeb 	bl	8000ff8 <__aeabi_fsub>
 8011422:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011424:	1c06      	adds	r6, r0, #0
 8011426:	9806      	ldr	r0, [sp, #24]
 8011428:	f7ef fde6 	bl	8000ff8 <__aeabi_fsub>
 801142c:	9907      	ldr	r1, [sp, #28]
 801142e:	900b      	str	r0, [sp, #44]	; 0x2c
 8011430:	1c08      	adds	r0, r1, #0
 8011432:	f7ef fcbb 	bl	8000dac <__aeabi_fmul>
 8011436:	1c31      	adds	r1, r6, #0
 8011438:	900d      	str	r0, [sp, #52]	; 0x34
 801143a:	1c30      	adds	r0, r6, #0
 801143c:	f7ef fcb6 	bl	8000dac <__aeabi_fmul>
 8011440:	1c01      	adds	r1, r0, #0
 8011442:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011444:	f7ef f94c 	bl	80006e0 <__aeabi_fadd>
 8011448:	1c29      	adds	r1, r5, #0
 801144a:	900d      	str	r0, [sp, #52]	; 0x34
 801144c:	1c28      	adds	r0, r5, #0
 801144e:	f7ef f947 	bl	80006e0 <__aeabi_fadd>
 8011452:	1c01      	adds	r1, r0, #0
 8011454:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011456:	f7ef f943 	bl	80006e0 <__aeabi_fadd>
 801145a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801145c:	1c05      	adds	r5, r0, #0
 801145e:	1c19      	adds	r1, r3, #0
 8011460:	1c18      	adds	r0, r3, #0
 8011462:	f7ef fca3 	bl	8000dac <__aeabi_fmul>
 8011466:	1c01      	adds	r1, r0, #0
 8011468:	1c28      	adds	r0, r5, #0
 801146a:	f7ef f939 	bl	80006e0 <__aeabi_fadd>
 801146e:	496f      	ldr	r1, [pc, #444]	; (801162c <calibrate+0x16c0>)
 8011470:	f7ef fc9c 	bl	8000dac <__aeabi_fmul>
 8011474:	f002 fbb2 	bl	8013bdc <sqrtf>
 8011478:	1c01      	adds	r1, r0, #0
 801147a:	900e      	str	r0, [sp, #56]	; 0x38
 801147c:	20fe      	movs	r0, #254	; 0xfe
 801147e:	0580      	lsls	r0, r0, #22
 8011480:	f7ef facc 	bl	8000a1c <__aeabi_fdiv>
 8011484:	1c05      	adds	r5, r0, #0
 8011486:	1c01      	adds	r1, r0, #0
 8011488:	4640      	mov	r0, r8
 801148a:	f7ef fc8f 	bl	8000dac <__aeabi_fmul>
 801148e:	1c29      	adds	r1, r5, #0
 8011490:	4680      	mov	r8, r0
 8011492:	1c30      	adds	r0, r6, #0
 8011494:	f7ef fc8a 	bl	8000dac <__aeabi_fmul>
 8011498:	1c29      	adds	r1, r5, #0
 801149a:	900d      	str	r0, [sp, #52]	; 0x34
 801149c:	4658      	mov	r0, fp
 801149e:	f7ef fc85 	bl	8000dac <__aeabi_fmul>
 80114a2:	1c29      	adds	r1, r5, #0
 80114a4:	1c06      	adds	r6, r0, #0
 80114a6:	1c38      	adds	r0, r7, #0
 80114a8:	f7ef fc80 	bl	8000dac <__aeabi_fmul>
 80114ac:	1c29      	adds	r1, r5, #0
 80114ae:	4683      	mov	fp, r0
 80114b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80114b2:	f7ef fc7b 	bl	8000dac <__aeabi_fmul>
 80114b6:	4643      	mov	r3, r8
 80114b8:	1c07      	adds	r7, r0, #0
 80114ba:	1c01      	adds	r1, r0, #0
 80114bc:	4640      	mov	r0, r8
 80114be:	930b      	str	r3, [sp, #44]	; 0x2c
 80114c0:	f7ef fc74 	bl	8000dac <__aeabi_fmul>
 80114c4:	4659      	mov	r1, fp
 80114c6:	4680      	mov	r8, r0
 80114c8:	1c30      	adds	r0, r6, #0
 80114ca:	f7ef fc6f 	bl	8000dac <__aeabi_fmul>
 80114ce:	1c01      	adds	r1, r0, #0
 80114d0:	4640      	mov	r0, r8
 80114d2:	f7ef fd91 	bl	8000ff8 <__aeabi_fsub>
 80114d6:	1c21      	adds	r1, r4, #0
 80114d8:	f7ef fc68 	bl	8000dac <__aeabi_fmul>
 80114dc:	1c39      	adds	r1, r7, #0
 80114de:	4680      	mov	r8, r0
 80114e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80114e2:	f7ef fc63 	bl	8000dac <__aeabi_fmul>
 80114e6:	1c31      	adds	r1, r6, #0
 80114e8:	1c07      	adds	r7, r0, #0
 80114ea:	1c30      	adds	r0, r6, #0
 80114ec:	f7ef fc5e 	bl	8000dac <__aeabi_fmul>
 80114f0:	1c01      	adds	r1, r0, #0
 80114f2:	1c38      	adds	r0, r7, #0
 80114f4:	f7ef fd80 	bl	8000ff8 <__aeabi_fsub>
 80114f8:	9907      	ldr	r1, [sp, #28]
 80114fa:	f7ef fc57 	bl	8000dac <__aeabi_fmul>
 80114fe:	1c01      	adds	r1, r0, #0
 8011500:	4640      	mov	r0, r8
 8011502:	f7ef f8ed 	bl	80006e0 <__aeabi_fadd>
 8011506:	4659      	mov	r1, fp
 8011508:	1c07      	adds	r7, r0, #0
 801150a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801150c:	f7ef fc4e 	bl	8000dac <__aeabi_fmul>
 8011510:	1c31      	adds	r1, r6, #0
 8011512:	4680      	mov	r8, r0
 8011514:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011516:	f7ef fc49 	bl	8000dac <__aeabi_fmul>
 801151a:	1c01      	adds	r1, r0, #0
 801151c:	4640      	mov	r0, r8
 801151e:	f7ef fd6b 	bl	8000ff8 <__aeabi_fsub>
 8011522:	4651      	mov	r1, sl
 8011524:	f7ef fc42 	bl	8000dac <__aeabi_fmul>
 8011528:	1c01      	adds	r1, r0, #0
 801152a:	1c38      	adds	r0, r7, #0
 801152c:	f7ef f8d8 	bl	80006e0 <__aeabi_fadd>
 8011530:	1c29      	adds	r1, r5, #0
 8011532:	f7ef fc3b 	bl	8000dac <__aeabi_fmul>
 8011536:	21c0      	movs	r1, #192	; 0xc0
 8011538:	0609      	lsls	r1, r1, #24
 801153a:	1c05      	adds	r5, r0, #0
 801153c:	f7ee ff80 	bl	8000440 <__aeabi_fcmple>
 8011540:	2800      	cmp	r0, #0
 8011542:	d11a      	bne.n	801157a <calibrate+0x160e>
 8011544:	2180      	movs	r1, #128	; 0x80
 8011546:	1c28      	adds	r0, r5, #0
 8011548:	05c9      	lsls	r1, r1, #23
 801154a:	f7ee ff8d 	bl	8000468 <__aeabi_fcmpge>
 801154e:	2800      	cmp	r0, #0
 8011550:	d046      	beq.n	80115e0 <calibrate+0x1674>
 8011552:	25fe      	movs	r5, #254	; 0xfe
 8011554:	4e36      	ldr	r6, [pc, #216]	; (8011630 <calibrate+0x16c4>)
 8011556:	05ad      	lsls	r5, r5, #22
 8011558:	e011      	b.n	801157e <calibrate+0x1612>
 801155a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801155c:	2224      	movs	r2, #36	; 0x24
 801155e:	6858      	ldr	r0, [r3, #4]
 8011560:	23cd      	movs	r3, #205	; 0xcd
 8011562:	00db      	lsls	r3, r3, #3
 8011564:	469c      	mov	ip, r3
 8011566:	a939      	add	r1, sp, #228	; 0xe4
 8011568:	4460      	add	r0, ip
 801156a:	f001 fda9 	bl	80130c0 <memcpy>
 801156e:	2000      	movs	r0, #0
 8011570:	f7fe ff78 	bl	8010464 <calibrate+0x4f8>
 8011574:	2300      	movs	r3, #0
 8011576:	930f      	str	r3, [sp, #60]	; 0x3c
 8011578:	e523      	b.n	8010fc2 <calibrate+0x1056>
 801157a:	4e2e      	ldr	r6, [pc, #184]	; (8011634 <calibrate+0x16c8>)
 801157c:	4d2e      	ldr	r5, [pc, #184]	; (8011638 <calibrate+0x16cc>)
 801157e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011580:	1c08      	adds	r0, r1, #0
 8011582:	f7ef f8ad 	bl	80006e0 <__aeabi_fadd>
 8011586:	1c01      	adds	r1, r0, #0
 8011588:	1c07      	adds	r7, r0, #0
 801158a:	1c28      	adds	r0, r5, #0
 801158c:	f7ef fc0e 	bl	8000dac <__aeabi_fmul>
 8011590:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011592:	1c29      	adds	r1, r5, #0
 8011594:	f7ef f8a4 	bl	80006e0 <__aeabi_fadd>
 8011598:	1c39      	adds	r1, r7, #0
 801159a:	4680      	mov	r8, r0
 801159c:	900b      	str	r0, [sp, #44]	; 0x2c
 801159e:	901f      	str	r0, [sp, #124]	; 0x7c
 80115a0:	1c30      	adds	r0, r6, #0
 80115a2:	f7ef fc03 	bl	8000dac <__aeabi_fmul>
 80115a6:	1c29      	adds	r1, r5, #0
 80115a8:	f7ef f89a 	bl	80006e0 <__aeabi_fadd>
 80115ac:	4923      	ldr	r1, [pc, #140]	; (801163c <calibrate+0x16d0>)
 80115ae:	4683      	mov	fp, r0
 80115b0:	9020      	str	r0, [sp, #128]	; 0x80
 80115b2:	1c28      	adds	r0, r5, #0
 80115b4:	f7ef fbfa 	bl	8000dac <__aeabi_fmul>
 80115b8:	4659      	mov	r1, fp
 80115ba:	1c05      	adds	r5, r0, #0
 80115bc:	4640      	mov	r0, r8
 80115be:	f7ef f88f 	bl	80006e0 <__aeabi_fadd>
 80115c2:	1c01      	adds	r1, r0, #0
 80115c4:	1c28      	adds	r0, r5, #0
 80115c6:	f7ef fd17 	bl	8000ff8 <__aeabi_fsub>
 80115ca:	9007      	str	r0, [sp, #28]
 80115cc:	901e      	str	r0, [sp, #120]	; 0x78
 80115ce:	f7ff fa83 	bl	8010ad8 <calibrate+0xb6c>
 80115d2:	9b02      	ldr	r3, [sp, #8]
 80115d4:	939d      	str	r3, [sp, #628]	; 0x274
 80115d6:	9b03      	ldr	r3, [sp, #12]
 80115d8:	939e      	str	r3, [sp, #632]	; 0x278
 80115da:	4643      	mov	r3, r8
 80115dc:	93a1      	str	r3, [sp, #644]	; 0x284
 80115de:	e592      	b.n	8011106 <calibrate+0x119a>
 80115e0:	21fc      	movs	r1, #252	; 0xfc
 80115e2:	1c28      	adds	r0, r5, #0
 80115e4:	0589      	lsls	r1, r1, #22
 80115e6:	f7ef fbe1 	bl	8000dac <__aeabi_fmul>
 80115ea:	f002 fab3 	bl	8013b54 <acosf>
 80115ee:	490e      	ldr	r1, [pc, #56]	; (8011628 <calibrate+0x16bc>)
 80115f0:	f7ef fbdc 	bl	8000dac <__aeabi_fmul>
 80115f4:	1c06      	adds	r6, r0, #0
 80115f6:	f002 fa27 	bl	8013a48 <cosf>
 80115fa:	4911      	ldr	r1, [pc, #68]	; (8011640 <calibrate+0x16d4>)
 80115fc:	1c05      	adds	r5, r0, #0
 80115fe:	1c30      	adds	r0, r6, #0
 8011600:	f7ef f86e 	bl	80006e0 <__aeabi_fadd>
 8011604:	f002 fa20 	bl	8013a48 <cosf>
 8011608:	1c06      	adds	r6, r0, #0
 801160a:	e7b8      	b.n	801157e <calibrate+0x1612>
 801160c:	0000066c 	.word	0x0000066c
 8011610:	00000674 	.word	0x00000674
 8011614:	0000067c 	.word	0x0000067c
 8011618:	00000684 	.word	0x00000684
 801161c:	0000068c 	.word	0x0000068c
 8011620:	0000065c 	.word	0x0000065c
 8011624:	00000664 	.word	0x00000664
 8011628:	3eaaaaab 	.word	0x3eaaaaab
 801162c:	3e2aaaab 	.word	0x3e2aaaab
 8011630:	bf000001 	.word	0xbf000001
 8011634:	bf800000 	.word	0xbf800000
 8011638:	3effffff 	.word	0x3effffff
 801163c:	40400000 	.word	0x40400000
 8011640:	40060a92 	.word	0x40060a92

08011644 <update_gyro>:
 8011644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011646:	46de      	mov	lr, fp
 8011648:	464e      	mov	r6, r9
 801164a:	4645      	mov	r5, r8
 801164c:	4657      	mov	r7, sl
 801164e:	680b      	ldr	r3, [r1, #0]
 8011650:	b5e0      	push	{r5, r6, r7, lr}
 8011652:	469b      	mov	fp, r3
 8011654:	684b      	ldr	r3, [r1, #4]
 8011656:	b089      	sub	sp, #36	; 0x24
 8011658:	688f      	ldr	r7, [r1, #8]
 801165a:	0004      	movs	r4, r0
 801165c:	000d      	movs	r5, r1
 801165e:	4658      	mov	r0, fp
 8011660:	4659      	mov	r1, fp
 8011662:	4698      	mov	r8, r3
 8011664:	4691      	mov	r9, r2
 8011666:	f7ef fba1 	bl	8000dac <__aeabi_fmul>
 801166a:	4641      	mov	r1, r8
 801166c:	1c06      	adds	r6, r0, #0
 801166e:	4640      	mov	r0, r8
 8011670:	f7ef fb9c 	bl	8000dac <__aeabi_fmul>
 8011674:	1c01      	adds	r1, r0, #0
 8011676:	1c30      	adds	r0, r6, #0
 8011678:	f7ef f832 	bl	80006e0 <__aeabi_fadd>
 801167c:	1c39      	adds	r1, r7, #0
 801167e:	1c06      	adds	r6, r0, #0
 8011680:	1c38      	adds	r0, r7, #0
 8011682:	f7ef fb93 	bl	8000dac <__aeabi_fmul>
 8011686:	1c01      	adds	r1, r0, #0
 8011688:	1c30      	adds	r0, r6, #0
 801168a:	f7ef f829 	bl	80006e0 <__aeabi_fadd>
 801168e:	f002 faa5 	bl	8013bdc <sqrtf>
 8011692:	4fe1      	ldr	r7, [pc, #900]	; (8011a18 <update_gyro+0x3d4>)
 8011694:	1c06      	adds	r6, r0, #0
 8011696:	6939      	ldr	r1, [r7, #16]
 8011698:	4648      	mov	r0, r9
 801169a:	f7ef fb87 	bl	8000dac <__aeabi_fmul>
 801169e:	49df      	ldr	r1, [pc, #892]	; (8011a1c <update_gyro+0x3d8>)
 80116a0:	4680      	mov	r8, r0
 80116a2:	f7ee fed7 	bl	8000454 <__aeabi_fcmpgt>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	d000      	beq.n	80116ac <update_gyro+0x68>
 80116aa:	e0c8      	b.n	801183e <update_gyro+0x1fa>
 80116ac:	4640      	mov	r0, r8
 80116ae:	49dc      	ldr	r1, [pc, #880]	; (8011a20 <update_gyro+0x3dc>)
 80116b0:	f7ef fb7c 	bl	8000dac <__aeabi_fmul>
 80116b4:	1c01      	adds	r1, r0, #0
 80116b6:	4680      	mov	r8, r0
 80116b8:	20fe      	movs	r0, #254	; 0xfe
 80116ba:	0580      	lsls	r0, r0, #22
 80116bc:	f7ef fc9c 	bl	8000ff8 <__aeabi_fsub>
 80116c0:	4682      	mov	sl, r0
 80116c2:	2385      	movs	r3, #133	; 0x85
 80116c4:	5ce3      	ldrb	r3, [r4, r3]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d005      	beq.n	80116d6 <update_gyro+0x92>
 80116ca:	465b      	mov	r3, fp
 80116cc:	6163      	str	r3, [r4, #20]
 80116ce:	686b      	ldr	r3, [r5, #4]
 80116d0:	61a3      	str	r3, [r4, #24]
 80116d2:	68ab      	ldr	r3, [r5, #8]
 80116d4:	61e3      	str	r3, [r4, #28]
 80116d6:	6963      	ldr	r3, [r4, #20]
 80116d8:	6828      	ldr	r0, [r5, #0]
 80116da:	1c19      	adds	r1, r3, #0
 80116dc:	469b      	mov	fp, r3
 80116de:	f7ef fc8b 	bl	8000ff8 <__aeabi_fsub>
 80116e2:	1c01      	adds	r1, r0, #0
 80116e4:	9001      	str	r0, [sp, #4]
 80116e6:	4640      	mov	r0, r8
 80116e8:	f7ef fb60 	bl	8000dac <__aeabi_fmul>
 80116ec:	4659      	mov	r1, fp
 80116ee:	4683      	mov	fp, r0
 80116f0:	f7ee fff6 	bl	80006e0 <__aeabi_fadd>
 80116f4:	9901      	ldr	r1, [sp, #4]
 80116f6:	6160      	str	r0, [r4, #20]
 80116f8:	4658      	mov	r0, fp
 80116fa:	f7ef fb57 	bl	8000dac <__aeabi_fmul>
 80116fe:	6a21      	ldr	r1, [r4, #32]
 8011700:	f7ee ffee 	bl	80006e0 <__aeabi_fadd>
 8011704:	4651      	mov	r1, sl
 8011706:	f7ef fb51 	bl	8000dac <__aeabi_fmul>
 801170a:	69a3      	ldr	r3, [r4, #24]
 801170c:	6220      	str	r0, [r4, #32]
 801170e:	1c19      	adds	r1, r3, #0
 8011710:	9002      	str	r0, [sp, #8]
 8011712:	6868      	ldr	r0, [r5, #4]
 8011714:	469b      	mov	fp, r3
 8011716:	f7ef fc6f 	bl	8000ff8 <__aeabi_fsub>
 801171a:	1c01      	adds	r1, r0, #0
 801171c:	9001      	str	r0, [sp, #4]
 801171e:	4640      	mov	r0, r8
 8011720:	f7ef fb44 	bl	8000dac <__aeabi_fmul>
 8011724:	4659      	mov	r1, fp
 8011726:	4683      	mov	fp, r0
 8011728:	f7ee ffda 	bl	80006e0 <__aeabi_fadd>
 801172c:	9901      	ldr	r1, [sp, #4]
 801172e:	61a0      	str	r0, [r4, #24]
 8011730:	4658      	mov	r0, fp
 8011732:	f7ef fb3b 	bl	8000dac <__aeabi_fmul>
 8011736:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011738:	f7ee ffd2 	bl	80006e0 <__aeabi_fadd>
 801173c:	4651      	mov	r1, sl
 801173e:	f7ef fb35 	bl	8000dac <__aeabi_fmul>
 8011742:	69e3      	ldr	r3, [r4, #28]
 8011744:	6260      	str	r0, [r4, #36]	; 0x24
 8011746:	1c19      	adds	r1, r3, #0
 8011748:	9003      	str	r0, [sp, #12]
 801174a:	68a8      	ldr	r0, [r5, #8]
 801174c:	469b      	mov	fp, r3
 801174e:	f7ef fc53 	bl	8000ff8 <__aeabi_fsub>
 8011752:	1c01      	adds	r1, r0, #0
 8011754:	9001      	str	r0, [sp, #4]
 8011756:	4640      	mov	r0, r8
 8011758:	f7ef fb28 	bl	8000dac <__aeabi_fmul>
 801175c:	1c01      	adds	r1, r0, #0
 801175e:	4680      	mov	r8, r0
 8011760:	4658      	mov	r0, fp
 8011762:	f7ee ffbd 	bl	80006e0 <__aeabi_fadd>
 8011766:	4641      	mov	r1, r8
 8011768:	61e0      	str	r0, [r4, #28]
 801176a:	9801      	ldr	r0, [sp, #4]
 801176c:	f7ef fb1e 	bl	8000dac <__aeabi_fmul>
 8011770:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011772:	f7ee ffb5 	bl	80006e0 <__aeabi_fadd>
 8011776:	4651      	mov	r1, sl
 8011778:	f7ef fb18 	bl	8000dac <__aeabi_fmul>
 801177c:	68e3      	ldr	r3, [r4, #12]
 801177e:	62a0      	str	r0, [r4, #40]	; 0x28
 8011780:	0058      	lsls	r0, r3, #1
 8011782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011784:	0840      	lsrs	r0, r0, #1
 8011786:	f7ee fe51 	bl	800042c <__aeabi_fcmplt>
 801178a:	2800      	cmp	r0, #0
 801178c:	d006      	beq.n	801179c <update_gyro+0x158>
 801178e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011790:	6920      	ldr	r0, [r4, #16]
 8011792:	f7ee fe4b 	bl	800042c <__aeabi_fcmplt>
 8011796:	2800      	cmp	r0, #0
 8011798:	d000      	beq.n	801179c <update_gyro+0x158>
 801179a:	e08c      	b.n	80118b6 <update_gyro+0x272>
 801179c:	2387      	movs	r3, #135	; 0x87
 801179e:	2200      	movs	r2, #0
 80117a0:	2000      	movs	r0, #0
 80117a2:	54e2      	strb	r2, [r4, r3]
 80117a4:	3301      	adds	r3, #1
 80117a6:	50e0      	str	r0, [r4, r3]
 80117a8:	2320      	movs	r3, #32
 80117aa:	5cfb      	ldrb	r3, [r7, r3]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d050      	beq.n	8011852 <update_gyro+0x20e>
 80117b0:	2100      	movs	r1, #0
 80117b2:	1c30      	adds	r0, r6, #0
 80117b4:	f7ee fe34 	bl	8000420 <__aeabi_fcmpeq>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	d146      	bne.n	801184a <update_gyro+0x206>
 80117bc:	20fe      	movs	r0, #254	; 0xfe
 80117be:	1c31      	adds	r1, r6, #0
 80117c0:	0580      	lsls	r0, r0, #22
 80117c2:	f7ef f92b 	bl	8000a1c <__aeabi_fdiv>
 80117c6:	6829      	ldr	r1, [r5, #0]
 80117c8:	4682      	mov	sl, r0
 80117ca:	f7ef faef 	bl	8000dac <__aeabi_fmul>
 80117ce:	6869      	ldr	r1, [r5, #4]
 80117d0:	4680      	mov	r8, r0
 80117d2:	4650      	mov	r0, sl
 80117d4:	f7ef faea 	bl	8000dac <__aeabi_fmul>
 80117d8:	68a9      	ldr	r1, [r5, #8]
 80117da:	1c07      	adds	r7, r0, #0
 80117dc:	4650      	mov	r0, sl
 80117de:	f7ef fae5 	bl	8000dac <__aeabi_fmul>
 80117e2:	4682      	mov	sl, r0
 80117e4:	4648      	mov	r0, r9
 80117e6:	498f      	ldr	r1, [pc, #572]	; (8011a24 <update_gyro+0x3e0>)
 80117e8:	f7ef fae0 	bl	8000dac <__aeabi_fmul>
 80117ec:	1c31      	adds	r1, r6, #0
 80117ee:	f7ef fadd 	bl	8000dac <__aeabi_fmul>
 80117f2:	1c05      	adds	r5, r0, #0
 80117f4:	f002 f928 	bl	8013a48 <cosf>
 80117f8:	1c06      	adds	r6, r0, #0
 80117fa:	1c28      	adds	r0, r5, #0
 80117fc:	f002 f958 	bl	8013ab0 <sinf>
 8011800:	1c05      	adds	r5, r0, #0
 8011802:	1c01      	adds	r1, r0, #0
 8011804:	4640      	mov	r0, r8
 8011806:	f7ef fad1 	bl	8000dac <__aeabi_fmul>
 801180a:	1c29      	adds	r1, r5, #0
 801180c:	9004      	str	r0, [sp, #16]
 801180e:	1c38      	adds	r0, r7, #0
 8011810:	f7ef facc 	bl	8000dac <__aeabi_fmul>
 8011814:	1c29      	adds	r1, r5, #0
 8011816:	9005      	str	r0, [sp, #20]
 8011818:	4650      	mov	r0, sl
 801181a:	f7ef fac7 	bl	8000dac <__aeabi_fmul>
 801181e:	0021      	movs	r1, r4
 8011820:	9006      	str	r0, [sp, #24]
 8011822:	0020      	movs	r0, r4
 8011824:	315c      	adds	r1, #92	; 0x5c
 8011826:	304c      	adds	r0, #76	; 0x4c
 8011828:	aa04      	add	r2, sp, #16
 801182a:	9607      	str	r6, [sp, #28]
 801182c:	f7fe f934 	bl	800fa98 <quat_mult>
 8011830:	b009      	add	sp, #36	; 0x24
 8011832:	bcf0      	pop	{r4, r5, r6, r7}
 8011834:	46bb      	mov	fp, r7
 8011836:	46b2      	mov	sl, r6
 8011838:	46a9      	mov	r9, r5
 801183a:	46a0      	mov	r8, r4
 801183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801183e:	2300      	movs	r3, #0
 8011840:	469a      	mov	sl, r3
 8011842:	23fe      	movs	r3, #254	; 0xfe
 8011844:	059b      	lsls	r3, r3, #22
 8011846:	4698      	mov	r8, r3
 8011848:	e73b      	b.n	80116c2 <update_gyro+0x7e>
 801184a:	46b2      	mov	sl, r6
 801184c:	46b0      	mov	r8, r6
 801184e:	1c37      	adds	r7, r6, #0
 8011850:	e7c8      	b.n	80117e4 <update_gyro+0x1a0>
 8011852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011854:	f7ee fe08 	bl	8000468 <__aeabi_fcmpge>
 8011858:	2800      	cmp	r0, #0
 801185a:	d000      	beq.n	801185e <update_gyro+0x21a>
 801185c:	e098      	b.n	8011990 <update_gyro+0x34c>
 801185e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011860:	6828      	ldr	r0, [r5, #0]
 8011862:	f7ef fbc9 	bl	8000ff8 <__aeabi_fsub>
 8011866:	6028      	str	r0, [r5, #0]
 8011868:	4680      	mov	r8, r0
 801186a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801186c:	6868      	ldr	r0, [r5, #4]
 801186e:	f7ef fbc3 	bl	8000ff8 <__aeabi_fsub>
 8011872:	6068      	str	r0, [r5, #4]
 8011874:	1c07      	adds	r7, r0, #0
 8011876:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011878:	68a8      	ldr	r0, [r5, #8]
 801187a:	f7ef fbbd 	bl	8000ff8 <__aeabi_fsub>
 801187e:	4641      	mov	r1, r8
 8011880:	1c06      	adds	r6, r0, #0
 8011882:	60a8      	str	r0, [r5, #8]
 8011884:	4640      	mov	r0, r8
 8011886:	f7ef fa91 	bl	8000dac <__aeabi_fmul>
 801188a:	1c39      	adds	r1, r7, #0
 801188c:	4680      	mov	r8, r0
 801188e:	1c38      	adds	r0, r7, #0
 8011890:	f7ef fa8c 	bl	8000dac <__aeabi_fmul>
 8011894:	1c01      	adds	r1, r0, #0
 8011896:	4640      	mov	r0, r8
 8011898:	f7ee ff22 	bl	80006e0 <__aeabi_fadd>
 801189c:	1c31      	adds	r1, r6, #0
 801189e:	1c07      	adds	r7, r0, #0
 80118a0:	1c30      	adds	r0, r6, #0
 80118a2:	f7ef fa83 	bl	8000dac <__aeabi_fmul>
 80118a6:	1c01      	adds	r1, r0, #0
 80118a8:	1c38      	adds	r0, r7, #0
 80118aa:	f7ee ff19 	bl	80006e0 <__aeabi_fadd>
 80118ae:	f002 f995 	bl	8013bdc <sqrtf>
 80118b2:	1c06      	adds	r6, r0, #0
 80118b4:	e77c      	b.n	80117b0 <update_gyro+0x16c>
 80118b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b8:	4698      	mov	r8, r3
 80118ba:	682b      	ldr	r3, [r5, #0]
 80118bc:	4641      	mov	r1, r8
 80118be:	0058      	lsls	r0, r3, #1
 80118c0:	0840      	lsrs	r0, r0, #1
 80118c2:	f7ee fdb3 	bl	800042c <__aeabi_fcmplt>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d100      	bne.n	80118cc <update_gyro+0x288>
 80118ca:	e767      	b.n	801179c <update_gyro+0x158>
 80118cc:	686b      	ldr	r3, [r5, #4]
 80118ce:	4640      	mov	r0, r8
 80118d0:	0059      	lsls	r1, r3, #1
 80118d2:	0849      	lsrs	r1, r1, #1
 80118d4:	f7ee fdbe 	bl	8000454 <__aeabi_fcmpgt>
 80118d8:	2800      	cmp	r0, #0
 80118da:	d100      	bne.n	80118de <update_gyro+0x29a>
 80118dc:	e75e      	b.n	801179c <update_gyro+0x158>
 80118de:	68ab      	ldr	r3, [r5, #8]
 80118e0:	4640      	mov	r0, r8
 80118e2:	0059      	lsls	r1, r3, #1
 80118e4:	0849      	lsrs	r1, r1, #1
 80118e6:	f7ee fdb5 	bl	8000454 <__aeabi_fcmpgt>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d100      	bne.n	80118f0 <update_gyro+0x2ac>
 80118ee:	e755      	b.n	801179c <update_gyro+0x158>
 80118f0:	6963      	ldr	r3, [r4, #20]
 80118f2:	4640      	mov	r0, r8
 80118f4:	0059      	lsls	r1, r3, #1
 80118f6:	0849      	lsrs	r1, r1, #1
 80118f8:	f7ee fdac 	bl	8000454 <__aeabi_fcmpgt>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d100      	bne.n	8011902 <update_gyro+0x2be>
 8011900:	e74c      	b.n	801179c <update_gyro+0x158>
 8011902:	69a3      	ldr	r3, [r4, #24]
 8011904:	4640      	mov	r0, r8
 8011906:	0059      	lsls	r1, r3, #1
 8011908:	0849      	lsrs	r1, r1, #1
 801190a:	f7ee fda3 	bl	8000454 <__aeabi_fcmpgt>
 801190e:	2800      	cmp	r0, #0
 8011910:	d100      	bne.n	8011914 <update_gyro+0x2d0>
 8011912:	e743      	b.n	801179c <update_gyro+0x158>
 8011914:	69e3      	ldr	r3, [r4, #28]
 8011916:	4640      	mov	r0, r8
 8011918:	0059      	lsls	r1, r3, #1
 801191a:	0849      	lsrs	r1, r1, #1
 801191c:	f7ee fd9a 	bl	8000454 <__aeabi_fcmpgt>
 8011920:	2800      	cmp	r0, #0
 8011922:	d100      	bne.n	8011926 <update_gyro+0x2e2>
 8011924:	e73a      	b.n	801179c <update_gyro+0x158>
 8011926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011928:	9802      	ldr	r0, [sp, #8]
 801192a:	1c19      	adds	r1, r3, #0
 801192c:	4698      	mov	r8, r3
 801192e:	f7ee fd7d 	bl	800042c <__aeabi_fcmplt>
 8011932:	2800      	cmp	r0, #0
 8011934:	d100      	bne.n	8011938 <update_gyro+0x2f4>
 8011936:	e731      	b.n	801179c <update_gyro+0x158>
 8011938:	4640      	mov	r0, r8
 801193a:	9903      	ldr	r1, [sp, #12]
 801193c:	f7ee fd8a 	bl	8000454 <__aeabi_fcmpgt>
 8011940:	2800      	cmp	r0, #0
 8011942:	d100      	bne.n	8011946 <update_gyro+0x302>
 8011944:	e72a      	b.n	801179c <update_gyro+0x158>
 8011946:	4640      	mov	r0, r8
 8011948:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801194a:	f7ee fd83 	bl	8000454 <__aeabi_fcmpgt>
 801194e:	2800      	cmp	r0, #0
 8011950:	d100      	bne.n	8011954 <update_gyro+0x310>
 8011952:	e723      	b.n	801179c <update_gyro+0x158>
 8011954:	2387      	movs	r3, #135	; 0x87
 8011956:	4698      	mov	r8, r3
 8011958:	4642      	mov	r2, r8
 801195a:	3b86      	subs	r3, #134	; 0x86
 801195c:	54a3      	strb	r3, [r4, r2]
 801195e:	3387      	adds	r3, #135	; 0x87
 8011960:	469a      	mov	sl, r3
 8011962:	58e3      	ldr	r3, [r4, r3]
 8011964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011966:	1c18      	adds	r0, r3, #0
 8011968:	469b      	mov	fp, r3
 801196a:	f7ee fd5f 	bl	800042c <__aeabi_fcmplt>
 801196e:	2800      	cmp	r0, #0
 8011970:	d009      	beq.n	8011986 <update_gyro+0x342>
 8011972:	4649      	mov	r1, r9
 8011974:	4658      	mov	r0, fp
 8011976:	f7ee feb3 	bl	80006e0 <__aeabi_fadd>
 801197a:	4653      	mov	r3, sl
 801197c:	4642      	mov	r2, r8
 801197e:	50e0      	str	r0, [r4, r3]
 8011980:	2300      	movs	r3, #0
 8011982:	54a3      	strb	r3, [r4, r2]
 8011984:	e710      	b.n	80117a8 <update_gyro+0x164>
 8011986:	2320      	movs	r3, #32
 8011988:	5cfb      	ldrb	r3, [r7, r3]
 801198a:	2b01      	cmp	r3, #1
 801198c:	d000      	beq.n	8011990 <update_gyro+0x34c>
 801198e:	e70f      	b.n	80117b0 <update_gyro+0x16c>
 8011990:	2386      	movs	r3, #134	; 0x86
 8011992:	5ce2      	ldrb	r2, [r4, r3]
 8011994:	2a00      	cmp	r2, #0
 8011996:	d047      	beq.n	8011a28 <update_gyro+0x3e4>
 8011998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801199a:	4648      	mov	r0, r9
 801199c:	f7ef fa06 	bl	8000dac <__aeabi_fmul>
 80119a0:	491e      	ldr	r1, [pc, #120]	; (8011a1c <update_gyro+0x3d8>)
 80119a2:	1c06      	adds	r6, r0, #0
 80119a4:	f7ee fd56 	bl	8000454 <__aeabi_fcmpgt>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d146      	bne.n	8011a3a <update_gyro+0x3f6>
 80119ac:	491c      	ldr	r1, [pc, #112]	; (8011a20 <update_gyro+0x3dc>)
 80119ae:	1c30      	adds	r0, r6, #0
 80119b0:	f7ef f9fc 	bl	8000dac <__aeabi_fmul>
 80119b4:	1c01      	adds	r1, r0, #0
 80119b6:	1c06      	adds	r6, r0, #0
 80119b8:	20fe      	movs	r0, #254	; 0xfe
 80119ba:	0580      	lsls	r0, r0, #22
 80119bc:	f7ef fb1c 	bl	8000ff8 <__aeabi_fsub>
 80119c0:	1c07      	adds	r7, r0, #0
 80119c2:	6829      	ldr	r1, [r5, #0]
 80119c4:	1c30      	adds	r0, r6, #0
 80119c6:	f7ef f9f1 	bl	8000dac <__aeabi_fmul>
 80119ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80119cc:	4680      	mov	r8, r0
 80119ce:	1c38      	adds	r0, r7, #0
 80119d0:	f7ef f9ec 	bl	8000dac <__aeabi_fmul>
 80119d4:	1c01      	adds	r1, r0, #0
 80119d6:	4640      	mov	r0, r8
 80119d8:	f7ee fe82 	bl	80006e0 <__aeabi_fadd>
 80119dc:	6420      	str	r0, [r4, #64]	; 0x40
 80119de:	6869      	ldr	r1, [r5, #4]
 80119e0:	1c30      	adds	r0, r6, #0
 80119e2:	f7ef f9e3 	bl	8000dac <__aeabi_fmul>
 80119e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80119e8:	4680      	mov	r8, r0
 80119ea:	1c38      	adds	r0, r7, #0
 80119ec:	f7ef f9de 	bl	8000dac <__aeabi_fmul>
 80119f0:	1c01      	adds	r1, r0, #0
 80119f2:	4640      	mov	r0, r8
 80119f4:	f7ee fe74 	bl	80006e0 <__aeabi_fadd>
 80119f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80119fa:	6460      	str	r0, [r4, #68]	; 0x44
 80119fc:	1c38      	adds	r0, r7, #0
 80119fe:	f7ef f9d5 	bl	8000dac <__aeabi_fmul>
 8011a02:	68a9      	ldr	r1, [r5, #8]
 8011a04:	1c07      	adds	r7, r0, #0
 8011a06:	1c30      	adds	r0, r6, #0
 8011a08:	f7ef f9d0 	bl	8000dac <__aeabi_fmul>
 8011a0c:	1c01      	adds	r1, r0, #0
 8011a0e:	1c38      	adds	r0, r7, #0
 8011a10:	f7ee fe66 	bl	80006e0 <__aeabi_fadd>
 8011a14:	64a0      	str	r0, [r4, #72]	; 0x48
 8011a16:	e722      	b.n	801185e <update_gyro+0x21a>
 8011a18:	20000000 	.word	0x20000000
 8011a1c:	3c23d70a 	.word	0x3c23d70a
 8011a20:	42c80000 	.word	0x42c80000
 8011a24:	3c0efa36 	.word	0x3c0efa36
 8011a28:	2201      	movs	r2, #1
 8011a2a:	54e2      	strb	r2, [r4, r3]
 8011a2c:	6963      	ldr	r3, [r4, #20]
 8011a2e:	6423      	str	r3, [r4, #64]	; 0x40
 8011a30:	69a3      	ldr	r3, [r4, #24]
 8011a32:	6463      	str	r3, [r4, #68]	; 0x44
 8011a34:	69e3      	ldr	r3, [r4, #28]
 8011a36:	64a3      	str	r3, [r4, #72]	; 0x48
 8011a38:	e711      	b.n	801185e <update_gyro+0x21a>
 8011a3a:	26fe      	movs	r6, #254	; 0xfe
 8011a3c:	2700      	movs	r7, #0
 8011a3e:	05b6      	lsls	r6, r6, #22
 8011a40:	e7bf      	b.n	80119c2 <update_gyro+0x37e>
 8011a42:	46c0      	nop			; (mov r8, r8)

08011a44 <update_fusion>:
 8011a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a46:	46de      	mov	lr, fp
 8011a48:	4657      	mov	r7, sl
 8011a4a:	464e      	mov	r6, r9
 8011a4c:	4645      	mov	r5, r8
 8011a4e:	b5e0      	push	{r5, r6, r7, lr}
 8011a50:	0004      	movs	r4, r0
 8011a52:	b095      	sub	sp, #84	; 0x54
 8011a54:	1c08      	adds	r0, r1, #0
 8011a56:	49b7      	ldr	r1, [pc, #732]	; (8011d34 <update_fusion+0x2f0>)
 8011a58:	f7ef f9a8 	bl	8000dac <__aeabi_fmul>
 8011a5c:	4fb6      	ldr	r7, [pc, #728]	; (8011d38 <update_fusion+0x2f4>)
 8011a5e:	1c05      	adds	r5, r0, #0
 8011a60:	69b9      	ldr	r1, [r7, #24]
 8011a62:	f7ef f9a3 	bl	8000dac <__aeabi_fmul>
 8011a66:	69f9      	ldr	r1, [r7, #28]
 8011a68:	1c06      	adds	r6, r0, #0
 8011a6a:	1c28      	adds	r0, r5, #0
 8011a6c:	f7ef f99e 	bl	8000dac <__aeabi_fmul>
 8011a70:	2387      	movs	r3, #135	; 0x87
 8011a72:	5ce3      	ldrb	r3, [r4, r3]
 8011a74:	1c05      	adds	r5, r0, #0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d009      	beq.n	8011a8e <update_fusion+0x4a>
 8011a7a:	1c31      	adds	r1, r6, #0
 8011a7c:	1c30      	adds	r0, r6, #0
 8011a7e:	f7ee fe2f 	bl	80006e0 <__aeabi_fadd>
 8011a82:	1c29      	adds	r1, r5, #0
 8011a84:	1c06      	adds	r6, r0, #0
 8011a86:	1c28      	adds	r0, r5, #0
 8011a88:	f7ee fe2a 	bl	80006e0 <__aeabi_fadd>
 8011a8c:	1c05      	adds	r5, r0, #0
 8011a8e:	238c      	movs	r3, #140	; 0x8c
 8011a90:	5ce3      	ldrb	r3, [r4, r3]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d100      	bne.n	8011a98 <update_fusion+0x54>
 8011a96:	2600      	movs	r6, #0
 8011a98:	238d      	movs	r3, #141	; 0x8d
 8011a9a:	5ce3      	ldrb	r3, [r4, r3]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d100      	bne.n	8011aa2 <update_fusion+0x5e>
 8011aa0:	2500      	movs	r5, #0
 8011aa2:	2385      	movs	r3, #133	; 0x85
 8011aa4:	5ce3      	ldrb	r3, [r4, r3]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d000      	beq.n	8011aac <update_fusion+0x68>
 8011aaa:	e0e6      	b.n	8011c7a <update_fusion+0x236>
 8011aac:	21fc      	movs	r1, #252	; 0xfc
 8011aae:	1c30      	adds	r0, r6, #0
 8011ab0:	0589      	lsls	r1, r1, #22
 8011ab2:	f7ef f97b 	bl	8000dac <__aeabi_fmul>
 8011ab6:	9000      	str	r0, [sp, #0]
 8011ab8:	234c      	movs	r3, #76	; 0x4c
 8011aba:	469a      	mov	sl, r3
 8011abc:	44a2      	add	sl, r4
 8011abe:	0022      	movs	r2, r4
 8011ac0:	4651      	mov	r1, sl
 8011ac2:	a802      	add	r0, sp, #8
 8011ac4:	f7fe f872 	bl	800fbac <quat_rot>
 8011ac8:	9b03      	ldr	r3, [sp, #12]
 8011aca:	4699      	mov	r9, r3
 8011acc:	9b04      	ldr	r3, [sp, #16]
 8011ace:	4649      	mov	r1, r9
 8011ad0:	469b      	mov	fp, r3
 8011ad2:	9b02      	ldr	r3, [sp, #8]
 8011ad4:	4648      	mov	r0, r9
 8011ad6:	4698      	mov	r8, r3
 8011ad8:	f7ef f968 	bl	8000dac <__aeabi_fmul>
 8011adc:	4641      	mov	r1, r8
 8011ade:	1c06      	adds	r6, r0, #0
 8011ae0:	4640      	mov	r0, r8
 8011ae2:	f7ef f963 	bl	8000dac <__aeabi_fmul>
 8011ae6:	1c01      	adds	r1, r0, #0
 8011ae8:	1c30      	adds	r0, r6, #0
 8011aea:	f7ee fdf9 	bl	80006e0 <__aeabi_fadd>
 8011aee:	4993      	ldr	r1, [pc, #588]	; (8011d3c <update_fusion+0x2f8>)
 8011af0:	1c06      	adds	r6, r0, #0
 8011af2:	f7ee fcaf 	bl	8000454 <__aeabi_fcmpgt>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d100      	bne.n	8011afc <update_fusion+0xb8>
 8011afa:	e0ba      	b.n	8011c72 <update_fusion+0x22e>
 8011afc:	1c30      	adds	r0, r6, #0
 8011afe:	f002 f86d 	bl	8013bdc <sqrtf>
 8011b02:	1c01      	adds	r1, r0, #0
 8011b04:	20fe      	movs	r0, #254	; 0xfe
 8011b06:	0580      	lsls	r0, r0, #22
 8011b08:	f7ee ff88 	bl	8000a1c <__aeabi_fdiv>
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	9001      	str	r0, [sp, #4]
 8011b10:	f7ef f94c 	bl	8000dac <__aeabi_fmul>
 8011b14:	4641      	mov	r1, r8
 8011b16:	4681      	mov	r9, r0
 8011b18:	9801      	ldr	r0, [sp, #4]
 8011b1a:	f7ef f947 	bl	8000dac <__aeabi_fmul>
 8011b1e:	2380      	movs	r3, #128	; 0x80
 8011b20:	061b      	lsls	r3, r3, #24
 8011b22:	469c      	mov	ip, r3
 8011b24:	4484      	add	ip, r0
 8011b26:	46e0      	mov	r8, ip
 8011b28:	4658      	mov	r0, fp
 8011b2a:	f002 f813 	bl	8013b54 <acosf>
 8011b2e:	9900      	ldr	r1, [sp, #0]
 8011b30:	f7ef f93c 	bl	8000dac <__aeabi_fmul>
 8011b34:	4683      	mov	fp, r0
 8011b36:	f001 ff87 	bl	8013a48 <cosf>
 8011b3a:	9000      	str	r0, [sp, #0]
 8011b3c:	4658      	mov	r0, fp
 8011b3e:	f001 ffb7 	bl	8013ab0 <sinf>
 8011b42:	1c01      	adds	r1, r0, #0
 8011b44:	4683      	mov	fp, r0
 8011b46:	4648      	mov	r0, r9
 8011b48:	f7ef f930 	bl	8000dac <__aeabi_fmul>
 8011b4c:	4641      	mov	r1, r8
 8011b4e:	9008      	str	r0, [sp, #32]
 8011b50:	4658      	mov	r0, fp
 8011b52:	f7ef f92b 	bl	8000dac <__aeabi_fmul>
 8011b56:	2300      	movs	r3, #0
 8011b58:	930a      	str	r3, [sp, #40]	; 0x28
 8011b5a:	9b00      	ldr	r3, [sp, #0]
 8011b5c:	4652      	mov	r2, sl
 8011b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b60:	235c      	movs	r3, #92	; 0x5c
 8011b62:	4698      	mov	r8, r3
 8011b64:	44a0      	add	r8, r4
 8011b66:	9009      	str	r0, [sp, #36]	; 0x24
 8011b68:	a908      	add	r1, sp, #32
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	f7fd ff94 	bl	800fa98 <quat_mult>
 8011b70:	2384      	movs	r3, #132	; 0x84
 8011b72:	5ce3      	ldrb	r3, [r4, r3]
 8011b74:	aa10      	add	r2, sp, #64	; 0x40
 8011b76:	4691      	mov	r9, r2
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d143      	bne.n	8011c04 <update_fusion+0x1c0>
 8011b7c:	3385      	adds	r3, #133	; 0x85
 8011b7e:	5ce3      	ldrb	r3, [r4, r3]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d001      	beq.n	8011b88 <update_fusion+0x144>
 8011b84:	25fe      	movs	r5, #254	; 0xfe
 8011b86:	05ad      	lsls	r5, r5, #22
 8011b88:	0022      	movs	r2, r4
 8011b8a:	4641      	mov	r1, r8
 8011b8c:	a805      	add	r0, sp, #20
 8011b8e:	3234      	adds	r2, #52	; 0x34
 8011b90:	f7fe f80c 	bl	800fbac <quat_rot>
 8011b94:	9b05      	ldr	r3, [sp, #20]
 8011b96:	4969      	ldr	r1, [pc, #420]	; (8011d3c <update_fusion+0x2f8>)
 8011b98:	4699      	mov	r9, r3
 8011b9a:	9b06      	ldr	r3, [sp, #24]
 8011b9c:	1c30      	adds	r0, r6, #0
 8011b9e:	469a      	mov	sl, r3
 8011ba0:	f7ee fc58 	bl	8000454 <__aeabi_fcmpgt>
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d16c      	bne.n	8011c82 <update_fusion+0x23e>
 8011ba8:	2600      	movs	r6, #0
 8011baa:	4b65      	ldr	r3, [pc, #404]	; (8011d40 <update_fusion+0x2fc>)
 8011bac:	2100      	movs	r1, #0
 8011bae:	469b      	mov	fp, r3
 8011bb0:	4b64      	ldr	r3, [pc, #400]	; (8011d44 <update_fusion+0x300>)
 8011bb2:	4648      	mov	r0, r9
 8011bb4:	469a      	mov	sl, r3
 8011bb6:	9606      	str	r6, [sp, #24]
 8011bb8:	f7ee fc38 	bl	800042c <__aeabi_fcmplt>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d000      	beq.n	8011bc2 <update_fusion+0x17e>
 8011bc0:	e088      	b.n	8011cd4 <update_fusion+0x290>
 8011bc2:	26fe      	movs	r6, #254	; 0xfe
 8011bc4:	78fb      	ldrb	r3, [r7, #3]
 8011bc6:	05b6      	lsls	r6, r6, #22
 8011bc8:	4699      	mov	r9, r3
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d100      	bne.n	8011bd0 <update_fusion+0x18c>
 8011bce:	e087      	b.n	8011ce0 <update_fusion+0x29c>
 8011bd0:	238e      	movs	r3, #142	; 0x8e
 8011bd2:	5ce3      	ldrb	r3, [r4, r3]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d100      	bne.n	8011bda <update_fusion+0x196>
 8011bd8:	e095      	b.n	8011d06 <update_fusion+0x2c2>
 8011bda:	25fe      	movs	r5, #254	; 0xfe
 8011bdc:	2000      	movs	r0, #0
 8011bde:	05ad      	lsls	r5, r5, #22
 8011be0:	2300      	movs	r3, #0
 8011be2:	930c      	str	r3, [sp, #48]	; 0x30
 8011be4:	930d      	str	r3, [sp, #52]	; 0x34
 8011be6:	ab10      	add	r3, sp, #64	; 0x40
 8011be8:	4699      	mov	r9, r3
 8011bea:	4642      	mov	r2, r8
 8011bec:	900e      	str	r0, [sp, #56]	; 0x38
 8011bee:	a90c      	add	r1, sp, #48	; 0x30
 8011bf0:	0018      	movs	r0, r3
 8011bf2:	950f      	str	r5, [sp, #60]	; 0x3c
 8011bf4:	f7fd ff50 	bl	800fa98 <quat_mult>
 8011bf8:	4643      	mov	r3, r8
 8011bfa:	464a      	mov	r2, r9
 8011bfc:	ca23      	ldmia	r2!, {r0, r1, r5}
 8011bfe:	c323      	stmia	r3!, {r0, r1, r5}
 8011c00:	6812      	ldr	r2, [r2, #0]
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	2280      	movs	r2, #128	; 0x80
 8011c06:	0612      	lsls	r2, r2, #24
 8011c08:	4694      	mov	ip, r2
 8011c0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011c0c:	0020      	movs	r0, r4
 8011c0e:	4463      	add	r3, ip
 8011c10:	9310      	str	r3, [sp, #64]	; 0x40
 8011c12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011c14:	306c      	adds	r0, #108	; 0x6c
 8011c16:	4463      	add	r3, ip
 8011c18:	9311      	str	r3, [sp, #68]	; 0x44
 8011c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c1c:	0002      	movs	r2, r0
 8011c1e:	4463      	add	r3, ip
 8011c20:	9312      	str	r3, [sp, #72]	; 0x48
 8011c22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011c24:	4649      	mov	r1, r9
 8011c26:	9313      	str	r3, [sp, #76]	; 0x4c
 8011c28:	2300      	movs	r3, #0
 8011c2a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8011c2c:	6723      	str	r3, [r4, #112]	; 0x70
 8011c2e:	23fe      	movs	r3, #254	; 0xfe
 8011c30:	059b      	lsls	r3, r3, #22
 8011c32:	6763      	str	r3, [r4, #116]	; 0x74
 8011c34:	f7fd ffba 	bl	800fbac <quat_rot>
 8011c38:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8011c3a:	6820      	ldr	r0, [r4, #0]
 8011c3c:	f7ef f9dc 	bl	8000ff8 <__aeabi_fsub>
 8011c40:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8011c42:	67a0      	str	r0, [r4, #120]	; 0x78
 8011c44:	6860      	ldr	r0, [r4, #4]
 8011c46:	f7ef f9d7 	bl	8000ff8 <__aeabi_fsub>
 8011c4a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011c4c:	67e0      	str	r0, [r4, #124]	; 0x7c
 8011c4e:	68a0      	ldr	r0, [r4, #8]
 8011c50:	f7ef f9d2 	bl	8000ff8 <__aeabi_fsub>
 8011c54:	2380      	movs	r3, #128	; 0x80
 8011c56:	50e0      	str	r0, [r4, r3]
 8011c58:	3305      	adds	r3, #5
 8011c5a:	5ce2      	ldrb	r2, [r4, r3]
 8011c5c:	2a00      	cmp	r2, #0
 8011c5e:	d001      	beq.n	8011c64 <update_fusion+0x220>
 8011c60:	2200      	movs	r2, #0
 8011c62:	54e2      	strb	r2, [r4, r3]
 8011c64:	b015      	add	sp, #84	; 0x54
 8011c66:	bcf0      	pop	{r4, r5, r6, r7}
 8011c68:	46bb      	mov	fp, r7
 8011c6a:	46b2      	mov	sl, r6
 8011c6c:	46a9      	mov	r9, r5
 8011c6e:	46a0      	mov	r8, r4
 8011c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c72:	2300      	movs	r3, #0
 8011c74:	4698      	mov	r8, r3
 8011c76:	4699      	mov	r9, r3
 8011c78:	e756      	b.n	8011b28 <update_fusion+0xe4>
 8011c7a:	23fc      	movs	r3, #252	; 0xfc
 8011c7c:	059b      	lsls	r3, r3, #22
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	e71a      	b.n	8011ab8 <update_fusion+0x74>
 8011c82:	4649      	mov	r1, r9
 8011c84:	4648      	mov	r0, r9
 8011c86:	f7ef f891 	bl	8000dac <__aeabi_fmul>
 8011c8a:	4651      	mov	r1, sl
 8011c8c:	1c06      	adds	r6, r0, #0
 8011c8e:	4650      	mov	r0, sl
 8011c90:	f7ef f88c 	bl	8000dac <__aeabi_fmul>
 8011c94:	1c01      	adds	r1, r0, #0
 8011c96:	1c30      	adds	r0, r6, #0
 8011c98:	f7ee fd22 	bl	80006e0 <__aeabi_fadd>
 8011c9c:	f001 ff9e 	bl	8013bdc <sqrtf>
 8011ca0:	1c01      	adds	r1, r0, #0
 8011ca2:	4650      	mov	r0, sl
 8011ca4:	f7ee feba 	bl	8000a1c <__aeabi_fdiv>
 8011ca8:	1c06      	adds	r6, r0, #0
 8011caa:	f001 ff53 	bl	8013b54 <acosf>
 8011cae:	4926      	ldr	r1, [pc, #152]	; (8011d48 <update_fusion+0x304>)
 8011cb0:	4683      	mov	fp, r0
 8011cb2:	f7ef f87b 	bl	8000dac <__aeabi_fmul>
 8011cb6:	21fc      	movs	r1, #252	; 0xfc
 8011cb8:	4682      	mov	sl, r0
 8011cba:	0589      	lsls	r1, r1, #22
 8011cbc:	4658      	mov	r0, fp
 8011cbe:	f7ef f875 	bl	8000dac <__aeabi_fmul>
 8011cc2:	2100      	movs	r1, #0
 8011cc4:	4683      	mov	fp, r0
 8011cc6:	4648      	mov	r0, r9
 8011cc8:	9606      	str	r6, [sp, #24]
 8011cca:	f7ee fbaf 	bl	800042c <__aeabi_fcmplt>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d100      	bne.n	8011cd4 <update_fusion+0x290>
 8011cd2:	e776      	b.n	8011bc2 <update_fusion+0x17e>
 8011cd4:	78fb      	ldrb	r3, [r7, #3]
 8011cd6:	4e1d      	ldr	r6, [pc, #116]	; (8011d4c <update_fusion+0x308>)
 8011cd8:	4699      	mov	r9, r3
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d000      	beq.n	8011ce0 <update_fusion+0x29c>
 8011cde:	e777      	b.n	8011bd0 <update_fusion+0x18c>
 8011ce0:	4651      	mov	r1, sl
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7ee fbb6 	bl	8000454 <__aeabi_fcmpgt>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	d01c      	beq.n	8011d26 <update_fusion+0x2e2>
 8011cec:	238e      	movs	r3, #142	; 0x8e
 8011cee:	464a      	mov	r2, r9
 8011cf0:	4650      	mov	r0, sl
 8011cf2:	68b9      	ldr	r1, [r7, #8]
 8011cf4:	54e2      	strb	r2, [r4, r3]
 8011cf6:	f7ee fbad 	bl	8000454 <__aeabi_fcmpgt>
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	d100      	bne.n	8011d00 <update_fusion+0x2bc>
 8011cfe:	e76c      	b.n	8011bda <update_fusion+0x196>
 8011d00:	238e      	movs	r3, #142	; 0x8e
 8011d02:	2200      	movs	r2, #0
 8011d04:	54e2      	strb	r2, [r4, r3]
 8011d06:	4659      	mov	r1, fp
 8011d08:	1c28      	adds	r0, r5, #0
 8011d0a:	f7ef f84f 	bl	8000dac <__aeabi_fmul>
 8011d0e:	1c07      	adds	r7, r0, #0
 8011d10:	f001 fe9a 	bl	8013a48 <cosf>
 8011d14:	1c05      	adds	r5, r0, #0
 8011d16:	1c38      	adds	r0, r7, #0
 8011d18:	f001 feca 	bl	8013ab0 <sinf>
 8011d1c:	1c01      	adds	r1, r0, #0
 8011d1e:	1c30      	adds	r0, r6, #0
 8011d20:	f7ef f844 	bl	8000dac <__aeabi_fmul>
 8011d24:	e75c      	b.n	8011be0 <update_fusion+0x19c>
 8011d26:	4651      	mov	r1, sl
 8011d28:	68b8      	ldr	r0, [r7, #8]
 8011d2a:	f7ee fb7f 	bl	800042c <__aeabi_fcmplt>
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	d1e6      	bne.n	8011d00 <update_fusion+0x2bc>
 8011d32:	e74d      	b.n	8011bd0 <update_fusion+0x18c>
 8011d34:	42c80000 	.word	0x42c80000
 8011d38:	20000000 	.word	0x20000000
 8011d3c:	28800001 	.word	0x28800001
 8011d40:	3f490fdb 	.word	0x3f490fdb
 8011d44:	42b40000 	.word	0x42b40000
 8011d48:	42652ee0 	.word	0x42652ee0
 8011d4c:	bf800000 	.word	0xbf800000

08011d50 <MotionFX_CM0P_initialize>:
 8011d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d52:	46de      	mov	lr, fp
 8011d54:	4657      	mov	r7, sl
 8011d56:	464e      	mov	r6, r9
 8011d58:	4645      	mov	r5, r8
 8011d5a:	b5e0      	push	{r5, r6, r7, lr}
 8011d5c:	2802      	cmp	r0, #2
 8011d5e:	d81d      	bhi.n	8011d9c <MotionFX_CM0P_initialize+0x4c>
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d127      	bne.n	8011db4 <MotionFX_CM0P_initialize+0x64>
 8011d64:	4b6c      	ldr	r3, [pc, #432]	; (8011f18 <MotionFX_CM0P_initialize+0x1c8>)
 8011d66:	496d      	ldr	r1, [pc, #436]	; (8011f1c <MotionFX_CM0P_initialize+0x1cc>)
 8011d68:	681a      	ldr	r2, [r3, #0]
 8011d6a:	486d      	ldr	r0, [pc, #436]	; (8011f20 <MotionFX_CM0P_initialize+0x1d0>)
 8011d6c:	400a      	ands	r2, r1
 8011d6e:	4282      	cmp	r2, r0
 8011d70:	d100      	bne.n	8011d74 <MotionFX_CM0P_initialize+0x24>
 8011d72:	e0ae      	b.n	8011ed2 <MotionFX_CM0P_initialize+0x182>
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	4a6b      	ldr	r2, [pc, #428]	; (8011f24 <MotionFX_CM0P_initialize+0x1d4>)
 8011d78:	400b      	ands	r3, r1
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d100      	bne.n	8011d80 <MotionFX_CM0P_initialize+0x30>
 8011d7e:	e0a8      	b.n	8011ed2 <MotionFX_CM0P_initialize+0x182>
 8011d80:	2201      	movs	r2, #1
 8011d82:	4b69      	ldr	r3, [pc, #420]	; (8011f28 <MotionFX_CM0P_initialize+0x1d8>)
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	d1fc      	bne.n	8011d86 <MotionFX_CM0P_initialize+0x36>
 8011d8c:	4b67      	ldr	r3, [pc, #412]	; (8011f2c <MotionFX_CM0P_initialize+0x1dc>)
 8011d8e:	4a68      	ldr	r2, [pc, #416]	; (8011f30 <MotionFX_CM0P_initialize+0x1e0>)
 8011d90:	601a      	str	r2, [r3, #0]
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	4b67      	ldr	r3, [pc, #412]	; (8011f34 <MotionFX_CM0P_initialize+0x1e4>)
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d014      	beq.n	8011dc4 <MotionFX_CM0P_initialize+0x74>
 8011d9a:	e7fe      	b.n	8011d9a <MotionFX_CM0P_initialize+0x4a>
 8011d9c:	2803      	cmp	r0, #3
 8011d9e:	d1e1      	bne.n	8011d64 <MotionFX_CM0P_initialize+0x14>
 8011da0:	4b65      	ldr	r3, [pc, #404]	; (8011f38 <MotionFX_CM0P_initialize+0x1e8>)
 8011da2:	4a66      	ldr	r2, [pc, #408]	; (8011f3c <MotionFX_CM0P_initialize+0x1ec>)
 8011da4:	6819      	ldr	r1, [r3, #0]
 8011da6:	4291      	cmp	r1, r2
 8011da8:	d00c      	beq.n	8011dc4 <MotionFX_CM0P_initialize+0x74>
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	4b64      	ldr	r3, [pc, #400]	; (8011f40 <MotionFX_CM0P_initialize+0x1f0>)
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d008      	beq.n	8011dc4 <MotionFX_CM0P_initialize+0x74>
 8011db2:	e7fe      	b.n	8011db2 <MotionFX_CM0P_initialize+0x62>
 8011db4:	4b63      	ldr	r3, [pc, #396]	; (8011f44 <MotionFX_CM0P_initialize+0x1f4>)
 8011db6:	4a64      	ldr	r2, [pc, #400]	; (8011f48 <MotionFX_CM0P_initialize+0x1f8>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	0c1b      	lsrs	r3, r3, #16
 8011dbc:	041b      	lsls	r3, r3, #16
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	d000      	beq.n	8011dc4 <MotionFX_CM0P_initialize+0x74>
 8011dc2:	e085      	b.n	8011ed0 <MotionFX_CM0P_initialize+0x180>
 8011dc4:	4a61      	ldr	r2, [pc, #388]	; (8011f4c <MotionFX_CM0P_initialize+0x1fc>)
 8011dc6:	4862      	ldr	r0, [pc, #392]	; (8011f50 <MotionFX_CM0P_initialize+0x200>)
 8011dc8:	21fe      	movs	r1, #254	; 0xfe
 8011dca:	4683      	mov	fp, r0
 8011dcc:	6390      	str	r0, [r2, #56]	; 0x38
 8011dce:	4861      	ldr	r0, [pc, #388]	; (8011f54 <MotionFX_CM0P_initialize+0x204>)
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	4682      	mov	sl, r0
 8011dd4:	2501      	movs	r5, #1
 8011dd6:	63d0      	str	r0, [r2, #60]	; 0x3c
 8011dd8:	2080      	movs	r0, #128	; 0x80
 8011dda:	4c5f      	ldr	r4, [pc, #380]	; (8011f58 <MotionFX_CM0P_initialize+0x208>)
 8011ddc:	0589      	lsls	r1, r1, #22
 8011dde:	4681      	mov	r9, r0
 8011de0:	7125      	strb	r5, [r4, #4]
 8011de2:	6013      	str	r3, [r2, #0]
 8011de4:	6053      	str	r3, [r2, #4]
 8011de6:	6091      	str	r1, [r2, #8]
 8011de8:	60d1      	str	r1, [r2, #12]
 8011dea:	6113      	str	r3, [r2, #16]
 8011dec:	6153      	str	r3, [r2, #20]
 8011dee:	6193      	str	r3, [r2, #24]
 8011df0:	61d3      	str	r3, [r2, #28]
 8011df2:	6213      	str	r3, [r2, #32]
 8011df4:	6253      	str	r3, [r2, #36]	; 0x24
 8011df6:	6293      	str	r3, [r2, #40]	; 0x28
 8011df8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8011dfc:	6353      	str	r3, [r2, #52]	; 0x34
 8011dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8011e00:	6453      	str	r3, [r2, #68]	; 0x44
 8011e02:	6493      	str	r3, [r2, #72]	; 0x48
 8011e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011e06:	6513      	str	r3, [r2, #80]	; 0x50
 8011e08:	6553      	str	r3, [r2, #84]	; 0x54
 8011e0a:	6591      	str	r1, [r2, #88]	; 0x58
 8011e0c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8011e0e:	6613      	str	r3, [r2, #96]	; 0x60
 8011e10:	6653      	str	r3, [r2, #100]	; 0x64
 8011e12:	6691      	str	r1, [r2, #104]	; 0x68
 8011e14:	66d3      	str	r3, [r2, #108]	; 0x6c
 8011e16:	6713      	str	r3, [r2, #112]	; 0x70
 8011e18:	6751      	str	r1, [r2, #116]	; 0x74
 8011e1a:	5013      	str	r3, [r2, r0]
 8011e1c:	3005      	adds	r0, #5
 8011e1e:	5415      	strb	r5, [r2, r0]
 8011e20:	4680      	mov	r8, r0
 8011e22:	2786      	movs	r7, #134	; 0x86
 8011e24:	2000      	movs	r0, #0
 8011e26:	2502      	movs	r5, #2
 8011e28:	4684      	mov	ip, r0
 8011e2a:	67d3      	str	r3, [r2, #124]	; 0x7c
 8011e2c:	35ff      	adds	r5, #255	; 0xff
 8011e2e:	53d0      	strh	r0, [r2, r7]
 8011e30:	308c      	adds	r0, #140	; 0x8c
 8011e32:	5215      	strh	r5, [r2, r0]
 8011e34:	2500      	movs	r5, #0
 8011e36:	2688      	movs	r6, #136	; 0x88
 8011e38:	3002      	adds	r0, #2
 8011e3a:	5415      	strb	r5, [r2, r0]
 8011e3c:	465d      	mov	r5, fp
 8011e3e:	5193      	str	r3, [r2, r6]
 8011e40:	6793      	str	r3, [r2, #120]	; 0x78
 8011e42:	4a46      	ldr	r2, [pc, #280]	; (8011f5c <MotionFX_CM0P_initialize+0x20c>)
 8011e44:	208c      	movs	r0, #140	; 0x8c
 8011e46:	6395      	str	r5, [r2, #56]	; 0x38
 8011e48:	4655      	mov	r5, sl
 8011e4a:	6013      	str	r3, [r2, #0]
 8011e4c:	6053      	str	r3, [r2, #4]
 8011e4e:	6091      	str	r1, [r2, #8]
 8011e50:	60d1      	str	r1, [r2, #12]
 8011e52:	6113      	str	r3, [r2, #16]
 8011e54:	6153      	str	r3, [r2, #20]
 8011e56:	6193      	str	r3, [r2, #24]
 8011e58:	61d3      	str	r3, [r2, #28]
 8011e5a:	6213      	str	r3, [r2, #32]
 8011e5c:	6253      	str	r3, [r2, #36]	; 0x24
 8011e5e:	6293      	str	r3, [r2, #40]	; 0x28
 8011e60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e62:	6313      	str	r3, [r2, #48]	; 0x30
 8011e64:	6353      	str	r3, [r2, #52]	; 0x34
 8011e66:	63d5      	str	r5, [r2, #60]	; 0x3c
 8011e68:	6413      	str	r3, [r2, #64]	; 0x40
 8011e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8011e6c:	6493      	str	r3, [r2, #72]	; 0x48
 8011e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011e70:	6513      	str	r3, [r2, #80]	; 0x50
 8011e72:	6553      	str	r3, [r2, #84]	; 0x54
 8011e74:	6591      	str	r1, [r2, #88]	; 0x58
 8011e76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8011e78:	6691      	str	r1, [r2, #104]	; 0x68
 8011e7a:	6751      	str	r1, [r2, #116]	; 0x74
 8011e7c:	4649      	mov	r1, r9
 8011e7e:	2501      	movs	r5, #1
 8011e80:	5053      	str	r3, [r2, r1]
 8011e82:	4641      	mov	r1, r8
 8011e84:	5193      	str	r3, [r2, r6]
 8011e86:	67d3      	str	r3, [r2, #124]	; 0x7c
 8011e88:	6613      	str	r3, [r2, #96]	; 0x60
 8011e8a:	6653      	str	r3, [r2, #100]	; 0x64
 8011e8c:	66d3      	str	r3, [r2, #108]	; 0x6c
 8011e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8011e90:	6793      	str	r3, [r2, #120]	; 0x78
 8011e92:	2302      	movs	r3, #2
 8011e94:	5455      	strb	r5, [r2, r1]
 8011e96:	2500      	movs	r5, #0
 8011e98:	33ff      	adds	r3, #255	; 0xff
 8011e9a:	4661      	mov	r1, ip
 8011e9c:	5213      	strh	r3, [r2, r0]
 8011e9e:	0020      	movs	r0, r4
 8011ea0:	3b73      	subs	r3, #115	; 0x73
 8011ea2:	54d5      	strb	r5, [r2, r3]
 8011ea4:	4d2e      	ldr	r5, [pc, #184]	; (8011f60 <MotionFX_CM0P_initialize+0x210>)
 8011ea6:	53d1      	strh	r1, [r2, r7]
 8011ea8:	3008      	adds	r0, #8
 8011eaa:	0029      	movs	r1, r5
 8011eac:	f7fd fd7a 	bl	800f9a4 <inemo_set_orientation>
 8011eb0:	0020      	movs	r0, r4
 8011eb2:	0029      	movs	r1, r5
 8011eb4:	3014      	adds	r0, #20
 8011eb6:	f7fd fd75 	bl	800f9a4 <inemo_set_orientation>
 8011eba:	0020      	movs	r0, r4
 8011ebc:	0029      	movs	r1, r5
 8011ebe:	3020      	adds	r0, #32
 8011ec0:	f7fd fd70 	bl	800f9a4 <inemo_set_orientation>
 8011ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8011ec6:	46bb      	mov	fp, r7
 8011ec8:	46b2      	mov	sl, r6
 8011eca:	46a9      	mov	r9, r5
 8011ecc:	46a0      	mov	r8, r4
 8011ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ed0:	e7fe      	b.n	8011ed0 <MotionFX_CM0P_initialize+0x180>
 8011ed2:	4b24      	ldr	r3, [pc, #144]	; (8011f64 <MotionFX_CM0P_initialize+0x214>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d000      	beq.n	8011edc <MotionFX_CM0P_initialize+0x18c>
 8011eda:	e751      	b.n	8011d80 <MotionFX_CM0P_initialize+0x30>
 8011edc:	218a      	movs	r1, #138	; 0x8a
 8011ede:	4a22      	ldr	r2, [pc, #136]	; (8011f68 <MotionFX_CM0P_initialize+0x218>)
 8011ee0:	00c9      	lsls	r1, r1, #3
 8011ee2:	6813      	ldr	r3, [r2, #0]
 8011ee4:	051b      	lsls	r3, r3, #20
 8011ee6:	0d1b      	lsrs	r3, r3, #20
 8011ee8:	428b      	cmp	r3, r1
 8011eea:	d006      	beq.n	8011efa <MotionFX_CM0P_initialize+0x1aa>
 8011eec:	6813      	ldr	r3, [r2, #0]
 8011eee:	4a1f      	ldr	r2, [pc, #124]	; (8011f6c <MotionFX_CM0P_initialize+0x21c>)
 8011ef0:	051b      	lsls	r3, r3, #20
 8011ef2:	0d1b      	lsrs	r3, r3, #20
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d000      	beq.n	8011efa <MotionFX_CM0P_initialize+0x1aa>
 8011ef8:	e742      	b.n	8011d80 <MotionFX_CM0P_initialize+0x30>
 8011efa:	2201      	movs	r2, #1
 8011efc:	4b1c      	ldr	r3, [pc, #112]	; (8011f70 <MotionFX_CM0P_initialize+0x220>)
 8011efe:	601a      	str	r2, [r3, #0]
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	2a00      	cmp	r2, #0
 8011f04:	d1fc      	bne.n	8011f00 <MotionFX_CM0P_initialize+0x1b0>
 8011f06:	4b1b      	ldr	r3, [pc, #108]	; (8011f74 <MotionFX_CM0P_initialize+0x224>)
 8011f08:	4a09      	ldr	r2, [pc, #36]	; (8011f30 <MotionFX_CM0P_initialize+0x1e0>)
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	4b09      	ldr	r3, [pc, #36]	; (8011f34 <MotionFX_CM0P_initialize+0x1e4>)
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d100      	bne.n	8011f16 <MotionFX_CM0P_initialize+0x1c6>
 8011f14:	e756      	b.n	8011dc4 <MotionFX_CM0P_initialize+0x74>
 8011f16:	e740      	b.n	8011d9a <MotionFX_CM0P_initialize+0x4a>
 8011f18:	e000ed00 	.word	0xe000ed00
 8011f1c:	0000fff0 	.word	0x0000fff0
 8011f20:	0000c240 	.word	0x0000c240
 8011f24:	0000c270 	.word	0x0000c270
 8011f28:	40023008 	.word	0x40023008
 8011f2c:	40023000 	.word	0x40023000
 8011f30:	f407a5c2 	.word	0xf407a5c2
 8011f34:	b5e8b5cd 	.word	0xb5e8b5cd
 8011f38:	40000004 	.word	0x40000004
 8011f3c:	0201e041 	.word	0x0201e041
 8011f40:	02028041 	.word	0x02028041
 8011f44:	100007f8 	.word	0x100007f8
 8011f48:	aa550000 	.word	0xaa550000
 8011f4c:	20000a2c 	.word	0x20000a2c
 8011f50:	3f34fdf4 	.word	0x3f34fdf4
 8011f54:	bf34fdf4 	.word	0xbf34fdf4
 8011f58:	200002fc 	.word	0x200002fc
 8011f5c:	2000003c 	.word	0x2000003c
 8011f60:	080159c0 	.word	0x080159c0
 8011f64:	e0042000 	.word	0xe0042000
 8011f68:	5c001000 	.word	0x5c001000
 8011f6c:	00000483 	.word	0x00000483
 8011f70:	58024c08 	.word	0x58024c08
 8011f74:	58024c00 	.word	0x58024c00

08011f78 <MotionFX_CM0P_setOrientation>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	4c0b      	ldr	r4, [pc, #44]	; (8011fa8 <MotionFX_CM0P_setOrientation+0x30>)
 8011f7c:	000e      	movs	r6, r1
 8011f7e:	7923      	ldrb	r3, [r4, #4]
 8011f80:	0015      	movs	r5, r2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d00f      	beq.n	8011fa6 <MotionFX_CM0P_setOrientation+0x2e>
 8011f86:	0023      	movs	r3, r4
 8011f88:	3308      	adds	r3, #8
 8011f8a:	0001      	movs	r1, r0
 8011f8c:	0018      	movs	r0, r3
 8011f8e:	f7fd fd09 	bl	800f9a4 <inemo_set_orientation>
 8011f92:	0020      	movs	r0, r4
 8011f94:	0031      	movs	r1, r6
 8011f96:	3014      	adds	r0, #20
 8011f98:	f7fd fd04 	bl	800f9a4 <inemo_set_orientation>
 8011f9c:	0020      	movs	r0, r4
 8011f9e:	0029      	movs	r1, r5
 8011fa0:	3020      	adds	r0, #32
 8011fa2:	f7fd fcff 	bl	800f9a4 <inemo_set_orientation>
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
 8011fa8:	200002fc 	.word	0x200002fc

08011fac <MotionFX_CM0P_enable_6X>:
 8011fac:	4b03      	ldr	r3, [pc, #12]	; (8011fbc <MotionFX_CM0P_enable_6X+0x10>)
 8011fae:	791b      	ldrb	r3, [r3, #4]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d001      	beq.n	8011fb8 <MotionFX_CM0P_enable_6X+0xc>
 8011fb4:	4b02      	ldr	r3, [pc, #8]	; (8011fc0 <MotionFX_CM0P_enable_6X+0x14>)
 8011fb6:	7058      	strb	r0, [r3, #1]
 8011fb8:	4770      	bx	lr
 8011fba:	46c0      	nop			; (mov r8, r8)
 8011fbc:	200002fc 	.word	0x200002fc
 8011fc0:	20000000 	.word	0x20000000

08011fc4 <MotionFX_CM0P_enable_9X>:
 8011fc4:	4b03      	ldr	r3, [pc, #12]	; (8011fd4 <MotionFX_CM0P_enable_9X+0x10>)
 8011fc6:	791b      	ldrb	r3, [r3, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d001      	beq.n	8011fd0 <MotionFX_CM0P_enable_9X+0xc>
 8011fcc:	4b02      	ldr	r3, [pc, #8]	; (8011fd8 <MotionFX_CM0P_enable_9X+0x14>)
 8011fce:	7018      	strb	r0, [r3, #0]
 8011fd0:	4770      	bx	lr
 8011fd2:	46c0      	nop			; (mov r8, r8)
 8011fd4:	200002fc 	.word	0x200002fc
 8011fd8:	20000000 	.word	0x20000000

08011fdc <MotionFX_CM0P_enable_euler>:
 8011fdc:	4b03      	ldr	r3, [pc, #12]	; (8011fec <MotionFX_CM0P_enable_euler+0x10>)
 8011fde:	791b      	ldrb	r3, [r3, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d001      	beq.n	8011fe8 <MotionFX_CM0P_enable_euler+0xc>
 8011fe4:	4b02      	ldr	r3, [pc, #8]	; (8011ff0 <MotionFX_CM0P_enable_euler+0x14>)
 8011fe6:	7098      	strb	r0, [r3, #2]
 8011fe8:	4770      	bx	lr
 8011fea:	46c0      	nop			; (mov r8, r8)
 8011fec:	200002fc 	.word	0x200002fc
 8011ff0:	20000000 	.word	0x20000000

08011ff4 <MotionFX_CM0P_enable_gbias>:
 8011ff4:	4b03      	ldr	r3, [pc, #12]	; (8012004 <MotionFX_CM0P_enable_gbias+0x10>)
 8011ff6:	791b      	ldrb	r3, [r3, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d002      	beq.n	8012002 <MotionFX_CM0P_enable_gbias+0xe>
 8011ffc:	2320      	movs	r3, #32
 8011ffe:	4a02      	ldr	r2, [pc, #8]	; (8012008 <MotionFX_CM0P_enable_gbias+0x14>)
 8012000:	54d0      	strb	r0, [r2, r3]
 8012002:	4770      	bx	lr
 8012004:	200002fc 	.word	0x200002fc
 8012008:	20000000 	.word	0x20000000

0801200c <MotionFX_CM0P_update>:
 801200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801200e:	4645      	mov	r5, r8
 8012010:	46de      	mov	lr, fp
 8012012:	4657      	mov	r7, sl
 8012014:	464e      	mov	r6, r9
 8012016:	b5e0      	push	{r5, r6, r7, lr}
 8012018:	4da7      	ldr	r5, [pc, #668]	; (80122b8 <MotionFX_CM0P_update+0x2ac>)
 801201a:	0004      	movs	r4, r0
 801201c:	792b      	ldrb	r3, [r5, #4]
 801201e:	b099      	sub	sp, #100	; 0x64
 8012020:	2b00      	cmp	r3, #0
 8012022:	d106      	bne.n	8012032 <MotionFX_CM0P_update+0x26>
 8012024:	b019      	add	sp, #100	; 0x64
 8012026:	bcf0      	pop	{r4, r5, r6, r7}
 8012028:	46bb      	mov	fp, r7
 801202a:	46b2      	mov	sl, r6
 801202c:	46a9      	mov	r9, r5
 801202e:	46a0      	mov	r8, r4
 8012030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012032:	690b      	ldr	r3, [r1, #16]
 8012034:	680f      	ldr	r7, [r1, #0]
 8012036:	469a      	mov	sl, r3
 8012038:	46b8      	mov	r8, r7
 801203a:	694b      	ldr	r3, [r1, #20]
 801203c:	684f      	ldr	r7, [r1, #4]
 801203e:	698e      	ldr	r6, [r1, #24]
 8012040:	46bc      	mov	ip, r7
 8012042:	69c8      	ldr	r0, [r1, #28]
 8012044:	688f      	ldr	r7, [r1, #8]
 8012046:	4699      	mov	r9, r3
 8012048:	6a0b      	ldr	r3, [r1, #32]
 801204a:	68c9      	ldr	r1, [r1, #12]
 801204c:	900b      	str	r0, [sp, #44]	; 0x2c
 801204e:	9104      	str	r1, [sp, #16]
 8012050:	4651      	mov	r1, sl
 8012052:	9105      	str	r1, [sp, #20]
 8012054:	4649      	mov	r1, r9
 8012056:	9106      	str	r1, [sp, #24]
 8012058:	4641      	mov	r1, r8
 801205a:	9107      	str	r1, [sp, #28]
 801205c:	4661      	mov	r1, ip
 801205e:	9108      	str	r1, [sp, #32]
 8012060:	0029      	movs	r1, r5
 8012062:	920d      	str	r2, [sp, #52]	; 0x34
 8012064:	3108      	adds	r1, #8
 8012066:	aa04      	add	r2, sp, #16
 8012068:	a80e      	add	r0, sp, #56	; 0x38
 801206a:	930c      	str	r3, [sp, #48]	; 0x30
 801206c:	9709      	str	r7, [sp, #36]	; 0x24
 801206e:	960a      	str	r6, [sp, #40]	; 0x28
 8012070:	f7fd fc32 	bl	800f8d8 <rotate>
 8012074:	0029      	movs	r1, r5
 8012076:	aa0a      	add	r2, sp, #40	; 0x28
 8012078:	3114      	adds	r1, #20
 801207a:	a814      	add	r0, sp, #80	; 0x50
 801207c:	f7fd fc2c 	bl	800f8d8 <rotate>
 8012080:	0029      	movs	r1, r5
 8012082:	af11      	add	r7, sp, #68	; 0x44
 8012084:	0038      	movs	r0, r7
 8012086:	3120      	adds	r1, #32
 8012088:	aa07      	add	r2, sp, #28
 801208a:	f7fd fc25 	bl	800f8d8 <rotate>
 801208e:	4e8b      	ldr	r6, [pc, #556]	; (80122bc <MotionFX_CM0P_update+0x2b0>)
 8012090:	7833      	ldrb	r3, [r6, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d134      	bne.n	8012100 <MotionFX_CM0P_update+0xf4>
 8012096:	7873      	ldrb	r3, [r6, #1]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d0c3      	beq.n	8012024 <MotionFX_CM0P_update+0x18>
 801209c:	4d88      	ldr	r5, [pc, #544]	; (80122c0 <MotionFX_CM0P_update+0x2b4>)
 801209e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120a0:	0028      	movs	r0, r5
 80120a2:	1c1a      	adds	r2, r3, #0
 80120a4:	a90e      	add	r1, sp, #56	; 0x38
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	f7fd fe90 	bl	800fdcc <update_accel>
 80120ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120ae:	0028      	movs	r0, r5
 80120b0:	1c1a      	adds	r2, r3, #0
 80120b2:	a914      	add	r1, sp, #80	; 0x50
 80120b4:	9301      	str	r3, [sp, #4]
 80120b6:	0027      	movs	r7, r4
 80120b8:	f7ff fac4 	bl	8011644 <update_gyro>
 80120bc:	0028      	movs	r0, r5
 80120be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80120c0:	f7ff fcc0 	bl	8011a44 <update_fusion>
 80120c4:	0029      	movs	r1, r5
 80120c6:	3734      	adds	r7, #52	; 0x34
 80120c8:	2210      	movs	r2, #16
 80120ca:	315c      	adds	r1, #92	; 0x5c
 80120cc:	0038      	movs	r0, r7
 80120ce:	f000 fff7 	bl	80130c0 <memcpy>
 80120d2:	0029      	movs	r1, r5
 80120d4:	0020      	movs	r0, r4
 80120d6:	220c      	movs	r2, #12
 80120d8:	316c      	adds	r1, #108	; 0x6c
 80120da:	3044      	adds	r0, #68	; 0x44
 80120dc:	f000 fff0 	bl	80130c0 <memcpy>
 80120e0:	0029      	movs	r1, r5
 80120e2:	0020      	movs	r0, r4
 80120e4:	220c      	movs	r2, #12
 80120e6:	3178      	adds	r1, #120	; 0x78
 80120e8:	3050      	adds	r0, #80	; 0x50
 80120ea:	f000 ffe9 	bl	80130c0 <memcpy>
 80120ee:	78b3      	ldrb	r3, [r6, #2]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d097      	beq.n	8012024 <MotionFX_CM0P_update+0x18>
 80120f4:	0020      	movs	r0, r4
 80120f6:	0039      	movs	r1, r7
 80120f8:	305c      	adds	r0, #92	; 0x5c
 80120fa:	f7fd fdbd 	bl	800fc78 <quat_2_euler>
 80120fe:	e791      	b.n	8012024 <MotionFX_CM0P_update+0x18>
 8012100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012102:	4d70      	ldr	r5, [pc, #448]	; (80122c4 <MotionFX_CM0P_update+0x2b8>)
 8012104:	1c1a      	adds	r2, r3, #0
 8012106:	0028      	movs	r0, r5
 8012108:	a90e      	add	r1, sp, #56	; 0x38
 801210a:	9301      	str	r3, [sp, #4]
 801210c:	f7fd fe5e 	bl	800fdcc <update_accel>
 8012110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012112:	6971      	ldr	r1, [r6, #20]
 8012114:	1c18      	adds	r0, r3, #0
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	f7ee fe48 	bl	8000dac <__aeabi_fmul>
 801211c:	496a      	ldr	r1, [pc, #424]	; (80122c8 <MotionFX_CM0P_update+0x2bc>)
 801211e:	4680      	mov	r8, r0
 8012120:	f7ee f998 	bl	8000454 <__aeabi_fcmpgt>
 8012124:	2800      	cmp	r0, #0
 8012126:	d000      	beq.n	801212a <MotionFX_CM0P_update+0x11e>
 8012128:	e0ad      	b.n	8012286 <MotionFX_CM0P_update+0x27a>
 801212a:	4640      	mov	r0, r8
 801212c:	4967      	ldr	r1, [pc, #412]	; (80122cc <MotionFX_CM0P_update+0x2c0>)
 801212e:	f7ee fe3d 	bl	8000dac <__aeabi_fmul>
 8012132:	4681      	mov	r9, r0
 8012134:	21d0      	movs	r1, #208	; 0xd0
 8012136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012138:	0589      	lsls	r1, r1, #22
 801213a:	0058      	lsls	r0, r3, #1
 801213c:	0840      	lsrs	r0, r0, #1
 801213e:	4698      	mov	r8, r3
 8012140:	f7ee f974 	bl	800042c <__aeabi_fcmplt>
 8012144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012146:	469a      	mov	sl, r3
 8012148:	2800      	cmp	r0, #0
 801214a:	d000      	beq.n	801214e <MotionFX_CM0P_update+0x142>
 801214c:	e083      	b.n	8012256 <MotionFX_CM0P_update+0x24a>
 801214e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012150:	469b      	mov	fp, r3
 8012152:	4651      	mov	r1, sl
 8012154:	4650      	mov	r0, sl
 8012156:	f7ee fe29 	bl	8000dac <__aeabi_fmul>
 801215a:	4659      	mov	r1, fp
 801215c:	4682      	mov	sl, r0
 801215e:	4658      	mov	r0, fp
 8012160:	f7ee fe24 	bl	8000dac <__aeabi_fmul>
 8012164:	1c01      	adds	r1, r0, #0
 8012166:	4650      	mov	r0, sl
 8012168:	f7ee faba 	bl	80006e0 <__aeabi_fadd>
 801216c:	4641      	mov	r1, r8
 801216e:	4682      	mov	sl, r0
 8012170:	4640      	mov	r0, r8
 8012172:	f7ee fe1b 	bl	8000dac <__aeabi_fmul>
 8012176:	1c01      	adds	r1, r0, #0
 8012178:	4650      	mov	r0, sl
 801217a:	f7ee fab1 	bl	80006e0 <__aeabi_fadd>
 801217e:	4682      	mov	sl, r0
 8012180:	f001 fd2c 	bl	8013bdc <sqrtf>
 8012184:	2385      	movs	r3, #133	; 0x85
 8012186:	5ceb      	ldrb	r3, [r5, r3]
 8012188:	4680      	mov	r8, r0
 801218a:	2000      	movs	r0, #0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d113      	bne.n	80121b8 <MotionFX_CM0P_update+0x1ac>
 8012190:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012192:	4640      	mov	r0, r8
 8012194:	1c19      	adds	r1, r3, #0
 8012196:	9302      	str	r3, [sp, #8]
 8012198:	f7ee ff2e 	bl	8000ff8 <__aeabi_fsub>
 801219c:	4649      	mov	r1, r9
 801219e:	4683      	mov	fp, r0
 80121a0:	f7ee fe04 	bl	8000dac <__aeabi_fmul>
 80121a4:	1c01      	adds	r1, r0, #0
 80121a6:	9003      	str	r0, [sp, #12]
 80121a8:	9802      	ldr	r0, [sp, #8]
 80121aa:	f7ee fa99 	bl	80006e0 <__aeabi_fadd>
 80121ae:	9903      	ldr	r1, [sp, #12]
 80121b0:	4680      	mov	r8, r0
 80121b2:	4658      	mov	r0, fp
 80121b4:	f7ee fdfa 	bl	8000dac <__aeabi_fmul>
 80121b8:	4643      	mov	r3, r8
 80121ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80121bc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80121be:	f7ee fa8f 	bl	80006e0 <__aeabi_fadd>
 80121c2:	4683      	mov	fp, r0
 80121c4:	20fe      	movs	r0, #254	; 0xfe
 80121c6:	4649      	mov	r1, r9
 80121c8:	0580      	lsls	r0, r0, #22
 80121ca:	f7ee ff15 	bl	8000ff8 <__aeabi_fsub>
 80121ce:	1c01      	adds	r1, r0, #0
 80121d0:	4658      	mov	r0, fp
 80121d2:	f7ee fdeb 	bl	8000dac <__aeabi_fmul>
 80121d6:	493e      	ldr	r1, [pc, #248]	; (80122d0 <MotionFX_CM0P_update+0x2c4>)
 80121d8:	6328      	str	r0, [r5, #48]	; 0x30
 80121da:	4681      	mov	r9, r0
 80121dc:	4650      	mov	r0, sl
 80121de:	f7ee f925 	bl	800042c <__aeabi_fcmplt>
 80121e2:	2300      	movs	r3, #0
 80121e4:	469b      	mov	fp, r3
 80121e6:	2800      	cmp	r0, #0
 80121e8:	d105      	bne.n	80121f6 <MotionFX_CM0P_update+0x1ea>
 80121ea:	4650      	mov	r0, sl
 80121ec:	4939      	ldr	r1, [pc, #228]	; (80122d4 <MotionFX_CM0P_update+0x2c8>)
 80121ee:	f7ee f931 	bl	8000454 <__aeabi_fcmpgt>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d04b      	beq.n	801228e <MotionFX_CM0P_update+0x282>
 80121f6:	238d      	movs	r3, #141	; 0x8d
 80121f8:	465a      	mov	r2, fp
 80121fa:	54ea      	strb	r2, [r5, r3]
 80121fc:	002b      	movs	r3, r5
 80121fe:	3334      	adds	r3, #52	; 0x34
 8012200:	cf07      	ldmia	r7!, {r0, r1, r2}
 8012202:	c307      	stmia	r3!, {r0, r1, r2}
 8012204:	9a01      	ldr	r2, [sp, #4]
 8012206:	0028      	movs	r0, r5
 8012208:	a914      	add	r1, sp, #80	; 0x50
 801220a:	f7ff fa1b 	bl	8011644 <update_gyro>
 801220e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012210:	0028      	movs	r0, r5
 8012212:	1c19      	adds	r1, r3, #0
 8012214:	9301      	str	r3, [sp, #4]
 8012216:	f7ff fc15 	bl	8011a44 <update_fusion>
 801221a:	0029      	movs	r1, r5
 801221c:	2210      	movs	r2, #16
 801221e:	315c      	adds	r1, #92	; 0x5c
 8012220:	0020      	movs	r0, r4
 8012222:	f000 ff4d 	bl	80130c0 <memcpy>
 8012226:	0029      	movs	r1, r5
 8012228:	0020      	movs	r0, r4
 801222a:	220c      	movs	r2, #12
 801222c:	316c      	adds	r1, #108	; 0x6c
 801222e:	3010      	adds	r0, #16
 8012230:	f000 ff46 	bl	80130c0 <memcpy>
 8012234:	0029      	movs	r1, r5
 8012236:	0020      	movs	r0, r4
 8012238:	220c      	movs	r2, #12
 801223a:	3178      	adds	r1, #120	; 0x78
 801223c:	301c      	adds	r0, #28
 801223e:	f000 ff3f 	bl	80130c0 <memcpy>
 8012242:	78b3      	ldrb	r3, [r6, #2]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d100      	bne.n	801224a <MotionFX_CM0P_update+0x23e>
 8012248:	e725      	b.n	8012096 <MotionFX_CM0P_update+0x8a>
 801224a:	0020      	movs	r0, r4
 801224c:	0021      	movs	r1, r4
 801224e:	3028      	adds	r0, #40	; 0x28
 8012250:	f7fd fd12 	bl	800fc78 <quat_2_euler>
 8012254:	e71f      	b.n	8012096 <MotionFX_CM0P_update+0x8a>
 8012256:	21d0      	movs	r1, #208	; 0xd0
 8012258:	0058      	lsls	r0, r3, #1
 801225a:	0840      	lsrs	r0, r0, #1
 801225c:	0589      	lsls	r1, r1, #22
 801225e:	f7ee f8e5 	bl	800042c <__aeabi_fcmplt>
 8012262:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012264:	469b      	mov	fp, r3
 8012266:	2800      	cmp	r0, #0
 8012268:	d100      	bne.n	801226c <MotionFX_CM0P_update+0x260>
 801226a:	e772      	b.n	8012152 <MotionFX_CM0P_update+0x146>
 801226c:	21d0      	movs	r1, #208	; 0xd0
 801226e:	0058      	lsls	r0, r3, #1
 8012270:	0840      	lsrs	r0, r0, #1
 8012272:	0589      	lsls	r1, r1, #22
 8012274:	f7ee f8da 	bl	800042c <__aeabi_fcmplt>
 8012278:	2800      	cmp	r0, #0
 801227a:	d100      	bne.n	801227e <MotionFX_CM0P_update+0x272>
 801227c:	e769      	b.n	8012152 <MotionFX_CM0P_update+0x146>
 801227e:	238d      	movs	r3, #141	; 0x8d
 8012280:	2200      	movs	r2, #0
 8012282:	54ea      	strb	r2, [r5, r3]
 8012284:	e7be      	b.n	8012204 <MotionFX_CM0P_update+0x1f8>
 8012286:	23fe      	movs	r3, #254	; 0xfe
 8012288:	059b      	lsls	r3, r3, #22
 801228a:	4699      	mov	r9, r3
 801228c:	e752      	b.n	8012134 <MotionFX_CM0P_update+0x128>
 801228e:	4640      	mov	r0, r8
 8012290:	4911      	ldr	r1, [pc, #68]	; (80122d8 <MotionFX_CM0P_update+0x2cc>)
 8012292:	f7ee f8cb 	bl	800042c <__aeabi_fcmplt>
 8012296:	2800      	cmp	r0, #0
 8012298:	d1ad      	bne.n	80121f6 <MotionFX_CM0P_update+0x1ea>
 801229a:	4640      	mov	r0, r8
 801229c:	490f      	ldr	r1, [pc, #60]	; (80122dc <MotionFX_CM0P_update+0x2d0>)
 801229e:	f7ee f8d9 	bl	8000454 <__aeabi_fcmpgt>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d1a7      	bne.n	80121f6 <MotionFX_CM0P_update+0x1ea>
 80122a6:	4648      	mov	r0, r9
 80122a8:	490d      	ldr	r1, [pc, #52]	; (80122e0 <MotionFX_CM0P_update+0x2d4>)
 80122aa:	f7ee f8c9 	bl	8000440 <__aeabi_fcmple>
 80122ae:	0003      	movs	r3, r0
 80122b0:	1e58      	subs	r0, r3, #1
 80122b2:	4183      	sbcs	r3, r0
 80122b4:	469b      	mov	fp, r3
 80122b6:	e79e      	b.n	80121f6 <MotionFX_CM0P_update+0x1ea>
 80122b8:	200002fc 	.word	0x200002fc
 80122bc:	20000000 	.word	0x20000000
 80122c0:	2000003c 	.word	0x2000003c
 80122c4:	20000a2c 	.word	0x20000a2c
 80122c8:	3c23d70a 	.word	0x3c23d70a
 80122cc:	42c80000 	.word	0x42c80000
 80122d0:	3eb851ec 	.word	0x3eb851ec
 80122d4:	3fb851ed 	.word	0x3fb851ed
 80122d8:	3f19999a 	.word	0x3f19999a
 80122dc:	3f99999a 	.word	0x3f99999a
 80122e0:	3a83126f 	.word	0x3a83126f

080122e4 <MotionFX_CM0P_MagCal_init>:
 80122e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122e6:	4c42      	ldr	r4, [pc, #264]	; (80123f0 <MotionFX_CM0P_MagCal_init+0x10c>)
 80122e8:	7923      	ldrb	r3, [r4, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d001      	beq.n	80122f2 <MotionFX_CM0P_MagCal_init+0xe>
 80122ee:	2900      	cmp	r1, #0
 80122f0:	d100      	bne.n	80122f4 <MotionFX_CM0P_MagCal_init+0x10>
 80122f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122f4:	f7ef f864 	bl	80013c0 <__aeabi_i2f>
 80122f8:	1c01      	adds	r1, r0, #0
 80122fa:	1c06      	adds	r6, r0, #0
 80122fc:	483d      	ldr	r0, [pc, #244]	; (80123f4 <MotionFX_CM0P_MagCal_init+0x110>)
 80122fe:	f7ee fb8d 	bl	8000a1c <__aeabi_fdiv>
 8012302:	0023      	movs	r3, r4
 8012304:	332c      	adds	r3, #44	; 0x2c
 8012306:	6023      	str	r3, [r4, #0]
 8012308:	0023      	movs	r3, r4
 801230a:	3334      	adds	r3, #52	; 0x34
 801230c:	2200      	movs	r2, #0
 801230e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012310:	2334      	movs	r3, #52	; 0x34
 8012312:	4d39      	ldr	r5, [pc, #228]	; (80123f8 <MotionFX_CM0P_MagCal_init+0x114>)
 8012314:	1c07      	adds	r7, r0, #0
 8012316:	4939      	ldr	r1, [pc, #228]	; (80123fc <MotionFX_CM0P_MagCal_init+0x118>)
 8012318:	6325      	str	r5, [r4, #48]	; 0x30
 801231a:	54e2      	strb	r2, [r4, r3]
 801231c:	1c30      	adds	r0, r6, #0
 801231e:	f7ee f899 	bl	8000454 <__aeabi_fcmpgt>
 8012322:	2800      	cmp	r0, #0
 8012324:	d05e      	beq.n	80123e4 <MotionFX_CM0P_MagCal_init+0x100>
 8012326:	23fe      	movs	r3, #254	; 0xfe
 8012328:	059b      	lsls	r3, r3, #22
 801232a:	63a3      	str	r3, [r4, #56]	; 0x38
 801232c:	4b34      	ldr	r3, [pc, #208]	; (8012400 <MotionFX_CM0P_MagCal_init+0x11c>)
 801232e:	26fe      	movs	r6, #254	; 0xfe
 8012330:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012332:	4b34      	ldr	r3, [pc, #208]	; (8012404 <MotionFX_CM0P_MagCal_init+0x120>)
 8012334:	4a34      	ldr	r2, [pc, #208]	; (8012408 <MotionFX_CM0P_MagCal_init+0x124>)
 8012336:	6423      	str	r3, [r4, #64]	; 0x40
 8012338:	4b34      	ldr	r3, [pc, #208]	; (801240c <MotionFX_CM0P_MagCal_init+0x128>)
 801233a:	05b6      	lsls	r6, r6, #22
 801233c:	6463      	str	r3, [r4, #68]	; 0x44
 801233e:	4b34      	ldr	r3, [pc, #208]	; (8012410 <MotionFX_CM0P_MagCal_init+0x12c>)
 8012340:	2100      	movs	r1, #0
 8012342:	64a3      	str	r3, [r4, #72]	; 0x48
 8012344:	4b33      	ldr	r3, [pc, #204]	; (8012414 <MotionFX_CM0P_MagCal_init+0x130>)
 8012346:	6526      	str	r6, [r4, #80]	; 0x50
 8012348:	64e3      	str	r3, [r4, #76]	; 0x4c
 801234a:	4b33      	ldr	r3, [pc, #204]	; (8012418 <MotionFX_CM0P_MagCal_init+0x134>)
 801234c:	6563      	str	r3, [r4, #84]	; 0x54
 801234e:	4b33      	ldr	r3, [pc, #204]	; (801241c <MotionFX_CM0P_MagCal_init+0x138>)
 8012350:	65a3      	str	r3, [r4, #88]	; 0x58
 8012352:	4b33      	ldr	r3, [pc, #204]	; (8012420 <MotionFX_CM0P_MagCal_init+0x13c>)
 8012354:	6623      	str	r3, [r4, #96]	; 0x60
 8012356:	2364      	movs	r3, #100	; 0x64
 8012358:	52e3      	strh	r3, [r4, r3]
 801235a:	4b32      	ldr	r3, [pc, #200]	; (8012424 <MotionFX_CM0P_MagCal_init+0x140>)
 801235c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801235e:	2301      	movs	r3, #1
 8012360:	702b      	strb	r3, [r5, #0]
 8012362:	4b31      	ldr	r3, [pc, #196]	; (8012428 <MotionFX_CM0P_MagCal_init+0x144>)
 8012364:	2400      	movs	r4, #0
 8012366:	50ea      	str	r2, [r5, r3]
 8012368:	3304      	adds	r3, #4
 801236a:	220c      	movs	r2, #12
 801236c:	18e8      	adds	r0, r5, r3
 801236e:	f000 feb0 	bl	80130d2 <memset>
 8012372:	492e      	ldr	r1, [pc, #184]	; (801242c <MotionFX_CM0P_MagCal_init+0x148>)
 8012374:	1c38      	adds	r0, r7, #0
 8012376:	f7ee fd19 	bl	8000dac <__aeabi_fmul>
 801237a:	f001 fb27 	bl	80139cc <ceilf>
 801237e:	f7ee f8cb 	bl	8000518 <__aeabi_f2uiz>
 8012382:	4b2b      	ldr	r3, [pc, #172]	; (8012430 <MotionFX_CM0P_MagCal_init+0x14c>)
 8012384:	492b      	ldr	r1, [pc, #172]	; (8012434 <MotionFX_CM0P_MagCal_init+0x150>)
 8012386:	52e8      	strh	r0, [r5, r3]
 8012388:	4b2b      	ldr	r3, [pc, #172]	; (8012438 <MotionFX_CM0P_MagCal_init+0x154>)
 801238a:	1c38      	adds	r0, r7, #0
 801238c:	52ec      	strh	r4, [r5, r3]
 801238e:	f7ee fd0d 	bl	8000dac <__aeabi_fmul>
 8012392:	f001 fb1b 	bl	80139cc <ceilf>
 8012396:	f7ee f8bf 	bl	8000518 <__aeabi_f2uiz>
 801239a:	239c      	movs	r3, #156	; 0x9c
 801239c:	22b4      	movs	r2, #180	; 0xb4
 801239e:	00db      	lsls	r3, r3, #3
 80123a0:	52e8      	strh	r0, [r5, r3]
 80123a2:	4b26      	ldr	r3, [pc, #152]	; (801243c <MotionFX_CM0P_MagCal_init+0x158>)
 80123a4:	2100      	movs	r1, #0
 80123a6:	52ec      	strh	r4, [r5, r3]
 80123a8:	330e      	adds	r3, #14
 80123aa:	18e8      	adds	r0, r5, r3
 80123ac:	0052      	lsls	r2, r2, #1
 80123ae:	f000 fe90 	bl	80130d2 <memset>
 80123b2:	4b23      	ldr	r3, [pc, #140]	; (8012440 <MotionFX_CM0P_MagCal_init+0x15c>)
 80123b4:	220c      	movs	r2, #12
 80123b6:	2100      	movs	r1, #0
 80123b8:	18e8      	adds	r0, r5, r3
 80123ba:	f000 fe8a 	bl	80130d2 <memset>
 80123be:	4b21      	ldr	r3, [pc, #132]	; (8012444 <MotionFX_CM0P_MagCal_init+0x160>)
 80123c0:	221c      	movs	r2, #28
 80123c2:	18e8      	adds	r0, r5, r3
 80123c4:	2100      	movs	r1, #0
 80123c6:	f000 fe84 	bl	80130d2 <memset>
 80123ca:	23d1      	movs	r3, #209	; 0xd1
 80123cc:	2200      	movs	r2, #0
 80123ce:	00db      	lsls	r3, r3, #3
 80123d0:	50ee      	str	r6, [r5, r3]
 80123d2:	3b10      	subs	r3, #16
 80123d4:	50ee      	str	r6, [r5, r3]
 80123d6:	3b10      	subs	r3, #16
 80123d8:	50ee      	str	r6, [r5, r3]
 80123da:	4b1b      	ldr	r3, [pc, #108]	; (8012448 <MotionFX_CM0P_MagCal_init+0x164>)
 80123dc:	50ee      	str	r6, [r5, r3]
 80123de:	3b34      	subs	r3, #52	; 0x34
 80123e0:	54ea      	strb	r2, [r5, r3]
 80123e2:	e786      	b.n	80122f2 <MotionFX_CM0P_MagCal_init+0xe>
 80123e4:	4919      	ldr	r1, [pc, #100]	; (801244c <MotionFX_CM0P_MagCal_init+0x168>)
 80123e6:	1c30      	adds	r0, r6, #0
 80123e8:	f7ee fce0 	bl	8000dac <__aeabi_fmul>
 80123ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80123ee:	e79d      	b.n	801232c <MotionFX_CM0P_MagCal_init+0x48>
 80123f0:	200002fc 	.word	0x200002fc
 80123f4:	447a0000 	.word	0x447a0000
 80123f8:	2000039c 	.word	0x2000039c
 80123fc:	43f9ffff 	.word	0x43f9ffff
 8012400:	3c23d70a 	.word	0x3c23d70a
 8012404:	38d1b717 	.word	0x38d1b717
 8012408:	ffff0000 	.word	0xffff0000
 801240c:	3db851ec 	.word	0x3db851ec
 8012410:	42440000 	.word	0x42440000
 8012414:	43610000 	.word	0x43610000
 8012418:	3efae148 	.word	0x3efae148
 801241c:	00140032 	.word	0x00140032
 8012420:	3e99999a 	.word	0x3e99999a
 8012424:	40a00000 	.word	0x40a00000
 8012428:	000004cc 	.word	0x000004cc
 801242c:	3dcccccd 	.word	0x3dcccccd
 8012430:	000004dc 	.word	0x000004dc
 8012434:	3d4ccccd 	.word	0x3d4ccccd
 8012438:	000004de 	.word	0x000004de
 801243c:	000004e2 	.word	0x000004e2
 8012440:	0000065c 	.word	0x0000065c
 8012444:	0000066c 	.word	0x0000066c
 8012448:	0000068c 	.word	0x0000068c
 801244c:	3b03126f 	.word	0x3b03126f

08012450 <MotionFX_CM0P_MagCal_run>:
 8012450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012452:	46de      	mov	lr, fp
 8012454:	4657      	mov	r7, sl
 8012456:	464e      	mov	r6, r9
 8012458:	4645      	mov	r5, r8
 801245a:	b5e0      	push	{r5, r6, r7, lr}
 801245c:	4b77      	ldr	r3, [pc, #476]	; (801263c <MotionFX_CM0P_MagCal_run+0x1ec>)
 801245e:	b0a9      	sub	sp, #164	; 0xa4
 8012460:	791b      	ldrb	r3, [r3, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d106      	bne.n	8012474 <MotionFX_CM0P_MagCal_run+0x24>
 8012466:	b029      	add	sp, #164	; 0xa4
 8012468:	bcf0      	pop	{r4, r5, r6, r7}
 801246a:	46bb      	mov	fp, r7
 801246c:	46b2      	mov	sl, r6
 801246e:	46a9      	mov	r9, r5
 8012470:	46a0      	mov	r8, r4
 8012472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012474:	6843      	ldr	r3, [r0, #4]
 8012476:	6882      	ldr	r2, [r0, #8]
 8012478:	6806      	ldr	r6, [r0, #0]
 801247a:	9300      	str	r3, [sp, #0]
 801247c:	9201      	str	r2, [sp, #4]
 801247e:	931a      	str	r3, [sp, #104]	; 0x68
 8012480:	921b      	str	r2, [sp, #108]	; 0x6c
 8012482:	9619      	str	r6, [sp, #100]	; 0x64
 8012484:	ab1f      	add	r3, sp, #124	; 0x7c
 8012486:	aa19      	add	r2, sp, #100	; 0x64
 8012488:	ca13      	ldmia	r2!, {r0, r1, r4}
 801248a:	c313      	stmia	r3!, {r0, r1, r4}
 801248c:	4b6b      	ldr	r3, [pc, #428]	; (801263c <MotionFX_CM0P_MagCal_run+0x1ec>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	685c      	ldr	r4, [r3, #4]
 8012492:	469b      	mov	fp, r3
 8012494:	681d      	ldr	r5, [r3, #0]
 8012496:	7823      	ldrb	r3, [r4, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d000      	beq.n	801249e <MotionFX_CM0P_MagCal_run+0x4e>
 801249c:	e0b4      	b.n	8012608 <MotionFX_CM0P_MagCal_run+0x1b8>
 801249e:	6867      	ldr	r7, [r4, #4]
 80124a0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80124a2:	1c39      	adds	r1, r7, #0
 80124a4:	f7ee fda8 	bl	8000ff8 <__aeabi_fsub>
 80124a8:	686b      	ldr	r3, [r5, #4]
 80124aa:	4681      	mov	r9, r0
 80124ac:	1c19      	adds	r1, r3, #0
 80124ae:	4698      	mov	r8, r3
 80124b0:	f7ee fc7c 	bl	8000dac <__aeabi_fmul>
 80124b4:	4682      	mov	sl, r0
 80124b6:	1c01      	adds	r1, r0, #0
 80124b8:	1c38      	adds	r0, r7, #0
 80124ba:	f7ee f911 	bl	80006e0 <__aeabi_fadd>
 80124be:	6060      	str	r0, [r4, #4]
 80124c0:	20fe      	movs	r0, #254	; 0xfe
 80124c2:	4641      	mov	r1, r8
 80124c4:	0580      	lsls	r0, r0, #22
 80124c6:	f7ee fd97 	bl	8000ff8 <__aeabi_fsub>
 80124ca:	4651      	mov	r1, sl
 80124cc:	1c07      	adds	r7, r0, #0
 80124ce:	4648      	mov	r0, r9
 80124d0:	f7ee fc6c 	bl	8000dac <__aeabi_fmul>
 80124d4:	6921      	ldr	r1, [r4, #16]
 80124d6:	f7ee f903 	bl	80006e0 <__aeabi_fadd>
 80124da:	1c39      	adds	r1, r7, #0
 80124dc:	f7ee fc66 	bl	8000dac <__aeabi_fmul>
 80124e0:	68a3      	ldr	r3, [r4, #8]
 80124e2:	6120      	str	r0, [r4, #16]
 80124e4:	1c19      	adds	r1, r3, #0
 80124e6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80124e8:	9302      	str	r3, [sp, #8]
 80124ea:	f7ee fd85 	bl	8000ff8 <__aeabi_fsub>
 80124ee:	4681      	mov	r9, r0
 80124f0:	1c01      	adds	r1, r0, #0
 80124f2:	4640      	mov	r0, r8
 80124f4:	f7ee fc5a 	bl	8000dac <__aeabi_fmul>
 80124f8:	4682      	mov	sl, r0
 80124fa:	1c01      	adds	r1, r0, #0
 80124fc:	9802      	ldr	r0, [sp, #8]
 80124fe:	f7ee f8ef 	bl	80006e0 <__aeabi_fadd>
 8012502:	4651      	mov	r1, sl
 8012504:	60a0      	str	r0, [r4, #8]
 8012506:	4648      	mov	r0, r9
 8012508:	f7ee fc50 	bl	8000dac <__aeabi_fmul>
 801250c:	6961      	ldr	r1, [r4, #20]
 801250e:	f7ee f8e7 	bl	80006e0 <__aeabi_fadd>
 8012512:	1c39      	adds	r1, r7, #0
 8012514:	f7ee fc4a 	bl	8000dac <__aeabi_fmul>
 8012518:	68e3      	ldr	r3, [r4, #12]
 801251a:	6160      	str	r0, [r4, #20]
 801251c:	1c19      	adds	r1, r3, #0
 801251e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012520:	469a      	mov	sl, r3
 8012522:	f7ee fd69 	bl	8000ff8 <__aeabi_fsub>
 8012526:	4641      	mov	r1, r8
 8012528:	4681      	mov	r9, r0
 801252a:	f7ee fc3f 	bl	8000dac <__aeabi_fmul>
 801252e:	4651      	mov	r1, sl
 8012530:	4680      	mov	r8, r0
 8012532:	f7ee f8d5 	bl	80006e0 <__aeabi_fadd>
 8012536:	4649      	mov	r1, r9
 8012538:	60e0      	str	r0, [r4, #12]
 801253a:	4640      	mov	r0, r8
 801253c:	f7ee fc36 	bl	8000dac <__aeabi_fmul>
 8012540:	69a1      	ldr	r1, [r4, #24]
 8012542:	f7ee f8cd 	bl	80006e0 <__aeabi_fadd>
 8012546:	1c39      	adds	r1, r7, #0
 8012548:	f7ee fc30 	bl	8000dac <__aeabi_fmul>
 801254c:	61a0      	str	r0, [r4, #24]
 801254e:	6921      	ldr	r1, [r4, #16]
 8012550:	69a0      	ldr	r0, [r4, #24]
 8012552:	f7ee f8c5 	bl	80006e0 <__aeabi_fadd>
 8012556:	6961      	ldr	r1, [r4, #20]
 8012558:	f7ee f8c2 	bl	80006e0 <__aeabi_fadd>
 801255c:	239a      	movs	r3, #154	; 0x9a
 801255e:	00db      	lsls	r3, r3, #3
 8012560:	58e1      	ldr	r1, [r4, r3]
 8012562:	4682      	mov	sl, r0
 8012564:	1c30      	adds	r0, r6, #0
 8012566:	f7ee fd47 	bl	8000ff8 <__aeabi_fsub>
 801256a:	4b35      	ldr	r3, [pc, #212]	; (8012640 <MotionFX_CM0P_MagCal_run+0x1f0>)
 801256c:	4681      	mov	r9, r0
 801256e:	58e1      	ldr	r1, [r4, r3]
 8012570:	9800      	ldr	r0, [sp, #0]
 8012572:	f7ee fd41 	bl	8000ff8 <__aeabi_fsub>
 8012576:	239b      	movs	r3, #155	; 0x9b
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	58e1      	ldr	r1, [r4, r3]
 801257c:	4680      	mov	r8, r0
 801257e:	9801      	ldr	r0, [sp, #4]
 8012580:	f7ee fd3a 	bl	8000ff8 <__aeabi_fsub>
 8012584:	4649      	mov	r1, r9
 8012586:	1c07      	adds	r7, r0, #0
 8012588:	4648      	mov	r0, r9
 801258a:	f7ee fc0f 	bl	8000dac <__aeabi_fmul>
 801258e:	4641      	mov	r1, r8
 8012590:	4681      	mov	r9, r0
 8012592:	4640      	mov	r0, r8
 8012594:	f7ee fc0a 	bl	8000dac <__aeabi_fmul>
 8012598:	1c01      	adds	r1, r0, #0
 801259a:	4648      	mov	r0, r9
 801259c:	f7ee f8a0 	bl	80006e0 <__aeabi_fadd>
 80125a0:	1c39      	adds	r1, r7, #0
 80125a2:	4680      	mov	r8, r0
 80125a4:	1c38      	adds	r0, r7, #0
 80125a6:	f7ee fc01 	bl	8000dac <__aeabi_fmul>
 80125aa:	1c01      	adds	r1, r0, #0
 80125ac:	4640      	mov	r0, r8
 80125ae:	f7ee f897 	bl	80006e0 <__aeabi_fadd>
 80125b2:	69e9      	ldr	r1, [r5, #28]
 80125b4:	1c07      	adds	r7, r0, #0
 80125b6:	4650      	mov	r0, sl
 80125b8:	f7ed ff4c 	bl	8000454 <__aeabi_fcmpgt>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d105      	bne.n	80125cc <MotionFX_CM0P_MagCal_run+0x17c>
 80125c0:	6a29      	ldr	r1, [r5, #32]
 80125c2:	1c38      	adds	r0, r7, #0
 80125c4:	f7ed ff46 	bl	8000454 <__aeabi_fcmpgt>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	d02b      	beq.n	8012624 <MotionFX_CM0P_MagCal_run+0x1d4>
 80125cc:	2200      	movs	r2, #0
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <MotionFX_CM0P_MagCal_run+0x1f4>)
 80125d0:	52e2      	strh	r2, [r4, r3]
 80125d2:	3b02      	subs	r3, #2
 80125d4:	5ae2      	ldrh	r2, [r4, r3]
 80125d6:	2300      	movs	r3, #0
 80125d8:	429a      	cmp	r2, r3
 80125da:	d039      	beq.n	8012650 <MotionFX_CM0P_MagCal_run+0x200>
 80125dc:	239a      	movs	r3, #154	; 0x9a
 80125de:	00db      	lsls	r3, r3, #3
 80125e0:	18e0      	adds	r0, r4, r3
 80125e2:	220c      	movs	r2, #12
 80125e4:	a919      	add	r1, sp, #100	; 0x64
 80125e6:	f000 fd6b 	bl	80130c0 <memcpy>
 80125ea:	465b      	mov	r3, fp
 80125ec:	4813      	ldr	r0, [pc, #76]	; (801263c <MotionFX_CM0P_MagCal_run+0x1ec>)
 80125ee:	685c      	ldr	r4, [r3, #4]
 80125f0:	4b15      	ldr	r3, [pc, #84]	; (8012648 <MotionFX_CM0P_MagCal_run+0x1f8>)
 80125f2:	2234      	movs	r2, #52	; 0x34
 80125f4:	18e1      	adds	r1, r4, r3
 80125f6:	3068      	adds	r0, #104	; 0x68
 80125f8:	f000 fd62 	bl	80130c0 <memcpy>
 80125fc:	23cb      	movs	r3, #203	; 0xcb
 80125fe:	00db      	lsls	r3, r3, #3
 8012600:	5ce2      	ldrb	r2, [r4, r3]
 8012602:	4b12      	ldr	r3, [pc, #72]	; (801264c <MotionFX_CM0P_MagCal_run+0x1fc>)
 8012604:	771a      	strb	r2, [r3, #28]
 8012606:	e72e      	b.n	8012466 <MotionFX_CM0P_MagCal_run+0x16>
 8012608:	220c      	movs	r2, #12
 801260a:	a91f      	add	r1, sp, #124	; 0x7c
 801260c:	1d20      	adds	r0, r4, #4
 801260e:	f000 fd57 	bl	80130c0 <memcpy>
 8012612:	0020      	movs	r0, r4
 8012614:	220c      	movs	r2, #12
 8012616:	2100      	movs	r1, #0
 8012618:	3010      	adds	r0, #16
 801261a:	f000 fd5a 	bl	80130d2 <memset>
 801261e:	2300      	movs	r3, #0
 8012620:	7023      	strb	r3, [r4, #0]
 8012622:	e794      	b.n	801254e <MotionFX_CM0P_MagCal_run+0xfe>
 8012624:	229c      	movs	r2, #156	; 0x9c
 8012626:	4907      	ldr	r1, [pc, #28]	; (8012644 <MotionFX_CM0P_MagCal_run+0x1f4>)
 8012628:	00d2      	lsls	r2, r2, #3
 801262a:	5a63      	ldrh	r3, [r4, r1]
 801262c:	5aa2      	ldrh	r2, [r4, r2]
 801262e:	4293      	cmp	r3, r2
 8012630:	d2d2      	bcs.n	80125d8 <MotionFX_CM0P_MagCal_run+0x188>
 8012632:	3301      	adds	r3, #1
 8012634:	b29b      	uxth	r3, r3
 8012636:	5263      	strh	r3, [r4, r1]
 8012638:	e7ce      	b.n	80125d8 <MotionFX_CM0P_MagCal_run+0x188>
 801263a:	46c0      	nop			; (mov r8, r8)
 801263c:	200002fc 	.word	0x200002fc
 8012640:	000004d4 	.word	0x000004d4
 8012644:	000004e2 	.word	0x000004e2
 8012648:	0000065c 	.word	0x0000065c
 801264c:	2000037c 	.word	0x2000037c
 8012650:	23cb      	movs	r3, #203	; 0xcb
 8012652:	00db      	lsls	r3, r3, #3
 8012654:	5ce3      	ldrb	r3, [r4, r3]
 8012656:	2b01      	cmp	r3, #1
 8012658:	d900      	bls.n	801265c <MotionFX_CM0P_MagCal_run+0x20c>
 801265a:	e167      	b.n	801292c <MotionFX_CM0P_MagCal_run+0x4dc>
 801265c:	4650      	mov	r0, sl
 801265e:	68a9      	ldr	r1, [r5, #8]
 8012660:	f7ed fef8 	bl	8000454 <__aeabi_fcmpgt>
 8012664:	2800      	cmp	r0, #0
 8012666:	d0b9      	beq.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 8012668:	68e9      	ldr	r1, [r5, #12]
 801266a:	1c38      	adds	r0, r7, #0
 801266c:	f7ed fef2 	bl	8000454 <__aeabi_fcmpgt>
 8012670:	2800      	cmp	r0, #0
 8012672:	d0b3      	beq.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 8012674:	4be5      	ldr	r3, [pc, #916]	; (8012a0c <MotionFX_CM0P_MagCal_run+0x5bc>)
 8012676:	469a      	mov	sl, r3
 8012678:	5ae3      	ldrh	r3, [r4, r3]
 801267a:	9302      	str	r3, [sp, #8]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d100      	bne.n	8012682 <MotionFX_CM0P_MagCal_run+0x232>
 8012680:	e1b1      	b.n	80129e6 <MotionFX_CM0P_MagCal_run+0x596>
 8012682:	4be3      	ldr	r3, [pc, #908]	; (8012a10 <MotionFX_CM0P_MagCal_run+0x5c0>)
 8012684:	1c30      	adds	r0, r6, #0
 8012686:	5ee3      	ldrsh	r3, [r4, r3]
 8012688:	005f      	lsls	r7, r3, #1
 801268a:	18ff      	adds	r7, r7, r3
 801268c:	00bf      	lsls	r7, r7, #2
 801268e:	371c      	adds	r7, #28
 8012690:	19e7      	adds	r7, r4, r7
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	f7ee fcb0 	bl	8000ff8 <__aeabi_fsub>
 8012698:	6879      	ldr	r1, [r7, #4]
 801269a:	4681      	mov	r9, r0
 801269c:	9800      	ldr	r0, [sp, #0]
 801269e:	f7ee fcab 	bl	8000ff8 <__aeabi_fsub>
 80126a2:	68b9      	ldr	r1, [r7, #8]
 80126a4:	4680      	mov	r8, r0
 80126a6:	9801      	ldr	r0, [sp, #4]
 80126a8:	f7ee fca6 	bl	8000ff8 <__aeabi_fsub>
 80126ac:	4649      	mov	r1, r9
 80126ae:	1c07      	adds	r7, r0, #0
 80126b0:	4648      	mov	r0, r9
 80126b2:	f7ee fb7b 	bl	8000dac <__aeabi_fmul>
 80126b6:	4641      	mov	r1, r8
 80126b8:	4681      	mov	r9, r0
 80126ba:	4640      	mov	r0, r8
 80126bc:	f7ee fb76 	bl	8000dac <__aeabi_fmul>
 80126c0:	1c01      	adds	r1, r0, #0
 80126c2:	4648      	mov	r0, r9
 80126c4:	f7ee f80c 	bl	80006e0 <__aeabi_fadd>
 80126c8:	1c39      	adds	r1, r7, #0
 80126ca:	4680      	mov	r8, r0
 80126cc:	1c38      	adds	r0, r7, #0
 80126ce:	f7ee fb6d 	bl	8000dac <__aeabi_fmul>
 80126d2:	1c01      	adds	r1, r0, #0
 80126d4:	4640      	mov	r0, r8
 80126d6:	f7ee f803 	bl	80006e0 <__aeabi_fadd>
 80126da:	6969      	ldr	r1, [r5, #20]
 80126dc:	1c07      	adds	r7, r0, #0
 80126de:	f7ed feb9 	bl	8000454 <__aeabi_fcmpgt>
 80126e2:	2800      	cmp	r0, #0
 80126e4:	d01b      	beq.n	801271e <MotionFX_CM0P_MagCal_run+0x2ce>
 80126e6:	69a9      	ldr	r1, [r5, #24]
 80126e8:	1c38      	adds	r0, r7, #0
 80126ea:	f7ed fe9f 	bl	800042c <__aeabi_fcmplt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d100      	bne.n	80126f4 <MotionFX_CM0P_MagCal_run+0x2a4>
 80126f2:	e773      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 80126f4:	4652      	mov	r2, sl
 80126f6:	4bc7      	ldr	r3, [pc, #796]	; (8012a14 <MotionFX_CM0P_MagCal_run+0x5c4>)
 80126f8:	2100      	movs	r1, #0
 80126fa:	50a3      	str	r3, [r4, r2]
 80126fc:	239e      	movs	r3, #158	; 0x9e
 80126fe:	22b4      	movs	r2, #180	; 0xb4
 8012700:	00db      	lsls	r3, r3, #3
 8012702:	18e0      	adds	r0, r4, r3
 8012704:	0052      	lsls	r2, r2, #1
 8012706:	f000 fce4 	bl	80130d2 <memset>
 801270a:	465b      	mov	r3, fp
 801270c:	685c      	ldr	r4, [r3, #4]
 801270e:	4653      	mov	r3, sl
 8012710:	5ae3      	ldrh	r3, [r4, r3]
 8012712:	9302      	str	r3, [sp, #8]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d100      	bne.n	801271a <MotionFX_CM0P_MagCal_run+0x2ca>
 8012718:	e163      	b.n	80129e2 <MotionFX_CM0P_MagCal_run+0x592>
 801271a:	465b      	mov	r3, fp
 801271c:	681d      	ldr	r5, [r3, #0]
 801271e:	6929      	ldr	r1, [r5, #16]
 8012720:	1c38      	adds	r0, r7, #0
 8012722:	f7ed fe97 	bl	8000454 <__aeabi_fcmpgt>
 8012726:	2800      	cmp	r0, #0
 8012728:	d100      	bne.n	801272c <MotionFX_CM0P_MagCal_run+0x2dc>
 801272a:	e757      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 801272c:	69a9      	ldr	r1, [r5, #24]
 801272e:	1c38      	adds	r0, r7, #0
 8012730:	f7ed fe7c 	bl	800042c <__aeabi_fcmplt>
 8012734:	2800      	cmp	r0, #0
 8012736:	d100      	bne.n	801273a <MotionFX_CM0P_MagCal_run+0x2ea>
 8012738:	e750      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 801273a:	4fb5      	ldr	r7, [pc, #724]	; (8012a10 <MotionFX_CM0P_MagCal_run+0x5c0>)
 801273c:	2164      	movs	r1, #100	; 0x64
 801273e:	5fe0      	ldrsh	r0, [r4, r7]
 8012740:	3001      	adds	r0, #1
 8012742:	f7ed fe5b 	bl	80003fc <__aeabi_idivmod>
 8012746:	4bb4      	ldr	r3, [pc, #720]	; (8012a18 <MotionFX_CM0P_MagCal_run+0x5c8>)
 8012748:	9103      	str	r1, [sp, #12]
 801274a:	58e3      	ldr	r3, [r4, r3]
 801274c:	53e1      	strh	r1, [r4, r7]
 801274e:	1c30      	adds	r0, r6, #0
 8012750:	1c19      	adds	r1, r3, #0
 8012752:	9304      	str	r3, [sp, #16]
 8012754:	f7ee fc50 	bl	8000ff8 <__aeabi_fsub>
 8012758:	239d      	movs	r3, #157	; 0x9d
 801275a:	00db      	lsls	r3, r3, #3
 801275c:	58e3      	ldr	r3, [r4, r3]
 801275e:	1c06      	adds	r6, r0, #0
 8012760:	1c19      	adds	r1, r3, #0
 8012762:	9800      	ldr	r0, [sp, #0]
 8012764:	9305      	str	r3, [sp, #20]
 8012766:	f7ee fc47 	bl	8000ff8 <__aeabi_fsub>
 801276a:	4bac      	ldr	r3, [pc, #688]	; (8012a1c <MotionFX_CM0P_MagCal_run+0x5cc>)
 801276c:	4680      	mov	r8, r0
 801276e:	58e3      	ldr	r3, [r4, r3]
 8012770:	9801      	ldr	r0, [sp, #4]
 8012772:	1c19      	adds	r1, r3, #0
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	f7ee fc3f 	bl	8000ff8 <__aeabi_fsub>
 801277a:	782b      	ldrb	r3, [r5, #0]
 801277c:	4681      	mov	r9, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d000      	beq.n	8012784 <MotionFX_CM0P_MagCal_run+0x334>
 8012782:	e163      	b.n	8012a4c <MotionFX_CM0P_MagCal_run+0x5fc>
 8012784:	4643      	mov	r3, r8
 8012786:	9320      	str	r3, [sp, #128]	; 0x80
 8012788:	23fe      	movs	r3, #254	; 0xfe
 801278a:	9021      	str	r0, [sp, #132]	; 0x84
 801278c:	059b      	lsls	r3, r3, #22
 801278e:	1c31      	adds	r1, r6, #0
 8012790:	1c30      	adds	r0, r6, #0
 8012792:	9322      	str	r3, [sp, #136]	; 0x88
 8012794:	f7ee fb0a 	bl	8000dac <__aeabi_fmul>
 8012798:	4641      	mov	r1, r8
 801279a:	1c05      	adds	r5, r0, #0
 801279c:	4640      	mov	r0, r8
 801279e:	f7ee fb05 	bl	8000dac <__aeabi_fmul>
 80127a2:	4649      	mov	r1, r9
 80127a4:	4682      	mov	sl, r0
 80127a6:	4648      	mov	r0, r9
 80127a8:	f7ee fb00 	bl	8000dac <__aeabi_fmul>
 80127ac:	4651      	mov	r1, sl
 80127ae:	1c07      	adds	r7, r0, #0
 80127b0:	1c28      	adds	r0, r5, #0
 80127b2:	f7ed ff95 	bl	80006e0 <__aeabi_fadd>
 80127b6:	1c39      	adds	r1, r7, #0
 80127b8:	9701      	str	r7, [sp, #4]
 80127ba:	f7ed ff91 	bl	80006e0 <__aeabi_fadd>
 80127be:	1c29      	adds	r1, r5, #0
 80127c0:	259e      	movs	r5, #158	; 0x9e
 80127c2:	00ed      	lsls	r5, r5, #3
 80127c4:	1c07      	adds	r7, r0, #0
 80127c6:	5960      	ldr	r0, [r4, r5]
 80127c8:	f7ed ff8a 	bl	80006e0 <__aeabi_fadd>
 80127cc:	4641      	mov	r1, r8
 80127ce:	5160      	str	r0, [r4, r5]
 80127d0:	9006      	str	r0, [sp, #24]
 80127d2:	1c30      	adds	r0, r6, #0
 80127d4:	f7ee faea 	bl	8000dac <__aeabi_fmul>
 80127d8:	4d91      	ldr	r5, [pc, #580]	; (8012a20 <MotionFX_CM0P_MagCal_run+0x5d0>)
 80127da:	1c01      	adds	r1, r0, #0
 80127dc:	5960      	ldr	r0, [r4, r5]
 80127de:	f7ed ff7f 	bl	80006e0 <__aeabi_fadd>
 80127e2:	4649      	mov	r1, r9
 80127e4:	5160      	str	r0, [r4, r5]
 80127e6:	9007      	str	r0, [sp, #28]
 80127e8:	1c30      	adds	r0, r6, #0
 80127ea:	f7ee fadf 	bl	8000dac <__aeabi_fmul>
 80127ee:	3504      	adds	r5, #4
 80127f0:	1c01      	adds	r1, r0, #0
 80127f2:	5960      	ldr	r0, [r4, r5]
 80127f4:	f7ed ff74 	bl	80006e0 <__aeabi_fadd>
 80127f8:	5160      	str	r0, [r4, r5]
 80127fa:	4d8a      	ldr	r5, [pc, #552]	; (8012a24 <MotionFX_CM0P_MagCal_run+0x5d4>)
 80127fc:	9008      	str	r0, [sp, #32]
 80127fe:	1c31      	adds	r1, r6, #0
 8012800:	5960      	ldr	r0, [r4, r5]
 8012802:	f7ed ff6d 	bl	80006e0 <__aeabi_fadd>
 8012806:	1c39      	adds	r1, r7, #0
 8012808:	5160      	str	r0, [r4, r5]
 801280a:	9009      	str	r0, [sp, #36]	; 0x24
 801280c:	1c30      	adds	r0, r6, #0
 801280e:	f7ee facd 	bl	8000dac <__aeabi_fmul>
 8012812:	3504      	adds	r5, #4
 8012814:	1c01      	adds	r1, r0, #0
 8012816:	5960      	ldr	r0, [r4, r5]
 8012818:	f7ed ff62 	bl	80006e0 <__aeabi_fadd>
 801281c:	5160      	str	r0, [r4, r5]
 801281e:	4d82      	ldr	r5, [pc, #520]	; (8012a28 <MotionFX_CM0P_MagCal_run+0x5d8>)
 8012820:	4651      	mov	r1, sl
 8012822:	900a      	str	r0, [sp, #40]	; 0x28
 8012824:	5960      	ldr	r0, [r4, r5]
 8012826:	f7ed ff5b 	bl	80006e0 <__aeabi_fadd>
 801282a:	4649      	mov	r1, r9
 801282c:	5160      	str	r0, [r4, r5]
 801282e:	900b      	str	r0, [sp, #44]	; 0x2c
 8012830:	4640      	mov	r0, r8
 8012832:	f7ee fabb 	bl	8000dac <__aeabi_fmul>
 8012836:	3504      	adds	r5, #4
 8012838:	1c01      	adds	r1, r0, #0
 801283a:	5960      	ldr	r0, [r4, r5]
 801283c:	f7ed ff50 	bl	80006e0 <__aeabi_fadd>
 8012840:	5160      	str	r0, [r4, r5]
 8012842:	4d7a      	ldr	r5, [pc, #488]	; (8012a2c <MotionFX_CM0P_MagCal_run+0x5dc>)
 8012844:	4641      	mov	r1, r8
 8012846:	900c      	str	r0, [sp, #48]	; 0x30
 8012848:	5960      	ldr	r0, [r4, r5]
 801284a:	f7ed ff49 	bl	80006e0 <__aeabi_fadd>
 801284e:	1c39      	adds	r1, r7, #0
 8012850:	5160      	str	r0, [r4, r5]
 8012852:	900d      	str	r0, [sp, #52]	; 0x34
 8012854:	4640      	mov	r0, r8
 8012856:	f7ee faa9 	bl	8000dac <__aeabi_fmul>
 801285a:	3504      	adds	r5, #4
 801285c:	1c01      	adds	r1, r0, #0
 801285e:	5960      	ldr	r0, [r4, r5]
 8012860:	f7ed ff3e 	bl	80006e0 <__aeabi_fadd>
 8012864:	5160      	str	r0, [r4, r5]
 8012866:	3520      	adds	r5, #32
 8012868:	9901      	ldr	r1, [sp, #4]
 801286a:	900e      	str	r0, [sp, #56]	; 0x38
 801286c:	5960      	ldr	r0, [r4, r5]
 801286e:	f7ed ff37 	bl	80006e0 <__aeabi_fadd>
 8012872:	5160      	str	r0, [r4, r5]
 8012874:	4d6e      	ldr	r5, [pc, #440]	; (8012a30 <MotionFX_CM0P_MagCal_run+0x5e0>)
 8012876:	4649      	mov	r1, r9
 8012878:	9001      	str	r0, [sp, #4]
 801287a:	5960      	ldr	r0, [r4, r5]
 801287c:	f7ed ff30 	bl	80006e0 <__aeabi_fadd>
 8012880:	1c39      	adds	r1, r7, #0
 8012882:	5160      	str	r0, [r4, r5]
 8012884:	900f      	str	r0, [sp, #60]	; 0x3c
 8012886:	4648      	mov	r0, r9
 8012888:	f7ee fa90 	bl	8000dac <__aeabi_fmul>
 801288c:	3504      	adds	r5, #4
 801288e:	1c01      	adds	r1, r0, #0
 8012890:	5960      	ldr	r0, [r4, r5]
 8012892:	f7ed ff25 	bl	80006e0 <__aeabi_fadd>
 8012896:	21fe      	movs	r1, #254	; 0xfe
 8012898:	5160      	str	r0, [r4, r5]
 801289a:	4d66      	ldr	r5, [pc, #408]	; (8012a34 <MotionFX_CM0P_MagCal_run+0x5e4>)
 801289c:	9010      	str	r0, [sp, #64]	; 0x40
 801289e:	0589      	lsls	r1, r1, #22
 80128a0:	5960      	ldr	r0, [r4, r5]
 80128a2:	f7ed ff1d 	bl	80006e0 <__aeabi_fadd>
 80128a6:	5160      	str	r0, [r4, r5]
 80128a8:	3504      	adds	r5, #4
 80128aa:	9011      	str	r0, [sp, #68]	; 0x44
 80128ac:	1c39      	adds	r1, r7, #0
 80128ae:	5960      	ldr	r0, [r4, r5]
 80128b0:	f7ed ff16 	bl	80006e0 <__aeabi_fadd>
 80128b4:	9b02      	ldr	r3, [sp, #8]
 80128b6:	9012      	str	r0, [sp, #72]	; 0x48
 80128b8:	5160      	str	r0, [r4, r5]
 80128ba:	2b64      	cmp	r3, #100	; 0x64
 80128bc:	d100      	bne.n	80128c0 <MotionFX_CM0P_MagCal_run+0x470>
 80128be:	e2d5      	b.n	8012e6c <MotionFX_CM0P_MagCal_run+0xa1c>
 80128c0:	9b02      	ldr	r3, [sp, #8]
 80128c2:	2b63      	cmp	r3, #99	; 0x63
 80128c4:	d803      	bhi.n	80128ce <MotionFX_CM0P_MagCal_run+0x47e>
 80128c6:	001a      	movs	r2, r3
 80128c8:	4b50      	ldr	r3, [pc, #320]	; (8012a0c <MotionFX_CM0P_MagCal_run+0x5bc>)
 80128ca:	3201      	adds	r2, #1
 80128cc:	52e2      	strh	r2, [r4, r3]
 80128ce:	9b03      	ldr	r3, [sp, #12]
 80128d0:	005b      	lsls	r3, r3, #1
 80128d2:	469a      	mov	sl, r3
 80128d4:	9b03      	ldr	r3, [sp, #12]
 80128d6:	220c      	movs	r2, #12
 80128d8:	4453      	add	r3, sl
 80128da:	0098      	lsls	r0, r3, #2
 80128dc:	301c      	adds	r0, #28
 80128de:	1820      	adds	r0, r4, r0
 80128e0:	a919      	add	r1, sp, #100	; 0x64
 80128e2:	f000 fbed 	bl	80130c0 <memcpy>
 80128e6:	465b      	mov	r3, fp
 80128e8:	4d48      	ldr	r5, [pc, #288]	; (8012a0c <MotionFX_CM0P_MagCal_run+0x5bc>)
 80128ea:	685c      	ldr	r4, [r3, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	5b62      	ldrh	r2, [r4, r5]
 80128f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d200      	bcs.n	80128f8 <MotionFX_CM0P_MagCal_run+0x4a8>
 80128f6:	e671      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 80128f8:	26cb      	movs	r6, #203	; 0xcb
 80128fa:	00f6      	lsls	r6, r6, #3
 80128fc:	5da3      	ldrb	r3, [r4, r6]
 80128fe:	2b02      	cmp	r3, #2
 8012900:	d900      	bls.n	8012904 <MotionFX_CM0P_MagCal_run+0x4b4>
 8012902:	e66b      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 8012904:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012906:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012908:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801290a:	f7fd fb2f 	bl	800ff6c <calibrate>
 801290e:	465b      	mov	r3, fp
 8012910:	685c      	ldr	r4, [r3, #4]
 8012912:	2800      	cmp	r0, #0
 8012914:	d100      	bne.n	8012918 <MotionFX_CM0P_MagCal_run+0x4c8>
 8012916:	e661      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 8012918:	5b63      	ldrh	r3, [r4, r5]
 801291a:	3b64      	subs	r3, #100	; 0x64
 801291c:	425a      	negs	r2, r3
 801291e:	4153      	adcs	r3, r2
 8012920:	2200      	movs	r2, #0
 8012922:	3302      	adds	r3, #2
 8012924:	55a3      	strb	r3, [r4, r6]
 8012926:	4b44      	ldr	r3, [pc, #272]	; (8012a38 <MotionFX_CM0P_MagCal_run+0x5e8>)
 8012928:	52e2      	strh	r2, [r4, r3]
 801292a:	e657      	b.n	80125dc <MotionFX_CM0P_MagCal_run+0x18c>
 801292c:	220c      	movs	r2, #12
 801292e:	2100      	movs	r1, #0
 8012930:	a81c      	add	r0, sp, #112	; 0x70
 8012932:	f000 fbce 	bl	80130d2 <memset>
 8012936:	782b      	ldrb	r3, [r5, #0]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d100      	bne.n	801293e <MotionFX_CM0P_MagCal_run+0x4ee>
 801293c:	e219      	b.n	8012d72 <MotionFX_CM0P_MagCal_run+0x922>
 801293e:	4b3f      	ldr	r3, [pc, #252]	; (8012a3c <MotionFX_CM0P_MagCal_run+0x5ec>)
 8012940:	1c30      	adds	r0, r6, #0
 8012942:	58e1      	ldr	r1, [r4, r3]
 8012944:	f7ee fb58 	bl	8000ff8 <__aeabi_fsub>
 8012948:	23cc      	movs	r3, #204	; 0xcc
 801294a:	00db      	lsls	r3, r3, #3
 801294c:	58e1      	ldr	r1, [r4, r3]
 801294e:	901c      	str	r0, [sp, #112]	; 0x70
 8012950:	9800      	ldr	r0, [sp, #0]
 8012952:	f7ee fb51 	bl	8000ff8 <__aeabi_fsub>
 8012956:	4b3a      	ldr	r3, [pc, #232]	; (8012a40 <MotionFX_CM0P_MagCal_run+0x5f0>)
 8012958:	901d      	str	r0, [sp, #116]	; 0x74
 801295a:	58e1      	ldr	r1, [r4, r3]
 801295c:	9801      	ldr	r0, [sp, #4]
 801295e:	f7ee fb4b 	bl	8000ff8 <__aeabi_fsub>
 8012962:	901e      	str	r0, [sp, #120]	; 0x78
 8012964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012966:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012968:	4699      	mov	r9, r3
 801296a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801296c:	1c08      	adds	r0, r1, #0
 801296e:	4698      	mov	r8, r3
 8012970:	f7ee fa1c 	bl	8000dac <__aeabi_fmul>
 8012974:	4649      	mov	r1, r9
 8012976:	9002      	str	r0, [sp, #8]
 8012978:	4648      	mov	r0, r9
 801297a:	f7ee fa17 	bl	8000dac <__aeabi_fmul>
 801297e:	1c01      	adds	r1, r0, #0
 8012980:	9802      	ldr	r0, [sp, #8]
 8012982:	f7ed fead 	bl	80006e0 <__aeabi_fadd>
 8012986:	4641      	mov	r1, r8
 8012988:	4681      	mov	r9, r0
 801298a:	4640      	mov	r0, r8
 801298c:	f7ee fa0e 	bl	8000dac <__aeabi_fmul>
 8012990:	1c01      	adds	r1, r0, #0
 8012992:	4648      	mov	r0, r9
 8012994:	f7ed fea4 	bl	80006e0 <__aeabi_fadd>
 8012998:	f001 f920 	bl	8013bdc <sqrtf>
 801299c:	4b29      	ldr	r3, [pc, #164]	; (8012a44 <MotionFX_CM0P_MagCal_run+0x5f4>)
 801299e:	58e1      	ldr	r1, [r4, r3]
 80129a0:	f7ee fb2a 	bl	8000ff8 <__aeabi_fsub>
 80129a4:	0040      	lsls	r0, r0, #1
 80129a6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80129a8:	0840      	lsrs	r0, r0, #1
 80129aa:	f7ed fd3f 	bl	800042c <__aeabi_fcmplt>
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d00d      	beq.n	80129ce <MotionFX_CM0P_MagCal_run+0x57e>
 80129b2:	2200      	movs	r2, #0
 80129b4:	4b20      	ldr	r3, [pc, #128]	; (8012a38 <MotionFX_CM0P_MagCal_run+0x5e8>)
 80129b6:	52e2      	strh	r2, [r4, r3]
 80129b8:	4b23      	ldr	r3, [pc, #140]	; (8012a48 <MotionFX_CM0P_MagCal_run+0x5f8>)
 80129ba:	5ae2      	ldrh	r2, [r4, r3]
 80129bc:	2300      	movs	r3, #0
 80129be:	429a      	cmp	r2, r3
 80129c0:	d000      	beq.n	80129c4 <MotionFX_CM0P_MagCal_run+0x574>
 80129c2:	e64b      	b.n	801265c <MotionFX_CM0P_MagCal_run+0x20c>
 80129c4:	23cb      	movs	r3, #203	; 0xcb
 80129c6:	2201      	movs	r2, #1
 80129c8:	00db      	lsls	r3, r3, #3
 80129ca:	54e2      	strb	r2, [r4, r3]
 80129cc:	e646      	b.n	801265c <MotionFX_CM0P_MagCal_run+0x20c>
 80129ce:	491a      	ldr	r1, [pc, #104]	; (8012a38 <MotionFX_CM0P_MagCal_run+0x5e8>)
 80129d0:	4a1d      	ldr	r2, [pc, #116]	; (8012a48 <MotionFX_CM0P_MagCal_run+0x5f8>)
 80129d2:	5a63      	ldrh	r3, [r4, r1]
 80129d4:	5aa2      	ldrh	r2, [r4, r2]
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d2f1      	bcs.n	80129be <MotionFX_CM0P_MagCal_run+0x56e>
 80129da:	3301      	adds	r3, #1
 80129dc:	b29b      	uxth	r3, r3
 80129de:	5263      	strh	r3, [r4, r1]
 80129e0:	e7ed      	b.n	80129be <MotionFX_CM0P_MagCal_run+0x56e>
 80129e2:	465b      	mov	r3, fp
 80129e4:	681d      	ldr	r5, [r3, #0]
 80129e6:	1c30      	adds	r0, r6, #0
 80129e8:	f001 f89a 	bl	8013b20 <truncf>
 80129ec:	4b0a      	ldr	r3, [pc, #40]	; (8012a18 <MotionFX_CM0P_MagCal_run+0x5c8>)
 80129ee:	50e0      	str	r0, [r4, r3]
 80129f0:	9800      	ldr	r0, [sp, #0]
 80129f2:	f001 f895 	bl	8013b20 <truncf>
 80129f6:	239d      	movs	r3, #157	; 0x9d
 80129f8:	00db      	lsls	r3, r3, #3
 80129fa:	50e0      	str	r0, [r4, r3]
 80129fc:	9801      	ldr	r0, [sp, #4]
 80129fe:	f001 f88f 	bl	8013b20 <truncf>
 8012a02:	4b06      	ldr	r3, [pc, #24]	; (8012a1c <MotionFX_CM0P_MagCal_run+0x5cc>)
 8012a04:	50e0      	str	r0, [r4, r3]
 8012a06:	2300      	movs	r3, #0
 8012a08:	9302      	str	r3, [sp, #8]
 8012a0a:	e696      	b.n	801273a <MotionFX_CM0P_MagCal_run+0x2ea>
 8012a0c:	000004cc 	.word	0x000004cc
 8012a10:	000004ce 	.word	0x000004ce
 8012a14:	ffff0000 	.word	0xffff0000
 8012a18:	000004e4 	.word	0x000004e4
 8012a1c:	000004ec 	.word	0x000004ec
 8012a20:	000004f4 	.word	0x000004f4
 8012a24:	000004fc 	.word	0x000004fc
 8012a28:	0000051c 	.word	0x0000051c
 8012a2c:	00000524 	.word	0x00000524
 8012a30:	0000054c 	.word	0x0000054c
 8012a34:	00000574 	.word	0x00000574
 8012a38:	000004de 	.word	0x000004de
 8012a3c:	0000065c 	.word	0x0000065c
 8012a40:	00000664 	.word	0x00000664
 8012a44:	0000068c 	.word	0x0000068c
 8012a48:	000004dc 	.word	0x000004dc
 8012a4c:	1c31      	adds	r1, r6, #0
 8012a4e:	1c30      	adds	r0, r6, #0
 8012a50:	f7ee f9ac 	bl	8000dac <__aeabi_fmul>
 8012a54:	4641      	mov	r1, r8
 8012a56:	901f      	str	r0, [sp, #124]	; 0x7c
 8012a58:	1c07      	adds	r7, r0, #0
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	f7ee f9a6 	bl	8000dac <__aeabi_fmul>
 8012a60:	4649      	mov	r1, r9
 8012a62:	9020      	str	r0, [sp, #128]	; 0x80
 8012a64:	4648      	mov	r0, r9
 8012a66:	f7ee f9a1 	bl	8000dac <__aeabi_fmul>
 8012a6a:	1c31      	adds	r1, r6, #0
 8012a6c:	9021      	str	r0, [sp, #132]	; 0x84
 8012a6e:	1c30      	adds	r0, r6, #0
 8012a70:	f7ed fe36 	bl	80006e0 <__aeabi_fadd>
 8012a74:	4641      	mov	r1, r8
 8012a76:	1c05      	adds	r5, r0, #0
 8012a78:	9025      	str	r0, [sp, #148]	; 0x94
 8012a7a:	4640      	mov	r0, r8
 8012a7c:	f7ed fe30 	bl	80006e0 <__aeabi_fadd>
 8012a80:	4649      	mov	r1, r9
 8012a82:	1c06      	adds	r6, r0, #0
 8012a84:	9026      	str	r0, [sp, #152]	; 0x98
 8012a86:	4648      	mov	r0, r9
 8012a88:	f7ed fe2a 	bl	80006e0 <__aeabi_fadd>
 8012a8c:	1c29      	adds	r1, r5, #0
 8012a8e:	9027      	str	r0, [sp, #156]	; 0x9c
 8012a90:	4640      	mov	r0, r8
 8012a92:	f7ee f98b 	bl	8000dac <__aeabi_fmul>
 8012a96:	1c29      	adds	r1, r5, #0
 8012a98:	9022      	str	r0, [sp, #136]	; 0x88
 8012a9a:	4648      	mov	r0, r9
 8012a9c:	f7ee f986 	bl	8000dac <__aeabi_fmul>
 8012aa0:	1c31      	adds	r1, r6, #0
 8012aa2:	9023      	str	r0, [sp, #140]	; 0x8c
 8012aa4:	4648      	mov	r0, r9
 8012aa6:	f7ee f981 	bl	8000dac <__aeabi_fmul>
 8012aaa:	239e      	movs	r3, #158	; 0x9e
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	4699      	mov	r9, r3
 8012ab0:	ab1f      	add	r3, sp, #124	; 0x7c
 8012ab2:	4698      	mov	r8, r3
 8012ab4:	4be6      	ldr	r3, [pc, #920]	; (8012e50 <MotionFX_CM0P_MagCal_run+0xa00>)
 8012ab6:	465a      	mov	r2, fp
 8012ab8:	469c      	mov	ip, r3
 8012aba:	44a4      	add	ip, r4
 8012abc:	4663      	mov	r3, ip
 8012abe:	9307      	str	r3, [sp, #28]
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	44a1      	add	r9, r4
 8012ac4:	9406      	str	r4, [sp, #24]
 8012ac6:	46e2      	mov	sl, ip
 8012ac8:	4646      	mov	r6, r8
 8012aca:	464d      	mov	r5, r9
 8012acc:	001c      	movs	r4, r3
 8012ace:	9024      	str	r0, [sp, #144]	; 0x90
 8012ad0:	9201      	str	r2, [sp, #4]
 8012ad2:	e064      	b.n	8012b9e <MotionFX_CM0P_MagCal_run+0x74e>
 8012ad4:	6871      	ldr	r1, [r6, #4]
 8012ad6:	1c38      	adds	r0, r7, #0
 8012ad8:	f7ee f968 	bl	8000dac <__aeabi_fmul>
 8012adc:	1c01      	adds	r1, r0, #0
 8012ade:	6868      	ldr	r0, [r5, #4]
 8012ae0:	f7ed fdfe 	bl	80006e0 <__aeabi_fadd>
 8012ae4:	6068      	str	r0, [r5, #4]
 8012ae6:	2c07      	cmp	r4, #7
 8012ae8:	d04b      	beq.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012aea:	68b1      	ldr	r1, [r6, #8]
 8012aec:	1c38      	adds	r0, r7, #0
 8012aee:	f7ee f95d 	bl	8000dac <__aeabi_fmul>
 8012af2:	1c01      	adds	r1, r0, #0
 8012af4:	68a8      	ldr	r0, [r5, #8]
 8012af6:	f7ed fdf3 	bl	80006e0 <__aeabi_fadd>
 8012afa:	60a8      	str	r0, [r5, #8]
 8012afc:	2c06      	cmp	r4, #6
 8012afe:	d040      	beq.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012b00:	68f1      	ldr	r1, [r6, #12]
 8012b02:	1c38      	adds	r0, r7, #0
 8012b04:	f7ee f952 	bl	8000dac <__aeabi_fmul>
 8012b08:	1c01      	adds	r1, r0, #0
 8012b0a:	68e8      	ldr	r0, [r5, #12]
 8012b0c:	f7ed fde8 	bl	80006e0 <__aeabi_fadd>
 8012b10:	60e8      	str	r0, [r5, #12]
 8012b12:	2c05      	cmp	r4, #5
 8012b14:	d035      	beq.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012b16:	6931      	ldr	r1, [r6, #16]
 8012b18:	1c38      	adds	r0, r7, #0
 8012b1a:	f7ee f947 	bl	8000dac <__aeabi_fmul>
 8012b1e:	1c01      	adds	r1, r0, #0
 8012b20:	6928      	ldr	r0, [r5, #16]
 8012b22:	f7ed fddd 	bl	80006e0 <__aeabi_fadd>
 8012b26:	6128      	str	r0, [r5, #16]
 8012b28:	2c04      	cmp	r4, #4
 8012b2a:	d02a      	beq.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012b2c:	6971      	ldr	r1, [r6, #20]
 8012b2e:	1c38      	adds	r0, r7, #0
 8012b30:	f7ee f93c 	bl	8000dac <__aeabi_fmul>
 8012b34:	1c01      	adds	r1, r0, #0
 8012b36:	6968      	ldr	r0, [r5, #20]
 8012b38:	f7ed fdd2 	bl	80006e0 <__aeabi_fadd>
 8012b3c:	6168      	str	r0, [r5, #20]
 8012b3e:	2c03      	cmp	r4, #3
 8012b40:	d01f      	beq.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012b42:	69b1      	ldr	r1, [r6, #24]
 8012b44:	1c38      	adds	r0, r7, #0
 8012b46:	f7ee f931 	bl	8000dac <__aeabi_fmul>
 8012b4a:	1c01      	adds	r1, r0, #0
 8012b4c:	69a8      	ldr	r0, [r5, #24]
 8012b4e:	f7ed fdc7 	bl	80006e0 <__aeabi_fadd>
 8012b52:	61a8      	str	r0, [r5, #24]
 8012b54:	2c02      	cmp	r4, #2
 8012b56:	d014      	beq.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012b58:	69f1      	ldr	r1, [r6, #28]
 8012b5a:	1c38      	adds	r0, r7, #0
 8012b5c:	f7ee f926 	bl	8000dac <__aeabi_fmul>
 8012b60:	1c01      	adds	r1, r0, #0
 8012b62:	69e8      	ldr	r0, [r5, #28]
 8012b64:	f7ed fdbc 	bl	80006e0 <__aeabi_fadd>
 8012b68:	465b      	mov	r3, fp
 8012b6a:	61e8      	str	r0, [r5, #28]
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	d108      	bne.n	8012b82 <MotionFX_CM0P_MagCal_run+0x732>
 8012b70:	6a31      	ldr	r1, [r6, #32]
 8012b72:	1c38      	adds	r0, r7, #0
 8012b74:	f7ee f91a 	bl	8000dac <__aeabi_fmul>
 8012b78:	1c01      	adds	r1, r0, #0
 8012b7a:	6a28      	ldr	r0, [r5, #32]
 8012b7c:	f7ed fdb0 	bl	80006e0 <__aeabi_fadd>
 8012b80:	6228      	str	r0, [r5, #32]
 8012b82:	4653      	mov	r3, sl
 8012b84:	1c39      	adds	r1, r7, #0
 8012b86:	6818      	ldr	r0, [r3, #0]
 8012b88:	f7ed fdaa 	bl	80006e0 <__aeabi_fadd>
 8012b8c:	4653      	mov	r3, sl
 8012b8e:	6018      	str	r0, [r3, #0]
 8012b90:	2328      	movs	r3, #40	; 0x28
 8012b92:	469c      	mov	ip, r3
 8012b94:	465c      	mov	r4, fp
 8012b96:	6877      	ldr	r7, [r6, #4]
 8012b98:	3604      	adds	r6, #4
 8012b9a:	352c      	adds	r5, #44	; 0x2c
 8012b9c:	44e2      	add	sl, ip
 8012b9e:	6831      	ldr	r1, [r6, #0]
 8012ba0:	1c38      	adds	r0, r7, #0
 8012ba2:	f7ee f903 	bl	8000dac <__aeabi_fmul>
 8012ba6:	1c01      	adds	r1, r0, #0
 8012ba8:	6828      	ldr	r0, [r5, #0]
 8012baa:	f7ed fd99 	bl	80006e0 <__aeabi_fadd>
 8012bae:	1c63      	adds	r3, r4, #1
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	469b      	mov	fp, r3
 8012bb4:	6028      	str	r0, [r5, #0]
 8012bb6:	2b09      	cmp	r3, #9
 8012bb8:	d18c      	bne.n	8012ad4 <MotionFX_CM0P_MagCal_run+0x684>
 8012bba:	9b01      	ldr	r3, [sp, #4]
 8012bbc:	1c39      	adds	r1, r7, #0
 8012bbe:	469b      	mov	fp, r3
 8012bc0:	4653      	mov	r3, sl
 8012bc2:	6818      	ldr	r0, [r3, #0]
 8012bc4:	f7ed fd8c 	bl	80006e0 <__aeabi_fadd>
 8012bc8:	4653      	mov	r3, sl
 8012bca:	6018      	str	r0, [r3, #0]
 8012bcc:	9b02      	ldr	r3, [sp, #8]
 8012bce:	9c06      	ldr	r4, [sp, #24]
 8012bd0:	2b64      	cmp	r3, #100	; 0x64
 8012bd2:	d000      	beq.n	8012bd6 <MotionFX_CM0P_MagCal_run+0x786>
 8012bd4:	e674      	b.n	80128c0 <MotionFX_CM0P_MagCal_run+0x470>
 8012bd6:	9b03      	ldr	r3, [sp, #12]
 8012bd8:	9904      	ldr	r1, [sp, #16]
 8012bda:	005a      	lsls	r2, r3, #1
 8012bdc:	4692      	mov	sl, r2
 8012bde:	4453      	add	r3, sl
 8012be0:	009d      	lsls	r5, r3, #2
 8012be2:	1965      	adds	r5, r4, r5
 8012be4:	69e8      	ldr	r0, [r5, #28]
 8012be6:	f7ee fa07 	bl	8000ff8 <__aeabi_fsub>
 8012bea:	9905      	ldr	r1, [sp, #20]
 8012bec:	9001      	str	r0, [sp, #4]
 8012bee:	6a28      	ldr	r0, [r5, #32]
 8012bf0:	f7ee fa02 	bl	8000ff8 <__aeabi_fsub>
 8012bf4:	9900      	ldr	r1, [sp, #0]
 8012bf6:	1c07      	adds	r7, r0, #0
 8012bf8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012bfa:	f7ee f9fd 	bl	8000ff8 <__aeabi_fsub>
 8012bfe:	9901      	ldr	r1, [sp, #4]
 8012c00:	1c06      	adds	r6, r0, #0
 8012c02:	1c08      	adds	r0, r1, #0
 8012c04:	f7ee f8d2 	bl	8000dac <__aeabi_fmul>
 8012c08:	1c39      	adds	r1, r7, #0
 8012c0a:	901f      	str	r0, [sp, #124]	; 0x7c
 8012c0c:	1c05      	adds	r5, r0, #0
 8012c0e:	1c38      	adds	r0, r7, #0
 8012c10:	f7ee f8cc 	bl	8000dac <__aeabi_fmul>
 8012c14:	1c31      	adds	r1, r6, #0
 8012c16:	9020      	str	r0, [sp, #128]	; 0x80
 8012c18:	1c30      	adds	r0, r6, #0
 8012c1a:	f7ee f8c7 	bl	8000dac <__aeabi_fmul>
 8012c1e:	9901      	ldr	r1, [sp, #4]
 8012c20:	9021      	str	r0, [sp, #132]	; 0x84
 8012c22:	1c08      	adds	r0, r1, #0
 8012c24:	f7ed fd5c 	bl	80006e0 <__aeabi_fadd>
 8012c28:	1c39      	adds	r1, r7, #0
 8012c2a:	9000      	str	r0, [sp, #0]
 8012c2c:	9025      	str	r0, [sp, #148]	; 0x94
 8012c2e:	1c38      	adds	r0, r7, #0
 8012c30:	f7ed fd56 	bl	80006e0 <__aeabi_fadd>
 8012c34:	1c31      	adds	r1, r6, #0
 8012c36:	9001      	str	r0, [sp, #4]
 8012c38:	9026      	str	r0, [sp, #152]	; 0x98
 8012c3a:	1c30      	adds	r0, r6, #0
 8012c3c:	f7ed fd50 	bl	80006e0 <__aeabi_fadd>
 8012c40:	1c39      	adds	r1, r7, #0
 8012c42:	9f00      	ldr	r7, [sp, #0]
 8012c44:	9027      	str	r0, [sp, #156]	; 0x9c
 8012c46:	1c38      	adds	r0, r7, #0
 8012c48:	f7ee f8b0 	bl	8000dac <__aeabi_fmul>
 8012c4c:	1c31      	adds	r1, r6, #0
 8012c4e:	9022      	str	r0, [sp, #136]	; 0x88
 8012c50:	1c38      	adds	r0, r7, #0
 8012c52:	f7ee f8ab 	bl	8000dac <__aeabi_fmul>
 8012c56:	1c31      	adds	r1, r6, #0
 8012c58:	9023      	str	r0, [sp, #140]	; 0x8c
 8012c5a:	9801      	ldr	r0, [sp, #4]
 8012c5c:	f7ee f8a6 	bl	8000dac <__aeabi_fmul>
 8012c60:	465b      	mov	r3, fp
 8012c62:	2600      	movs	r6, #0
 8012c64:	9300      	str	r3, [sp, #0]
 8012c66:	9b07      	ldr	r3, [sp, #28]
 8012c68:	46a3      	mov	fp, r4
 8012c6a:	464f      	mov	r7, r9
 8012c6c:	0034      	movs	r4, r6
 8012c6e:	4699      	mov	r9, r3
 8012c70:	4646      	mov	r6, r8
 8012c72:	9024      	str	r0, [sp, #144]	; 0x90
 8012c74:	e064      	b.n	8012d40 <MotionFX_CM0P_MagCal_run+0x8f0>
 8012c76:	6871      	ldr	r1, [r6, #4]
 8012c78:	1c28      	adds	r0, r5, #0
 8012c7a:	f7ee f897 	bl	8000dac <__aeabi_fmul>
 8012c7e:	1c01      	adds	r1, r0, #0
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7ee f9b9 	bl	8000ff8 <__aeabi_fsub>
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	2c07      	cmp	r4, #7
 8012c8a:	d04b      	beq.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012c8c:	68b1      	ldr	r1, [r6, #8]
 8012c8e:	1c28      	adds	r0, r5, #0
 8012c90:	f7ee f88c 	bl	8000dac <__aeabi_fmul>
 8012c94:	1c01      	adds	r1, r0, #0
 8012c96:	68b8      	ldr	r0, [r7, #8]
 8012c98:	f7ee f9ae 	bl	8000ff8 <__aeabi_fsub>
 8012c9c:	60b8      	str	r0, [r7, #8]
 8012c9e:	2c06      	cmp	r4, #6
 8012ca0:	d040      	beq.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012ca2:	68f1      	ldr	r1, [r6, #12]
 8012ca4:	1c28      	adds	r0, r5, #0
 8012ca6:	f7ee f881 	bl	8000dac <__aeabi_fmul>
 8012caa:	1c01      	adds	r1, r0, #0
 8012cac:	68f8      	ldr	r0, [r7, #12]
 8012cae:	f7ee f9a3 	bl	8000ff8 <__aeabi_fsub>
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	2c05      	cmp	r4, #5
 8012cb6:	d035      	beq.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012cb8:	6931      	ldr	r1, [r6, #16]
 8012cba:	1c28      	adds	r0, r5, #0
 8012cbc:	f7ee f876 	bl	8000dac <__aeabi_fmul>
 8012cc0:	1c01      	adds	r1, r0, #0
 8012cc2:	6938      	ldr	r0, [r7, #16]
 8012cc4:	f7ee f998 	bl	8000ff8 <__aeabi_fsub>
 8012cc8:	6138      	str	r0, [r7, #16]
 8012cca:	2c04      	cmp	r4, #4
 8012ccc:	d02a      	beq.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012cce:	6971      	ldr	r1, [r6, #20]
 8012cd0:	1c28      	adds	r0, r5, #0
 8012cd2:	f7ee f86b 	bl	8000dac <__aeabi_fmul>
 8012cd6:	1c01      	adds	r1, r0, #0
 8012cd8:	6978      	ldr	r0, [r7, #20]
 8012cda:	f7ee f98d 	bl	8000ff8 <__aeabi_fsub>
 8012cde:	6178      	str	r0, [r7, #20]
 8012ce0:	2c03      	cmp	r4, #3
 8012ce2:	d01f      	beq.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012ce4:	69b1      	ldr	r1, [r6, #24]
 8012ce6:	1c28      	adds	r0, r5, #0
 8012ce8:	f7ee f860 	bl	8000dac <__aeabi_fmul>
 8012cec:	1c01      	adds	r1, r0, #0
 8012cee:	69b8      	ldr	r0, [r7, #24]
 8012cf0:	f7ee f982 	bl	8000ff8 <__aeabi_fsub>
 8012cf4:	61b8      	str	r0, [r7, #24]
 8012cf6:	2c02      	cmp	r4, #2
 8012cf8:	d014      	beq.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012cfa:	69f1      	ldr	r1, [r6, #28]
 8012cfc:	1c28      	adds	r0, r5, #0
 8012cfe:	f7ee f855 	bl	8000dac <__aeabi_fmul>
 8012d02:	1c01      	adds	r1, r0, #0
 8012d04:	69f8      	ldr	r0, [r7, #28]
 8012d06:	f7ee f977 	bl	8000ff8 <__aeabi_fsub>
 8012d0a:	4643      	mov	r3, r8
 8012d0c:	61f8      	str	r0, [r7, #28]
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d108      	bne.n	8012d24 <MotionFX_CM0P_MagCal_run+0x8d4>
 8012d12:	6a31      	ldr	r1, [r6, #32]
 8012d14:	1c28      	adds	r0, r5, #0
 8012d16:	f7ee f849 	bl	8000dac <__aeabi_fmul>
 8012d1a:	1c01      	adds	r1, r0, #0
 8012d1c:	6a38      	ldr	r0, [r7, #32]
 8012d1e:	f7ee f96b 	bl	8000ff8 <__aeabi_fsub>
 8012d22:	6238      	str	r0, [r7, #32]
 8012d24:	464b      	mov	r3, r9
 8012d26:	1c29      	adds	r1, r5, #0
 8012d28:	6818      	ldr	r0, [r3, #0]
 8012d2a:	f7ee f965 	bl	8000ff8 <__aeabi_fsub>
 8012d2e:	464b      	mov	r3, r9
 8012d30:	6018      	str	r0, [r3, #0]
 8012d32:	2328      	movs	r3, #40	; 0x28
 8012d34:	469c      	mov	ip, r3
 8012d36:	4644      	mov	r4, r8
 8012d38:	6875      	ldr	r5, [r6, #4]
 8012d3a:	3604      	adds	r6, #4
 8012d3c:	372c      	adds	r7, #44	; 0x2c
 8012d3e:	44e1      	add	r9, ip
 8012d40:	6831      	ldr	r1, [r6, #0]
 8012d42:	1c28      	adds	r0, r5, #0
 8012d44:	f7ee f832 	bl	8000dac <__aeabi_fmul>
 8012d48:	1c01      	adds	r1, r0, #0
 8012d4a:	6838      	ldr	r0, [r7, #0]
 8012d4c:	f7ee f954 	bl	8000ff8 <__aeabi_fsub>
 8012d50:	1c63      	adds	r3, r4, #1
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	4698      	mov	r8, r3
 8012d56:	6038      	str	r0, [r7, #0]
 8012d58:	2b09      	cmp	r3, #9
 8012d5a:	d18c      	bne.n	8012c76 <MotionFX_CM0P_MagCal_run+0x826>
 8012d5c:	9b00      	ldr	r3, [sp, #0]
 8012d5e:	465c      	mov	r4, fp
 8012d60:	469b      	mov	fp, r3
 8012d62:	464b      	mov	r3, r9
 8012d64:	1c29      	adds	r1, r5, #0
 8012d66:	6818      	ldr	r0, [r3, #0]
 8012d68:	464d      	mov	r5, r9
 8012d6a:	f7ee f945 	bl	8000ff8 <__aeabi_fsub>
 8012d6e:	6028      	str	r0, [r5, #0]
 8012d70:	e5b0      	b.n	80128d4 <MotionFX_CM0P_MagCal_run+0x484>
 8012d72:	4b38      	ldr	r3, [pc, #224]	; (8012e54 <MotionFX_CM0P_MagCal_run+0xa04>)
 8012d74:	1c30      	adds	r0, r6, #0
 8012d76:	58e1      	ldr	r1, [r4, r3]
 8012d78:	f7ee f93e 	bl	8000ff8 <__aeabi_fsub>
 8012d7c:	23cc      	movs	r3, #204	; 0xcc
 8012d7e:	00db      	lsls	r3, r3, #3
 8012d80:	4681      	mov	r9, r0
 8012d82:	58e1      	ldr	r1, [r4, r3]
 8012d84:	9800      	ldr	r0, [sp, #0]
 8012d86:	f7ee f937 	bl	8000ff8 <__aeabi_fsub>
 8012d8a:	4b33      	ldr	r3, [pc, #204]	; (8012e58 <MotionFX_CM0P_MagCal_run+0xa08>)
 8012d8c:	9002      	str	r0, [sp, #8]
 8012d8e:	58e1      	ldr	r1, [r4, r3]
 8012d90:	4648      	mov	r0, r9
 8012d92:	f7ee f80b 	bl	8000dac <__aeabi_fmul>
 8012d96:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012d98:	f7ed fca2 	bl	80006e0 <__aeabi_fadd>
 8012d9c:	23cf      	movs	r3, #207	; 0xcf
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	58e1      	ldr	r1, [r4, r3]
 8012da2:	4680      	mov	r8, r0
 8012da4:	9802      	ldr	r0, [sp, #8]
 8012da6:	f7ee f801 	bl	8000dac <__aeabi_fmul>
 8012daa:	1c01      	adds	r1, r0, #0
 8012dac:	4640      	mov	r0, r8
 8012dae:	f7ed fc97 	bl	80006e0 <__aeabi_fadd>
 8012db2:	23ce      	movs	r3, #206	; 0xce
 8012db4:	00db      	lsls	r3, r3, #3
 8012db6:	58e1      	ldr	r1, [r4, r3]
 8012db8:	9003      	str	r0, [sp, #12]
 8012dba:	4648      	mov	r0, r9
 8012dbc:	f7ed fff6 	bl	8000dac <__aeabi_fmul>
 8012dc0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012dc2:	f7ed fc8d 	bl	80006e0 <__aeabi_fadd>
 8012dc6:	4b25      	ldr	r3, [pc, #148]	; (8012e5c <MotionFX_CM0P_MagCal_run+0xa0c>)
 8012dc8:	4680      	mov	r8, r0
 8012dca:	58e1      	ldr	r1, [r4, r3]
 8012dcc:	9802      	ldr	r0, [sp, #8]
 8012dce:	f7ed ffed 	bl	8000dac <__aeabi_fmul>
 8012dd2:	1c01      	adds	r1, r0, #0
 8012dd4:	4640      	mov	r0, r8
 8012dd6:	f7ed fc83 	bl	80006e0 <__aeabi_fadd>
 8012dda:	4b21      	ldr	r3, [pc, #132]	; (8012e60 <MotionFX_CM0P_MagCal_run+0xa10>)
 8012ddc:	9004      	str	r0, [sp, #16]
 8012dde:	58e1      	ldr	r1, [r4, r3]
 8012de0:	9801      	ldr	r0, [sp, #4]
 8012de2:	f7ee f909 	bl	8000ff8 <__aeabi_fsub>
 8012de6:	23cd      	movs	r3, #205	; 0xcd
 8012de8:	00db      	lsls	r3, r3, #3
 8012dea:	58e1      	ldr	r1, [r4, r3]
 8012dec:	4680      	mov	r8, r0
 8012dee:	4648      	mov	r0, r9
 8012df0:	f7ed ffdc 	bl	8000dac <__aeabi_fmul>
 8012df4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012df6:	f7ed fc73 	bl	80006e0 <__aeabi_fadd>
 8012dfa:	4b1a      	ldr	r3, [pc, #104]	; (8012e64 <MotionFX_CM0P_MagCal_run+0xa14>)
 8012dfc:	4681      	mov	r9, r0
 8012dfe:	58e1      	ldr	r1, [r4, r3]
 8012e00:	9802      	ldr	r0, [sp, #8]
 8012e02:	f7ed ffd3 	bl	8000dac <__aeabi_fmul>
 8012e06:	1c01      	adds	r1, r0, #0
 8012e08:	4648      	mov	r0, r9
 8012e0a:	f7ed fc69 	bl	80006e0 <__aeabi_fadd>
 8012e0e:	23d0      	movs	r3, #208	; 0xd0
 8012e10:	00db      	lsls	r3, r3, #3
 8012e12:	58e1      	ldr	r1, [r4, r3]
 8012e14:	4681      	mov	r9, r0
 8012e16:	4640      	mov	r0, r8
 8012e18:	f7ed ffc8 	bl	8000dac <__aeabi_fmul>
 8012e1c:	1c01      	adds	r1, r0, #0
 8012e1e:	4648      	mov	r0, r9
 8012e20:	f7ed fc5e 	bl	80006e0 <__aeabi_fadd>
 8012e24:	4b10      	ldr	r3, [pc, #64]	; (8012e68 <MotionFX_CM0P_MagCal_run+0xa18>)
 8012e26:	901c      	str	r0, [sp, #112]	; 0x70
 8012e28:	58e1      	ldr	r1, [r4, r3]
 8012e2a:	4640      	mov	r0, r8
 8012e2c:	f7ed ffbe 	bl	8000dac <__aeabi_fmul>
 8012e30:	9903      	ldr	r1, [sp, #12]
 8012e32:	f7ed fc55 	bl	80006e0 <__aeabi_fadd>
 8012e36:	23d1      	movs	r3, #209	; 0xd1
 8012e38:	00db      	lsls	r3, r3, #3
 8012e3a:	58e1      	ldr	r1, [r4, r3]
 8012e3c:	901d      	str	r0, [sp, #116]	; 0x74
 8012e3e:	4640      	mov	r0, r8
 8012e40:	f7ed ffb4 	bl	8000dac <__aeabi_fmul>
 8012e44:	9904      	ldr	r1, [sp, #16]
 8012e46:	f7ed fc4b 	bl	80006e0 <__aeabi_fadd>
 8012e4a:	901e      	str	r0, [sp, #120]	; 0x78
 8012e4c:	e58a      	b.n	8012964 <MotionFX_CM0P_MagCal_run+0x514>
 8012e4e:	46c0      	nop			; (mov r8, r8)
 8012e50:	00000514 	.word	0x00000514
 8012e54:	0000065c 	.word	0x0000065c
 8012e58:	0000066c 	.word	0x0000066c
 8012e5c:	0000067c 	.word	0x0000067c
 8012e60:	00000664 	.word	0x00000664
 8012e64:	00000674 	.word	0x00000674
 8012e68:	00000684 	.word	0x00000684
 8012e6c:	9b03      	ldr	r3, [sp, #12]
 8012e6e:	9904      	ldr	r1, [sp, #16]
 8012e70:	005a      	lsls	r2, r3, #1
 8012e72:	4692      	mov	sl, r2
 8012e74:	4453      	add	r3, sl
 8012e76:	009e      	lsls	r6, r3, #2
 8012e78:	19a6      	adds	r6, r4, r6
 8012e7a:	69f3      	ldr	r3, [r6, #28]
 8012e7c:	1c18      	adds	r0, r3, #0
 8012e7e:	9314      	str	r3, [sp, #80]	; 0x50
 8012e80:	f7ee f8ba 	bl	8000ff8 <__aeabi_fsub>
 8012e84:	6a33      	ldr	r3, [r6, #32]
 8012e86:	4681      	mov	r9, r0
 8012e88:	9905      	ldr	r1, [sp, #20]
 8012e8a:	1c18      	adds	r0, r3, #0
 8012e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8012e8e:	f7ee f8b3 	bl	8000ff8 <__aeabi_fsub>
 8012e92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012e94:	4680      	mov	r8, r0
 8012e96:	9900      	ldr	r1, [sp, #0]
 8012e98:	1c18      	adds	r0, r3, #0
 8012e9a:	9316      	str	r3, [sp, #88]	; 0x58
 8012e9c:	f7ee f8ac 	bl	8000ff8 <__aeabi_fsub>
 8012ea0:	4649      	mov	r1, r9
 8012ea2:	1c07      	adds	r7, r0, #0
 8012ea4:	4648      	mov	r0, r9
 8012ea6:	f7ed ff81 	bl	8000dac <__aeabi_fmul>
 8012eaa:	4641      	mov	r1, r8
 8012eac:	9002      	str	r0, [sp, #8]
 8012eae:	4640      	mov	r0, r8
 8012eb0:	f7ed ff7c 	bl	8000dac <__aeabi_fmul>
 8012eb4:	1c39      	adds	r1, r7, #0
 8012eb6:	9013      	str	r0, [sp, #76]	; 0x4c
 8012eb8:	1c38      	adds	r0, r7, #0
 8012eba:	f7ed ff77 	bl	8000dac <__aeabi_fmul>
 8012ebe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012ec0:	1c06      	adds	r6, r0, #0
 8012ec2:	9802      	ldr	r0, [sp, #8]
 8012ec4:	f7ed fc0c 	bl	80006e0 <__aeabi_fadd>
 8012ec8:	1c31      	adds	r1, r6, #0
 8012eca:	9617      	str	r6, [sp, #92]	; 0x5c
 8012ecc:	f7ed fc08 	bl	80006e0 <__aeabi_fadd>
 8012ed0:	9902      	ldr	r1, [sp, #8]
 8012ed2:	1c06      	adds	r6, r0, #0
 8012ed4:	9806      	ldr	r0, [sp, #24]
 8012ed6:	f7ee f88f 	bl	8000ff8 <__aeabi_fsub>
 8012eda:	239e      	movs	r3, #158	; 0x9e
 8012edc:	00db      	lsls	r3, r3, #3
 8012ede:	50e0      	str	r0, [r4, r3]
 8012ee0:	4641      	mov	r1, r8
 8012ee2:	4648      	mov	r0, r9
 8012ee4:	f7ed ff62 	bl	8000dac <__aeabi_fmul>
 8012ee8:	1c01      	adds	r1, r0, #0
 8012eea:	9807      	ldr	r0, [sp, #28]
 8012eec:	f7ee f884 	bl	8000ff8 <__aeabi_fsub>
 8012ef0:	4b37      	ldr	r3, [pc, #220]	; (8012fd0 <MotionFX_CM0P_MagCal_run+0xb80>)
 8012ef2:	1c39      	adds	r1, r7, #0
 8012ef4:	50e0      	str	r0, [r4, r3]
 8012ef6:	4648      	mov	r0, r9
 8012ef8:	f7ed ff58 	bl	8000dac <__aeabi_fmul>
 8012efc:	1c01      	adds	r1, r0, #0
 8012efe:	9808      	ldr	r0, [sp, #32]
 8012f00:	f7ee f87a 	bl	8000ff8 <__aeabi_fsub>
 8012f04:	239f      	movs	r3, #159	; 0x9f
 8012f06:	00db      	lsls	r3, r3, #3
 8012f08:	50e0      	str	r0, [r4, r3]
 8012f0a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012f0c:	9804      	ldr	r0, [sp, #16]
 8012f0e:	f7ee f873 	bl	8000ff8 <__aeabi_fsub>
 8012f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f14:	f7ed fbe4 	bl	80006e0 <__aeabi_fadd>
 8012f18:	4b2e      	ldr	r3, [pc, #184]	; (8012fd4 <MotionFX_CM0P_MagCal_run+0xb84>)
 8012f1a:	4649      	mov	r1, r9
 8012f1c:	50e0      	str	r0, [r4, r3]
 8012f1e:	1c30      	adds	r0, r6, #0
 8012f20:	f7ed ff44 	bl	8000dac <__aeabi_fmul>
 8012f24:	1c01      	adds	r1, r0, #0
 8012f26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012f28:	f7ee f866 	bl	8000ff8 <__aeabi_fsub>
 8012f2c:	23a0      	movs	r3, #160	; 0xa0
 8012f2e:	00db      	lsls	r3, r3, #3
 8012f30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012f32:	50e0      	str	r0, [r4, r3]
 8012f34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012f36:	f7ee f85f 	bl	8000ff8 <__aeabi_fsub>
 8012f3a:	4b27      	ldr	r3, [pc, #156]	; (8012fd8 <MotionFX_CM0P_MagCal_run+0xb88>)
 8012f3c:	1c39      	adds	r1, r7, #0
 8012f3e:	50e0      	str	r0, [r4, r3]
 8012f40:	4640      	mov	r0, r8
 8012f42:	f7ed ff33 	bl	8000dac <__aeabi_fmul>
 8012f46:	1c01      	adds	r1, r0, #0
 8012f48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012f4a:	f7ee f855 	bl	8000ff8 <__aeabi_fsub>
 8012f4e:	23a4      	movs	r3, #164	; 0xa4
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	50e0      	str	r0, [r4, r3]
 8012f54:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012f56:	9805      	ldr	r0, [sp, #20]
 8012f58:	f7ee f84e 	bl	8000ff8 <__aeabi_fsub>
 8012f5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012f5e:	f7ed fbbf 	bl	80006e0 <__aeabi_fadd>
 8012f62:	4b1e      	ldr	r3, [pc, #120]	; (8012fdc <MotionFX_CM0P_MagCal_run+0xb8c>)
 8012f64:	4641      	mov	r1, r8
 8012f66:	50e0      	str	r0, [r4, r3]
 8012f68:	1c30      	adds	r0, r6, #0
 8012f6a:	f7ed ff1f 	bl	8000dac <__aeabi_fmul>
 8012f6e:	1c01      	adds	r1, r0, #0
 8012f70:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012f72:	f7ee f841 	bl	8000ff8 <__aeabi_fsub>
 8012f76:	23a5      	movs	r3, #165	; 0xa5
 8012f78:	00db      	lsls	r3, r3, #3
 8012f7a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012f7c:	50e0      	str	r0, [r4, r3]
 8012f7e:	9801      	ldr	r0, [sp, #4]
 8012f80:	f7ee f83a 	bl	8000ff8 <__aeabi_fsub>
 8012f84:	23a9      	movs	r3, #169	; 0xa9
 8012f86:	00db      	lsls	r3, r3, #3
 8012f88:	50e0      	str	r0, [r4, r3]
 8012f8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012f8c:	9800      	ldr	r0, [sp, #0]
 8012f8e:	f7ee f833 	bl	8000ff8 <__aeabi_fsub>
 8012f92:	1c01      	adds	r1, r0, #0
 8012f94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012f96:	f7ed fba3 	bl	80006e0 <__aeabi_fadd>
 8012f9a:	4b11      	ldr	r3, [pc, #68]	; (8012fe0 <MotionFX_CM0P_MagCal_run+0xb90>)
 8012f9c:	1c39      	adds	r1, r7, #0
 8012f9e:	50e0      	str	r0, [r4, r3]
 8012fa0:	1c30      	adds	r0, r6, #0
 8012fa2:	f7ed ff03 	bl	8000dac <__aeabi_fmul>
 8012fa6:	1c01      	adds	r1, r0, #0
 8012fa8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012faa:	f7ee f825 	bl	8000ff8 <__aeabi_fsub>
 8012fae:	23aa      	movs	r3, #170	; 0xaa
 8012fb0:	21fe      	movs	r1, #254	; 0xfe
 8012fb2:	00db      	lsls	r3, r3, #3
 8012fb4:	50e0      	str	r0, [r4, r3]
 8012fb6:	0589      	lsls	r1, r1, #22
 8012fb8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012fba:	f7ee f81d 	bl	8000ff8 <__aeabi_fsub>
 8012fbe:	4b09      	ldr	r3, [pc, #36]	; (8012fe4 <MotionFX_CM0P_MagCal_run+0xb94>)
 8012fc0:	1c31      	adds	r1, r6, #0
 8012fc2:	50e0      	str	r0, [r4, r3]
 8012fc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012fc6:	f7ee f817 	bl	8000ff8 <__aeabi_fsub>
 8012fca:	5160      	str	r0, [r4, r5]
 8012fcc:	e482      	b.n	80128d4 <MotionFX_CM0P_MagCal_run+0x484>
 8012fce:	46c0      	nop			; (mov r8, r8)
 8012fd0:	000004f4 	.word	0x000004f4
 8012fd4:	000004fc 	.word	0x000004fc
 8012fd8:	0000051c 	.word	0x0000051c
 8012fdc:	00000524 	.word	0x00000524
 8012fe0:	0000054c 	.word	0x0000054c
 8012fe4:	00000574 	.word	0x00000574

08012fe8 <MotionFX_CM0P_MagCal_getParams>:
 8012fe8:	4b0c      	ldr	r3, [pc, #48]	; (801301c <MotionFX_CM0P_MagCal_getParams+0x34>)
 8012fea:	791a      	ldrb	r2, [r3, #4]
 8012fec:	2a00      	cmp	r2, #0
 8012fee:	d011      	beq.n	8013014 <MotionFX_CM0P_MagCal_getParams+0x2c>
 8012ff0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012ff2:	6002      	str	r2, [r0, #0]
 8012ff4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ff8:	6042      	str	r2, [r0, #4]
 8012ffa:	6083      	str	r3, [r0, #8]
 8012ffc:	4b08      	ldr	r3, [pc, #32]	; (8013020 <MotionFX_CM0P_MagCal_getParams+0x38>)
 8012ffe:	7f1b      	ldrb	r3, [r3, #28]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d005      	beq.n	8013010 <MotionFX_CM0P_MagCal_getParams+0x28>
 8013004:	2b01      	cmp	r3, #1
 8013006:	d006      	beq.n	8013016 <MotionFX_CM0P_MagCal_getParams+0x2e>
 8013008:	2b02      	cmp	r3, #2
 801300a:	d004      	beq.n	8013016 <MotionFX_CM0P_MagCal_getParams+0x2e>
 801300c:	2b03      	cmp	r3, #3
 801300e:	d002      	beq.n	8013016 <MotionFX_CM0P_MagCal_getParams+0x2e>
 8013010:	2300      	movs	r3, #0
 8013012:	7303      	strb	r3, [r0, #12]
 8013014:	4770      	bx	lr
 8013016:	7303      	strb	r3, [r0, #12]
 8013018:	e7fc      	b.n	8013014 <MotionFX_CM0P_MagCal_getParams+0x2c>
 801301a:	46c0      	nop			; (mov r8, r8)
 801301c:	200002fc 	.word	0x200002fc
 8013020:	2000037c 	.word	0x2000037c

08013024 <MotionFX_CM0P_GetLibVersion>:
 8013024:	b570      	push	{r4, r5, r6, lr}
 8013026:	4b0f      	ldr	r3, [pc, #60]	; (8013064 <MotionFX_CM0P_GetLibVersion+0x40>)
 8013028:	0005      	movs	r5, r0
 801302a:	7918      	ldrb	r0, [r3, #4]
 801302c:	b08a      	sub	sp, #40	; 0x28
 801302e:	2800      	cmp	r0, #0
 8013030:	d016      	beq.n	8013060 <MotionFX_CM0P_GetLibVersion+0x3c>
 8013032:	ac01      	add	r4, sp, #4
 8013034:	0022      	movs	r2, r4
 8013036:	4b0c      	ldr	r3, [pc, #48]	; (8013068 <MotionFX_CM0P_GetLibVersion+0x44>)
 8013038:	cb43      	ldmia	r3!, {r0, r1, r6}
 801303a:	c243      	stmia	r2!, {r0, r1, r6}
 801303c:	2017      	movs	r0, #23
 801303e:	6819      	ldr	r1, [r3, #0]
 8013040:	4468      	add	r0, sp
 8013042:	6011      	str	r1, [r2, #0]
 8013044:	8899      	ldrh	r1, [r3, #4]
 8013046:	8091      	strh	r1, [r2, #4]
 8013048:	799b      	ldrb	r3, [r3, #6]
 801304a:	2100      	movs	r1, #0
 801304c:	7193      	strb	r3, [r2, #6]
 801304e:	2210      	movs	r2, #16
 8013050:	f000 f83f 	bl	80130d2 <memset>
 8013054:	2213      	movs	r2, #19
 8013056:	0021      	movs	r1, r4
 8013058:	0028      	movs	r0, r5
 801305a:	f000 f831 	bl	80130c0 <memcpy>
 801305e:	2012      	movs	r0, #18
 8013060:	b00a      	add	sp, #40	; 0x28
 8013062:	bd70      	pop	{r4, r5, r6, pc}
 8013064:	200002fc 	.word	0x200002fc
 8013068:	08015194 	.word	0x08015194

0801306c <__errno>:
 801306c:	4b01      	ldr	r3, [pc, #4]	; (8013074 <__errno+0x8>)
 801306e:	6818      	ldr	r0, [r3, #0]
 8013070:	4770      	bx	lr
 8013072:	46c0      	nop			; (mov r8, r8)
 8013074:	2000027c 	.word	0x2000027c

08013078 <__libc_init_array>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	2600      	movs	r6, #0
 801307c:	4d0c      	ldr	r5, [pc, #48]	; (80130b0 <__libc_init_array+0x38>)
 801307e:	4c0d      	ldr	r4, [pc, #52]	; (80130b4 <__libc_init_array+0x3c>)
 8013080:	1b64      	subs	r4, r4, r5
 8013082:	10a4      	asrs	r4, r4, #2
 8013084:	42a6      	cmp	r6, r4
 8013086:	d109      	bne.n	801309c <__libc_init_array+0x24>
 8013088:	2600      	movs	r6, #0
 801308a:	f001 ffe9 	bl	8015060 <_init>
 801308e:	4d0a      	ldr	r5, [pc, #40]	; (80130b8 <__libc_init_array+0x40>)
 8013090:	4c0a      	ldr	r4, [pc, #40]	; (80130bc <__libc_init_array+0x44>)
 8013092:	1b64      	subs	r4, r4, r5
 8013094:	10a4      	asrs	r4, r4, #2
 8013096:	42a6      	cmp	r6, r4
 8013098:	d105      	bne.n	80130a6 <__libc_init_array+0x2e>
 801309a:	bd70      	pop	{r4, r5, r6, pc}
 801309c:	00b3      	lsls	r3, r6, #2
 801309e:	58eb      	ldr	r3, [r5, r3]
 80130a0:	4798      	blx	r3
 80130a2:	3601      	adds	r6, #1
 80130a4:	e7ee      	b.n	8013084 <__libc_init_array+0xc>
 80130a6:	00b3      	lsls	r3, r6, #2
 80130a8:	58eb      	ldr	r3, [r5, r3]
 80130aa:	4798      	blx	r3
 80130ac:	3601      	adds	r6, #1
 80130ae:	e7f2      	b.n	8013096 <__libc_init_array+0x1e>
 80130b0:	08015e08 	.word	0x08015e08
 80130b4:	08015e08 	.word	0x08015e08
 80130b8:	08015e08 	.word	0x08015e08
 80130bc:	08015e0c 	.word	0x08015e0c

080130c0 <memcpy>:
 80130c0:	2300      	movs	r3, #0
 80130c2:	b510      	push	{r4, lr}
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d100      	bne.n	80130ca <memcpy+0xa>
 80130c8:	bd10      	pop	{r4, pc}
 80130ca:	5ccc      	ldrb	r4, [r1, r3]
 80130cc:	54c4      	strb	r4, [r0, r3]
 80130ce:	3301      	adds	r3, #1
 80130d0:	e7f8      	b.n	80130c4 <memcpy+0x4>

080130d2 <memset>:
 80130d2:	0003      	movs	r3, r0
 80130d4:	1882      	adds	r2, r0, r2
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d100      	bne.n	80130dc <memset+0xa>
 80130da:	4770      	bx	lr
 80130dc:	7019      	strb	r1, [r3, #0]
 80130de:	3301      	adds	r3, #1
 80130e0:	e7f9      	b.n	80130d6 <memset+0x4>
	...

080130e4 <sniprintf>:
 80130e4:	b40c      	push	{r2, r3}
 80130e6:	b530      	push	{r4, r5, lr}
 80130e8:	4b17      	ldr	r3, [pc, #92]	; (8013148 <sniprintf+0x64>)
 80130ea:	000c      	movs	r4, r1
 80130ec:	681d      	ldr	r5, [r3, #0]
 80130ee:	b09d      	sub	sp, #116	; 0x74
 80130f0:	2900      	cmp	r1, #0
 80130f2:	da08      	bge.n	8013106 <sniprintf+0x22>
 80130f4:	238b      	movs	r3, #139	; 0x8b
 80130f6:	2001      	movs	r0, #1
 80130f8:	602b      	str	r3, [r5, #0]
 80130fa:	4240      	negs	r0, r0
 80130fc:	b01d      	add	sp, #116	; 0x74
 80130fe:	bc30      	pop	{r4, r5}
 8013100:	bc08      	pop	{r3}
 8013102:	b002      	add	sp, #8
 8013104:	4718      	bx	r3
 8013106:	2382      	movs	r3, #130	; 0x82
 8013108:	466a      	mov	r2, sp
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	8293      	strh	r3, [r2, #20]
 801310e:	2300      	movs	r3, #0
 8013110:	9002      	str	r0, [sp, #8]
 8013112:	9006      	str	r0, [sp, #24]
 8013114:	4299      	cmp	r1, r3
 8013116:	d000      	beq.n	801311a <sniprintf+0x36>
 8013118:	1e4b      	subs	r3, r1, #1
 801311a:	9304      	str	r3, [sp, #16]
 801311c:	9307      	str	r3, [sp, #28]
 801311e:	2301      	movs	r3, #1
 8013120:	466a      	mov	r2, sp
 8013122:	425b      	negs	r3, r3
 8013124:	82d3      	strh	r3, [r2, #22]
 8013126:	0028      	movs	r0, r5
 8013128:	ab21      	add	r3, sp, #132	; 0x84
 801312a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801312c:	a902      	add	r1, sp, #8
 801312e:	9301      	str	r3, [sp, #4]
 8013130:	f000 f86e 	bl	8013210 <_svfiprintf_r>
 8013134:	1c43      	adds	r3, r0, #1
 8013136:	da01      	bge.n	801313c <sniprintf+0x58>
 8013138:	238b      	movs	r3, #139	; 0x8b
 801313a:	602b      	str	r3, [r5, #0]
 801313c:	2c00      	cmp	r4, #0
 801313e:	d0dd      	beq.n	80130fc <sniprintf+0x18>
 8013140:	2300      	movs	r3, #0
 8013142:	9a02      	ldr	r2, [sp, #8]
 8013144:	7013      	strb	r3, [r2, #0]
 8013146:	e7d9      	b.n	80130fc <sniprintf+0x18>
 8013148:	2000027c 	.word	0x2000027c

0801314c <__ssputs_r>:
 801314c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801314e:	688e      	ldr	r6, [r1, #8]
 8013150:	b085      	sub	sp, #20
 8013152:	0007      	movs	r7, r0
 8013154:	000c      	movs	r4, r1
 8013156:	9203      	str	r2, [sp, #12]
 8013158:	9301      	str	r3, [sp, #4]
 801315a:	429e      	cmp	r6, r3
 801315c:	d83c      	bhi.n	80131d8 <__ssputs_r+0x8c>
 801315e:	2390      	movs	r3, #144	; 0x90
 8013160:	898a      	ldrh	r2, [r1, #12]
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	421a      	tst	r2, r3
 8013166:	d034      	beq.n	80131d2 <__ssputs_r+0x86>
 8013168:	6909      	ldr	r1, [r1, #16]
 801316a:	6823      	ldr	r3, [r4, #0]
 801316c:	6960      	ldr	r0, [r4, #20]
 801316e:	1a5b      	subs	r3, r3, r1
 8013170:	9302      	str	r3, [sp, #8]
 8013172:	2303      	movs	r3, #3
 8013174:	4343      	muls	r3, r0
 8013176:	0fdd      	lsrs	r5, r3, #31
 8013178:	18ed      	adds	r5, r5, r3
 801317a:	9b01      	ldr	r3, [sp, #4]
 801317c:	9802      	ldr	r0, [sp, #8]
 801317e:	3301      	adds	r3, #1
 8013180:	181b      	adds	r3, r3, r0
 8013182:	106d      	asrs	r5, r5, #1
 8013184:	42ab      	cmp	r3, r5
 8013186:	d900      	bls.n	801318a <__ssputs_r+0x3e>
 8013188:	001d      	movs	r5, r3
 801318a:	0553      	lsls	r3, r2, #21
 801318c:	d532      	bpl.n	80131f4 <__ssputs_r+0xa8>
 801318e:	0029      	movs	r1, r5
 8013190:	0038      	movs	r0, r7
 8013192:	f000 fb49 	bl	8013828 <_malloc_r>
 8013196:	1e06      	subs	r6, r0, #0
 8013198:	d109      	bne.n	80131ae <__ssputs_r+0x62>
 801319a:	230c      	movs	r3, #12
 801319c:	603b      	str	r3, [r7, #0]
 801319e:	2340      	movs	r3, #64	; 0x40
 80131a0:	2001      	movs	r0, #1
 80131a2:	89a2      	ldrh	r2, [r4, #12]
 80131a4:	4240      	negs	r0, r0
 80131a6:	4313      	orrs	r3, r2
 80131a8:	81a3      	strh	r3, [r4, #12]
 80131aa:	b005      	add	sp, #20
 80131ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131ae:	9a02      	ldr	r2, [sp, #8]
 80131b0:	6921      	ldr	r1, [r4, #16]
 80131b2:	f7ff ff85 	bl	80130c0 <memcpy>
 80131b6:	89a3      	ldrh	r3, [r4, #12]
 80131b8:	4a14      	ldr	r2, [pc, #80]	; (801320c <__ssputs_r+0xc0>)
 80131ba:	401a      	ands	r2, r3
 80131bc:	2380      	movs	r3, #128	; 0x80
 80131be:	4313      	orrs	r3, r2
 80131c0:	81a3      	strh	r3, [r4, #12]
 80131c2:	9b02      	ldr	r3, [sp, #8]
 80131c4:	6126      	str	r6, [r4, #16]
 80131c6:	18f6      	adds	r6, r6, r3
 80131c8:	6026      	str	r6, [r4, #0]
 80131ca:	6165      	str	r5, [r4, #20]
 80131cc:	9e01      	ldr	r6, [sp, #4]
 80131ce:	1aed      	subs	r5, r5, r3
 80131d0:	60a5      	str	r5, [r4, #8]
 80131d2:	9b01      	ldr	r3, [sp, #4]
 80131d4:	429e      	cmp	r6, r3
 80131d6:	d900      	bls.n	80131da <__ssputs_r+0x8e>
 80131d8:	9e01      	ldr	r6, [sp, #4]
 80131da:	0032      	movs	r2, r6
 80131dc:	9903      	ldr	r1, [sp, #12]
 80131de:	6820      	ldr	r0, [r4, #0]
 80131e0:	f000 faa3 	bl	801372a <memmove>
 80131e4:	68a3      	ldr	r3, [r4, #8]
 80131e6:	2000      	movs	r0, #0
 80131e8:	1b9b      	subs	r3, r3, r6
 80131ea:	60a3      	str	r3, [r4, #8]
 80131ec:	6823      	ldr	r3, [r4, #0]
 80131ee:	199e      	adds	r6, r3, r6
 80131f0:	6026      	str	r6, [r4, #0]
 80131f2:	e7da      	b.n	80131aa <__ssputs_r+0x5e>
 80131f4:	002a      	movs	r2, r5
 80131f6:	0038      	movs	r0, r7
 80131f8:	f000 fb8c 	bl	8013914 <_realloc_r>
 80131fc:	1e06      	subs	r6, r0, #0
 80131fe:	d1e0      	bne.n	80131c2 <__ssputs_r+0x76>
 8013200:	0038      	movs	r0, r7
 8013202:	6921      	ldr	r1, [r4, #16]
 8013204:	f000 faa4 	bl	8013750 <_free_r>
 8013208:	e7c7      	b.n	801319a <__ssputs_r+0x4e>
 801320a:	46c0      	nop			; (mov r8, r8)
 801320c:	fffffb7f 	.word	0xfffffb7f

08013210 <_svfiprintf_r>:
 8013210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013212:	b0a1      	sub	sp, #132	; 0x84
 8013214:	9003      	str	r0, [sp, #12]
 8013216:	001d      	movs	r5, r3
 8013218:	898b      	ldrh	r3, [r1, #12]
 801321a:	000f      	movs	r7, r1
 801321c:	0016      	movs	r6, r2
 801321e:	061b      	lsls	r3, r3, #24
 8013220:	d511      	bpl.n	8013246 <_svfiprintf_r+0x36>
 8013222:	690b      	ldr	r3, [r1, #16]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d10e      	bne.n	8013246 <_svfiprintf_r+0x36>
 8013228:	2140      	movs	r1, #64	; 0x40
 801322a:	f000 fafd 	bl	8013828 <_malloc_r>
 801322e:	6038      	str	r0, [r7, #0]
 8013230:	6138      	str	r0, [r7, #16]
 8013232:	2800      	cmp	r0, #0
 8013234:	d105      	bne.n	8013242 <_svfiprintf_r+0x32>
 8013236:	230c      	movs	r3, #12
 8013238:	9a03      	ldr	r2, [sp, #12]
 801323a:	3801      	subs	r0, #1
 801323c:	6013      	str	r3, [r2, #0]
 801323e:	b021      	add	sp, #132	; 0x84
 8013240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013242:	2340      	movs	r3, #64	; 0x40
 8013244:	617b      	str	r3, [r7, #20]
 8013246:	2300      	movs	r3, #0
 8013248:	ac08      	add	r4, sp, #32
 801324a:	6163      	str	r3, [r4, #20]
 801324c:	3320      	adds	r3, #32
 801324e:	7663      	strb	r3, [r4, #25]
 8013250:	3310      	adds	r3, #16
 8013252:	76a3      	strb	r3, [r4, #26]
 8013254:	9507      	str	r5, [sp, #28]
 8013256:	0035      	movs	r5, r6
 8013258:	782b      	ldrb	r3, [r5, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d001      	beq.n	8013262 <_svfiprintf_r+0x52>
 801325e:	2b25      	cmp	r3, #37	; 0x25
 8013260:	d147      	bne.n	80132f2 <_svfiprintf_r+0xe2>
 8013262:	1bab      	subs	r3, r5, r6
 8013264:	9305      	str	r3, [sp, #20]
 8013266:	42b5      	cmp	r5, r6
 8013268:	d00c      	beq.n	8013284 <_svfiprintf_r+0x74>
 801326a:	0032      	movs	r2, r6
 801326c:	0039      	movs	r1, r7
 801326e:	9803      	ldr	r0, [sp, #12]
 8013270:	f7ff ff6c 	bl	801314c <__ssputs_r>
 8013274:	1c43      	adds	r3, r0, #1
 8013276:	d100      	bne.n	801327a <_svfiprintf_r+0x6a>
 8013278:	e0ae      	b.n	80133d8 <_svfiprintf_r+0x1c8>
 801327a:	6962      	ldr	r2, [r4, #20]
 801327c:	9b05      	ldr	r3, [sp, #20]
 801327e:	4694      	mov	ip, r2
 8013280:	4463      	add	r3, ip
 8013282:	6163      	str	r3, [r4, #20]
 8013284:	782b      	ldrb	r3, [r5, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d100      	bne.n	801328c <_svfiprintf_r+0x7c>
 801328a:	e0a5      	b.n	80133d8 <_svfiprintf_r+0x1c8>
 801328c:	2201      	movs	r2, #1
 801328e:	2300      	movs	r3, #0
 8013290:	4252      	negs	r2, r2
 8013292:	6062      	str	r2, [r4, #4]
 8013294:	a904      	add	r1, sp, #16
 8013296:	3254      	adds	r2, #84	; 0x54
 8013298:	1852      	adds	r2, r2, r1
 801329a:	1c6e      	adds	r6, r5, #1
 801329c:	6023      	str	r3, [r4, #0]
 801329e:	60e3      	str	r3, [r4, #12]
 80132a0:	60a3      	str	r3, [r4, #8]
 80132a2:	7013      	strb	r3, [r2, #0]
 80132a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80132a6:	2205      	movs	r2, #5
 80132a8:	7831      	ldrb	r1, [r6, #0]
 80132aa:	4854      	ldr	r0, [pc, #336]	; (80133fc <_svfiprintf_r+0x1ec>)
 80132ac:	f000 fa32 	bl	8013714 <memchr>
 80132b0:	1c75      	adds	r5, r6, #1
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d11f      	bne.n	80132f6 <_svfiprintf_r+0xe6>
 80132b6:	6822      	ldr	r2, [r4, #0]
 80132b8:	06d3      	lsls	r3, r2, #27
 80132ba:	d504      	bpl.n	80132c6 <_svfiprintf_r+0xb6>
 80132bc:	2353      	movs	r3, #83	; 0x53
 80132be:	a904      	add	r1, sp, #16
 80132c0:	185b      	adds	r3, r3, r1
 80132c2:	2120      	movs	r1, #32
 80132c4:	7019      	strb	r1, [r3, #0]
 80132c6:	0713      	lsls	r3, r2, #28
 80132c8:	d504      	bpl.n	80132d4 <_svfiprintf_r+0xc4>
 80132ca:	2353      	movs	r3, #83	; 0x53
 80132cc:	a904      	add	r1, sp, #16
 80132ce:	185b      	adds	r3, r3, r1
 80132d0:	212b      	movs	r1, #43	; 0x2b
 80132d2:	7019      	strb	r1, [r3, #0]
 80132d4:	7833      	ldrb	r3, [r6, #0]
 80132d6:	2b2a      	cmp	r3, #42	; 0x2a
 80132d8:	d016      	beq.n	8013308 <_svfiprintf_r+0xf8>
 80132da:	0035      	movs	r5, r6
 80132dc:	2100      	movs	r1, #0
 80132de:	200a      	movs	r0, #10
 80132e0:	68e3      	ldr	r3, [r4, #12]
 80132e2:	782a      	ldrb	r2, [r5, #0]
 80132e4:	1c6e      	adds	r6, r5, #1
 80132e6:	3a30      	subs	r2, #48	; 0x30
 80132e8:	2a09      	cmp	r2, #9
 80132ea:	d94e      	bls.n	801338a <_svfiprintf_r+0x17a>
 80132ec:	2900      	cmp	r1, #0
 80132ee:	d111      	bne.n	8013314 <_svfiprintf_r+0x104>
 80132f0:	e017      	b.n	8013322 <_svfiprintf_r+0x112>
 80132f2:	3501      	adds	r5, #1
 80132f4:	e7b0      	b.n	8013258 <_svfiprintf_r+0x48>
 80132f6:	4b41      	ldr	r3, [pc, #260]	; (80133fc <_svfiprintf_r+0x1ec>)
 80132f8:	6822      	ldr	r2, [r4, #0]
 80132fa:	1ac0      	subs	r0, r0, r3
 80132fc:	2301      	movs	r3, #1
 80132fe:	4083      	lsls	r3, r0
 8013300:	4313      	orrs	r3, r2
 8013302:	002e      	movs	r6, r5
 8013304:	6023      	str	r3, [r4, #0]
 8013306:	e7ce      	b.n	80132a6 <_svfiprintf_r+0x96>
 8013308:	9b07      	ldr	r3, [sp, #28]
 801330a:	1d19      	adds	r1, r3, #4
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	9107      	str	r1, [sp, #28]
 8013310:	2b00      	cmp	r3, #0
 8013312:	db01      	blt.n	8013318 <_svfiprintf_r+0x108>
 8013314:	930b      	str	r3, [sp, #44]	; 0x2c
 8013316:	e004      	b.n	8013322 <_svfiprintf_r+0x112>
 8013318:	425b      	negs	r3, r3
 801331a:	60e3      	str	r3, [r4, #12]
 801331c:	2302      	movs	r3, #2
 801331e:	4313      	orrs	r3, r2
 8013320:	6023      	str	r3, [r4, #0]
 8013322:	782b      	ldrb	r3, [r5, #0]
 8013324:	2b2e      	cmp	r3, #46	; 0x2e
 8013326:	d10a      	bne.n	801333e <_svfiprintf_r+0x12e>
 8013328:	786b      	ldrb	r3, [r5, #1]
 801332a:	2b2a      	cmp	r3, #42	; 0x2a
 801332c:	d135      	bne.n	801339a <_svfiprintf_r+0x18a>
 801332e:	9b07      	ldr	r3, [sp, #28]
 8013330:	3502      	adds	r5, #2
 8013332:	1d1a      	adds	r2, r3, #4
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	9207      	str	r2, [sp, #28]
 8013338:	2b00      	cmp	r3, #0
 801333a:	db2b      	blt.n	8013394 <_svfiprintf_r+0x184>
 801333c:	9309      	str	r3, [sp, #36]	; 0x24
 801333e:	4e30      	ldr	r6, [pc, #192]	; (8013400 <_svfiprintf_r+0x1f0>)
 8013340:	2203      	movs	r2, #3
 8013342:	0030      	movs	r0, r6
 8013344:	7829      	ldrb	r1, [r5, #0]
 8013346:	f000 f9e5 	bl	8013714 <memchr>
 801334a:	2800      	cmp	r0, #0
 801334c:	d006      	beq.n	801335c <_svfiprintf_r+0x14c>
 801334e:	2340      	movs	r3, #64	; 0x40
 8013350:	1b80      	subs	r0, r0, r6
 8013352:	4083      	lsls	r3, r0
 8013354:	6822      	ldr	r2, [r4, #0]
 8013356:	3501      	adds	r5, #1
 8013358:	4313      	orrs	r3, r2
 801335a:	6023      	str	r3, [r4, #0]
 801335c:	7829      	ldrb	r1, [r5, #0]
 801335e:	2206      	movs	r2, #6
 8013360:	4828      	ldr	r0, [pc, #160]	; (8013404 <_svfiprintf_r+0x1f4>)
 8013362:	1c6e      	adds	r6, r5, #1
 8013364:	7621      	strb	r1, [r4, #24]
 8013366:	f000 f9d5 	bl	8013714 <memchr>
 801336a:	2800      	cmp	r0, #0
 801336c:	d03c      	beq.n	80133e8 <_svfiprintf_r+0x1d8>
 801336e:	4b26      	ldr	r3, [pc, #152]	; (8013408 <_svfiprintf_r+0x1f8>)
 8013370:	2b00      	cmp	r3, #0
 8013372:	d125      	bne.n	80133c0 <_svfiprintf_r+0x1b0>
 8013374:	2207      	movs	r2, #7
 8013376:	9b07      	ldr	r3, [sp, #28]
 8013378:	3307      	adds	r3, #7
 801337a:	4393      	bics	r3, r2
 801337c:	3308      	adds	r3, #8
 801337e:	9307      	str	r3, [sp, #28]
 8013380:	6963      	ldr	r3, [r4, #20]
 8013382:	9a04      	ldr	r2, [sp, #16]
 8013384:	189b      	adds	r3, r3, r2
 8013386:	6163      	str	r3, [r4, #20]
 8013388:	e765      	b.n	8013256 <_svfiprintf_r+0x46>
 801338a:	4343      	muls	r3, r0
 801338c:	0035      	movs	r5, r6
 801338e:	2101      	movs	r1, #1
 8013390:	189b      	adds	r3, r3, r2
 8013392:	e7a6      	b.n	80132e2 <_svfiprintf_r+0xd2>
 8013394:	2301      	movs	r3, #1
 8013396:	425b      	negs	r3, r3
 8013398:	e7d0      	b.n	801333c <_svfiprintf_r+0x12c>
 801339a:	2300      	movs	r3, #0
 801339c:	200a      	movs	r0, #10
 801339e:	001a      	movs	r2, r3
 80133a0:	3501      	adds	r5, #1
 80133a2:	6063      	str	r3, [r4, #4]
 80133a4:	7829      	ldrb	r1, [r5, #0]
 80133a6:	1c6e      	adds	r6, r5, #1
 80133a8:	3930      	subs	r1, #48	; 0x30
 80133aa:	2909      	cmp	r1, #9
 80133ac:	d903      	bls.n	80133b6 <_svfiprintf_r+0x1a6>
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d0c5      	beq.n	801333e <_svfiprintf_r+0x12e>
 80133b2:	9209      	str	r2, [sp, #36]	; 0x24
 80133b4:	e7c3      	b.n	801333e <_svfiprintf_r+0x12e>
 80133b6:	4342      	muls	r2, r0
 80133b8:	0035      	movs	r5, r6
 80133ba:	2301      	movs	r3, #1
 80133bc:	1852      	adds	r2, r2, r1
 80133be:	e7f1      	b.n	80133a4 <_svfiprintf_r+0x194>
 80133c0:	ab07      	add	r3, sp, #28
 80133c2:	9300      	str	r3, [sp, #0]
 80133c4:	003a      	movs	r2, r7
 80133c6:	0021      	movs	r1, r4
 80133c8:	4b10      	ldr	r3, [pc, #64]	; (801340c <_svfiprintf_r+0x1fc>)
 80133ca:	9803      	ldr	r0, [sp, #12]
 80133cc:	e000      	b.n	80133d0 <_svfiprintf_r+0x1c0>
 80133ce:	bf00      	nop
 80133d0:	9004      	str	r0, [sp, #16]
 80133d2:	9b04      	ldr	r3, [sp, #16]
 80133d4:	3301      	adds	r3, #1
 80133d6:	d1d3      	bne.n	8013380 <_svfiprintf_r+0x170>
 80133d8:	89bb      	ldrh	r3, [r7, #12]
 80133da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80133dc:	065b      	lsls	r3, r3, #25
 80133de:	d400      	bmi.n	80133e2 <_svfiprintf_r+0x1d2>
 80133e0:	e72d      	b.n	801323e <_svfiprintf_r+0x2e>
 80133e2:	2001      	movs	r0, #1
 80133e4:	4240      	negs	r0, r0
 80133e6:	e72a      	b.n	801323e <_svfiprintf_r+0x2e>
 80133e8:	ab07      	add	r3, sp, #28
 80133ea:	9300      	str	r3, [sp, #0]
 80133ec:	003a      	movs	r2, r7
 80133ee:	0021      	movs	r1, r4
 80133f0:	4b06      	ldr	r3, [pc, #24]	; (801340c <_svfiprintf_r+0x1fc>)
 80133f2:	9803      	ldr	r0, [sp, #12]
 80133f4:	f000 f87c 	bl	80134f0 <_printf_i>
 80133f8:	e7ea      	b.n	80133d0 <_svfiprintf_r+0x1c0>
 80133fa:	46c0      	nop			; (mov r8, r8)
 80133fc:	080159c4 	.word	0x080159c4
 8013400:	080159ca 	.word	0x080159ca
 8013404:	080159ce 	.word	0x080159ce
 8013408:	00000000 	.word	0x00000000
 801340c:	0801314d 	.word	0x0801314d

08013410 <_printf_common>:
 8013410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013412:	0015      	movs	r5, r2
 8013414:	9301      	str	r3, [sp, #4]
 8013416:	688a      	ldr	r2, [r1, #8]
 8013418:	690b      	ldr	r3, [r1, #16]
 801341a:	000c      	movs	r4, r1
 801341c:	9000      	str	r0, [sp, #0]
 801341e:	4293      	cmp	r3, r2
 8013420:	da00      	bge.n	8013424 <_printf_common+0x14>
 8013422:	0013      	movs	r3, r2
 8013424:	0022      	movs	r2, r4
 8013426:	602b      	str	r3, [r5, #0]
 8013428:	3243      	adds	r2, #67	; 0x43
 801342a:	7812      	ldrb	r2, [r2, #0]
 801342c:	2a00      	cmp	r2, #0
 801342e:	d001      	beq.n	8013434 <_printf_common+0x24>
 8013430:	3301      	adds	r3, #1
 8013432:	602b      	str	r3, [r5, #0]
 8013434:	6823      	ldr	r3, [r4, #0]
 8013436:	069b      	lsls	r3, r3, #26
 8013438:	d502      	bpl.n	8013440 <_printf_common+0x30>
 801343a:	682b      	ldr	r3, [r5, #0]
 801343c:	3302      	adds	r3, #2
 801343e:	602b      	str	r3, [r5, #0]
 8013440:	6822      	ldr	r2, [r4, #0]
 8013442:	2306      	movs	r3, #6
 8013444:	0017      	movs	r7, r2
 8013446:	401f      	ands	r7, r3
 8013448:	421a      	tst	r2, r3
 801344a:	d027      	beq.n	801349c <_printf_common+0x8c>
 801344c:	0023      	movs	r3, r4
 801344e:	3343      	adds	r3, #67	; 0x43
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	1e5a      	subs	r2, r3, #1
 8013454:	4193      	sbcs	r3, r2
 8013456:	6822      	ldr	r2, [r4, #0]
 8013458:	0692      	lsls	r2, r2, #26
 801345a:	d430      	bmi.n	80134be <_printf_common+0xae>
 801345c:	0022      	movs	r2, r4
 801345e:	9901      	ldr	r1, [sp, #4]
 8013460:	9800      	ldr	r0, [sp, #0]
 8013462:	9e08      	ldr	r6, [sp, #32]
 8013464:	3243      	adds	r2, #67	; 0x43
 8013466:	47b0      	blx	r6
 8013468:	1c43      	adds	r3, r0, #1
 801346a:	d025      	beq.n	80134b8 <_printf_common+0xa8>
 801346c:	2306      	movs	r3, #6
 801346e:	6820      	ldr	r0, [r4, #0]
 8013470:	682a      	ldr	r2, [r5, #0]
 8013472:	68e1      	ldr	r1, [r4, #12]
 8013474:	2500      	movs	r5, #0
 8013476:	4003      	ands	r3, r0
 8013478:	2b04      	cmp	r3, #4
 801347a:	d103      	bne.n	8013484 <_printf_common+0x74>
 801347c:	1a8d      	subs	r5, r1, r2
 801347e:	43eb      	mvns	r3, r5
 8013480:	17db      	asrs	r3, r3, #31
 8013482:	401d      	ands	r5, r3
 8013484:	68a3      	ldr	r3, [r4, #8]
 8013486:	6922      	ldr	r2, [r4, #16]
 8013488:	4293      	cmp	r3, r2
 801348a:	dd01      	ble.n	8013490 <_printf_common+0x80>
 801348c:	1a9b      	subs	r3, r3, r2
 801348e:	18ed      	adds	r5, r5, r3
 8013490:	2700      	movs	r7, #0
 8013492:	42bd      	cmp	r5, r7
 8013494:	d120      	bne.n	80134d8 <_printf_common+0xc8>
 8013496:	2000      	movs	r0, #0
 8013498:	e010      	b.n	80134bc <_printf_common+0xac>
 801349a:	3701      	adds	r7, #1
 801349c:	68e3      	ldr	r3, [r4, #12]
 801349e:	682a      	ldr	r2, [r5, #0]
 80134a0:	1a9b      	subs	r3, r3, r2
 80134a2:	42bb      	cmp	r3, r7
 80134a4:	ddd2      	ble.n	801344c <_printf_common+0x3c>
 80134a6:	0022      	movs	r2, r4
 80134a8:	2301      	movs	r3, #1
 80134aa:	9901      	ldr	r1, [sp, #4]
 80134ac:	9800      	ldr	r0, [sp, #0]
 80134ae:	9e08      	ldr	r6, [sp, #32]
 80134b0:	3219      	adds	r2, #25
 80134b2:	47b0      	blx	r6
 80134b4:	1c43      	adds	r3, r0, #1
 80134b6:	d1f0      	bne.n	801349a <_printf_common+0x8a>
 80134b8:	2001      	movs	r0, #1
 80134ba:	4240      	negs	r0, r0
 80134bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80134be:	2030      	movs	r0, #48	; 0x30
 80134c0:	18e1      	adds	r1, r4, r3
 80134c2:	3143      	adds	r1, #67	; 0x43
 80134c4:	7008      	strb	r0, [r1, #0]
 80134c6:	0021      	movs	r1, r4
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	3145      	adds	r1, #69	; 0x45
 80134cc:	7809      	ldrb	r1, [r1, #0]
 80134ce:	18a2      	adds	r2, r4, r2
 80134d0:	3243      	adds	r2, #67	; 0x43
 80134d2:	3302      	adds	r3, #2
 80134d4:	7011      	strb	r1, [r2, #0]
 80134d6:	e7c1      	b.n	801345c <_printf_common+0x4c>
 80134d8:	0022      	movs	r2, r4
 80134da:	2301      	movs	r3, #1
 80134dc:	9901      	ldr	r1, [sp, #4]
 80134de:	9800      	ldr	r0, [sp, #0]
 80134e0:	9e08      	ldr	r6, [sp, #32]
 80134e2:	321a      	adds	r2, #26
 80134e4:	47b0      	blx	r6
 80134e6:	1c43      	adds	r3, r0, #1
 80134e8:	d0e6      	beq.n	80134b8 <_printf_common+0xa8>
 80134ea:	3701      	adds	r7, #1
 80134ec:	e7d1      	b.n	8013492 <_printf_common+0x82>
	...

080134f0 <_printf_i>:
 80134f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134f2:	b08b      	sub	sp, #44	; 0x2c
 80134f4:	9206      	str	r2, [sp, #24]
 80134f6:	000a      	movs	r2, r1
 80134f8:	3243      	adds	r2, #67	; 0x43
 80134fa:	9307      	str	r3, [sp, #28]
 80134fc:	9005      	str	r0, [sp, #20]
 80134fe:	9204      	str	r2, [sp, #16]
 8013500:	7e0a      	ldrb	r2, [r1, #24]
 8013502:	000c      	movs	r4, r1
 8013504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013506:	2a78      	cmp	r2, #120	; 0x78
 8013508:	d807      	bhi.n	801351a <_printf_i+0x2a>
 801350a:	2a62      	cmp	r2, #98	; 0x62
 801350c:	d809      	bhi.n	8013522 <_printf_i+0x32>
 801350e:	2a00      	cmp	r2, #0
 8013510:	d100      	bne.n	8013514 <_printf_i+0x24>
 8013512:	e0c1      	b.n	8013698 <_printf_i+0x1a8>
 8013514:	2a58      	cmp	r2, #88	; 0x58
 8013516:	d100      	bne.n	801351a <_printf_i+0x2a>
 8013518:	e08c      	b.n	8013634 <_printf_i+0x144>
 801351a:	0026      	movs	r6, r4
 801351c:	3642      	adds	r6, #66	; 0x42
 801351e:	7032      	strb	r2, [r6, #0]
 8013520:	e022      	b.n	8013568 <_printf_i+0x78>
 8013522:	0010      	movs	r0, r2
 8013524:	3863      	subs	r0, #99	; 0x63
 8013526:	2815      	cmp	r0, #21
 8013528:	d8f7      	bhi.n	801351a <_printf_i+0x2a>
 801352a:	f7ec fded 	bl	8000108 <__gnu_thumb1_case_shi>
 801352e:	0016      	.short	0x0016
 8013530:	fff6001f 	.word	0xfff6001f
 8013534:	fff6fff6 	.word	0xfff6fff6
 8013538:	001ffff6 	.word	0x001ffff6
 801353c:	fff6fff6 	.word	0xfff6fff6
 8013540:	fff6fff6 	.word	0xfff6fff6
 8013544:	003600a8 	.word	0x003600a8
 8013548:	fff6009a 	.word	0xfff6009a
 801354c:	00b9fff6 	.word	0x00b9fff6
 8013550:	0036fff6 	.word	0x0036fff6
 8013554:	fff6fff6 	.word	0xfff6fff6
 8013558:	009e      	.short	0x009e
 801355a:	0026      	movs	r6, r4
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	3642      	adds	r6, #66	; 0x42
 8013560:	1d11      	adds	r1, r2, #4
 8013562:	6019      	str	r1, [r3, #0]
 8013564:	6813      	ldr	r3, [r2, #0]
 8013566:	7033      	strb	r3, [r6, #0]
 8013568:	2301      	movs	r3, #1
 801356a:	e0a7      	b.n	80136bc <_printf_i+0x1cc>
 801356c:	6808      	ldr	r0, [r1, #0]
 801356e:	6819      	ldr	r1, [r3, #0]
 8013570:	1d0a      	adds	r2, r1, #4
 8013572:	0605      	lsls	r5, r0, #24
 8013574:	d50b      	bpl.n	801358e <_printf_i+0x9e>
 8013576:	680d      	ldr	r5, [r1, #0]
 8013578:	601a      	str	r2, [r3, #0]
 801357a:	2d00      	cmp	r5, #0
 801357c:	da03      	bge.n	8013586 <_printf_i+0x96>
 801357e:	232d      	movs	r3, #45	; 0x2d
 8013580:	9a04      	ldr	r2, [sp, #16]
 8013582:	426d      	negs	r5, r5
 8013584:	7013      	strb	r3, [r2, #0]
 8013586:	4b61      	ldr	r3, [pc, #388]	; (801370c <_printf_i+0x21c>)
 8013588:	270a      	movs	r7, #10
 801358a:	9303      	str	r3, [sp, #12]
 801358c:	e01b      	b.n	80135c6 <_printf_i+0xd6>
 801358e:	680d      	ldr	r5, [r1, #0]
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	0641      	lsls	r1, r0, #25
 8013594:	d5f1      	bpl.n	801357a <_printf_i+0x8a>
 8013596:	b22d      	sxth	r5, r5
 8013598:	e7ef      	b.n	801357a <_printf_i+0x8a>
 801359a:	680d      	ldr	r5, [r1, #0]
 801359c:	6819      	ldr	r1, [r3, #0]
 801359e:	1d08      	adds	r0, r1, #4
 80135a0:	6018      	str	r0, [r3, #0]
 80135a2:	062e      	lsls	r6, r5, #24
 80135a4:	d501      	bpl.n	80135aa <_printf_i+0xba>
 80135a6:	680d      	ldr	r5, [r1, #0]
 80135a8:	e003      	b.n	80135b2 <_printf_i+0xc2>
 80135aa:	066d      	lsls	r5, r5, #25
 80135ac:	d5fb      	bpl.n	80135a6 <_printf_i+0xb6>
 80135ae:	680d      	ldr	r5, [r1, #0]
 80135b0:	b2ad      	uxth	r5, r5
 80135b2:	4b56      	ldr	r3, [pc, #344]	; (801370c <_printf_i+0x21c>)
 80135b4:	2708      	movs	r7, #8
 80135b6:	9303      	str	r3, [sp, #12]
 80135b8:	2a6f      	cmp	r2, #111	; 0x6f
 80135ba:	d000      	beq.n	80135be <_printf_i+0xce>
 80135bc:	3702      	adds	r7, #2
 80135be:	0023      	movs	r3, r4
 80135c0:	2200      	movs	r2, #0
 80135c2:	3343      	adds	r3, #67	; 0x43
 80135c4:	701a      	strb	r2, [r3, #0]
 80135c6:	6863      	ldr	r3, [r4, #4]
 80135c8:	60a3      	str	r3, [r4, #8]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	db03      	blt.n	80135d6 <_printf_i+0xe6>
 80135ce:	2204      	movs	r2, #4
 80135d0:	6821      	ldr	r1, [r4, #0]
 80135d2:	4391      	bics	r1, r2
 80135d4:	6021      	str	r1, [r4, #0]
 80135d6:	2d00      	cmp	r5, #0
 80135d8:	d102      	bne.n	80135e0 <_printf_i+0xf0>
 80135da:	9e04      	ldr	r6, [sp, #16]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d00c      	beq.n	80135fa <_printf_i+0x10a>
 80135e0:	9e04      	ldr	r6, [sp, #16]
 80135e2:	0028      	movs	r0, r5
 80135e4:	0039      	movs	r1, r7
 80135e6:	f7ec fe1f 	bl	8000228 <__aeabi_uidivmod>
 80135ea:	9b03      	ldr	r3, [sp, #12]
 80135ec:	3e01      	subs	r6, #1
 80135ee:	5c5b      	ldrb	r3, [r3, r1]
 80135f0:	7033      	strb	r3, [r6, #0]
 80135f2:	002b      	movs	r3, r5
 80135f4:	0005      	movs	r5, r0
 80135f6:	429f      	cmp	r7, r3
 80135f8:	d9f3      	bls.n	80135e2 <_printf_i+0xf2>
 80135fa:	2f08      	cmp	r7, #8
 80135fc:	d109      	bne.n	8013612 <_printf_i+0x122>
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	07db      	lsls	r3, r3, #31
 8013602:	d506      	bpl.n	8013612 <_printf_i+0x122>
 8013604:	6863      	ldr	r3, [r4, #4]
 8013606:	6922      	ldr	r2, [r4, #16]
 8013608:	4293      	cmp	r3, r2
 801360a:	dc02      	bgt.n	8013612 <_printf_i+0x122>
 801360c:	2330      	movs	r3, #48	; 0x30
 801360e:	3e01      	subs	r6, #1
 8013610:	7033      	strb	r3, [r6, #0]
 8013612:	9b04      	ldr	r3, [sp, #16]
 8013614:	1b9b      	subs	r3, r3, r6
 8013616:	6123      	str	r3, [r4, #16]
 8013618:	9b07      	ldr	r3, [sp, #28]
 801361a:	0021      	movs	r1, r4
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	9805      	ldr	r0, [sp, #20]
 8013620:	9b06      	ldr	r3, [sp, #24]
 8013622:	aa09      	add	r2, sp, #36	; 0x24
 8013624:	f7ff fef4 	bl	8013410 <_printf_common>
 8013628:	1c43      	adds	r3, r0, #1
 801362a:	d14c      	bne.n	80136c6 <_printf_i+0x1d6>
 801362c:	2001      	movs	r0, #1
 801362e:	4240      	negs	r0, r0
 8013630:	b00b      	add	sp, #44	; 0x2c
 8013632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013634:	3145      	adds	r1, #69	; 0x45
 8013636:	700a      	strb	r2, [r1, #0]
 8013638:	4a34      	ldr	r2, [pc, #208]	; (801370c <_printf_i+0x21c>)
 801363a:	9203      	str	r2, [sp, #12]
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	6821      	ldr	r1, [r4, #0]
 8013640:	ca20      	ldmia	r2!, {r5}
 8013642:	601a      	str	r2, [r3, #0]
 8013644:	0608      	lsls	r0, r1, #24
 8013646:	d516      	bpl.n	8013676 <_printf_i+0x186>
 8013648:	07cb      	lsls	r3, r1, #31
 801364a:	d502      	bpl.n	8013652 <_printf_i+0x162>
 801364c:	2320      	movs	r3, #32
 801364e:	4319      	orrs	r1, r3
 8013650:	6021      	str	r1, [r4, #0]
 8013652:	2710      	movs	r7, #16
 8013654:	2d00      	cmp	r5, #0
 8013656:	d1b2      	bne.n	80135be <_printf_i+0xce>
 8013658:	2320      	movs	r3, #32
 801365a:	6822      	ldr	r2, [r4, #0]
 801365c:	439a      	bics	r2, r3
 801365e:	6022      	str	r2, [r4, #0]
 8013660:	e7ad      	b.n	80135be <_printf_i+0xce>
 8013662:	2220      	movs	r2, #32
 8013664:	6809      	ldr	r1, [r1, #0]
 8013666:	430a      	orrs	r2, r1
 8013668:	6022      	str	r2, [r4, #0]
 801366a:	0022      	movs	r2, r4
 801366c:	2178      	movs	r1, #120	; 0x78
 801366e:	3245      	adds	r2, #69	; 0x45
 8013670:	7011      	strb	r1, [r2, #0]
 8013672:	4a27      	ldr	r2, [pc, #156]	; (8013710 <_printf_i+0x220>)
 8013674:	e7e1      	b.n	801363a <_printf_i+0x14a>
 8013676:	0648      	lsls	r0, r1, #25
 8013678:	d5e6      	bpl.n	8013648 <_printf_i+0x158>
 801367a:	b2ad      	uxth	r5, r5
 801367c:	e7e4      	b.n	8013648 <_printf_i+0x158>
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	680d      	ldr	r5, [r1, #0]
 8013682:	1d10      	adds	r0, r2, #4
 8013684:	6949      	ldr	r1, [r1, #20]
 8013686:	6018      	str	r0, [r3, #0]
 8013688:	6813      	ldr	r3, [r2, #0]
 801368a:	062e      	lsls	r6, r5, #24
 801368c:	d501      	bpl.n	8013692 <_printf_i+0x1a2>
 801368e:	6019      	str	r1, [r3, #0]
 8013690:	e002      	b.n	8013698 <_printf_i+0x1a8>
 8013692:	066d      	lsls	r5, r5, #25
 8013694:	d5fb      	bpl.n	801368e <_printf_i+0x19e>
 8013696:	8019      	strh	r1, [r3, #0]
 8013698:	2300      	movs	r3, #0
 801369a:	9e04      	ldr	r6, [sp, #16]
 801369c:	6123      	str	r3, [r4, #16]
 801369e:	e7bb      	b.n	8013618 <_printf_i+0x128>
 80136a0:	681a      	ldr	r2, [r3, #0]
 80136a2:	1d11      	adds	r1, r2, #4
 80136a4:	6019      	str	r1, [r3, #0]
 80136a6:	6816      	ldr	r6, [r2, #0]
 80136a8:	2100      	movs	r1, #0
 80136aa:	0030      	movs	r0, r6
 80136ac:	6862      	ldr	r2, [r4, #4]
 80136ae:	f000 f831 	bl	8013714 <memchr>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d001      	beq.n	80136ba <_printf_i+0x1ca>
 80136b6:	1b80      	subs	r0, r0, r6
 80136b8:	6060      	str	r0, [r4, #4]
 80136ba:	6863      	ldr	r3, [r4, #4]
 80136bc:	6123      	str	r3, [r4, #16]
 80136be:	2300      	movs	r3, #0
 80136c0:	9a04      	ldr	r2, [sp, #16]
 80136c2:	7013      	strb	r3, [r2, #0]
 80136c4:	e7a8      	b.n	8013618 <_printf_i+0x128>
 80136c6:	6923      	ldr	r3, [r4, #16]
 80136c8:	0032      	movs	r2, r6
 80136ca:	9906      	ldr	r1, [sp, #24]
 80136cc:	9805      	ldr	r0, [sp, #20]
 80136ce:	9d07      	ldr	r5, [sp, #28]
 80136d0:	47a8      	blx	r5
 80136d2:	1c43      	adds	r3, r0, #1
 80136d4:	d0aa      	beq.n	801362c <_printf_i+0x13c>
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	079b      	lsls	r3, r3, #30
 80136da:	d415      	bmi.n	8013708 <_printf_i+0x218>
 80136dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136de:	68e0      	ldr	r0, [r4, #12]
 80136e0:	4298      	cmp	r0, r3
 80136e2:	daa5      	bge.n	8013630 <_printf_i+0x140>
 80136e4:	0018      	movs	r0, r3
 80136e6:	e7a3      	b.n	8013630 <_printf_i+0x140>
 80136e8:	0022      	movs	r2, r4
 80136ea:	2301      	movs	r3, #1
 80136ec:	9906      	ldr	r1, [sp, #24]
 80136ee:	9805      	ldr	r0, [sp, #20]
 80136f0:	9e07      	ldr	r6, [sp, #28]
 80136f2:	3219      	adds	r2, #25
 80136f4:	47b0      	blx	r6
 80136f6:	1c43      	adds	r3, r0, #1
 80136f8:	d098      	beq.n	801362c <_printf_i+0x13c>
 80136fa:	3501      	adds	r5, #1
 80136fc:	68e3      	ldr	r3, [r4, #12]
 80136fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013700:	1a9b      	subs	r3, r3, r2
 8013702:	42ab      	cmp	r3, r5
 8013704:	dcf0      	bgt.n	80136e8 <_printf_i+0x1f8>
 8013706:	e7e9      	b.n	80136dc <_printf_i+0x1ec>
 8013708:	2500      	movs	r5, #0
 801370a:	e7f7      	b.n	80136fc <_printf_i+0x20c>
 801370c:	080159d5 	.word	0x080159d5
 8013710:	080159e6 	.word	0x080159e6

08013714 <memchr>:
 8013714:	b2c9      	uxtb	r1, r1
 8013716:	1882      	adds	r2, r0, r2
 8013718:	4290      	cmp	r0, r2
 801371a:	d101      	bne.n	8013720 <memchr+0xc>
 801371c:	2000      	movs	r0, #0
 801371e:	4770      	bx	lr
 8013720:	7803      	ldrb	r3, [r0, #0]
 8013722:	428b      	cmp	r3, r1
 8013724:	d0fb      	beq.n	801371e <memchr+0xa>
 8013726:	3001      	adds	r0, #1
 8013728:	e7f6      	b.n	8013718 <memchr+0x4>

0801372a <memmove>:
 801372a:	b510      	push	{r4, lr}
 801372c:	4288      	cmp	r0, r1
 801372e:	d902      	bls.n	8013736 <memmove+0xc>
 8013730:	188b      	adds	r3, r1, r2
 8013732:	4298      	cmp	r0, r3
 8013734:	d303      	bcc.n	801373e <memmove+0x14>
 8013736:	2300      	movs	r3, #0
 8013738:	e007      	b.n	801374a <memmove+0x20>
 801373a:	5c8b      	ldrb	r3, [r1, r2]
 801373c:	5483      	strb	r3, [r0, r2]
 801373e:	3a01      	subs	r2, #1
 8013740:	d2fb      	bcs.n	801373a <memmove+0x10>
 8013742:	bd10      	pop	{r4, pc}
 8013744:	5ccc      	ldrb	r4, [r1, r3]
 8013746:	54c4      	strb	r4, [r0, r3]
 8013748:	3301      	adds	r3, #1
 801374a:	429a      	cmp	r2, r3
 801374c:	d1fa      	bne.n	8013744 <memmove+0x1a>
 801374e:	e7f8      	b.n	8013742 <memmove+0x18>

08013750 <_free_r>:
 8013750:	b570      	push	{r4, r5, r6, lr}
 8013752:	0005      	movs	r5, r0
 8013754:	2900      	cmp	r1, #0
 8013756:	d010      	beq.n	801377a <_free_r+0x2a>
 8013758:	1f0c      	subs	r4, r1, #4
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	da00      	bge.n	8013762 <_free_r+0x12>
 8013760:	18e4      	adds	r4, r4, r3
 8013762:	0028      	movs	r0, r5
 8013764:	f000 f918 	bl	8013998 <__malloc_lock>
 8013768:	4a1d      	ldr	r2, [pc, #116]	; (80137e0 <_free_r+0x90>)
 801376a:	6813      	ldr	r3, [r2, #0]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d105      	bne.n	801377c <_free_r+0x2c>
 8013770:	6063      	str	r3, [r4, #4]
 8013772:	6014      	str	r4, [r2, #0]
 8013774:	0028      	movs	r0, r5
 8013776:	f000 f917 	bl	80139a8 <__malloc_unlock>
 801377a:	bd70      	pop	{r4, r5, r6, pc}
 801377c:	42a3      	cmp	r3, r4
 801377e:	d908      	bls.n	8013792 <_free_r+0x42>
 8013780:	6821      	ldr	r1, [r4, #0]
 8013782:	1860      	adds	r0, r4, r1
 8013784:	4283      	cmp	r3, r0
 8013786:	d1f3      	bne.n	8013770 <_free_r+0x20>
 8013788:	6818      	ldr	r0, [r3, #0]
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	1841      	adds	r1, r0, r1
 801378e:	6021      	str	r1, [r4, #0]
 8013790:	e7ee      	b.n	8013770 <_free_r+0x20>
 8013792:	001a      	movs	r2, r3
 8013794:	685b      	ldr	r3, [r3, #4]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d001      	beq.n	801379e <_free_r+0x4e>
 801379a:	42a3      	cmp	r3, r4
 801379c:	d9f9      	bls.n	8013792 <_free_r+0x42>
 801379e:	6811      	ldr	r1, [r2, #0]
 80137a0:	1850      	adds	r0, r2, r1
 80137a2:	42a0      	cmp	r0, r4
 80137a4:	d10b      	bne.n	80137be <_free_r+0x6e>
 80137a6:	6820      	ldr	r0, [r4, #0]
 80137a8:	1809      	adds	r1, r1, r0
 80137aa:	1850      	adds	r0, r2, r1
 80137ac:	6011      	str	r1, [r2, #0]
 80137ae:	4283      	cmp	r3, r0
 80137b0:	d1e0      	bne.n	8013774 <_free_r+0x24>
 80137b2:	6818      	ldr	r0, [r3, #0]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	1841      	adds	r1, r0, r1
 80137b8:	6011      	str	r1, [r2, #0]
 80137ba:	6053      	str	r3, [r2, #4]
 80137bc:	e7da      	b.n	8013774 <_free_r+0x24>
 80137be:	42a0      	cmp	r0, r4
 80137c0:	d902      	bls.n	80137c8 <_free_r+0x78>
 80137c2:	230c      	movs	r3, #12
 80137c4:	602b      	str	r3, [r5, #0]
 80137c6:	e7d5      	b.n	8013774 <_free_r+0x24>
 80137c8:	6821      	ldr	r1, [r4, #0]
 80137ca:	1860      	adds	r0, r4, r1
 80137cc:	4283      	cmp	r3, r0
 80137ce:	d103      	bne.n	80137d8 <_free_r+0x88>
 80137d0:	6818      	ldr	r0, [r3, #0]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	1841      	adds	r1, r0, r1
 80137d6:	6021      	str	r1, [r4, #0]
 80137d8:	6063      	str	r3, [r4, #4]
 80137da:	6054      	str	r4, [r2, #4]
 80137dc:	e7ca      	b.n	8013774 <_free_r+0x24>
 80137de:	46c0      	nop			; (mov r8, r8)
 80137e0:	20001618 	.word	0x20001618

080137e4 <sbrk_aligned>:
 80137e4:	b570      	push	{r4, r5, r6, lr}
 80137e6:	4e0f      	ldr	r6, [pc, #60]	; (8013824 <sbrk_aligned+0x40>)
 80137e8:	000d      	movs	r5, r1
 80137ea:	6831      	ldr	r1, [r6, #0]
 80137ec:	0004      	movs	r4, r0
 80137ee:	2900      	cmp	r1, #0
 80137f0:	d102      	bne.n	80137f8 <sbrk_aligned+0x14>
 80137f2:	f000 f8bf 	bl	8013974 <_sbrk_r>
 80137f6:	6030      	str	r0, [r6, #0]
 80137f8:	0029      	movs	r1, r5
 80137fa:	0020      	movs	r0, r4
 80137fc:	f000 f8ba 	bl	8013974 <_sbrk_r>
 8013800:	1c43      	adds	r3, r0, #1
 8013802:	d00a      	beq.n	801381a <sbrk_aligned+0x36>
 8013804:	2303      	movs	r3, #3
 8013806:	1cc5      	adds	r5, r0, #3
 8013808:	439d      	bics	r5, r3
 801380a:	42a8      	cmp	r0, r5
 801380c:	d007      	beq.n	801381e <sbrk_aligned+0x3a>
 801380e:	1a29      	subs	r1, r5, r0
 8013810:	0020      	movs	r0, r4
 8013812:	f000 f8af 	bl	8013974 <_sbrk_r>
 8013816:	1c43      	adds	r3, r0, #1
 8013818:	d101      	bne.n	801381e <sbrk_aligned+0x3a>
 801381a:	2501      	movs	r5, #1
 801381c:	426d      	negs	r5, r5
 801381e:	0028      	movs	r0, r5
 8013820:	bd70      	pop	{r4, r5, r6, pc}
 8013822:	46c0      	nop			; (mov r8, r8)
 8013824:	2000161c 	.word	0x2000161c

08013828 <_malloc_r>:
 8013828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801382a:	2203      	movs	r2, #3
 801382c:	1ccb      	adds	r3, r1, #3
 801382e:	4393      	bics	r3, r2
 8013830:	3308      	adds	r3, #8
 8013832:	0006      	movs	r6, r0
 8013834:	001f      	movs	r7, r3
 8013836:	2b0c      	cmp	r3, #12
 8013838:	d232      	bcs.n	80138a0 <_malloc_r+0x78>
 801383a:	270c      	movs	r7, #12
 801383c:	42b9      	cmp	r1, r7
 801383e:	d831      	bhi.n	80138a4 <_malloc_r+0x7c>
 8013840:	0030      	movs	r0, r6
 8013842:	f000 f8a9 	bl	8013998 <__malloc_lock>
 8013846:	4d32      	ldr	r5, [pc, #200]	; (8013910 <_malloc_r+0xe8>)
 8013848:	682b      	ldr	r3, [r5, #0]
 801384a:	001c      	movs	r4, r3
 801384c:	2c00      	cmp	r4, #0
 801384e:	d12e      	bne.n	80138ae <_malloc_r+0x86>
 8013850:	0039      	movs	r1, r7
 8013852:	0030      	movs	r0, r6
 8013854:	f7ff ffc6 	bl	80137e4 <sbrk_aligned>
 8013858:	0004      	movs	r4, r0
 801385a:	1c43      	adds	r3, r0, #1
 801385c:	d11e      	bne.n	801389c <_malloc_r+0x74>
 801385e:	682c      	ldr	r4, [r5, #0]
 8013860:	0025      	movs	r5, r4
 8013862:	2d00      	cmp	r5, #0
 8013864:	d14a      	bne.n	80138fc <_malloc_r+0xd4>
 8013866:	6823      	ldr	r3, [r4, #0]
 8013868:	0029      	movs	r1, r5
 801386a:	18e3      	adds	r3, r4, r3
 801386c:	0030      	movs	r0, r6
 801386e:	9301      	str	r3, [sp, #4]
 8013870:	f000 f880 	bl	8013974 <_sbrk_r>
 8013874:	9b01      	ldr	r3, [sp, #4]
 8013876:	4283      	cmp	r3, r0
 8013878:	d143      	bne.n	8013902 <_malloc_r+0xda>
 801387a:	6823      	ldr	r3, [r4, #0]
 801387c:	3703      	adds	r7, #3
 801387e:	1aff      	subs	r7, r7, r3
 8013880:	2303      	movs	r3, #3
 8013882:	439f      	bics	r7, r3
 8013884:	3708      	adds	r7, #8
 8013886:	2f0c      	cmp	r7, #12
 8013888:	d200      	bcs.n	801388c <_malloc_r+0x64>
 801388a:	270c      	movs	r7, #12
 801388c:	0039      	movs	r1, r7
 801388e:	0030      	movs	r0, r6
 8013890:	f7ff ffa8 	bl	80137e4 <sbrk_aligned>
 8013894:	1c43      	adds	r3, r0, #1
 8013896:	d034      	beq.n	8013902 <_malloc_r+0xda>
 8013898:	6823      	ldr	r3, [r4, #0]
 801389a:	19df      	adds	r7, r3, r7
 801389c:	6027      	str	r7, [r4, #0]
 801389e:	e013      	b.n	80138c8 <_malloc_r+0xa0>
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	dacb      	bge.n	801383c <_malloc_r+0x14>
 80138a4:	230c      	movs	r3, #12
 80138a6:	2500      	movs	r5, #0
 80138a8:	6033      	str	r3, [r6, #0]
 80138aa:	0028      	movs	r0, r5
 80138ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80138ae:	6822      	ldr	r2, [r4, #0]
 80138b0:	1bd1      	subs	r1, r2, r7
 80138b2:	d420      	bmi.n	80138f6 <_malloc_r+0xce>
 80138b4:	290b      	cmp	r1, #11
 80138b6:	d917      	bls.n	80138e8 <_malloc_r+0xc0>
 80138b8:	19e2      	adds	r2, r4, r7
 80138ba:	6027      	str	r7, [r4, #0]
 80138bc:	42a3      	cmp	r3, r4
 80138be:	d111      	bne.n	80138e4 <_malloc_r+0xbc>
 80138c0:	602a      	str	r2, [r5, #0]
 80138c2:	6863      	ldr	r3, [r4, #4]
 80138c4:	6011      	str	r1, [r2, #0]
 80138c6:	6053      	str	r3, [r2, #4]
 80138c8:	0030      	movs	r0, r6
 80138ca:	0025      	movs	r5, r4
 80138cc:	f000 f86c 	bl	80139a8 <__malloc_unlock>
 80138d0:	2207      	movs	r2, #7
 80138d2:	350b      	adds	r5, #11
 80138d4:	1d23      	adds	r3, r4, #4
 80138d6:	4395      	bics	r5, r2
 80138d8:	1aea      	subs	r2, r5, r3
 80138da:	429d      	cmp	r5, r3
 80138dc:	d0e5      	beq.n	80138aa <_malloc_r+0x82>
 80138de:	1b5b      	subs	r3, r3, r5
 80138e0:	50a3      	str	r3, [r4, r2]
 80138e2:	e7e2      	b.n	80138aa <_malloc_r+0x82>
 80138e4:	605a      	str	r2, [r3, #4]
 80138e6:	e7ec      	b.n	80138c2 <_malloc_r+0x9a>
 80138e8:	6862      	ldr	r2, [r4, #4]
 80138ea:	42a3      	cmp	r3, r4
 80138ec:	d101      	bne.n	80138f2 <_malloc_r+0xca>
 80138ee:	602a      	str	r2, [r5, #0]
 80138f0:	e7ea      	b.n	80138c8 <_malloc_r+0xa0>
 80138f2:	605a      	str	r2, [r3, #4]
 80138f4:	e7e8      	b.n	80138c8 <_malloc_r+0xa0>
 80138f6:	0023      	movs	r3, r4
 80138f8:	6864      	ldr	r4, [r4, #4]
 80138fa:	e7a7      	b.n	801384c <_malloc_r+0x24>
 80138fc:	002c      	movs	r4, r5
 80138fe:	686d      	ldr	r5, [r5, #4]
 8013900:	e7af      	b.n	8013862 <_malloc_r+0x3a>
 8013902:	230c      	movs	r3, #12
 8013904:	0030      	movs	r0, r6
 8013906:	6033      	str	r3, [r6, #0]
 8013908:	f000 f84e 	bl	80139a8 <__malloc_unlock>
 801390c:	e7cd      	b.n	80138aa <_malloc_r+0x82>
 801390e:	46c0      	nop			; (mov r8, r8)
 8013910:	20001618 	.word	0x20001618

08013914 <_realloc_r>:
 8013914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013916:	0007      	movs	r7, r0
 8013918:	000e      	movs	r6, r1
 801391a:	0014      	movs	r4, r2
 801391c:	2900      	cmp	r1, #0
 801391e:	d105      	bne.n	801392c <_realloc_r+0x18>
 8013920:	0011      	movs	r1, r2
 8013922:	f7ff ff81 	bl	8013828 <_malloc_r>
 8013926:	0005      	movs	r5, r0
 8013928:	0028      	movs	r0, r5
 801392a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801392c:	2a00      	cmp	r2, #0
 801392e:	d103      	bne.n	8013938 <_realloc_r+0x24>
 8013930:	f7ff ff0e 	bl	8013750 <_free_r>
 8013934:	0025      	movs	r5, r4
 8013936:	e7f7      	b.n	8013928 <_realloc_r+0x14>
 8013938:	f000 f83e 	bl	80139b8 <_malloc_usable_size_r>
 801393c:	9001      	str	r0, [sp, #4]
 801393e:	4284      	cmp	r4, r0
 8013940:	d803      	bhi.n	801394a <_realloc_r+0x36>
 8013942:	0035      	movs	r5, r6
 8013944:	0843      	lsrs	r3, r0, #1
 8013946:	42a3      	cmp	r3, r4
 8013948:	d3ee      	bcc.n	8013928 <_realloc_r+0x14>
 801394a:	0021      	movs	r1, r4
 801394c:	0038      	movs	r0, r7
 801394e:	f7ff ff6b 	bl	8013828 <_malloc_r>
 8013952:	1e05      	subs	r5, r0, #0
 8013954:	d0e8      	beq.n	8013928 <_realloc_r+0x14>
 8013956:	9b01      	ldr	r3, [sp, #4]
 8013958:	0022      	movs	r2, r4
 801395a:	429c      	cmp	r4, r3
 801395c:	d900      	bls.n	8013960 <_realloc_r+0x4c>
 801395e:	001a      	movs	r2, r3
 8013960:	0031      	movs	r1, r6
 8013962:	0028      	movs	r0, r5
 8013964:	f7ff fbac 	bl	80130c0 <memcpy>
 8013968:	0031      	movs	r1, r6
 801396a:	0038      	movs	r0, r7
 801396c:	f7ff fef0 	bl	8013750 <_free_r>
 8013970:	e7da      	b.n	8013928 <_realloc_r+0x14>
	...

08013974 <_sbrk_r>:
 8013974:	2300      	movs	r3, #0
 8013976:	b570      	push	{r4, r5, r6, lr}
 8013978:	4d06      	ldr	r5, [pc, #24]	; (8013994 <_sbrk_r+0x20>)
 801397a:	0004      	movs	r4, r0
 801397c:	0008      	movs	r0, r1
 801397e:	602b      	str	r3, [r5, #0]
 8013980:	f7ee f984 	bl	8001c8c <_sbrk>
 8013984:	1c43      	adds	r3, r0, #1
 8013986:	d103      	bne.n	8013990 <_sbrk_r+0x1c>
 8013988:	682b      	ldr	r3, [r5, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d000      	beq.n	8013990 <_sbrk_r+0x1c>
 801398e:	6023      	str	r3, [r4, #0]
 8013990:	bd70      	pop	{r4, r5, r6, pc}
 8013992:	46c0      	nop			; (mov r8, r8)
 8013994:	20001620 	.word	0x20001620

08013998 <__malloc_lock>:
 8013998:	b510      	push	{r4, lr}
 801399a:	4802      	ldr	r0, [pc, #8]	; (80139a4 <__malloc_lock+0xc>)
 801399c:	f000 f814 	bl	80139c8 <__retarget_lock_acquire_recursive>
 80139a0:	bd10      	pop	{r4, pc}
 80139a2:	46c0      	nop			; (mov r8, r8)
 80139a4:	20001624 	.word	0x20001624

080139a8 <__malloc_unlock>:
 80139a8:	b510      	push	{r4, lr}
 80139aa:	4802      	ldr	r0, [pc, #8]	; (80139b4 <__malloc_unlock+0xc>)
 80139ac:	f000 f80d 	bl	80139ca <__retarget_lock_release_recursive>
 80139b0:	bd10      	pop	{r4, pc}
 80139b2:	46c0      	nop			; (mov r8, r8)
 80139b4:	20001624 	.word	0x20001624

080139b8 <_malloc_usable_size_r>:
 80139b8:	1f0b      	subs	r3, r1, #4
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	1f18      	subs	r0, r3, #4
 80139be:	2b00      	cmp	r3, #0
 80139c0:	da01      	bge.n	80139c6 <_malloc_usable_size_r+0xe>
 80139c2:	580b      	ldr	r3, [r1, r0]
 80139c4:	18c0      	adds	r0, r0, r3
 80139c6:	4770      	bx	lr

080139c8 <__retarget_lock_acquire_recursive>:
 80139c8:	4770      	bx	lr

080139ca <__retarget_lock_release_recursive>:
 80139ca:	4770      	bx	lr

080139cc <ceilf>:
 80139cc:	b570      	push	{r4, r5, r6, lr}
 80139ce:	0045      	lsls	r5, r0, #1
 80139d0:	086e      	lsrs	r6, r5, #1
 80139d2:	0e2d      	lsrs	r5, r5, #24
 80139d4:	3d7f      	subs	r5, #127	; 0x7f
 80139d6:	0004      	movs	r4, r0
 80139d8:	2d16      	cmp	r5, #22
 80139da:	dc25      	bgt.n	8013a28 <ceilf+0x5c>
 80139dc:	2d00      	cmp	r5, #0
 80139de:	da0f      	bge.n	8013a00 <ceilf+0x34>
 80139e0:	4917      	ldr	r1, [pc, #92]	; (8013a40 <ceilf+0x74>)
 80139e2:	f7ec fe7d 	bl	80006e0 <__aeabi_fadd>
 80139e6:	2100      	movs	r1, #0
 80139e8:	f7ec fd34 	bl	8000454 <__aeabi_fcmpgt>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	d005      	beq.n	80139fc <ceilf+0x30>
 80139f0:	2c00      	cmp	r4, #0
 80139f2:	db21      	blt.n	8013a38 <ceilf+0x6c>
 80139f4:	2e00      	cmp	r6, #0
 80139f6:	d001      	beq.n	80139fc <ceilf+0x30>
 80139f8:	24fe      	movs	r4, #254	; 0xfe
 80139fa:	05a4      	lsls	r4, r4, #22
 80139fc:	1c20      	adds	r0, r4, #0
 80139fe:	e01a      	b.n	8013a36 <ceilf+0x6a>
 8013a00:	4e10      	ldr	r6, [pc, #64]	; (8013a44 <ceilf+0x78>)
 8013a02:	412e      	asrs	r6, r5
 8013a04:	4206      	tst	r6, r0
 8013a06:	d016      	beq.n	8013a36 <ceilf+0x6a>
 8013a08:	490d      	ldr	r1, [pc, #52]	; (8013a40 <ceilf+0x74>)
 8013a0a:	f7ec fe69 	bl	80006e0 <__aeabi_fadd>
 8013a0e:	2100      	movs	r1, #0
 8013a10:	f7ec fd20 	bl	8000454 <__aeabi_fcmpgt>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d0f1      	beq.n	80139fc <ceilf+0x30>
 8013a18:	2c00      	cmp	r4, #0
 8013a1a:	dd03      	ble.n	8013a24 <ceilf+0x58>
 8013a1c:	2380      	movs	r3, #128	; 0x80
 8013a1e:	041b      	lsls	r3, r3, #16
 8013a20:	412b      	asrs	r3, r5
 8013a22:	18e4      	adds	r4, r4, r3
 8013a24:	43b4      	bics	r4, r6
 8013a26:	e7e9      	b.n	80139fc <ceilf+0x30>
 8013a28:	23ff      	movs	r3, #255	; 0xff
 8013a2a:	05db      	lsls	r3, r3, #23
 8013a2c:	429e      	cmp	r6, r3
 8013a2e:	d302      	bcc.n	8013a36 <ceilf+0x6a>
 8013a30:	1c01      	adds	r1, r0, #0
 8013a32:	f7ec fe55 	bl	80006e0 <__aeabi_fadd>
 8013a36:	bd70      	pop	{r4, r5, r6, pc}
 8013a38:	2480      	movs	r4, #128	; 0x80
 8013a3a:	0624      	lsls	r4, r4, #24
 8013a3c:	e7de      	b.n	80139fc <ceilf+0x30>
 8013a3e:	46c0      	nop			; (mov r8, r8)
 8013a40:	7149f2ca 	.word	0x7149f2ca
 8013a44:	007fffff 	.word	0x007fffff

08013a48 <cosf>:
 8013a48:	b507      	push	{r0, r1, r2, lr}
 8013a4a:	4a18      	ldr	r2, [pc, #96]	; (8013aac <cosf+0x64>)
 8013a4c:	0043      	lsls	r3, r0, #1
 8013a4e:	2100      	movs	r1, #0
 8013a50:	085b      	lsrs	r3, r3, #1
 8013a52:	4293      	cmp	r3, r2
 8013a54:	dd14      	ble.n	8013a80 <cosf+0x38>
 8013a56:	22ff      	movs	r2, #255	; 0xff
 8013a58:	05d2      	lsls	r2, r2, #23
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	db03      	blt.n	8013a66 <cosf+0x1e>
 8013a5e:	1c01      	adds	r1, r0, #0
 8013a60:	f7ed faca 	bl	8000ff8 <__aeabi_fsub>
 8013a64:	bd0e      	pop	{r1, r2, r3, pc}
 8013a66:	4669      	mov	r1, sp
 8013a68:	f000 fbfa 	bl	8014260 <__ieee754_rem_pio2f>
 8013a6c:	2203      	movs	r2, #3
 8013a6e:	4002      	ands	r2, r0
 8013a70:	2a01      	cmp	r2, #1
 8013a72:	d008      	beq.n	8013a86 <cosf+0x3e>
 8013a74:	2a02      	cmp	r2, #2
 8013a76:	d00e      	beq.n	8013a96 <cosf+0x4e>
 8013a78:	2a00      	cmp	r2, #0
 8013a7a:	d111      	bne.n	8013aa0 <cosf+0x58>
 8013a7c:	9901      	ldr	r1, [sp, #4]
 8013a7e:	9800      	ldr	r0, [sp, #0]
 8013a80:	f000 fda2 	bl	80145c8 <__kernel_cosf>
 8013a84:	e7ee      	b.n	8013a64 <cosf+0x1c>
 8013a86:	9901      	ldr	r1, [sp, #4]
 8013a88:	9800      	ldr	r0, [sp, #0]
 8013a8a:	f001 f8c5 	bl	8014c18 <__kernel_sinf>
 8013a8e:	2380      	movs	r3, #128	; 0x80
 8013a90:	061b      	lsls	r3, r3, #24
 8013a92:	18c0      	adds	r0, r0, r3
 8013a94:	e7e6      	b.n	8013a64 <cosf+0x1c>
 8013a96:	9901      	ldr	r1, [sp, #4]
 8013a98:	9800      	ldr	r0, [sp, #0]
 8013a9a:	f000 fd95 	bl	80145c8 <__kernel_cosf>
 8013a9e:	e7f6      	b.n	8013a8e <cosf+0x46>
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	9901      	ldr	r1, [sp, #4]
 8013aa4:	9800      	ldr	r0, [sp, #0]
 8013aa6:	f001 f8b7 	bl	8014c18 <__kernel_sinf>
 8013aaa:	e7db      	b.n	8013a64 <cosf+0x1c>
 8013aac:	3f490fd8 	.word	0x3f490fd8

08013ab0 <sinf>:
 8013ab0:	b507      	push	{r0, r1, r2, lr}
 8013ab2:	4a1a      	ldr	r2, [pc, #104]	; (8013b1c <sinf+0x6c>)
 8013ab4:	0043      	lsls	r3, r0, #1
 8013ab6:	085b      	lsrs	r3, r3, #1
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	dc04      	bgt.n	8013ac6 <sinf+0x16>
 8013abc:	2200      	movs	r2, #0
 8013abe:	2100      	movs	r1, #0
 8013ac0:	f001 f8aa 	bl	8014c18 <__kernel_sinf>
 8013ac4:	e006      	b.n	8013ad4 <sinf+0x24>
 8013ac6:	22ff      	movs	r2, #255	; 0xff
 8013ac8:	05d2      	lsls	r2, r2, #23
 8013aca:	4293      	cmp	r3, r2
 8013acc:	db03      	blt.n	8013ad6 <sinf+0x26>
 8013ace:	1c01      	adds	r1, r0, #0
 8013ad0:	f7ed fa92 	bl	8000ff8 <__aeabi_fsub>
 8013ad4:	bd0e      	pop	{r1, r2, r3, pc}
 8013ad6:	4669      	mov	r1, sp
 8013ad8:	f000 fbc2 	bl	8014260 <__ieee754_rem_pio2f>
 8013adc:	2303      	movs	r3, #3
 8013ade:	4018      	ands	r0, r3
 8013ae0:	2801      	cmp	r0, #1
 8013ae2:	d007      	beq.n	8013af4 <sinf+0x44>
 8013ae4:	2802      	cmp	r0, #2
 8013ae6:	d00a      	beq.n	8013afe <sinf+0x4e>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d111      	bne.n	8013b10 <sinf+0x60>
 8013aec:	2201      	movs	r2, #1
 8013aee:	9901      	ldr	r1, [sp, #4]
 8013af0:	9800      	ldr	r0, [sp, #0]
 8013af2:	e7e5      	b.n	8013ac0 <sinf+0x10>
 8013af4:	9901      	ldr	r1, [sp, #4]
 8013af6:	9800      	ldr	r0, [sp, #0]
 8013af8:	f000 fd66 	bl	80145c8 <__kernel_cosf>
 8013afc:	e7ea      	b.n	8013ad4 <sinf+0x24>
 8013afe:	2201      	movs	r2, #1
 8013b00:	9901      	ldr	r1, [sp, #4]
 8013b02:	9800      	ldr	r0, [sp, #0]
 8013b04:	f001 f888 	bl	8014c18 <__kernel_sinf>
 8013b08:	2380      	movs	r3, #128	; 0x80
 8013b0a:	061b      	lsls	r3, r3, #24
 8013b0c:	18c0      	adds	r0, r0, r3
 8013b0e:	e7e1      	b.n	8013ad4 <sinf+0x24>
 8013b10:	9901      	ldr	r1, [sp, #4]
 8013b12:	9800      	ldr	r0, [sp, #0]
 8013b14:	f000 fd58 	bl	80145c8 <__kernel_cosf>
 8013b18:	e7f6      	b.n	8013b08 <sinf+0x58>
 8013b1a:	46c0      	nop			; (mov r8, r8)
 8013b1c:	3f490fd8 	.word	0x3f490fd8

08013b20 <truncf>:
 8013b20:	15c3      	asrs	r3, r0, #23
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	3b7f      	subs	r3, #127	; 0x7f
 8013b26:	0002      	movs	r2, r0
 8013b28:	b510      	push	{r4, lr}
 8013b2a:	2b16      	cmp	r3, #22
 8013b2c:	dc09      	bgt.n	8013b42 <truncf+0x22>
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	da02      	bge.n	8013b38 <truncf+0x18>
 8013b32:	0fc0      	lsrs	r0, r0, #31
 8013b34:	07c0      	lsls	r0, r0, #31
 8013b36:	bd10      	pop	{r4, pc}
 8013b38:	4905      	ldr	r1, [pc, #20]	; (8013b50 <truncf+0x30>)
 8013b3a:	4119      	asrs	r1, r3
 8013b3c:	438a      	bics	r2, r1
 8013b3e:	0010      	movs	r0, r2
 8013b40:	e7f9      	b.n	8013b36 <truncf+0x16>
 8013b42:	2b80      	cmp	r3, #128	; 0x80
 8013b44:	d1f7      	bne.n	8013b36 <truncf+0x16>
 8013b46:	1c01      	adds	r1, r0, #0
 8013b48:	f7ec fdca 	bl	80006e0 <__aeabi_fadd>
 8013b4c:	e7f3      	b.n	8013b36 <truncf+0x16>
 8013b4e:	46c0      	nop			; (mov r8, r8)
 8013b50:	007fffff 	.word	0x007fffff

08013b54 <acosf>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	1c05      	adds	r5, r0, #0
 8013b58:	f000 f85c 	bl	8013c14 <__ieee754_acosf>
 8013b5c:	1c29      	adds	r1, r5, #0
 8013b5e:	1c04      	adds	r4, r0, #0
 8013b60:	1c28      	adds	r0, r5, #0
 8013b62:	f7ed fbf7 	bl	8001354 <__aeabi_fcmpun>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d110      	bne.n	8013b8c <acosf+0x38>
 8013b6a:	1c28      	adds	r0, r5, #0
 8013b6c:	f001 f9d8 	bl	8014f20 <fabsf>
 8013b70:	21fe      	movs	r1, #254	; 0xfe
 8013b72:	0589      	lsls	r1, r1, #22
 8013b74:	f7ec fc6e 	bl	8000454 <__aeabi_fcmpgt>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d007      	beq.n	8013b8c <acosf+0x38>
 8013b7c:	f7ff fa76 	bl	801306c <__errno>
 8013b80:	2321      	movs	r3, #33	; 0x21
 8013b82:	6003      	str	r3, [r0, #0]
 8013b84:	4802      	ldr	r0, [pc, #8]	; (8013b90 <acosf+0x3c>)
 8013b86:	f001 fa0d 	bl	8014fa4 <nanf>
 8013b8a:	1c04      	adds	r4, r0, #0
 8013b8c:	1c20      	adds	r0, r4, #0
 8013b8e:	bd70      	pop	{r4, r5, r6, pc}
 8013b90:	080159c9 	.word	0x080159c9

08013b94 <asinf>:
 8013b94:	b570      	push	{r4, r5, r6, lr}
 8013b96:	1c05      	adds	r5, r0, #0
 8013b98:	f000 f99e 	bl	8013ed8 <__ieee754_asinf>
 8013b9c:	1c29      	adds	r1, r5, #0
 8013b9e:	1c04      	adds	r4, r0, #0
 8013ba0:	1c28      	adds	r0, r5, #0
 8013ba2:	f7ed fbd7 	bl	8001354 <__aeabi_fcmpun>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d110      	bne.n	8013bcc <asinf+0x38>
 8013baa:	1c28      	adds	r0, r5, #0
 8013bac:	f001 f9b8 	bl	8014f20 <fabsf>
 8013bb0:	21fe      	movs	r1, #254	; 0xfe
 8013bb2:	0589      	lsls	r1, r1, #22
 8013bb4:	f7ec fc4e 	bl	8000454 <__aeabi_fcmpgt>
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d007      	beq.n	8013bcc <asinf+0x38>
 8013bbc:	f7ff fa56 	bl	801306c <__errno>
 8013bc0:	2321      	movs	r3, #33	; 0x21
 8013bc2:	6003      	str	r3, [r0, #0]
 8013bc4:	4802      	ldr	r0, [pc, #8]	; (8013bd0 <asinf+0x3c>)
 8013bc6:	f001 f9ed 	bl	8014fa4 <nanf>
 8013bca:	1c04      	adds	r4, r0, #0
 8013bcc:	1c20      	adds	r0, r4, #0
 8013bce:	bd70      	pop	{r4, r5, r6, pc}
 8013bd0:	080159c9 	.word	0x080159c9

08013bd4 <atan2f>:
 8013bd4:	b510      	push	{r4, lr}
 8013bd6:	f000 fac7 	bl	8014168 <__ieee754_atan2f>
 8013bda:	bd10      	pop	{r4, pc}

08013bdc <sqrtf>:
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	1c05      	adds	r5, r0, #0
 8013be0:	f000 fc9a 	bl	8014518 <__ieee754_sqrtf>
 8013be4:	1c29      	adds	r1, r5, #0
 8013be6:	1c04      	adds	r4, r0, #0
 8013be8:	1c28      	adds	r0, r5, #0
 8013bea:	f7ed fbb3 	bl	8001354 <__aeabi_fcmpun>
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	d10e      	bne.n	8013c10 <sqrtf+0x34>
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	1c28      	adds	r0, r5, #0
 8013bf6:	f7ec fc19 	bl	800042c <__aeabi_fcmplt>
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	d008      	beq.n	8013c10 <sqrtf+0x34>
 8013bfe:	f7ff fa35 	bl	801306c <__errno>
 8013c02:	2321      	movs	r3, #33	; 0x21
 8013c04:	2100      	movs	r1, #0
 8013c06:	6003      	str	r3, [r0, #0]
 8013c08:	1c08      	adds	r0, r1, #0
 8013c0a:	f7ec ff07 	bl	8000a1c <__aeabi_fdiv>
 8013c0e:	1c04      	adds	r4, r0, #0
 8013c10:	1c20      	adds	r0, r4, #0
 8013c12:	bd70      	pop	{r4, r5, r6, pc}

08013c14 <__ieee754_acosf>:
 8013c14:	21fe      	movs	r1, #254	; 0xfe
 8013c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c18:	0043      	lsls	r3, r0, #1
 8013c1a:	1c04      	adds	r4, r0, #0
 8013c1c:	085b      	lsrs	r3, r3, #1
 8013c1e:	0589      	lsls	r1, r1, #22
 8013c20:	428b      	cmp	r3, r1
 8013c22:	d104      	bne.n	8013c2e <__ieee754_acosf+0x1a>
 8013c24:	2000      	movs	r0, #0
 8013c26:	2c00      	cmp	r4, #0
 8013c28:	dc00      	bgt.n	8013c2c <__ieee754_acosf+0x18>
 8013c2a:	489c      	ldr	r0, [pc, #624]	; (8013e9c <__ieee754_acosf+0x288>)
 8013c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c2e:	428b      	cmp	r3, r1
 8013c30:	dd06      	ble.n	8013c40 <__ieee754_acosf+0x2c>
 8013c32:	1c01      	adds	r1, r0, #0
 8013c34:	f7ed f9e0 	bl	8000ff8 <__aeabi_fsub>
 8013c38:	1c01      	adds	r1, r0, #0
 8013c3a:	f7ec feef 	bl	8000a1c <__aeabi_fdiv>
 8013c3e:	e7f5      	b.n	8013c2c <__ieee754_acosf+0x18>
 8013c40:	21fc      	movs	r1, #252	; 0xfc
 8013c42:	0589      	lsls	r1, r1, #22
 8013c44:	428b      	cmp	r3, r1
 8013c46:	da58      	bge.n	8013cfa <__ieee754_acosf+0xe6>
 8013c48:	228c      	movs	r2, #140	; 0x8c
 8013c4a:	0592      	lsls	r2, r2, #22
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	dc00      	bgt.n	8013c52 <__ieee754_acosf+0x3e>
 8013c50:	e121      	b.n	8013e96 <__ieee754_acosf+0x282>
 8013c52:	1c01      	adds	r1, r0, #0
 8013c54:	f7ed f8aa 	bl	8000dac <__aeabi_fmul>
 8013c58:	4991      	ldr	r1, [pc, #580]	; (8013ea0 <__ieee754_acosf+0x28c>)
 8013c5a:	1c05      	adds	r5, r0, #0
 8013c5c:	f7ed f8a6 	bl	8000dac <__aeabi_fmul>
 8013c60:	4990      	ldr	r1, [pc, #576]	; (8013ea4 <__ieee754_acosf+0x290>)
 8013c62:	f7ec fd3d 	bl	80006e0 <__aeabi_fadd>
 8013c66:	1c29      	adds	r1, r5, #0
 8013c68:	f7ed f8a0 	bl	8000dac <__aeabi_fmul>
 8013c6c:	498e      	ldr	r1, [pc, #568]	; (8013ea8 <__ieee754_acosf+0x294>)
 8013c6e:	f7ed f9c3 	bl	8000ff8 <__aeabi_fsub>
 8013c72:	1c29      	adds	r1, r5, #0
 8013c74:	f7ed f89a 	bl	8000dac <__aeabi_fmul>
 8013c78:	498c      	ldr	r1, [pc, #560]	; (8013eac <__ieee754_acosf+0x298>)
 8013c7a:	f7ec fd31 	bl	80006e0 <__aeabi_fadd>
 8013c7e:	1c29      	adds	r1, r5, #0
 8013c80:	f7ed f894 	bl	8000dac <__aeabi_fmul>
 8013c84:	498a      	ldr	r1, [pc, #552]	; (8013eb0 <__ieee754_acosf+0x29c>)
 8013c86:	f7ed f9b7 	bl	8000ff8 <__aeabi_fsub>
 8013c8a:	1c29      	adds	r1, r5, #0
 8013c8c:	f7ed f88e 	bl	8000dac <__aeabi_fmul>
 8013c90:	4988      	ldr	r1, [pc, #544]	; (8013eb4 <__ieee754_acosf+0x2a0>)
 8013c92:	f7ec fd25 	bl	80006e0 <__aeabi_fadd>
 8013c96:	1c29      	adds	r1, r5, #0
 8013c98:	f7ed f888 	bl	8000dac <__aeabi_fmul>
 8013c9c:	4986      	ldr	r1, [pc, #536]	; (8013eb8 <__ieee754_acosf+0x2a4>)
 8013c9e:	1c06      	adds	r6, r0, #0
 8013ca0:	1c28      	adds	r0, r5, #0
 8013ca2:	f7ed f883 	bl	8000dac <__aeabi_fmul>
 8013ca6:	4985      	ldr	r1, [pc, #532]	; (8013ebc <__ieee754_acosf+0x2a8>)
 8013ca8:	f7ed f9a6 	bl	8000ff8 <__aeabi_fsub>
 8013cac:	1c29      	adds	r1, r5, #0
 8013cae:	f7ed f87d 	bl	8000dac <__aeabi_fmul>
 8013cb2:	4983      	ldr	r1, [pc, #524]	; (8013ec0 <__ieee754_acosf+0x2ac>)
 8013cb4:	f7ec fd14 	bl	80006e0 <__aeabi_fadd>
 8013cb8:	1c29      	adds	r1, r5, #0
 8013cba:	f7ed f877 	bl	8000dac <__aeabi_fmul>
 8013cbe:	4981      	ldr	r1, [pc, #516]	; (8013ec4 <__ieee754_acosf+0x2b0>)
 8013cc0:	f7ed f99a 	bl	8000ff8 <__aeabi_fsub>
 8013cc4:	1c29      	adds	r1, r5, #0
 8013cc6:	f7ed f871 	bl	8000dac <__aeabi_fmul>
 8013cca:	21fe      	movs	r1, #254	; 0xfe
 8013ccc:	0589      	lsls	r1, r1, #22
 8013cce:	f7ec fd07 	bl	80006e0 <__aeabi_fadd>
 8013cd2:	1c01      	adds	r1, r0, #0
 8013cd4:	1c30      	adds	r0, r6, #0
 8013cd6:	f7ec fea1 	bl	8000a1c <__aeabi_fdiv>
 8013cda:	1c21      	adds	r1, r4, #0
 8013cdc:	f7ed f866 	bl	8000dac <__aeabi_fmul>
 8013ce0:	1c01      	adds	r1, r0, #0
 8013ce2:	4879      	ldr	r0, [pc, #484]	; (8013ec8 <__ieee754_acosf+0x2b4>)
 8013ce4:	f7ed f988 	bl	8000ff8 <__aeabi_fsub>
 8013ce8:	1c01      	adds	r1, r0, #0
 8013cea:	1c20      	adds	r0, r4, #0
 8013cec:	f7ed f984 	bl	8000ff8 <__aeabi_fsub>
 8013cf0:	1c01      	adds	r1, r0, #0
 8013cf2:	4876      	ldr	r0, [pc, #472]	; (8013ecc <__ieee754_acosf+0x2b8>)
 8013cf4:	f7ed f980 	bl	8000ff8 <__aeabi_fsub>
 8013cf8:	e798      	b.n	8013c2c <__ieee754_acosf+0x18>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	da5b      	bge.n	8013db6 <__ieee754_acosf+0x1a2>
 8013cfe:	21fe      	movs	r1, #254	; 0xfe
 8013d00:	0589      	lsls	r1, r1, #22
 8013d02:	f7ec fced 	bl	80006e0 <__aeabi_fadd>
 8013d06:	21fc      	movs	r1, #252	; 0xfc
 8013d08:	0589      	lsls	r1, r1, #22
 8013d0a:	f7ed f84f 	bl	8000dac <__aeabi_fmul>
 8013d0e:	4964      	ldr	r1, [pc, #400]	; (8013ea0 <__ieee754_acosf+0x28c>)
 8013d10:	1c04      	adds	r4, r0, #0
 8013d12:	f7ed f84b 	bl	8000dac <__aeabi_fmul>
 8013d16:	4963      	ldr	r1, [pc, #396]	; (8013ea4 <__ieee754_acosf+0x290>)
 8013d18:	f7ec fce2 	bl	80006e0 <__aeabi_fadd>
 8013d1c:	1c21      	adds	r1, r4, #0
 8013d1e:	f7ed f845 	bl	8000dac <__aeabi_fmul>
 8013d22:	4961      	ldr	r1, [pc, #388]	; (8013ea8 <__ieee754_acosf+0x294>)
 8013d24:	f7ed f968 	bl	8000ff8 <__aeabi_fsub>
 8013d28:	1c21      	adds	r1, r4, #0
 8013d2a:	f7ed f83f 	bl	8000dac <__aeabi_fmul>
 8013d2e:	495f      	ldr	r1, [pc, #380]	; (8013eac <__ieee754_acosf+0x298>)
 8013d30:	f7ec fcd6 	bl	80006e0 <__aeabi_fadd>
 8013d34:	1c21      	adds	r1, r4, #0
 8013d36:	f7ed f839 	bl	8000dac <__aeabi_fmul>
 8013d3a:	495d      	ldr	r1, [pc, #372]	; (8013eb0 <__ieee754_acosf+0x29c>)
 8013d3c:	f7ed f95c 	bl	8000ff8 <__aeabi_fsub>
 8013d40:	1c21      	adds	r1, r4, #0
 8013d42:	f7ed f833 	bl	8000dac <__aeabi_fmul>
 8013d46:	495b      	ldr	r1, [pc, #364]	; (8013eb4 <__ieee754_acosf+0x2a0>)
 8013d48:	f7ec fcca 	bl	80006e0 <__aeabi_fadd>
 8013d4c:	1c21      	adds	r1, r4, #0
 8013d4e:	f7ed f82d 	bl	8000dac <__aeabi_fmul>
 8013d52:	1c06      	adds	r6, r0, #0
 8013d54:	1c20      	adds	r0, r4, #0
 8013d56:	f000 fbdf 	bl	8014518 <__ieee754_sqrtf>
 8013d5a:	4957      	ldr	r1, [pc, #348]	; (8013eb8 <__ieee754_acosf+0x2a4>)
 8013d5c:	1c05      	adds	r5, r0, #0
 8013d5e:	1c20      	adds	r0, r4, #0
 8013d60:	f7ed f824 	bl	8000dac <__aeabi_fmul>
 8013d64:	4955      	ldr	r1, [pc, #340]	; (8013ebc <__ieee754_acosf+0x2a8>)
 8013d66:	f7ed f947 	bl	8000ff8 <__aeabi_fsub>
 8013d6a:	1c21      	adds	r1, r4, #0
 8013d6c:	f7ed f81e 	bl	8000dac <__aeabi_fmul>
 8013d70:	4953      	ldr	r1, [pc, #332]	; (8013ec0 <__ieee754_acosf+0x2ac>)
 8013d72:	f7ec fcb5 	bl	80006e0 <__aeabi_fadd>
 8013d76:	1c21      	adds	r1, r4, #0
 8013d78:	f7ed f818 	bl	8000dac <__aeabi_fmul>
 8013d7c:	4951      	ldr	r1, [pc, #324]	; (8013ec4 <__ieee754_acosf+0x2b0>)
 8013d7e:	f7ed f93b 	bl	8000ff8 <__aeabi_fsub>
 8013d82:	1c21      	adds	r1, r4, #0
 8013d84:	f7ed f812 	bl	8000dac <__aeabi_fmul>
 8013d88:	21fe      	movs	r1, #254	; 0xfe
 8013d8a:	0589      	lsls	r1, r1, #22
 8013d8c:	f7ec fca8 	bl	80006e0 <__aeabi_fadd>
 8013d90:	1c01      	adds	r1, r0, #0
 8013d92:	1c30      	adds	r0, r6, #0
 8013d94:	f7ec fe42 	bl	8000a1c <__aeabi_fdiv>
 8013d98:	1c29      	adds	r1, r5, #0
 8013d9a:	f7ed f807 	bl	8000dac <__aeabi_fmul>
 8013d9e:	494a      	ldr	r1, [pc, #296]	; (8013ec8 <__ieee754_acosf+0x2b4>)
 8013da0:	f7ed f92a 	bl	8000ff8 <__aeabi_fsub>
 8013da4:	1c29      	adds	r1, r5, #0
 8013da6:	f7ec fc9b 	bl	80006e0 <__aeabi_fadd>
 8013daa:	1c01      	adds	r1, r0, #0
 8013dac:	f7ec fc98 	bl	80006e0 <__aeabi_fadd>
 8013db0:	1c01      	adds	r1, r0, #0
 8013db2:	4847      	ldr	r0, [pc, #284]	; (8013ed0 <__ieee754_acosf+0x2bc>)
 8013db4:	e79e      	b.n	8013cf4 <__ieee754_acosf+0xe0>
 8013db6:	1c01      	adds	r1, r0, #0
 8013db8:	20fe      	movs	r0, #254	; 0xfe
 8013dba:	0580      	lsls	r0, r0, #22
 8013dbc:	f7ed f91c 	bl	8000ff8 <__aeabi_fsub>
 8013dc0:	21fc      	movs	r1, #252	; 0xfc
 8013dc2:	0589      	lsls	r1, r1, #22
 8013dc4:	f7ec fff2 	bl	8000dac <__aeabi_fmul>
 8013dc8:	1c04      	adds	r4, r0, #0
 8013dca:	f000 fba5 	bl	8014518 <__ieee754_sqrtf>
 8013dce:	4934      	ldr	r1, [pc, #208]	; (8013ea0 <__ieee754_acosf+0x28c>)
 8013dd0:	1c06      	adds	r6, r0, #0
 8013dd2:	0b05      	lsrs	r5, r0, #12
 8013dd4:	1c20      	adds	r0, r4, #0
 8013dd6:	f7ec ffe9 	bl	8000dac <__aeabi_fmul>
 8013dda:	4932      	ldr	r1, [pc, #200]	; (8013ea4 <__ieee754_acosf+0x290>)
 8013ddc:	f7ec fc80 	bl	80006e0 <__aeabi_fadd>
 8013de0:	1c21      	adds	r1, r4, #0
 8013de2:	f7ec ffe3 	bl	8000dac <__aeabi_fmul>
 8013de6:	4930      	ldr	r1, [pc, #192]	; (8013ea8 <__ieee754_acosf+0x294>)
 8013de8:	f7ed f906 	bl	8000ff8 <__aeabi_fsub>
 8013dec:	1c21      	adds	r1, r4, #0
 8013dee:	f7ec ffdd 	bl	8000dac <__aeabi_fmul>
 8013df2:	492e      	ldr	r1, [pc, #184]	; (8013eac <__ieee754_acosf+0x298>)
 8013df4:	f7ec fc74 	bl	80006e0 <__aeabi_fadd>
 8013df8:	1c21      	adds	r1, r4, #0
 8013dfa:	f7ec ffd7 	bl	8000dac <__aeabi_fmul>
 8013dfe:	492c      	ldr	r1, [pc, #176]	; (8013eb0 <__ieee754_acosf+0x29c>)
 8013e00:	f7ed f8fa 	bl	8000ff8 <__aeabi_fsub>
 8013e04:	1c21      	adds	r1, r4, #0
 8013e06:	f7ec ffd1 	bl	8000dac <__aeabi_fmul>
 8013e0a:	492a      	ldr	r1, [pc, #168]	; (8013eb4 <__ieee754_acosf+0x2a0>)
 8013e0c:	f7ec fc68 	bl	80006e0 <__aeabi_fadd>
 8013e10:	1c21      	adds	r1, r4, #0
 8013e12:	f7ec ffcb 	bl	8000dac <__aeabi_fmul>
 8013e16:	4928      	ldr	r1, [pc, #160]	; (8013eb8 <__ieee754_acosf+0x2a4>)
 8013e18:	1c07      	adds	r7, r0, #0
 8013e1a:	1c20      	adds	r0, r4, #0
 8013e1c:	f7ec ffc6 	bl	8000dac <__aeabi_fmul>
 8013e20:	4926      	ldr	r1, [pc, #152]	; (8013ebc <__ieee754_acosf+0x2a8>)
 8013e22:	f7ed f8e9 	bl	8000ff8 <__aeabi_fsub>
 8013e26:	1c21      	adds	r1, r4, #0
 8013e28:	f7ec ffc0 	bl	8000dac <__aeabi_fmul>
 8013e2c:	4924      	ldr	r1, [pc, #144]	; (8013ec0 <__ieee754_acosf+0x2ac>)
 8013e2e:	f7ec fc57 	bl	80006e0 <__aeabi_fadd>
 8013e32:	1c21      	adds	r1, r4, #0
 8013e34:	f7ec ffba 	bl	8000dac <__aeabi_fmul>
 8013e38:	4922      	ldr	r1, [pc, #136]	; (8013ec4 <__ieee754_acosf+0x2b0>)
 8013e3a:	f7ed f8dd 	bl	8000ff8 <__aeabi_fsub>
 8013e3e:	1c21      	adds	r1, r4, #0
 8013e40:	f7ec ffb4 	bl	8000dac <__aeabi_fmul>
 8013e44:	21fe      	movs	r1, #254	; 0xfe
 8013e46:	0589      	lsls	r1, r1, #22
 8013e48:	f7ec fc4a 	bl	80006e0 <__aeabi_fadd>
 8013e4c:	1c01      	adds	r1, r0, #0
 8013e4e:	1c38      	adds	r0, r7, #0
 8013e50:	f7ec fde4 	bl	8000a1c <__aeabi_fdiv>
 8013e54:	1c31      	adds	r1, r6, #0
 8013e56:	f7ec ffa9 	bl	8000dac <__aeabi_fmul>
 8013e5a:	032d      	lsls	r5, r5, #12
 8013e5c:	1c07      	adds	r7, r0, #0
 8013e5e:	1c29      	adds	r1, r5, #0
 8013e60:	1c28      	adds	r0, r5, #0
 8013e62:	f7ec ffa3 	bl	8000dac <__aeabi_fmul>
 8013e66:	1c01      	adds	r1, r0, #0
 8013e68:	1c20      	adds	r0, r4, #0
 8013e6a:	f7ed f8c5 	bl	8000ff8 <__aeabi_fsub>
 8013e6e:	1c29      	adds	r1, r5, #0
 8013e70:	1c04      	adds	r4, r0, #0
 8013e72:	1c30      	adds	r0, r6, #0
 8013e74:	f7ec fc34 	bl	80006e0 <__aeabi_fadd>
 8013e78:	1c01      	adds	r1, r0, #0
 8013e7a:	1c20      	adds	r0, r4, #0
 8013e7c:	f7ec fdce 	bl	8000a1c <__aeabi_fdiv>
 8013e80:	1c01      	adds	r1, r0, #0
 8013e82:	1c38      	adds	r0, r7, #0
 8013e84:	f7ec fc2c 	bl	80006e0 <__aeabi_fadd>
 8013e88:	1c29      	adds	r1, r5, #0
 8013e8a:	f7ec fc29 	bl	80006e0 <__aeabi_fadd>
 8013e8e:	1c01      	adds	r1, r0, #0
 8013e90:	f7ec fc26 	bl	80006e0 <__aeabi_fadd>
 8013e94:	e6ca      	b.n	8013c2c <__ieee754_acosf+0x18>
 8013e96:	480f      	ldr	r0, [pc, #60]	; (8013ed4 <__ieee754_acosf+0x2c0>)
 8013e98:	e6c8      	b.n	8013c2c <__ieee754_acosf+0x18>
 8013e9a:	46c0      	nop			; (mov r8, r8)
 8013e9c:	40490fdb 	.word	0x40490fdb
 8013ea0:	3811ef08 	.word	0x3811ef08
 8013ea4:	3a4f7f04 	.word	0x3a4f7f04
 8013ea8:	3d241146 	.word	0x3d241146
 8013eac:	3e4e0aa8 	.word	0x3e4e0aa8
 8013eb0:	3ea6b090 	.word	0x3ea6b090
 8013eb4:	3e2aaaab 	.word	0x3e2aaaab
 8013eb8:	3d9dc62e 	.word	0x3d9dc62e
 8013ebc:	3f303361 	.word	0x3f303361
 8013ec0:	4001572d 	.word	0x4001572d
 8013ec4:	4019d139 	.word	0x4019d139
 8013ec8:	33a22168 	.word	0x33a22168
 8013ecc:	3fc90fda 	.word	0x3fc90fda
 8013ed0:	40490fda 	.word	0x40490fda
 8013ed4:	3fc90fdb 	.word	0x3fc90fdb

08013ed8 <__ieee754_asinf>:
 8013ed8:	23fe      	movs	r3, #254	; 0xfe
 8013eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013edc:	0046      	lsls	r6, r0, #1
 8013ede:	b085      	sub	sp, #20
 8013ee0:	1c04      	adds	r4, r0, #0
 8013ee2:	9002      	str	r0, [sp, #8]
 8013ee4:	0876      	lsrs	r6, r6, #1
 8013ee6:	059b      	lsls	r3, r3, #22
 8013ee8:	429e      	cmp	r6, r3
 8013eea:	d10c      	bne.n	8013f06 <__ieee754_asinf+0x2e>
 8013eec:	498e      	ldr	r1, [pc, #568]	; (8014128 <__ieee754_asinf+0x250>)
 8013eee:	f7ec ff5d 	bl	8000dac <__aeabi_fmul>
 8013ef2:	498e      	ldr	r1, [pc, #568]	; (801412c <__ieee754_asinf+0x254>)
 8013ef4:	1c05      	adds	r5, r0, #0
 8013ef6:	1c20      	adds	r0, r4, #0
 8013ef8:	f7ec ff58 	bl	8000dac <__aeabi_fmul>
 8013efc:	1c01      	adds	r1, r0, #0
 8013efe:	1c28      	adds	r0, r5, #0
 8013f00:	f7ec fbee 	bl	80006e0 <__aeabi_fadd>
 8013f04:	e007      	b.n	8013f16 <__ieee754_asinf+0x3e>
 8013f06:	429e      	cmp	r6, r3
 8013f08:	dd09      	ble.n	8013f1e <__ieee754_asinf+0x46>
 8013f0a:	1c01      	adds	r1, r0, #0
 8013f0c:	f7ed f874 	bl	8000ff8 <__aeabi_fsub>
 8013f10:	1c01      	adds	r1, r0, #0
 8013f12:	f7ec fd83 	bl	8000a1c <__aeabi_fdiv>
 8013f16:	1c04      	adds	r4, r0, #0
 8013f18:	1c20      	adds	r0, r4, #0
 8013f1a:	b005      	add	sp, #20
 8013f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f1e:	23fc      	movs	r3, #252	; 0xfc
 8013f20:	059b      	lsls	r3, r3, #22
 8013f22:	429e      	cmp	r6, r3
 8013f24:	da0c      	bge.n	8013f40 <__ieee754_asinf+0x68>
 8013f26:	23c8      	movs	r3, #200	; 0xc8
 8013f28:	059b      	lsls	r3, r3, #22
 8013f2a:	429e      	cmp	r6, r3
 8013f2c:	da76      	bge.n	801401c <__ieee754_asinf+0x144>
 8013f2e:	4980      	ldr	r1, [pc, #512]	; (8014130 <__ieee754_asinf+0x258>)
 8013f30:	f7ec fbd6 	bl	80006e0 <__aeabi_fadd>
 8013f34:	21fe      	movs	r1, #254	; 0xfe
 8013f36:	0589      	lsls	r1, r1, #22
 8013f38:	f7ec fa8c 	bl	8000454 <__aeabi_fcmpgt>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d1eb      	bne.n	8013f18 <__ieee754_asinf+0x40>
 8013f40:	1c20      	adds	r0, r4, #0
 8013f42:	f000 ffed 	bl	8014f20 <fabsf>
 8013f46:	1c01      	adds	r1, r0, #0
 8013f48:	20fe      	movs	r0, #254	; 0xfe
 8013f4a:	0580      	lsls	r0, r0, #22
 8013f4c:	f7ed f854 	bl	8000ff8 <__aeabi_fsub>
 8013f50:	21fc      	movs	r1, #252	; 0xfc
 8013f52:	0589      	lsls	r1, r1, #22
 8013f54:	f7ec ff2a 	bl	8000dac <__aeabi_fmul>
 8013f58:	4976      	ldr	r1, [pc, #472]	; (8014134 <__ieee754_asinf+0x25c>)
 8013f5a:	1c04      	adds	r4, r0, #0
 8013f5c:	f7ec ff26 	bl	8000dac <__aeabi_fmul>
 8013f60:	4975      	ldr	r1, [pc, #468]	; (8014138 <__ieee754_asinf+0x260>)
 8013f62:	f7ec fbbd 	bl	80006e0 <__aeabi_fadd>
 8013f66:	1c21      	adds	r1, r4, #0
 8013f68:	f7ec ff20 	bl	8000dac <__aeabi_fmul>
 8013f6c:	4973      	ldr	r1, [pc, #460]	; (801413c <__ieee754_asinf+0x264>)
 8013f6e:	f7ed f843 	bl	8000ff8 <__aeabi_fsub>
 8013f72:	1c21      	adds	r1, r4, #0
 8013f74:	f7ec ff1a 	bl	8000dac <__aeabi_fmul>
 8013f78:	4971      	ldr	r1, [pc, #452]	; (8014140 <__ieee754_asinf+0x268>)
 8013f7a:	f7ec fbb1 	bl	80006e0 <__aeabi_fadd>
 8013f7e:	1c21      	adds	r1, r4, #0
 8013f80:	f7ec ff14 	bl	8000dac <__aeabi_fmul>
 8013f84:	496f      	ldr	r1, [pc, #444]	; (8014144 <__ieee754_asinf+0x26c>)
 8013f86:	f7ed f837 	bl	8000ff8 <__aeabi_fsub>
 8013f8a:	1c21      	adds	r1, r4, #0
 8013f8c:	f7ec ff0e 	bl	8000dac <__aeabi_fmul>
 8013f90:	496d      	ldr	r1, [pc, #436]	; (8014148 <__ieee754_asinf+0x270>)
 8013f92:	f7ec fba5 	bl	80006e0 <__aeabi_fadd>
 8013f96:	1c21      	adds	r1, r4, #0
 8013f98:	f7ec ff08 	bl	8000dac <__aeabi_fmul>
 8013f9c:	496b      	ldr	r1, [pc, #428]	; (801414c <__ieee754_asinf+0x274>)
 8013f9e:	9001      	str	r0, [sp, #4]
 8013fa0:	1c20      	adds	r0, r4, #0
 8013fa2:	f7ec ff03 	bl	8000dac <__aeabi_fmul>
 8013fa6:	496a      	ldr	r1, [pc, #424]	; (8014150 <__ieee754_asinf+0x278>)
 8013fa8:	f7ed f826 	bl	8000ff8 <__aeabi_fsub>
 8013fac:	1c21      	adds	r1, r4, #0
 8013fae:	f7ec fefd 	bl	8000dac <__aeabi_fmul>
 8013fb2:	4968      	ldr	r1, [pc, #416]	; (8014154 <__ieee754_asinf+0x27c>)
 8013fb4:	f7ec fb94 	bl	80006e0 <__aeabi_fadd>
 8013fb8:	1c21      	adds	r1, r4, #0
 8013fba:	f7ec fef7 	bl	8000dac <__aeabi_fmul>
 8013fbe:	4966      	ldr	r1, [pc, #408]	; (8014158 <__ieee754_asinf+0x280>)
 8013fc0:	f7ed f81a 	bl	8000ff8 <__aeabi_fsub>
 8013fc4:	1c21      	adds	r1, r4, #0
 8013fc6:	f7ec fef1 	bl	8000dac <__aeabi_fmul>
 8013fca:	21fe      	movs	r1, #254	; 0xfe
 8013fcc:	0589      	lsls	r1, r1, #22
 8013fce:	f7ec fb87 	bl	80006e0 <__aeabi_fadd>
 8013fd2:	1c07      	adds	r7, r0, #0
 8013fd4:	1c20      	adds	r0, r4, #0
 8013fd6:	f000 fa9f 	bl	8014518 <__ieee754_sqrtf>
 8013fda:	4b60      	ldr	r3, [pc, #384]	; (801415c <__ieee754_asinf+0x284>)
 8013fdc:	1c05      	adds	r5, r0, #0
 8013fde:	429e      	cmp	r6, r3
 8013fe0:	dd66      	ble.n	80140b0 <__ieee754_asinf+0x1d8>
 8013fe2:	1c39      	adds	r1, r7, #0
 8013fe4:	9801      	ldr	r0, [sp, #4]
 8013fe6:	f7ec fd19 	bl	8000a1c <__aeabi_fdiv>
 8013fea:	1c29      	adds	r1, r5, #0
 8013fec:	f7ec fede 	bl	8000dac <__aeabi_fmul>
 8013ff0:	1c29      	adds	r1, r5, #0
 8013ff2:	f7ec fb75 	bl	80006e0 <__aeabi_fadd>
 8013ff6:	1c01      	adds	r1, r0, #0
 8013ff8:	f7ec fb72 	bl	80006e0 <__aeabi_fadd>
 8013ffc:	4958      	ldr	r1, [pc, #352]	; (8014160 <__ieee754_asinf+0x288>)
 8013ffe:	f7ec fb6f 	bl	80006e0 <__aeabi_fadd>
 8014002:	1c01      	adds	r1, r0, #0
 8014004:	4848      	ldr	r0, [pc, #288]	; (8014128 <__ieee754_asinf+0x250>)
 8014006:	f7ec fff7 	bl	8000ff8 <__aeabi_fsub>
 801400a:	9b02      	ldr	r3, [sp, #8]
 801400c:	1c04      	adds	r4, r0, #0
 801400e:	2b00      	cmp	r3, #0
 8014010:	dd00      	ble.n	8014014 <__ieee754_asinf+0x13c>
 8014012:	e781      	b.n	8013f18 <__ieee754_asinf+0x40>
 8014014:	2380      	movs	r3, #128	; 0x80
 8014016:	061b      	lsls	r3, r3, #24
 8014018:	18c4      	adds	r4, r0, r3
 801401a:	e77d      	b.n	8013f18 <__ieee754_asinf+0x40>
 801401c:	1c01      	adds	r1, r0, #0
 801401e:	f7ec fec5 	bl	8000dac <__aeabi_fmul>
 8014022:	4944      	ldr	r1, [pc, #272]	; (8014134 <__ieee754_asinf+0x25c>)
 8014024:	1c05      	adds	r5, r0, #0
 8014026:	f7ec fec1 	bl	8000dac <__aeabi_fmul>
 801402a:	4943      	ldr	r1, [pc, #268]	; (8014138 <__ieee754_asinf+0x260>)
 801402c:	f7ec fb58 	bl	80006e0 <__aeabi_fadd>
 8014030:	1c29      	adds	r1, r5, #0
 8014032:	f7ec febb 	bl	8000dac <__aeabi_fmul>
 8014036:	4941      	ldr	r1, [pc, #260]	; (801413c <__ieee754_asinf+0x264>)
 8014038:	f7ec ffde 	bl	8000ff8 <__aeabi_fsub>
 801403c:	1c29      	adds	r1, r5, #0
 801403e:	f7ec feb5 	bl	8000dac <__aeabi_fmul>
 8014042:	493f      	ldr	r1, [pc, #252]	; (8014140 <__ieee754_asinf+0x268>)
 8014044:	f7ec fb4c 	bl	80006e0 <__aeabi_fadd>
 8014048:	1c29      	adds	r1, r5, #0
 801404a:	f7ec feaf 	bl	8000dac <__aeabi_fmul>
 801404e:	493d      	ldr	r1, [pc, #244]	; (8014144 <__ieee754_asinf+0x26c>)
 8014050:	f7ec ffd2 	bl	8000ff8 <__aeabi_fsub>
 8014054:	1c29      	adds	r1, r5, #0
 8014056:	f7ec fea9 	bl	8000dac <__aeabi_fmul>
 801405a:	493b      	ldr	r1, [pc, #236]	; (8014148 <__ieee754_asinf+0x270>)
 801405c:	f7ec fb40 	bl	80006e0 <__aeabi_fadd>
 8014060:	1c29      	adds	r1, r5, #0
 8014062:	f7ec fea3 	bl	8000dac <__aeabi_fmul>
 8014066:	4939      	ldr	r1, [pc, #228]	; (801414c <__ieee754_asinf+0x274>)
 8014068:	1c06      	adds	r6, r0, #0
 801406a:	1c28      	adds	r0, r5, #0
 801406c:	f7ec fe9e 	bl	8000dac <__aeabi_fmul>
 8014070:	4937      	ldr	r1, [pc, #220]	; (8014150 <__ieee754_asinf+0x278>)
 8014072:	f7ec ffc1 	bl	8000ff8 <__aeabi_fsub>
 8014076:	1c29      	adds	r1, r5, #0
 8014078:	f7ec fe98 	bl	8000dac <__aeabi_fmul>
 801407c:	4935      	ldr	r1, [pc, #212]	; (8014154 <__ieee754_asinf+0x27c>)
 801407e:	f7ec fb2f 	bl	80006e0 <__aeabi_fadd>
 8014082:	1c29      	adds	r1, r5, #0
 8014084:	f7ec fe92 	bl	8000dac <__aeabi_fmul>
 8014088:	4933      	ldr	r1, [pc, #204]	; (8014158 <__ieee754_asinf+0x280>)
 801408a:	f7ec ffb5 	bl	8000ff8 <__aeabi_fsub>
 801408e:	1c29      	adds	r1, r5, #0
 8014090:	f7ec fe8c 	bl	8000dac <__aeabi_fmul>
 8014094:	21fe      	movs	r1, #254	; 0xfe
 8014096:	0589      	lsls	r1, r1, #22
 8014098:	f7ec fb22 	bl	80006e0 <__aeabi_fadd>
 801409c:	1c01      	adds	r1, r0, #0
 801409e:	1c30      	adds	r0, r6, #0
 80140a0:	f7ec fcbc 	bl	8000a1c <__aeabi_fdiv>
 80140a4:	1c21      	adds	r1, r4, #0
 80140a6:	f7ec fe81 	bl	8000dac <__aeabi_fmul>
 80140aa:	1c01      	adds	r1, r0, #0
 80140ac:	1c20      	adds	r0, r4, #0
 80140ae:	e727      	b.n	8013f00 <__ieee754_asinf+0x28>
 80140b0:	1c01      	adds	r1, r0, #0
 80140b2:	0b06      	lsrs	r6, r0, #12
 80140b4:	f7ec fb14 	bl	80006e0 <__aeabi_fadd>
 80140b8:	1c39      	adds	r1, r7, #0
 80140ba:	9003      	str	r0, [sp, #12]
 80140bc:	9801      	ldr	r0, [sp, #4]
 80140be:	f7ec fcad 	bl	8000a1c <__aeabi_fdiv>
 80140c2:	1c01      	adds	r1, r0, #0
 80140c4:	9803      	ldr	r0, [sp, #12]
 80140c6:	f7ec fe71 	bl	8000dac <__aeabi_fmul>
 80140ca:	0336      	lsls	r6, r6, #12
 80140cc:	1c07      	adds	r7, r0, #0
 80140ce:	1c31      	adds	r1, r6, #0
 80140d0:	1c30      	adds	r0, r6, #0
 80140d2:	f7ec fe6b 	bl	8000dac <__aeabi_fmul>
 80140d6:	1c01      	adds	r1, r0, #0
 80140d8:	1c20      	adds	r0, r4, #0
 80140da:	f7ec ff8d 	bl	8000ff8 <__aeabi_fsub>
 80140de:	1c31      	adds	r1, r6, #0
 80140e0:	1c04      	adds	r4, r0, #0
 80140e2:	1c28      	adds	r0, r5, #0
 80140e4:	f7ec fafc 	bl	80006e0 <__aeabi_fadd>
 80140e8:	1c01      	adds	r1, r0, #0
 80140ea:	1c20      	adds	r0, r4, #0
 80140ec:	f7ec fc96 	bl	8000a1c <__aeabi_fdiv>
 80140f0:	1c01      	adds	r1, r0, #0
 80140f2:	f7ec faf5 	bl	80006e0 <__aeabi_fadd>
 80140f6:	1c01      	adds	r1, r0, #0
 80140f8:	480c      	ldr	r0, [pc, #48]	; (801412c <__ieee754_asinf+0x254>)
 80140fa:	f7ec ff7d 	bl	8000ff8 <__aeabi_fsub>
 80140fe:	1c01      	adds	r1, r0, #0
 8014100:	1c38      	adds	r0, r7, #0
 8014102:	f7ec ff79 	bl	8000ff8 <__aeabi_fsub>
 8014106:	1c31      	adds	r1, r6, #0
 8014108:	1c04      	adds	r4, r0, #0
 801410a:	1c30      	adds	r0, r6, #0
 801410c:	f7ec fae8 	bl	80006e0 <__aeabi_fadd>
 8014110:	1c01      	adds	r1, r0, #0
 8014112:	4814      	ldr	r0, [pc, #80]	; (8014164 <__ieee754_asinf+0x28c>)
 8014114:	f7ec ff70 	bl	8000ff8 <__aeabi_fsub>
 8014118:	1c01      	adds	r1, r0, #0
 801411a:	1c20      	adds	r0, r4, #0
 801411c:	f7ec ff6c 	bl	8000ff8 <__aeabi_fsub>
 8014120:	1c01      	adds	r1, r0, #0
 8014122:	4810      	ldr	r0, [pc, #64]	; (8014164 <__ieee754_asinf+0x28c>)
 8014124:	e76f      	b.n	8014006 <__ieee754_asinf+0x12e>
 8014126:	46c0      	nop			; (mov r8, r8)
 8014128:	3fc90fdb 	.word	0x3fc90fdb
 801412c:	b33bbd2e 	.word	0xb33bbd2e
 8014130:	7149f2ca 	.word	0x7149f2ca
 8014134:	3811ef08 	.word	0x3811ef08
 8014138:	3a4f7f04 	.word	0x3a4f7f04
 801413c:	3d241146 	.word	0x3d241146
 8014140:	3e4e0aa8 	.word	0x3e4e0aa8
 8014144:	3ea6b090 	.word	0x3ea6b090
 8014148:	3e2aaaab 	.word	0x3e2aaaab
 801414c:	3d9dc62e 	.word	0x3d9dc62e
 8014150:	3f303361 	.word	0x3f303361
 8014154:	4001572d 	.word	0x4001572d
 8014158:	4019d139 	.word	0x4019d139
 801415c:	3f799999 	.word	0x3f799999
 8014160:	333bbd2e 	.word	0x333bbd2e
 8014164:	3f490fdb 	.word	0x3f490fdb

08014168 <__ieee754_atan2f>:
 8014168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801416a:	25ff      	movs	r5, #255	; 0xff
 801416c:	004a      	lsls	r2, r1, #1
 801416e:	9101      	str	r1, [sp, #4]
 8014170:	0852      	lsrs	r2, r2, #1
 8014172:	05ed      	lsls	r5, r5, #23
 8014174:	42aa      	cmp	r2, r5
 8014176:	dc04      	bgt.n	8014182 <__ieee754_atan2f+0x1a>
 8014178:	0043      	lsls	r3, r0, #1
 801417a:	0007      	movs	r7, r0
 801417c:	085b      	lsrs	r3, r3, #1
 801417e:	42ab      	cmp	r3, r5
 8014180:	dd02      	ble.n	8014188 <__ieee754_atan2f+0x20>
 8014182:	f7ec faad 	bl	80006e0 <__aeabi_fadd>
 8014186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014188:	24fe      	movs	r4, #254	; 0xfe
 801418a:	05a4      	lsls	r4, r4, #22
 801418c:	42a1      	cmp	r1, r4
 801418e:	d102      	bne.n	8014196 <__ieee754_atan2f+0x2e>
 8014190:	f000 fdb6 	bl	8014d00 <atanf>
 8014194:	e7f7      	b.n	8014186 <__ieee754_atan2f+0x1e>
 8014196:	2602      	movs	r6, #2
 8014198:	178c      	asrs	r4, r1, #30
 801419a:	4034      	ands	r4, r6
 801419c:	0fc6      	lsrs	r6, r0, #31
 801419e:	4334      	orrs	r4, r6
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d105      	bne.n	80141b0 <__ieee754_atan2f+0x48>
 80141a4:	2c02      	cmp	r4, #2
 80141a6:	d045      	beq.n	8014234 <__ieee754_atan2f+0xcc>
 80141a8:	2c03      	cmp	r4, #3
 80141aa:	d1ec      	bne.n	8014186 <__ieee754_atan2f+0x1e>
 80141ac:	4824      	ldr	r0, [pc, #144]	; (8014240 <__ieee754_atan2f+0xd8>)
 80141ae:	e7ea      	b.n	8014186 <__ieee754_atan2f+0x1e>
 80141b0:	2a00      	cmp	r2, #0
 80141b2:	d103      	bne.n	80141bc <__ieee754_atan2f+0x54>
 80141b4:	2f00      	cmp	r7, #0
 80141b6:	da41      	bge.n	801423c <__ieee754_atan2f+0xd4>
 80141b8:	4822      	ldr	r0, [pc, #136]	; (8014244 <__ieee754_atan2f+0xdc>)
 80141ba:	e7e4      	b.n	8014186 <__ieee754_atan2f+0x1e>
 80141bc:	42aa      	cmp	r2, r5
 80141be:	d10e      	bne.n	80141de <__ieee754_atan2f+0x76>
 80141c0:	3c01      	subs	r4, #1
 80141c2:	4293      	cmp	r3, r2
 80141c4:	d105      	bne.n	80141d2 <__ieee754_atan2f+0x6a>
 80141c6:	2c02      	cmp	r4, #2
 80141c8:	d836      	bhi.n	8014238 <__ieee754_atan2f+0xd0>
 80141ca:	4b1f      	ldr	r3, [pc, #124]	; (8014248 <__ieee754_atan2f+0xe0>)
 80141cc:	00a4      	lsls	r4, r4, #2
 80141ce:	58e0      	ldr	r0, [r4, r3]
 80141d0:	e7d9      	b.n	8014186 <__ieee754_atan2f+0x1e>
 80141d2:	2000      	movs	r0, #0
 80141d4:	2c02      	cmp	r4, #2
 80141d6:	d8d6      	bhi.n	8014186 <__ieee754_atan2f+0x1e>
 80141d8:	4b1c      	ldr	r3, [pc, #112]	; (801424c <__ieee754_atan2f+0xe4>)
 80141da:	00a4      	lsls	r4, r4, #2
 80141dc:	e7f7      	b.n	80141ce <__ieee754_atan2f+0x66>
 80141de:	42ab      	cmp	r3, r5
 80141e0:	d0e8      	beq.n	80141b4 <__ieee754_atan2f+0x4c>
 80141e2:	1a9b      	subs	r3, r3, r2
 80141e4:	15db      	asrs	r3, r3, #23
 80141e6:	2b3c      	cmp	r3, #60	; 0x3c
 80141e8:	dc14      	bgt.n	8014214 <__ieee754_atan2f+0xac>
 80141ea:	2900      	cmp	r1, #0
 80141ec:	da01      	bge.n	80141f2 <__ieee754_atan2f+0x8a>
 80141ee:	333c      	adds	r3, #60	; 0x3c
 80141f0:	db12      	blt.n	8014218 <__ieee754_atan2f+0xb0>
 80141f2:	f7ec fc13 	bl	8000a1c <__aeabi_fdiv>
 80141f6:	f000 fe93 	bl	8014f20 <fabsf>
 80141fa:	f000 fd81 	bl	8014d00 <atanf>
 80141fe:	2c01      	cmp	r4, #1
 8014200:	d00c      	beq.n	801421c <__ieee754_atan2f+0xb4>
 8014202:	2c02      	cmp	r4, #2
 8014204:	d00e      	beq.n	8014224 <__ieee754_atan2f+0xbc>
 8014206:	2c00      	cmp	r4, #0
 8014208:	d0bd      	beq.n	8014186 <__ieee754_atan2f+0x1e>
 801420a:	4911      	ldr	r1, [pc, #68]	; (8014250 <__ieee754_atan2f+0xe8>)
 801420c:	f7ec fa68 	bl	80006e0 <__aeabi_fadd>
 8014210:	4910      	ldr	r1, [pc, #64]	; (8014254 <__ieee754_atan2f+0xec>)
 8014212:	e00c      	b.n	801422e <__ieee754_atan2f+0xc6>
 8014214:	4810      	ldr	r0, [pc, #64]	; (8014258 <__ieee754_atan2f+0xf0>)
 8014216:	e7f2      	b.n	80141fe <__ieee754_atan2f+0x96>
 8014218:	2000      	movs	r0, #0
 801421a:	e7f0      	b.n	80141fe <__ieee754_atan2f+0x96>
 801421c:	2380      	movs	r3, #128	; 0x80
 801421e:	061b      	lsls	r3, r3, #24
 8014220:	18c0      	adds	r0, r0, r3
 8014222:	e7b0      	b.n	8014186 <__ieee754_atan2f+0x1e>
 8014224:	490a      	ldr	r1, [pc, #40]	; (8014250 <__ieee754_atan2f+0xe8>)
 8014226:	f7ec fa5b 	bl	80006e0 <__aeabi_fadd>
 801422a:	1c01      	adds	r1, r0, #0
 801422c:	4809      	ldr	r0, [pc, #36]	; (8014254 <__ieee754_atan2f+0xec>)
 801422e:	f7ec fee3 	bl	8000ff8 <__aeabi_fsub>
 8014232:	e7a8      	b.n	8014186 <__ieee754_atan2f+0x1e>
 8014234:	4807      	ldr	r0, [pc, #28]	; (8014254 <__ieee754_atan2f+0xec>)
 8014236:	e7a6      	b.n	8014186 <__ieee754_atan2f+0x1e>
 8014238:	4808      	ldr	r0, [pc, #32]	; (801425c <__ieee754_atan2f+0xf4>)
 801423a:	e7a4      	b.n	8014186 <__ieee754_atan2f+0x1e>
 801423c:	4806      	ldr	r0, [pc, #24]	; (8014258 <__ieee754_atan2f+0xf0>)
 801423e:	e7a2      	b.n	8014186 <__ieee754_atan2f+0x1e>
 8014240:	c0490fdb 	.word	0xc0490fdb
 8014244:	bfc90fdb 	.word	0xbfc90fdb
 8014248:	080159f8 	.word	0x080159f8
 801424c:	08015a04 	.word	0x08015a04
 8014250:	33bbbd2e 	.word	0x33bbbd2e
 8014254:	40490fdb 	.word	0x40490fdb
 8014258:	3fc90fdb 	.word	0x3fc90fdb
 801425c:	3f490fdb 	.word	0x3f490fdb

08014260 <__ieee754_rem_pio2f>:
 8014260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014262:	4ba0      	ldr	r3, [pc, #640]	; (80144e4 <__ieee754_rem_pio2f+0x284>)
 8014264:	b08b      	sub	sp, #44	; 0x2c
 8014266:	0045      	lsls	r5, r0, #1
 8014268:	000c      	movs	r4, r1
 801426a:	9005      	str	r0, [sp, #20]
 801426c:	086d      	lsrs	r5, r5, #1
 801426e:	429d      	cmp	r5, r3
 8014270:	dc04      	bgt.n	801427c <__ieee754_rem_pio2f+0x1c>
 8014272:	2300      	movs	r3, #0
 8014274:	6008      	str	r0, [r1, #0]
 8014276:	604b      	str	r3, [r1, #4]
 8014278:	2700      	movs	r7, #0
 801427a:	e01a      	b.n	80142b2 <__ieee754_rem_pio2f+0x52>
 801427c:	4b9a      	ldr	r3, [pc, #616]	; (80144e8 <__ieee754_rem_pio2f+0x288>)
 801427e:	429d      	cmp	r5, r3
 8014280:	dc4a      	bgt.n	8014318 <__ieee754_rem_pio2f+0xb8>
 8014282:	230f      	movs	r3, #15
 8014284:	4e99      	ldr	r6, [pc, #612]	; (80144ec <__ieee754_rem_pio2f+0x28c>)
 8014286:	499a      	ldr	r1, [pc, #616]	; (80144f0 <__ieee754_rem_pio2f+0x290>)
 8014288:	439d      	bics	r5, r3
 801428a:	2800      	cmp	r0, #0
 801428c:	dd22      	ble.n	80142d4 <__ieee754_rem_pio2f+0x74>
 801428e:	f7ec feb3 	bl	8000ff8 <__aeabi_fsub>
 8014292:	1c07      	adds	r7, r0, #0
 8014294:	42b5      	cmp	r5, r6
 8014296:	d00f      	beq.n	80142b8 <__ieee754_rem_pio2f+0x58>
 8014298:	4996      	ldr	r1, [pc, #600]	; (80144f4 <__ieee754_rem_pio2f+0x294>)
 801429a:	f7ec fead 	bl	8000ff8 <__aeabi_fsub>
 801429e:	1c01      	adds	r1, r0, #0
 80142a0:	6020      	str	r0, [r4, #0]
 80142a2:	1c38      	adds	r0, r7, #0
 80142a4:	f7ec fea8 	bl	8000ff8 <__aeabi_fsub>
 80142a8:	4992      	ldr	r1, [pc, #584]	; (80144f4 <__ieee754_rem_pio2f+0x294>)
 80142aa:	f7ec fea5 	bl	8000ff8 <__aeabi_fsub>
 80142ae:	2701      	movs	r7, #1
 80142b0:	6060      	str	r0, [r4, #4]
 80142b2:	0038      	movs	r0, r7
 80142b4:	b00b      	add	sp, #44	; 0x2c
 80142b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142b8:	498f      	ldr	r1, [pc, #572]	; (80144f8 <__ieee754_rem_pio2f+0x298>)
 80142ba:	f7ec fe9d 	bl	8000ff8 <__aeabi_fsub>
 80142be:	498f      	ldr	r1, [pc, #572]	; (80144fc <__ieee754_rem_pio2f+0x29c>)
 80142c0:	1c05      	adds	r5, r0, #0
 80142c2:	f7ec fe99 	bl	8000ff8 <__aeabi_fsub>
 80142c6:	1c01      	adds	r1, r0, #0
 80142c8:	6020      	str	r0, [r4, #0]
 80142ca:	1c28      	adds	r0, r5, #0
 80142cc:	f7ec fe94 	bl	8000ff8 <__aeabi_fsub>
 80142d0:	498a      	ldr	r1, [pc, #552]	; (80144fc <__ieee754_rem_pio2f+0x29c>)
 80142d2:	e7ea      	b.n	80142aa <__ieee754_rem_pio2f+0x4a>
 80142d4:	f7ec fa04 	bl	80006e0 <__aeabi_fadd>
 80142d8:	1c07      	adds	r7, r0, #0
 80142da:	42b5      	cmp	r5, r6
 80142dc:	d00e      	beq.n	80142fc <__ieee754_rem_pio2f+0x9c>
 80142de:	4985      	ldr	r1, [pc, #532]	; (80144f4 <__ieee754_rem_pio2f+0x294>)
 80142e0:	f7ec f9fe 	bl	80006e0 <__aeabi_fadd>
 80142e4:	1c01      	adds	r1, r0, #0
 80142e6:	6020      	str	r0, [r4, #0]
 80142e8:	1c38      	adds	r0, r7, #0
 80142ea:	f7ec fe85 	bl	8000ff8 <__aeabi_fsub>
 80142ee:	4981      	ldr	r1, [pc, #516]	; (80144f4 <__ieee754_rem_pio2f+0x294>)
 80142f0:	f7ec f9f6 	bl	80006e0 <__aeabi_fadd>
 80142f4:	2701      	movs	r7, #1
 80142f6:	6060      	str	r0, [r4, #4]
 80142f8:	427f      	negs	r7, r7
 80142fa:	e7da      	b.n	80142b2 <__ieee754_rem_pio2f+0x52>
 80142fc:	497e      	ldr	r1, [pc, #504]	; (80144f8 <__ieee754_rem_pio2f+0x298>)
 80142fe:	f7ec f9ef 	bl	80006e0 <__aeabi_fadd>
 8014302:	497e      	ldr	r1, [pc, #504]	; (80144fc <__ieee754_rem_pio2f+0x29c>)
 8014304:	1c05      	adds	r5, r0, #0
 8014306:	f7ec f9eb 	bl	80006e0 <__aeabi_fadd>
 801430a:	1c01      	adds	r1, r0, #0
 801430c:	6020      	str	r0, [r4, #0]
 801430e:	1c28      	adds	r0, r5, #0
 8014310:	f7ec fe72 	bl	8000ff8 <__aeabi_fsub>
 8014314:	4979      	ldr	r1, [pc, #484]	; (80144fc <__ieee754_rem_pio2f+0x29c>)
 8014316:	e7eb      	b.n	80142f0 <__ieee754_rem_pio2f+0x90>
 8014318:	4b79      	ldr	r3, [pc, #484]	; (8014500 <__ieee754_rem_pio2f+0x2a0>)
 801431a:	429d      	cmp	r5, r3
 801431c:	dd00      	ble.n	8014320 <__ieee754_rem_pio2f+0xc0>
 801431e:	e091      	b.n	8014444 <__ieee754_rem_pio2f+0x1e4>
 8014320:	f000 fdfe 	bl	8014f20 <fabsf>
 8014324:	4977      	ldr	r1, [pc, #476]	; (8014504 <__ieee754_rem_pio2f+0x2a4>)
 8014326:	1c06      	adds	r6, r0, #0
 8014328:	f7ec fd40 	bl	8000dac <__aeabi_fmul>
 801432c:	21fc      	movs	r1, #252	; 0xfc
 801432e:	0589      	lsls	r1, r1, #22
 8014330:	f7ec f9d6 	bl	80006e0 <__aeabi_fadd>
 8014334:	f7ed f824 	bl	8001380 <__aeabi_f2iz>
 8014338:	0007      	movs	r7, r0
 801433a:	f7ed f841 	bl	80013c0 <__aeabi_i2f>
 801433e:	496c      	ldr	r1, [pc, #432]	; (80144f0 <__ieee754_rem_pio2f+0x290>)
 8014340:	9003      	str	r0, [sp, #12]
 8014342:	f7ec fd33 	bl	8000dac <__aeabi_fmul>
 8014346:	1c01      	adds	r1, r0, #0
 8014348:	1c30      	adds	r0, r6, #0
 801434a:	f7ec fe55 	bl	8000ff8 <__aeabi_fsub>
 801434e:	4969      	ldr	r1, [pc, #420]	; (80144f4 <__ieee754_rem_pio2f+0x294>)
 8014350:	9002      	str	r0, [sp, #8]
 8014352:	9803      	ldr	r0, [sp, #12]
 8014354:	f7ec fd2a 	bl	8000dac <__aeabi_fmul>
 8014358:	1c06      	adds	r6, r0, #0
 801435a:	2f1f      	cmp	r7, #31
 801435c:	dc0d      	bgt.n	801437a <__ieee754_rem_pio2f+0x11a>
 801435e:	23ff      	movs	r3, #255	; 0xff
 8014360:	002a      	movs	r2, r5
 8014362:	4969      	ldr	r1, [pc, #420]	; (8014508 <__ieee754_rem_pio2f+0x2a8>)
 8014364:	439a      	bics	r2, r3
 8014366:	1e7b      	subs	r3, r7, #1
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	585b      	ldr	r3, [r3, r1]
 801436c:	429a      	cmp	r2, r3
 801436e:	d004      	beq.n	801437a <__ieee754_rem_pio2f+0x11a>
 8014370:	9802      	ldr	r0, [sp, #8]
 8014372:	1c31      	adds	r1, r6, #0
 8014374:	f7ec fe40 	bl	8000ff8 <__aeabi_fsub>
 8014378:	e00c      	b.n	8014394 <__ieee754_rem_pio2f+0x134>
 801437a:	9802      	ldr	r0, [sp, #8]
 801437c:	1c31      	adds	r1, r6, #0
 801437e:	f7ec fe3b 	bl	8000ff8 <__aeabi_fsub>
 8014382:	22ff      	movs	r2, #255	; 0xff
 8014384:	15eb      	asrs	r3, r5, #23
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	0dc3      	lsrs	r3, r0, #23
 801438a:	4013      	ands	r3, r2
 801438c:	9a04      	ldr	r2, [sp, #16]
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	2b08      	cmp	r3, #8
 8014392:	dc01      	bgt.n	8014398 <__ieee754_rem_pio2f+0x138>
 8014394:	6020      	str	r0, [r4, #0]
 8014396:	e026      	b.n	80143e6 <__ieee754_rem_pio2f+0x186>
 8014398:	4957      	ldr	r1, [pc, #348]	; (80144f8 <__ieee754_rem_pio2f+0x298>)
 801439a:	9803      	ldr	r0, [sp, #12]
 801439c:	f7ec fd06 	bl	8000dac <__aeabi_fmul>
 80143a0:	1c06      	adds	r6, r0, #0
 80143a2:	1c01      	adds	r1, r0, #0
 80143a4:	9802      	ldr	r0, [sp, #8]
 80143a6:	f7ec fe27 	bl	8000ff8 <__aeabi_fsub>
 80143aa:	1c01      	adds	r1, r0, #0
 80143ac:	1c05      	adds	r5, r0, #0
 80143ae:	9802      	ldr	r0, [sp, #8]
 80143b0:	f7ec fe22 	bl	8000ff8 <__aeabi_fsub>
 80143b4:	1c31      	adds	r1, r6, #0
 80143b6:	f7ec fe1f 	bl	8000ff8 <__aeabi_fsub>
 80143ba:	4950      	ldr	r1, [pc, #320]	; (80144fc <__ieee754_rem_pio2f+0x29c>)
 80143bc:	1c06      	adds	r6, r0, #0
 80143be:	9803      	ldr	r0, [sp, #12]
 80143c0:	f7ec fcf4 	bl	8000dac <__aeabi_fmul>
 80143c4:	1c31      	adds	r1, r6, #0
 80143c6:	f7ec fe17 	bl	8000ff8 <__aeabi_fsub>
 80143ca:	1c01      	adds	r1, r0, #0
 80143cc:	1c06      	adds	r6, r0, #0
 80143ce:	1c28      	adds	r0, r5, #0
 80143d0:	f7ec fe12 	bl	8000ff8 <__aeabi_fsub>
 80143d4:	22ff      	movs	r2, #255	; 0xff
 80143d6:	0dc3      	lsrs	r3, r0, #23
 80143d8:	4013      	ands	r3, r2
 80143da:	9a04      	ldr	r2, [sp, #16]
 80143dc:	1ad3      	subs	r3, r2, r3
 80143de:	2b19      	cmp	r3, #25
 80143e0:	dc15      	bgt.n	801440e <__ieee754_rem_pio2f+0x1ae>
 80143e2:	6020      	str	r0, [r4, #0]
 80143e4:	9502      	str	r5, [sp, #8]
 80143e6:	6825      	ldr	r5, [r4, #0]
 80143e8:	9802      	ldr	r0, [sp, #8]
 80143ea:	1c29      	adds	r1, r5, #0
 80143ec:	f7ec fe04 	bl	8000ff8 <__aeabi_fsub>
 80143f0:	1c31      	adds	r1, r6, #0
 80143f2:	f7ec fe01 	bl	8000ff8 <__aeabi_fsub>
 80143f6:	9b05      	ldr	r3, [sp, #20]
 80143f8:	6060      	str	r0, [r4, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	db00      	blt.n	8014400 <__ieee754_rem_pio2f+0x1a0>
 80143fe:	e758      	b.n	80142b2 <__ieee754_rem_pio2f+0x52>
 8014400:	2380      	movs	r3, #128	; 0x80
 8014402:	061b      	lsls	r3, r3, #24
 8014404:	18ed      	adds	r5, r5, r3
 8014406:	18c0      	adds	r0, r0, r3
 8014408:	6025      	str	r5, [r4, #0]
 801440a:	6060      	str	r0, [r4, #4]
 801440c:	e774      	b.n	80142f8 <__ieee754_rem_pio2f+0x98>
 801440e:	493f      	ldr	r1, [pc, #252]	; (801450c <__ieee754_rem_pio2f+0x2ac>)
 8014410:	9803      	ldr	r0, [sp, #12]
 8014412:	f7ec fccb 	bl	8000dac <__aeabi_fmul>
 8014416:	1c06      	adds	r6, r0, #0
 8014418:	1c01      	adds	r1, r0, #0
 801441a:	1c28      	adds	r0, r5, #0
 801441c:	f7ec fdec 	bl	8000ff8 <__aeabi_fsub>
 8014420:	1c01      	adds	r1, r0, #0
 8014422:	9002      	str	r0, [sp, #8]
 8014424:	1c28      	adds	r0, r5, #0
 8014426:	f7ec fde7 	bl	8000ff8 <__aeabi_fsub>
 801442a:	1c31      	adds	r1, r6, #0
 801442c:	f7ec fde4 	bl	8000ff8 <__aeabi_fsub>
 8014430:	4937      	ldr	r1, [pc, #220]	; (8014510 <__ieee754_rem_pio2f+0x2b0>)
 8014432:	1c05      	adds	r5, r0, #0
 8014434:	9803      	ldr	r0, [sp, #12]
 8014436:	f7ec fcb9 	bl	8000dac <__aeabi_fmul>
 801443a:	1c29      	adds	r1, r5, #0
 801443c:	f7ec fddc 	bl	8000ff8 <__aeabi_fsub>
 8014440:	1c06      	adds	r6, r0, #0
 8014442:	e795      	b.n	8014370 <__ieee754_rem_pio2f+0x110>
 8014444:	23ff      	movs	r3, #255	; 0xff
 8014446:	05db      	lsls	r3, r3, #23
 8014448:	429d      	cmp	r5, r3
 801444a:	db05      	blt.n	8014458 <__ieee754_rem_pio2f+0x1f8>
 801444c:	1c01      	adds	r1, r0, #0
 801444e:	f7ec fdd3 	bl	8000ff8 <__aeabi_fsub>
 8014452:	6060      	str	r0, [r4, #4]
 8014454:	6020      	str	r0, [r4, #0]
 8014456:	e70f      	b.n	8014278 <__ieee754_rem_pio2f+0x18>
 8014458:	15ee      	asrs	r6, r5, #23
 801445a:	3e86      	subs	r6, #134	; 0x86
 801445c:	05f3      	lsls	r3, r6, #23
 801445e:	1aed      	subs	r5, r5, r3
 8014460:	1c28      	adds	r0, r5, #0
 8014462:	f7ec ff8d 	bl	8001380 <__aeabi_f2iz>
 8014466:	f7ec ffab 	bl	80013c0 <__aeabi_i2f>
 801446a:	1c01      	adds	r1, r0, #0
 801446c:	9007      	str	r0, [sp, #28]
 801446e:	1c28      	adds	r0, r5, #0
 8014470:	f7ec fdc2 	bl	8000ff8 <__aeabi_fsub>
 8014474:	2187      	movs	r1, #135	; 0x87
 8014476:	05c9      	lsls	r1, r1, #23
 8014478:	f7ec fc98 	bl	8000dac <__aeabi_fmul>
 801447c:	1c07      	adds	r7, r0, #0
 801447e:	f7ec ff7f 	bl	8001380 <__aeabi_f2iz>
 8014482:	f7ec ff9d 	bl	80013c0 <__aeabi_i2f>
 8014486:	1c01      	adds	r1, r0, #0
 8014488:	9008      	str	r0, [sp, #32]
 801448a:	1c05      	adds	r5, r0, #0
 801448c:	1c38      	adds	r0, r7, #0
 801448e:	f7ec fdb3 	bl	8000ff8 <__aeabi_fsub>
 8014492:	2187      	movs	r1, #135	; 0x87
 8014494:	05c9      	lsls	r1, r1, #23
 8014496:	f7ec fc89 	bl	8000dac <__aeabi_fmul>
 801449a:	2100      	movs	r1, #0
 801449c:	9009      	str	r0, [sp, #36]	; 0x24
 801449e:	f7eb ffbf 	bl	8000420 <__aeabi_fcmpeq>
 80144a2:	2303      	movs	r3, #3
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d006      	beq.n	80144b6 <__ieee754_rem_pio2f+0x256>
 80144a8:	2100      	movs	r1, #0
 80144aa:	1c28      	adds	r0, r5, #0
 80144ac:	f7eb ffb8 	bl	8000420 <__aeabi_fcmpeq>
 80144b0:	4243      	negs	r3, r0
 80144b2:	4143      	adcs	r3, r0
 80144b4:	3301      	adds	r3, #1
 80144b6:	4a17      	ldr	r2, [pc, #92]	; (8014514 <__ieee754_rem_pio2f+0x2b4>)
 80144b8:	0021      	movs	r1, r4
 80144ba:	9201      	str	r2, [sp, #4]
 80144bc:	2202      	movs	r2, #2
 80144be:	a807      	add	r0, sp, #28
 80144c0:	9200      	str	r2, [sp, #0]
 80144c2:	0032      	movs	r2, r6
 80144c4:	f000 f900 	bl	80146c8 <__kernel_rem_pio2f>
 80144c8:	9b05      	ldr	r3, [sp, #20]
 80144ca:	0007      	movs	r7, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	db00      	blt.n	80144d2 <__ieee754_rem_pio2f+0x272>
 80144d0:	e6ef      	b.n	80142b2 <__ieee754_rem_pio2f+0x52>
 80144d2:	2280      	movs	r2, #128	; 0x80
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	0612      	lsls	r2, r2, #24
 80144d8:	189b      	adds	r3, r3, r2
 80144da:	6023      	str	r3, [r4, #0]
 80144dc:	6863      	ldr	r3, [r4, #4]
 80144de:	189b      	adds	r3, r3, r2
 80144e0:	6063      	str	r3, [r4, #4]
 80144e2:	e709      	b.n	80142f8 <__ieee754_rem_pio2f+0x98>
 80144e4:	3f490fd8 	.word	0x3f490fd8
 80144e8:	4016cbe3 	.word	0x4016cbe3
 80144ec:	3fc90fd0 	.word	0x3fc90fd0
 80144f0:	3fc90f80 	.word	0x3fc90f80
 80144f4:	37354443 	.word	0x37354443
 80144f8:	37354400 	.word	0x37354400
 80144fc:	2e85a308 	.word	0x2e85a308
 8014500:	43490f80 	.word	0x43490f80
 8014504:	3f22f984 	.word	0x3f22f984
 8014508:	08015a10 	.word	0x08015a10
 801450c:	2e85a300 	.word	0x2e85a300
 8014510:	248d3132 	.word	0x248d3132
 8014514:	08015a90 	.word	0x08015a90

08014518 <__ieee754_sqrtf>:
 8014518:	0042      	lsls	r2, r0, #1
 801451a:	0003      	movs	r3, r0
 801451c:	b570      	push	{r4, r5, r6, lr}
 801451e:	1c04      	adds	r4, r0, #0
 8014520:	20ff      	movs	r0, #255	; 0xff
 8014522:	0852      	lsrs	r2, r2, #1
 8014524:	05c0      	lsls	r0, r0, #23
 8014526:	4282      	cmp	r2, r0
 8014528:	d30a      	bcc.n	8014540 <__ieee754_sqrtf+0x28>
 801452a:	1c21      	adds	r1, r4, #0
 801452c:	1c20      	adds	r0, r4, #0
 801452e:	f7ec fc3d 	bl	8000dac <__aeabi_fmul>
 8014532:	1c01      	adds	r1, r0, #0
 8014534:	1c20      	adds	r0, r4, #0
 8014536:	f7ec f8d3 	bl	80006e0 <__aeabi_fadd>
 801453a:	1c04      	adds	r4, r0, #0
 801453c:	1c20      	adds	r0, r4, #0
 801453e:	bd70      	pop	{r4, r5, r6, pc}
 8014540:	2a00      	cmp	r2, #0
 8014542:	d0fb      	beq.n	801453c <__ieee754_sqrtf+0x24>
 8014544:	2c00      	cmp	r4, #0
 8014546:	da07      	bge.n	8014558 <__ieee754_sqrtf+0x40>
 8014548:	1c21      	adds	r1, r4, #0
 801454a:	1c20      	adds	r0, r4, #0
 801454c:	f7ec fd54 	bl	8000ff8 <__aeabi_fsub>
 8014550:	1c01      	adds	r1, r0, #0
 8014552:	f7ec fa63 	bl	8000a1c <__aeabi_fdiv>
 8014556:	e7f0      	b.n	801453a <__ieee754_sqrtf+0x22>
 8014558:	0022      	movs	r2, r4
 801455a:	15e1      	asrs	r1, r4, #23
 801455c:	4002      	ands	r2, r0
 801455e:	4204      	tst	r4, r0
 8014560:	d02e      	beq.n	80145c0 <__ieee754_sqrtf+0xa8>
 8014562:	2280      	movs	r2, #128	; 0x80
 8014564:	000c      	movs	r4, r1
 8014566:	025b      	lsls	r3, r3, #9
 8014568:	0a5b      	lsrs	r3, r3, #9
 801456a:	0412      	lsls	r2, r2, #16
 801456c:	3c7f      	subs	r4, #127	; 0x7f
 801456e:	4313      	orrs	r3, r2
 8014570:	07ca      	lsls	r2, r1, #31
 8014572:	d400      	bmi.n	8014576 <__ieee754_sqrtf+0x5e>
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	2200      	movs	r2, #0
 8014578:	2180      	movs	r1, #128	; 0x80
 801457a:	2019      	movs	r0, #25
 801457c:	0016      	movs	r6, r2
 801457e:	1064      	asrs	r4, r4, #1
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	0449      	lsls	r1, r1, #17
 8014584:	1875      	adds	r5, r6, r1
 8014586:	429d      	cmp	r5, r3
 8014588:	dc02      	bgt.n	8014590 <__ieee754_sqrtf+0x78>
 801458a:	186e      	adds	r6, r5, r1
 801458c:	1b5b      	subs	r3, r3, r5
 801458e:	1852      	adds	r2, r2, r1
 8014590:	3801      	subs	r0, #1
 8014592:	005b      	lsls	r3, r3, #1
 8014594:	0849      	lsrs	r1, r1, #1
 8014596:	2800      	cmp	r0, #0
 8014598:	d1f4      	bne.n	8014584 <__ieee754_sqrtf+0x6c>
 801459a:	2b00      	cmp	r3, #0
 801459c:	d002      	beq.n	80145a4 <__ieee754_sqrtf+0x8c>
 801459e:	2301      	movs	r3, #1
 80145a0:	3201      	adds	r2, #1
 80145a2:	439a      	bics	r2, r3
 80145a4:	23fc      	movs	r3, #252	; 0xfc
 80145a6:	1052      	asrs	r2, r2, #1
 80145a8:	059b      	lsls	r3, r3, #22
 80145aa:	18d2      	adds	r2, r2, r3
 80145ac:	05e4      	lsls	r4, r4, #23
 80145ae:	18a4      	adds	r4, r4, r2
 80145b0:	e7c4      	b.n	801453c <__ieee754_sqrtf+0x24>
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	3201      	adds	r2, #1
 80145b6:	4203      	tst	r3, r0
 80145b8:	d0fb      	beq.n	80145b2 <__ieee754_sqrtf+0x9a>
 80145ba:	3a01      	subs	r2, #1
 80145bc:	1a89      	subs	r1, r1, r2
 80145be:	e7d0      	b.n	8014562 <__ieee754_sqrtf+0x4a>
 80145c0:	2080      	movs	r0, #128	; 0x80
 80145c2:	0400      	lsls	r0, r0, #16
 80145c4:	e7f7      	b.n	80145b6 <__ieee754_sqrtf+0x9e>
	...

080145c8 <__kernel_cosf>:
 80145c8:	23c8      	movs	r3, #200	; 0xc8
 80145ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145cc:	0044      	lsls	r4, r0, #1
 80145ce:	1c06      	adds	r6, r0, #0
 80145d0:	9101      	str	r1, [sp, #4]
 80145d2:	0864      	lsrs	r4, r4, #1
 80145d4:	059b      	lsls	r3, r3, #22
 80145d6:	429c      	cmp	r4, r3
 80145d8:	da03      	bge.n	80145e2 <__kernel_cosf+0x1a>
 80145da:	f7ec fed1 	bl	8001380 <__aeabi_f2iz>
 80145de:	2800      	cmp	r0, #0
 80145e0:	d05d      	beq.n	801469e <__kernel_cosf+0xd6>
 80145e2:	1c31      	adds	r1, r6, #0
 80145e4:	1c30      	adds	r0, r6, #0
 80145e6:	f7ec fbe1 	bl	8000dac <__aeabi_fmul>
 80145ea:	21fc      	movs	r1, #252	; 0xfc
 80145ec:	0589      	lsls	r1, r1, #22
 80145ee:	1c05      	adds	r5, r0, #0
 80145f0:	f7ec fbdc 	bl	8000dac <__aeabi_fmul>
 80145f4:	492b      	ldr	r1, [pc, #172]	; (80146a4 <__kernel_cosf+0xdc>)
 80145f6:	1c07      	adds	r7, r0, #0
 80145f8:	1c28      	adds	r0, r5, #0
 80145fa:	f7ec fbd7 	bl	8000dac <__aeabi_fmul>
 80145fe:	492a      	ldr	r1, [pc, #168]	; (80146a8 <__kernel_cosf+0xe0>)
 8014600:	f7ec f86e 	bl	80006e0 <__aeabi_fadd>
 8014604:	1c29      	adds	r1, r5, #0
 8014606:	f7ec fbd1 	bl	8000dac <__aeabi_fmul>
 801460a:	4928      	ldr	r1, [pc, #160]	; (80146ac <__kernel_cosf+0xe4>)
 801460c:	f7ec fcf4 	bl	8000ff8 <__aeabi_fsub>
 8014610:	1c29      	adds	r1, r5, #0
 8014612:	f7ec fbcb 	bl	8000dac <__aeabi_fmul>
 8014616:	4926      	ldr	r1, [pc, #152]	; (80146b0 <__kernel_cosf+0xe8>)
 8014618:	f7ec f862 	bl	80006e0 <__aeabi_fadd>
 801461c:	1c29      	adds	r1, r5, #0
 801461e:	f7ec fbc5 	bl	8000dac <__aeabi_fmul>
 8014622:	4924      	ldr	r1, [pc, #144]	; (80146b4 <__kernel_cosf+0xec>)
 8014624:	f7ec fce8 	bl	8000ff8 <__aeabi_fsub>
 8014628:	1c29      	adds	r1, r5, #0
 801462a:	f7ec fbbf 	bl	8000dac <__aeabi_fmul>
 801462e:	4922      	ldr	r1, [pc, #136]	; (80146b8 <__kernel_cosf+0xf0>)
 8014630:	f7ec f856 	bl	80006e0 <__aeabi_fadd>
 8014634:	1c29      	adds	r1, r5, #0
 8014636:	f7ec fbb9 	bl	8000dac <__aeabi_fmul>
 801463a:	1c29      	adds	r1, r5, #0
 801463c:	f7ec fbb6 	bl	8000dac <__aeabi_fmul>
 8014640:	9901      	ldr	r1, [sp, #4]
 8014642:	1c05      	adds	r5, r0, #0
 8014644:	1c30      	adds	r0, r6, #0
 8014646:	f7ec fbb1 	bl	8000dac <__aeabi_fmul>
 801464a:	1c01      	adds	r1, r0, #0
 801464c:	1c28      	adds	r0, r5, #0
 801464e:	f7ec fcd3 	bl	8000ff8 <__aeabi_fsub>
 8014652:	4b1a      	ldr	r3, [pc, #104]	; (80146bc <__kernel_cosf+0xf4>)
 8014654:	1c05      	adds	r5, r0, #0
 8014656:	429c      	cmp	r4, r3
 8014658:	dc09      	bgt.n	801466e <__kernel_cosf+0xa6>
 801465a:	1c01      	adds	r1, r0, #0
 801465c:	1c38      	adds	r0, r7, #0
 801465e:	f7ec fccb 	bl	8000ff8 <__aeabi_fsub>
 8014662:	1c01      	adds	r1, r0, #0
 8014664:	20fe      	movs	r0, #254	; 0xfe
 8014666:	0580      	lsls	r0, r0, #22
 8014668:	f7ec fcc6 	bl	8000ff8 <__aeabi_fsub>
 801466c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801466e:	4b14      	ldr	r3, [pc, #80]	; (80146c0 <__kernel_cosf+0xf8>)
 8014670:	429c      	cmp	r4, r3
 8014672:	dc12      	bgt.n	801469a <__kernel_cosf+0xd2>
 8014674:	23ff      	movs	r3, #255	; 0xff
 8014676:	061b      	lsls	r3, r3, #24
 8014678:	18e4      	adds	r4, r4, r3
 801467a:	20fe      	movs	r0, #254	; 0xfe
 801467c:	1c21      	adds	r1, r4, #0
 801467e:	0580      	lsls	r0, r0, #22
 8014680:	f7ec fcba 	bl	8000ff8 <__aeabi_fsub>
 8014684:	1c21      	adds	r1, r4, #0
 8014686:	1c06      	adds	r6, r0, #0
 8014688:	1c38      	adds	r0, r7, #0
 801468a:	f7ec fcb5 	bl	8000ff8 <__aeabi_fsub>
 801468e:	1c29      	adds	r1, r5, #0
 8014690:	f7ec fcb2 	bl	8000ff8 <__aeabi_fsub>
 8014694:	1c01      	adds	r1, r0, #0
 8014696:	1c30      	adds	r0, r6, #0
 8014698:	e7e6      	b.n	8014668 <__kernel_cosf+0xa0>
 801469a:	4c0a      	ldr	r4, [pc, #40]	; (80146c4 <__kernel_cosf+0xfc>)
 801469c:	e7ed      	b.n	801467a <__kernel_cosf+0xb2>
 801469e:	20fe      	movs	r0, #254	; 0xfe
 80146a0:	0580      	lsls	r0, r0, #22
 80146a2:	e7e3      	b.n	801466c <__kernel_cosf+0xa4>
 80146a4:	ad47d74e 	.word	0xad47d74e
 80146a8:	310f74f6 	.word	0x310f74f6
 80146ac:	3493f27c 	.word	0x3493f27c
 80146b0:	37d00d01 	.word	0x37d00d01
 80146b4:	3ab60b61 	.word	0x3ab60b61
 80146b8:	3d2aaaab 	.word	0x3d2aaaab
 80146bc:	3e999999 	.word	0x3e999999
 80146c0:	3f480000 	.word	0x3f480000
 80146c4:	3e900000 	.word	0x3e900000

080146c8 <__kernel_rem_pio2f>:
 80146c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ca:	b0df      	sub	sp, #380	; 0x17c
 80146cc:	9308      	str	r3, [sp, #32]
 80146ce:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80146d0:	9207      	str	r2, [sp, #28]
 80146d2:	009a      	lsls	r2, r3, #2
 80146d4:	4bc8      	ldr	r3, [pc, #800]	; (80149f8 <__kernel_rem_pio2f+0x330>)
 80146d6:	900a      	str	r0, [sp, #40]	; 0x28
 80146d8:	58d3      	ldr	r3, [r2, r3]
 80146da:	9103      	str	r1, [sp, #12]
 80146dc:	9305      	str	r3, [sp, #20]
 80146de:	9b08      	ldr	r3, [sp, #32]
 80146e0:	3b01      	subs	r3, #1
 80146e2:	9306      	str	r3, [sp, #24]
 80146e4:	2300      	movs	r3, #0
 80146e6:	9302      	str	r3, [sp, #8]
 80146e8:	9b07      	ldr	r3, [sp, #28]
 80146ea:	3304      	adds	r3, #4
 80146ec:	db07      	blt.n	80146fe <__kernel_rem_pio2f+0x36>
 80146ee:	2107      	movs	r1, #7
 80146f0:	9b07      	ldr	r3, [sp, #28]
 80146f2:	1eda      	subs	r2, r3, #3
 80146f4:	17d3      	asrs	r3, r2, #31
 80146f6:	400b      	ands	r3, r1
 80146f8:	189b      	adds	r3, r3, r2
 80146fa:	10db      	asrs	r3, r3, #3
 80146fc:	9302      	str	r3, [sp, #8]
 80146fe:	9b02      	ldr	r3, [sp, #8]
 8014700:	ae22      	add	r6, sp, #136	; 0x88
 8014702:	1c59      	adds	r1, r3, #1
 8014704:	00cb      	lsls	r3, r1, #3
 8014706:	9309      	str	r3, [sp, #36]	; 0x24
 8014708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801470a:	9b07      	ldr	r3, [sp, #28]
 801470c:	1a9b      	subs	r3, r3, r2
 801470e:	9301      	str	r3, [sp, #4]
 8014710:	9a06      	ldr	r2, [sp, #24]
 8014712:	9b02      	ldr	r3, [sp, #8]
 8014714:	1a9d      	subs	r5, r3, r2
 8014716:	002c      	movs	r4, r5
 8014718:	9b05      	ldr	r3, [sp, #20]
 801471a:	189f      	adds	r7, r3, r2
 801471c:	1b63      	subs	r3, r4, r5
 801471e:	429f      	cmp	r7, r3
 8014720:	da0d      	bge.n	801473e <__kernel_rem_pio2f+0x76>
 8014722:	9c08      	ldr	r4, [sp, #32]
 8014724:	af4a      	add	r7, sp, #296	; 0x128
 8014726:	9b08      	ldr	r3, [sp, #32]
 8014728:	9a05      	ldr	r2, [sp, #20]
 801472a:	1ae3      	subs	r3, r4, r3
 801472c:	429a      	cmp	r2, r3
 801472e:	db25      	blt.n	801477c <__kernel_rem_pio2f+0xb4>
 8014730:	ab22      	add	r3, sp, #136	; 0x88
 8014732:	00a5      	lsls	r5, r4, #2
 8014734:	18ed      	adds	r5, r5, r3
 8014736:	2300      	movs	r3, #0
 8014738:	2600      	movs	r6, #0
 801473a:	9304      	str	r3, [sp, #16]
 801473c:	e016      	b.n	801476c <__kernel_rem_pio2f+0xa4>
 801473e:	2000      	movs	r0, #0
 8014740:	2c00      	cmp	r4, #0
 8014742:	db04      	blt.n	801474e <__kernel_rem_pio2f+0x86>
 8014744:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8014746:	00a3      	lsls	r3, r4, #2
 8014748:	58d0      	ldr	r0, [r2, r3]
 801474a:	f7ec fe39 	bl	80013c0 <__aeabi_i2f>
 801474e:	c601      	stmia	r6!, {r0}
 8014750:	3401      	adds	r4, #1
 8014752:	e7e3      	b.n	801471c <__kernel_rem_pio2f+0x54>
 8014754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014756:	00b3      	lsls	r3, r6, #2
 8014758:	6829      	ldr	r1, [r5, #0]
 801475a:	58d0      	ldr	r0, [r2, r3]
 801475c:	f7ec fb26 	bl	8000dac <__aeabi_fmul>
 8014760:	1c01      	adds	r1, r0, #0
 8014762:	9804      	ldr	r0, [sp, #16]
 8014764:	f7eb ffbc 	bl	80006e0 <__aeabi_fadd>
 8014768:	3601      	adds	r6, #1
 801476a:	9004      	str	r0, [sp, #16]
 801476c:	9b06      	ldr	r3, [sp, #24]
 801476e:	3d04      	subs	r5, #4
 8014770:	429e      	cmp	r6, r3
 8014772:	ddef      	ble.n	8014754 <__kernel_rem_pio2f+0x8c>
 8014774:	9b04      	ldr	r3, [sp, #16]
 8014776:	3401      	adds	r4, #1
 8014778:	c708      	stmia	r7!, {r3}
 801477a:	e7d4      	b.n	8014726 <__kernel_rem_pio2f+0x5e>
 801477c:	9b05      	ldr	r3, [sp, #20]
 801477e:	aa0e      	add	r2, sp, #56	; 0x38
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	189b      	adds	r3, r3, r2
 8014784:	930c      	str	r3, [sp, #48]	; 0x30
 8014786:	9b02      	ldr	r3, [sp, #8]
 8014788:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801478a:	009b      	lsls	r3, r3, #2
 801478c:	18d3      	adds	r3, r2, r3
 801478e:	9e05      	ldr	r6, [sp, #20]
 8014790:	930b      	str	r3, [sp, #44]	; 0x2c
 8014792:	0035      	movs	r5, r6
 8014794:	aa4a      	add	r2, sp, #296	; 0x128
 8014796:	00b3      	lsls	r3, r6, #2
 8014798:	af0e      	add	r7, sp, #56	; 0x38
 801479a:	589c      	ldr	r4, [r3, r2]
 801479c:	9702      	str	r7, [sp, #8]
 801479e:	920d      	str	r2, [sp, #52]	; 0x34
 80147a0:	2d00      	cmp	r5, #0
 80147a2:	dc64      	bgt.n	801486e <__kernel_rem_pio2f+0x1a6>
 80147a4:	9901      	ldr	r1, [sp, #4]
 80147a6:	1c20      	adds	r0, r4, #0
 80147a8:	f000 fc00 	bl	8014fac <scalbnf>
 80147ac:	21f8      	movs	r1, #248	; 0xf8
 80147ae:	0589      	lsls	r1, r1, #22
 80147b0:	1c04      	adds	r4, r0, #0
 80147b2:	f7ec fafb 	bl	8000dac <__aeabi_fmul>
 80147b6:	f000 fbb7 	bl	8014f28 <floorf>
 80147ba:	2182      	movs	r1, #130	; 0x82
 80147bc:	05c9      	lsls	r1, r1, #23
 80147be:	f7ec faf5 	bl	8000dac <__aeabi_fmul>
 80147c2:	1c01      	adds	r1, r0, #0
 80147c4:	1c20      	adds	r0, r4, #0
 80147c6:	f7ec fc17 	bl	8000ff8 <__aeabi_fsub>
 80147ca:	1c04      	adds	r4, r0, #0
 80147cc:	f7ec fdd8 	bl	8001380 <__aeabi_f2iz>
 80147d0:	9004      	str	r0, [sp, #16]
 80147d2:	f7ec fdf5 	bl	80013c0 <__aeabi_i2f>
 80147d6:	1c01      	adds	r1, r0, #0
 80147d8:	1c20      	adds	r0, r4, #0
 80147da:	f7ec fc0d 	bl	8000ff8 <__aeabi_fsub>
 80147de:	9b01      	ldr	r3, [sp, #4]
 80147e0:	1c04      	adds	r4, r0, #0
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	dd63      	ble.n	80148ae <__kernel_rem_pio2f+0x1e6>
 80147e6:	2108      	movs	r1, #8
 80147e8:	1e73      	subs	r3, r6, #1
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	aa0e      	add	r2, sp, #56	; 0x38
 80147ee:	589a      	ldr	r2, [r3, r2]
 80147f0:	9801      	ldr	r0, [sp, #4]
 80147f2:	9d04      	ldr	r5, [sp, #16]
 80147f4:	1a09      	subs	r1, r1, r0
 80147f6:	0010      	movs	r0, r2
 80147f8:	4108      	asrs	r0, r1
 80147fa:	182d      	adds	r5, r5, r0
 80147fc:	4088      	lsls	r0, r1
 80147fe:	a90e      	add	r1, sp, #56	; 0x38
 8014800:	1a12      	subs	r2, r2, r0
 8014802:	505a      	str	r2, [r3, r1]
 8014804:	2307      	movs	r3, #7
 8014806:	9901      	ldr	r1, [sp, #4]
 8014808:	9504      	str	r5, [sp, #16]
 801480a:	1a5b      	subs	r3, r3, r1
 801480c:	411a      	asrs	r2, r3
 801480e:	9202      	str	r2, [sp, #8]
 8014810:	9b02      	ldr	r3, [sp, #8]
 8014812:	2b00      	cmp	r3, #0
 8014814:	dd5c      	ble.n	80148d0 <__kernel_rem_pio2f+0x208>
 8014816:	9b04      	ldr	r3, [sp, #16]
 8014818:	2200      	movs	r2, #0
 801481a:	3301      	adds	r3, #1
 801481c:	9304      	str	r3, [sp, #16]
 801481e:	2301      	movs	r3, #1
 8014820:	2080      	movs	r0, #128	; 0x80
 8014822:	0015      	movs	r5, r2
 8014824:	21ff      	movs	r1, #255	; 0xff
 8014826:	469c      	mov	ip, r3
 8014828:	0040      	lsls	r0, r0, #1
 801482a:	4296      	cmp	r6, r2
 801482c:	dd00      	ble.n	8014830 <__kernel_rem_pio2f+0x168>
 801482e:	e080      	b.n	8014932 <__kernel_rem_pio2f+0x26a>
 8014830:	9b01      	ldr	r3, [sp, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd05      	ble.n	8014842 <__kernel_rem_pio2f+0x17a>
 8014836:	2b01      	cmp	r3, #1
 8014838:	d100      	bne.n	801483c <__kernel_rem_pio2f+0x174>
 801483a:	e08a      	b.n	8014952 <__kernel_rem_pio2f+0x28a>
 801483c:	2b02      	cmp	r3, #2
 801483e:	d100      	bne.n	8014842 <__kernel_rem_pio2f+0x17a>
 8014840:	e092      	b.n	8014968 <__kernel_rem_pio2f+0x2a0>
 8014842:	9b02      	ldr	r3, [sp, #8]
 8014844:	2b02      	cmp	r3, #2
 8014846:	d143      	bne.n	80148d0 <__kernel_rem_pio2f+0x208>
 8014848:	20fe      	movs	r0, #254	; 0xfe
 801484a:	1c21      	adds	r1, r4, #0
 801484c:	0580      	lsls	r0, r0, #22
 801484e:	f7ec fbd3 	bl	8000ff8 <__aeabi_fsub>
 8014852:	1c04      	adds	r4, r0, #0
 8014854:	2d00      	cmp	r5, #0
 8014856:	d03b      	beq.n	80148d0 <__kernel_rem_pio2f+0x208>
 8014858:	20fe      	movs	r0, #254	; 0xfe
 801485a:	9901      	ldr	r1, [sp, #4]
 801485c:	0580      	lsls	r0, r0, #22
 801485e:	f000 fba5 	bl	8014fac <scalbnf>
 8014862:	1c01      	adds	r1, r0, #0
 8014864:	1c20      	adds	r0, r4, #0
 8014866:	f7ec fbc7 	bl	8000ff8 <__aeabi_fsub>
 801486a:	1c04      	adds	r4, r0, #0
 801486c:	e030      	b.n	80148d0 <__kernel_rem_pio2f+0x208>
 801486e:	21ee      	movs	r1, #238	; 0xee
 8014870:	1c20      	adds	r0, r4, #0
 8014872:	0589      	lsls	r1, r1, #22
 8014874:	f7ec fa9a 	bl	8000dac <__aeabi_fmul>
 8014878:	f7ec fd82 	bl	8001380 <__aeabi_f2iz>
 801487c:	f7ec fda0 	bl	80013c0 <__aeabi_i2f>
 8014880:	2187      	movs	r1, #135	; 0x87
 8014882:	05c9      	lsls	r1, r1, #23
 8014884:	9004      	str	r0, [sp, #16]
 8014886:	f7ec fa91 	bl	8000dac <__aeabi_fmul>
 801488a:	1c01      	adds	r1, r0, #0
 801488c:	1c20      	adds	r0, r4, #0
 801488e:	f7ec fbb3 	bl	8000ff8 <__aeabi_fsub>
 8014892:	f7ec fd75 	bl	8001380 <__aeabi_f2iz>
 8014896:	9b02      	ldr	r3, [sp, #8]
 8014898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801489a:	c301      	stmia	r3!, {r0}
 801489c:	3d01      	subs	r5, #1
 801489e:	9302      	str	r3, [sp, #8]
 80148a0:	00ab      	lsls	r3, r5, #2
 80148a2:	5899      	ldr	r1, [r3, r2]
 80148a4:	9804      	ldr	r0, [sp, #16]
 80148a6:	f7eb ff1b 	bl	80006e0 <__aeabi_fadd>
 80148aa:	1c04      	adds	r4, r0, #0
 80148ac:	e778      	b.n	80147a0 <__kernel_rem_pio2f+0xd8>
 80148ae:	9b01      	ldr	r3, [sp, #4]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d106      	bne.n	80148c2 <__kernel_rem_pio2f+0x1fa>
 80148b4:	1e73      	subs	r3, r6, #1
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	aa0e      	add	r2, sp, #56	; 0x38
 80148ba:	5898      	ldr	r0, [r3, r2]
 80148bc:	11c3      	asrs	r3, r0, #7
 80148be:	9302      	str	r3, [sp, #8]
 80148c0:	e7a6      	b.n	8014810 <__kernel_rem_pio2f+0x148>
 80148c2:	21fc      	movs	r1, #252	; 0xfc
 80148c4:	0589      	lsls	r1, r1, #22
 80148c6:	f7eb fdcf 	bl	8000468 <__aeabi_fcmpge>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d12e      	bne.n	801492c <__kernel_rem_pio2f+0x264>
 80148ce:	9002      	str	r0, [sp, #8]
 80148d0:	2100      	movs	r1, #0
 80148d2:	1c20      	adds	r0, r4, #0
 80148d4:	f7eb fda4 	bl	8000420 <__aeabi_fcmpeq>
 80148d8:	2800      	cmp	r0, #0
 80148da:	d100      	bne.n	80148de <__kernel_rem_pio2f+0x216>
 80148dc:	e08e      	b.n	80149fc <__kernel_rem_pio2f+0x334>
 80148de:	1e77      	subs	r7, r6, #1
 80148e0:	003b      	movs	r3, r7
 80148e2:	2200      	movs	r2, #0
 80148e4:	9905      	ldr	r1, [sp, #20]
 80148e6:	428b      	cmp	r3, r1
 80148e8:	da45      	bge.n	8014976 <__kernel_rem_pio2f+0x2ae>
 80148ea:	2a00      	cmp	r2, #0
 80148ec:	d05d      	beq.n	80149aa <__kernel_rem_pio2f+0x2e2>
 80148ee:	9b01      	ldr	r3, [sp, #4]
 80148f0:	aa0e      	add	r2, sp, #56	; 0x38
 80148f2:	3b08      	subs	r3, #8
 80148f4:	9301      	str	r3, [sp, #4]
 80148f6:	00bb      	lsls	r3, r7, #2
 80148f8:	589b      	ldr	r3, [r3, r2]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d07a      	beq.n	80149f4 <__kernel_rem_pio2f+0x32c>
 80148fe:	20fe      	movs	r0, #254	; 0xfe
 8014900:	9901      	ldr	r1, [sp, #4]
 8014902:	0580      	lsls	r0, r0, #22
 8014904:	f000 fb52 	bl	8014fac <scalbnf>
 8014908:	003d      	movs	r5, r7
 801490a:	1c04      	adds	r4, r0, #0
 801490c:	2d00      	cmp	r5, #0
 801490e:	db00      	blt.n	8014912 <__kernel_rem_pio2f+0x24a>
 8014910:	e0ab      	b.n	8014a6a <__kernel_rem_pio2f+0x3a2>
 8014912:	003c      	movs	r4, r7
 8014914:	2c00      	cmp	r4, #0
 8014916:	da00      	bge.n	801491a <__kernel_rem_pio2f+0x252>
 8014918:	e0d6      	b.n	8014ac8 <__kernel_rem_pio2f+0x400>
 801491a:	00a3      	lsls	r3, r4, #2
 801491c:	aa4a      	add	r2, sp, #296	; 0x128
 801491e:	189b      	adds	r3, r3, r2
 8014920:	9306      	str	r3, [sp, #24]
 8014922:	1b3b      	subs	r3, r7, r4
 8014924:	2600      	movs	r6, #0
 8014926:	2500      	movs	r5, #0
 8014928:	9301      	str	r3, [sp, #4]
 801492a:	e0bf      	b.n	8014aac <__kernel_rem_pio2f+0x3e4>
 801492c:	2302      	movs	r3, #2
 801492e:	9302      	str	r3, [sp, #8]
 8014930:	e771      	b.n	8014816 <__kernel_rem_pio2f+0x14e>
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	2d00      	cmp	r5, #0
 8014936:	d108      	bne.n	801494a <__kernel_rem_pio2f+0x282>
 8014938:	2b00      	cmp	r3, #0
 801493a:	d002      	beq.n	8014942 <__kernel_rem_pio2f+0x27a>
 801493c:	1ac3      	subs	r3, r0, r3
 801493e:	603b      	str	r3, [r7, #0]
 8014940:	4663      	mov	r3, ip
 8014942:	001d      	movs	r5, r3
 8014944:	3201      	adds	r2, #1
 8014946:	3704      	adds	r7, #4
 8014948:	e76f      	b.n	801482a <__kernel_rem_pio2f+0x162>
 801494a:	1acb      	subs	r3, r1, r3
 801494c:	603b      	str	r3, [r7, #0]
 801494e:	002b      	movs	r3, r5
 8014950:	e7f7      	b.n	8014942 <__kernel_rem_pio2f+0x27a>
 8014952:	1e73      	subs	r3, r6, #1
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	aa0e      	add	r2, sp, #56	; 0x38
 8014958:	589a      	ldr	r2, [r3, r2]
 801495a:	920d      	str	r2, [sp, #52]	; 0x34
 801495c:	227f      	movs	r2, #127	; 0x7f
 801495e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014960:	400a      	ands	r2, r1
 8014962:	a90e      	add	r1, sp, #56	; 0x38
 8014964:	505a      	str	r2, [r3, r1]
 8014966:	e76c      	b.n	8014842 <__kernel_rem_pio2f+0x17a>
 8014968:	1e73      	subs	r3, r6, #1
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	aa0e      	add	r2, sp, #56	; 0x38
 801496e:	589a      	ldr	r2, [r3, r2]
 8014970:	920d      	str	r2, [sp, #52]	; 0x34
 8014972:	223f      	movs	r2, #63	; 0x3f
 8014974:	e7f3      	b.n	801495e <__kernel_rem_pio2f+0x296>
 8014976:	0099      	lsls	r1, r3, #2
 8014978:	a80e      	add	r0, sp, #56	; 0x38
 801497a:	5809      	ldr	r1, [r1, r0]
 801497c:	3b01      	subs	r3, #1
 801497e:	430a      	orrs	r2, r1
 8014980:	e7b0      	b.n	80148e4 <__kernel_rem_pio2f+0x21c>
 8014982:	3301      	adds	r3, #1
 8014984:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014986:	009a      	lsls	r2, r3, #2
 8014988:	4252      	negs	r2, r2
 801498a:	588a      	ldr	r2, [r1, r2]
 801498c:	2a00      	cmp	r2, #0
 801498e:	d0f8      	beq.n	8014982 <__kernel_rem_pio2f+0x2ba>
 8014990:	9a08      	ldr	r2, [sp, #32]
 8014992:	18f3      	adds	r3, r6, r3
 8014994:	18b4      	adds	r4, r6, r2
 8014996:	00a4      	lsls	r4, r4, #2
 8014998:	aa22      	add	r2, sp, #136	; 0x88
 801499a:	1c75      	adds	r5, r6, #1
 801499c:	1914      	adds	r4, r2, r4
 801499e:	9302      	str	r3, [sp, #8]
 80149a0:	9b02      	ldr	r3, [sp, #8]
 80149a2:	42ab      	cmp	r3, r5
 80149a4:	da03      	bge.n	80149ae <__kernel_rem_pio2f+0x2e6>
 80149a6:	001e      	movs	r6, r3
 80149a8:	e6f3      	b.n	8014792 <__kernel_rem_pio2f+0xca>
 80149aa:	2301      	movs	r3, #1
 80149ac:	e7ea      	b.n	8014984 <__kernel_rem_pio2f+0x2bc>
 80149ae:	00ab      	lsls	r3, r5, #2
 80149b0:	9304      	str	r3, [sp, #16]
 80149b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149b4:	00aa      	lsls	r2, r5, #2
 80149b6:	5898      	ldr	r0, [r3, r2]
 80149b8:	f7ec fd02 	bl	80013c0 <__aeabi_i2f>
 80149bc:	2700      	movs	r7, #0
 80149be:	2600      	movs	r6, #0
 80149c0:	6020      	str	r0, [r4, #0]
 80149c2:	9b06      	ldr	r3, [sp, #24]
 80149c4:	429f      	cmp	r7, r3
 80149c6:	dd07      	ble.n	80149d8 <__kernel_rem_pio2f+0x310>
 80149c8:	21f0      	movs	r1, #240	; 0xf0
 80149ca:	9a04      	ldr	r2, [sp, #16]
 80149cc:	ab0e      	add	r3, sp, #56	; 0x38
 80149ce:	185b      	adds	r3, r3, r1
 80149d0:	509e      	str	r6, [r3, r2]
 80149d2:	3501      	adds	r5, #1
 80149d4:	3404      	adds	r4, #4
 80149d6:	e7e3      	b.n	80149a0 <__kernel_rem_pio2f+0x2d8>
 80149d8:	00bb      	lsls	r3, r7, #2
 80149da:	425a      	negs	r2, r3
 80149dc:	58a1      	ldr	r1, [r4, r2]
 80149de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149e0:	3701      	adds	r7, #1
 80149e2:	58d0      	ldr	r0, [r2, r3]
 80149e4:	f7ec f9e2 	bl	8000dac <__aeabi_fmul>
 80149e8:	1c01      	adds	r1, r0, #0
 80149ea:	1c30      	adds	r0, r6, #0
 80149ec:	f7eb fe78 	bl	80006e0 <__aeabi_fadd>
 80149f0:	1c06      	adds	r6, r0, #0
 80149f2:	e7e6      	b.n	80149c2 <__kernel_rem_pio2f+0x2fa>
 80149f4:	3f01      	subs	r7, #1
 80149f6:	e77a      	b.n	80148ee <__kernel_rem_pio2f+0x226>
 80149f8:	08015dd4 	.word	0x08015dd4
 80149fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149fe:	9a07      	ldr	r2, [sp, #28]
 8014a00:	1c20      	adds	r0, r4, #0
 8014a02:	1a99      	subs	r1, r3, r2
 8014a04:	f000 fad2 	bl	8014fac <scalbnf>
 8014a08:	2187      	movs	r1, #135	; 0x87
 8014a0a:	05c9      	lsls	r1, r1, #23
 8014a0c:	1c04      	adds	r4, r0, #0
 8014a0e:	f7eb fd2b 	bl	8000468 <__aeabi_fcmpge>
 8014a12:	2800      	cmp	r0, #0
 8014a14:	d021      	beq.n	8014a5a <__kernel_rem_pio2f+0x392>
 8014a16:	21ee      	movs	r1, #238	; 0xee
 8014a18:	1c20      	adds	r0, r4, #0
 8014a1a:	0589      	lsls	r1, r1, #22
 8014a1c:	f7ec f9c6 	bl	8000dac <__aeabi_fmul>
 8014a20:	f7ec fcae 	bl	8001380 <__aeabi_f2iz>
 8014a24:	f7ec fccc 	bl	80013c0 <__aeabi_i2f>
 8014a28:	2187      	movs	r1, #135	; 0x87
 8014a2a:	05c9      	lsls	r1, r1, #23
 8014a2c:	1c05      	adds	r5, r0, #0
 8014a2e:	f7ec f9bd 	bl	8000dac <__aeabi_fmul>
 8014a32:	1c01      	adds	r1, r0, #0
 8014a34:	1c20      	adds	r0, r4, #0
 8014a36:	f7ec fadf 	bl	8000ff8 <__aeabi_fsub>
 8014a3a:	f7ec fca1 	bl	8001380 <__aeabi_f2iz>
 8014a3e:	00b7      	lsls	r7, r6, #2
 8014a40:	ab0e      	add	r3, sp, #56	; 0x38
 8014a42:	51d8      	str	r0, [r3, r7]
 8014a44:	9b01      	ldr	r3, [sp, #4]
 8014a46:	1c28      	adds	r0, r5, #0
 8014a48:	3308      	adds	r3, #8
 8014a4a:	9301      	str	r3, [sp, #4]
 8014a4c:	f7ec fc98 	bl	8001380 <__aeabi_f2iz>
 8014a50:	1c77      	adds	r7, r6, #1
 8014a52:	00bc      	lsls	r4, r7, #2
 8014a54:	ab0e      	add	r3, sp, #56	; 0x38
 8014a56:	5118      	str	r0, [r3, r4]
 8014a58:	e751      	b.n	80148fe <__kernel_rem_pio2f+0x236>
 8014a5a:	1c20      	adds	r0, r4, #0
 8014a5c:	f7ec fc90 	bl	8001380 <__aeabi_f2iz>
 8014a60:	00b5      	lsls	r5, r6, #2
 8014a62:	ab0e      	add	r3, sp, #56	; 0x38
 8014a64:	0037      	movs	r7, r6
 8014a66:	5158      	str	r0, [r3, r5]
 8014a68:	e749      	b.n	80148fe <__kernel_rem_pio2f+0x236>
 8014a6a:	ab0e      	add	r3, sp, #56	; 0x38
 8014a6c:	00ae      	lsls	r6, r5, #2
 8014a6e:	58f0      	ldr	r0, [r6, r3]
 8014a70:	f7ec fca6 	bl	80013c0 <__aeabi_i2f>
 8014a74:	1c21      	adds	r1, r4, #0
 8014a76:	f7ec f999 	bl	8000dac <__aeabi_fmul>
 8014a7a:	22f0      	movs	r2, #240	; 0xf0
 8014a7c:	21ee      	movs	r1, #238	; 0xee
 8014a7e:	ab0e      	add	r3, sp, #56	; 0x38
 8014a80:	189b      	adds	r3, r3, r2
 8014a82:	5198      	str	r0, [r3, r6]
 8014a84:	0589      	lsls	r1, r1, #22
 8014a86:	1c20      	adds	r0, r4, #0
 8014a88:	f7ec f990 	bl	8000dac <__aeabi_fmul>
 8014a8c:	3d01      	subs	r5, #1
 8014a8e:	1c04      	adds	r4, r0, #0
 8014a90:	e73c      	b.n	801490c <__kernel_rem_pio2f+0x244>
 8014a92:	9a06      	ldr	r2, [sp, #24]
 8014a94:	00ab      	lsls	r3, r5, #2
 8014a96:	58d1      	ldr	r1, [r2, r3]
 8014a98:	4a5e      	ldr	r2, [pc, #376]	; (8014c14 <__kernel_rem_pio2f+0x54c>)
 8014a9a:	3501      	adds	r5, #1
 8014a9c:	5898      	ldr	r0, [r3, r2]
 8014a9e:	f7ec f985 	bl	8000dac <__aeabi_fmul>
 8014aa2:	1c01      	adds	r1, r0, #0
 8014aa4:	1c30      	adds	r0, r6, #0
 8014aa6:	f7eb fe1b 	bl	80006e0 <__aeabi_fadd>
 8014aaa:	1c06      	adds	r6, r0, #0
 8014aac:	9b05      	ldr	r3, [sp, #20]
 8014aae:	429d      	cmp	r5, r3
 8014ab0:	dc02      	bgt.n	8014ab8 <__kernel_rem_pio2f+0x3f0>
 8014ab2:	9b01      	ldr	r3, [sp, #4]
 8014ab4:	429d      	cmp	r5, r3
 8014ab6:	ddec      	ble.n	8014a92 <__kernel_rem_pio2f+0x3ca>
 8014ab8:	21a0      	movs	r1, #160	; 0xa0
 8014aba:	9b01      	ldr	r3, [sp, #4]
 8014abc:	aa0e      	add	r2, sp, #56	; 0x38
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	1852      	adds	r2, r2, r1
 8014ac2:	50d6      	str	r6, [r2, r3]
 8014ac4:	3c01      	subs	r4, #1
 8014ac6:	e725      	b.n	8014914 <__kernel_rem_pio2f+0x24c>
 8014ac8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014aca:	2b02      	cmp	r3, #2
 8014acc:	dc08      	bgt.n	8014ae0 <__kernel_rem_pio2f+0x418>
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	dc5a      	bgt.n	8014b88 <__kernel_rem_pio2f+0x4c0>
 8014ad2:	d035      	beq.n	8014b40 <__kernel_rem_pio2f+0x478>
 8014ad4:	2007      	movs	r0, #7
 8014ad6:	9b04      	ldr	r3, [sp, #16]
 8014ad8:	4003      	ands	r3, r0
 8014ada:	0018      	movs	r0, r3
 8014adc:	b05f      	add	sp, #380	; 0x17c
 8014ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014ae2:	2b03      	cmp	r3, #3
 8014ae4:	d1f6      	bne.n	8014ad4 <__kernel_rem_pio2f+0x40c>
 8014ae6:	00bb      	lsls	r3, r7, #2
 8014ae8:	aa36      	add	r2, sp, #216	; 0xd8
 8014aea:	18d5      	adds	r5, r2, r3
 8014aec:	002c      	movs	r4, r5
 8014aee:	9701      	str	r7, [sp, #4]
 8014af0:	9b01      	ldr	r3, [sp, #4]
 8014af2:	3c04      	subs	r4, #4
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	dc51      	bgt.n	8014b9c <__kernel_rem_pio2f+0x4d4>
 8014af8:	9701      	str	r7, [sp, #4]
 8014afa:	9b01      	ldr	r3, [sp, #4]
 8014afc:	3d04      	subs	r5, #4
 8014afe:	2b01      	cmp	r3, #1
 8014b00:	dc62      	bgt.n	8014bc8 <__kernel_rem_pio2f+0x500>
 8014b02:	2000      	movs	r0, #0
 8014b04:	ac36      	add	r4, sp, #216	; 0xd8
 8014b06:	2f01      	cmp	r7, #1
 8014b08:	dc73      	bgt.n	8014bf2 <__kernel_rem_pio2f+0x52a>
 8014b0a:	9902      	ldr	r1, [sp, #8]
 8014b0c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8014b0e:	6863      	ldr	r3, [r4, #4]
 8014b10:	2900      	cmp	r1, #0
 8014b12:	d174      	bne.n	8014bfe <__kernel_rem_pio2f+0x536>
 8014b14:	9903      	ldr	r1, [sp, #12]
 8014b16:	604b      	str	r3, [r1, #4]
 8014b18:	000b      	movs	r3, r1
 8014b1a:	600a      	str	r2, [r1, #0]
 8014b1c:	6098      	str	r0, [r3, #8]
 8014b1e:	e7d9      	b.n	8014ad4 <__kernel_rem_pio2f+0x40c>
 8014b20:	00bb      	lsls	r3, r7, #2
 8014b22:	5919      	ldr	r1, [r3, r4]
 8014b24:	f7eb fddc 	bl	80006e0 <__aeabi_fadd>
 8014b28:	3f01      	subs	r7, #1
 8014b2a:	2f00      	cmp	r7, #0
 8014b2c:	daf8      	bge.n	8014b20 <__kernel_rem_pio2f+0x458>
 8014b2e:	9b02      	ldr	r3, [sp, #8]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d002      	beq.n	8014b3a <__kernel_rem_pio2f+0x472>
 8014b34:	2380      	movs	r3, #128	; 0x80
 8014b36:	061b      	lsls	r3, r3, #24
 8014b38:	18c0      	adds	r0, r0, r3
 8014b3a:	9b03      	ldr	r3, [sp, #12]
 8014b3c:	6018      	str	r0, [r3, #0]
 8014b3e:	e7c9      	b.n	8014ad4 <__kernel_rem_pio2f+0x40c>
 8014b40:	2000      	movs	r0, #0
 8014b42:	ac36      	add	r4, sp, #216	; 0xd8
 8014b44:	e7f1      	b.n	8014b2a <__kernel_rem_pio2f+0x462>
 8014b46:	00a3      	lsls	r3, r4, #2
 8014b48:	5959      	ldr	r1, [r3, r5]
 8014b4a:	f7eb fdc9 	bl	80006e0 <__aeabi_fadd>
 8014b4e:	3c01      	subs	r4, #1
 8014b50:	2c00      	cmp	r4, #0
 8014b52:	daf8      	bge.n	8014b46 <__kernel_rem_pio2f+0x47e>
 8014b54:	9a02      	ldr	r2, [sp, #8]
 8014b56:	1c03      	adds	r3, r0, #0
 8014b58:	2a00      	cmp	r2, #0
 8014b5a:	d002      	beq.n	8014b62 <__kernel_rem_pio2f+0x49a>
 8014b5c:	2380      	movs	r3, #128	; 0x80
 8014b5e:	061b      	lsls	r3, r3, #24
 8014b60:	18c3      	adds	r3, r0, r3
 8014b62:	9a03      	ldr	r2, [sp, #12]
 8014b64:	1c01      	adds	r1, r0, #0
 8014b66:	6013      	str	r3, [r2, #0]
 8014b68:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8014b6a:	f7ec fa45 	bl	8000ff8 <__aeabi_fsub>
 8014b6e:	2401      	movs	r4, #1
 8014b70:	ad36      	add	r5, sp, #216	; 0xd8
 8014b72:	42a7      	cmp	r7, r4
 8014b74:	da0c      	bge.n	8014b90 <__kernel_rem_pio2f+0x4c8>
 8014b76:	9b02      	ldr	r3, [sp, #8]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d002      	beq.n	8014b82 <__kernel_rem_pio2f+0x4ba>
 8014b7c:	2380      	movs	r3, #128	; 0x80
 8014b7e:	061b      	lsls	r3, r3, #24
 8014b80:	18c0      	adds	r0, r0, r3
 8014b82:	9b03      	ldr	r3, [sp, #12]
 8014b84:	6058      	str	r0, [r3, #4]
 8014b86:	e7a5      	b.n	8014ad4 <__kernel_rem_pio2f+0x40c>
 8014b88:	003c      	movs	r4, r7
 8014b8a:	2000      	movs	r0, #0
 8014b8c:	ad36      	add	r5, sp, #216	; 0xd8
 8014b8e:	e7df      	b.n	8014b50 <__kernel_rem_pio2f+0x488>
 8014b90:	00a3      	lsls	r3, r4, #2
 8014b92:	5959      	ldr	r1, [r3, r5]
 8014b94:	f7eb fda4 	bl	80006e0 <__aeabi_fadd>
 8014b98:	3401      	adds	r4, #1
 8014b9a:	e7ea      	b.n	8014b72 <__kernel_rem_pio2f+0x4aa>
 8014b9c:	9b01      	ldr	r3, [sp, #4]
 8014b9e:	6826      	ldr	r6, [r4, #0]
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	9301      	str	r3, [sp, #4]
 8014ba4:	6863      	ldr	r3, [r4, #4]
 8014ba6:	1c30      	adds	r0, r6, #0
 8014ba8:	1c19      	adds	r1, r3, #0
 8014baa:	9305      	str	r3, [sp, #20]
 8014bac:	f7eb fd98 	bl	80006e0 <__aeabi_fadd>
 8014bb0:	1c01      	adds	r1, r0, #0
 8014bb2:	9006      	str	r0, [sp, #24]
 8014bb4:	1c30      	adds	r0, r6, #0
 8014bb6:	f7ec fa1f 	bl	8000ff8 <__aeabi_fsub>
 8014bba:	9905      	ldr	r1, [sp, #20]
 8014bbc:	f7eb fd90 	bl	80006e0 <__aeabi_fadd>
 8014bc0:	9b06      	ldr	r3, [sp, #24]
 8014bc2:	6060      	str	r0, [r4, #4]
 8014bc4:	6023      	str	r3, [r4, #0]
 8014bc6:	e793      	b.n	8014af0 <__kernel_rem_pio2f+0x428>
 8014bc8:	682c      	ldr	r4, [r5, #0]
 8014bca:	686e      	ldr	r6, [r5, #4]
 8014bcc:	9b01      	ldr	r3, [sp, #4]
 8014bce:	1c31      	adds	r1, r6, #0
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	1c20      	adds	r0, r4, #0
 8014bd4:	9301      	str	r3, [sp, #4]
 8014bd6:	f7eb fd83 	bl	80006e0 <__aeabi_fadd>
 8014bda:	1c01      	adds	r1, r0, #0
 8014bdc:	9005      	str	r0, [sp, #20]
 8014bde:	1c20      	adds	r0, r4, #0
 8014be0:	f7ec fa0a 	bl	8000ff8 <__aeabi_fsub>
 8014be4:	1c31      	adds	r1, r6, #0
 8014be6:	f7eb fd7b 	bl	80006e0 <__aeabi_fadd>
 8014bea:	9b05      	ldr	r3, [sp, #20]
 8014bec:	6068      	str	r0, [r5, #4]
 8014bee:	602b      	str	r3, [r5, #0]
 8014bf0:	e783      	b.n	8014afa <__kernel_rem_pio2f+0x432>
 8014bf2:	00bb      	lsls	r3, r7, #2
 8014bf4:	58e1      	ldr	r1, [r4, r3]
 8014bf6:	f7eb fd73 	bl	80006e0 <__aeabi_fadd>
 8014bfa:	3f01      	subs	r7, #1
 8014bfc:	e783      	b.n	8014b06 <__kernel_rem_pio2f+0x43e>
 8014bfe:	2180      	movs	r1, #128	; 0x80
 8014c00:	9c03      	ldr	r4, [sp, #12]
 8014c02:	0609      	lsls	r1, r1, #24
 8014c04:	185b      	adds	r3, r3, r1
 8014c06:	1852      	adds	r2, r2, r1
 8014c08:	6063      	str	r3, [r4, #4]
 8014c0a:	6022      	str	r2, [r4, #0]
 8014c0c:	0023      	movs	r3, r4
 8014c0e:	1840      	adds	r0, r0, r1
 8014c10:	e784      	b.n	8014b1c <__kernel_rem_pio2f+0x454>
 8014c12:	46c0      	nop			; (mov r8, r8)
 8014c14:	08015da8 	.word	0x08015da8

08014c18 <__kernel_sinf>:
 8014c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c1a:	9201      	str	r2, [sp, #4]
 8014c1c:	22c8      	movs	r2, #200	; 0xc8
 8014c1e:	0043      	lsls	r3, r0, #1
 8014c20:	1c04      	adds	r4, r0, #0
 8014c22:	9100      	str	r1, [sp, #0]
 8014c24:	085b      	lsrs	r3, r3, #1
 8014c26:	0592      	lsls	r2, r2, #22
 8014c28:	4293      	cmp	r3, r2
 8014c2a:	da03      	bge.n	8014c34 <__kernel_sinf+0x1c>
 8014c2c:	f7ec fba8 	bl	8001380 <__aeabi_f2iz>
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d035      	beq.n	8014ca0 <__kernel_sinf+0x88>
 8014c34:	1c21      	adds	r1, r4, #0
 8014c36:	1c20      	adds	r0, r4, #0
 8014c38:	f7ec f8b8 	bl	8000dac <__aeabi_fmul>
 8014c3c:	1c05      	adds	r5, r0, #0
 8014c3e:	1c01      	adds	r1, r0, #0
 8014c40:	1c20      	adds	r0, r4, #0
 8014c42:	f7ec f8b3 	bl	8000dac <__aeabi_fmul>
 8014c46:	4928      	ldr	r1, [pc, #160]	; (8014ce8 <__kernel_sinf+0xd0>)
 8014c48:	1c06      	adds	r6, r0, #0
 8014c4a:	1c28      	adds	r0, r5, #0
 8014c4c:	f7ec f8ae 	bl	8000dac <__aeabi_fmul>
 8014c50:	4926      	ldr	r1, [pc, #152]	; (8014cec <__kernel_sinf+0xd4>)
 8014c52:	f7ec f9d1 	bl	8000ff8 <__aeabi_fsub>
 8014c56:	1c29      	adds	r1, r5, #0
 8014c58:	f7ec f8a8 	bl	8000dac <__aeabi_fmul>
 8014c5c:	4924      	ldr	r1, [pc, #144]	; (8014cf0 <__kernel_sinf+0xd8>)
 8014c5e:	f7eb fd3f 	bl	80006e0 <__aeabi_fadd>
 8014c62:	1c29      	adds	r1, r5, #0
 8014c64:	f7ec f8a2 	bl	8000dac <__aeabi_fmul>
 8014c68:	4922      	ldr	r1, [pc, #136]	; (8014cf4 <__kernel_sinf+0xdc>)
 8014c6a:	f7ec f9c5 	bl	8000ff8 <__aeabi_fsub>
 8014c6e:	1c29      	adds	r1, r5, #0
 8014c70:	f7ec f89c 	bl	8000dac <__aeabi_fmul>
 8014c74:	4920      	ldr	r1, [pc, #128]	; (8014cf8 <__kernel_sinf+0xe0>)
 8014c76:	f7eb fd33 	bl	80006e0 <__aeabi_fadd>
 8014c7a:	9b01      	ldr	r3, [sp, #4]
 8014c7c:	1c07      	adds	r7, r0, #0
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d110      	bne.n	8014ca4 <__kernel_sinf+0x8c>
 8014c82:	1c01      	adds	r1, r0, #0
 8014c84:	1c28      	adds	r0, r5, #0
 8014c86:	f7ec f891 	bl	8000dac <__aeabi_fmul>
 8014c8a:	491c      	ldr	r1, [pc, #112]	; (8014cfc <__kernel_sinf+0xe4>)
 8014c8c:	f7ec f9b4 	bl	8000ff8 <__aeabi_fsub>
 8014c90:	1c31      	adds	r1, r6, #0
 8014c92:	f7ec f88b 	bl	8000dac <__aeabi_fmul>
 8014c96:	1c01      	adds	r1, r0, #0
 8014c98:	1c20      	adds	r0, r4, #0
 8014c9a:	f7eb fd21 	bl	80006e0 <__aeabi_fadd>
 8014c9e:	1c04      	adds	r4, r0, #0
 8014ca0:	1c20      	adds	r0, r4, #0
 8014ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014ca4:	21fc      	movs	r1, #252	; 0xfc
 8014ca6:	9800      	ldr	r0, [sp, #0]
 8014ca8:	0589      	lsls	r1, r1, #22
 8014caa:	f7ec f87f 	bl	8000dac <__aeabi_fmul>
 8014cae:	1c39      	adds	r1, r7, #0
 8014cb0:	9001      	str	r0, [sp, #4]
 8014cb2:	1c30      	adds	r0, r6, #0
 8014cb4:	f7ec f87a 	bl	8000dac <__aeabi_fmul>
 8014cb8:	1c01      	adds	r1, r0, #0
 8014cba:	9801      	ldr	r0, [sp, #4]
 8014cbc:	f7ec f99c 	bl	8000ff8 <__aeabi_fsub>
 8014cc0:	1c29      	adds	r1, r5, #0
 8014cc2:	f7ec f873 	bl	8000dac <__aeabi_fmul>
 8014cc6:	9900      	ldr	r1, [sp, #0]
 8014cc8:	f7ec f996 	bl	8000ff8 <__aeabi_fsub>
 8014ccc:	490b      	ldr	r1, [pc, #44]	; (8014cfc <__kernel_sinf+0xe4>)
 8014cce:	1c05      	adds	r5, r0, #0
 8014cd0:	1c30      	adds	r0, r6, #0
 8014cd2:	f7ec f86b 	bl	8000dac <__aeabi_fmul>
 8014cd6:	1c01      	adds	r1, r0, #0
 8014cd8:	1c28      	adds	r0, r5, #0
 8014cda:	f7eb fd01 	bl	80006e0 <__aeabi_fadd>
 8014cde:	1c01      	adds	r1, r0, #0
 8014ce0:	1c20      	adds	r0, r4, #0
 8014ce2:	f7ec f989 	bl	8000ff8 <__aeabi_fsub>
 8014ce6:	e7da      	b.n	8014c9e <__kernel_sinf+0x86>
 8014ce8:	2f2ec9d3 	.word	0x2f2ec9d3
 8014cec:	32d72f34 	.word	0x32d72f34
 8014cf0:	3638ef1b 	.word	0x3638ef1b
 8014cf4:	39500d01 	.word	0x39500d01
 8014cf8:	3c088889 	.word	0x3c088889
 8014cfc:	3e2aaaab 	.word	0x3e2aaaab

08014d00 <atanf>:
 8014d00:	23a1      	movs	r3, #161	; 0xa1
 8014d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d04:	0045      	lsls	r5, r0, #1
 8014d06:	1c04      	adds	r4, r0, #0
 8014d08:	9001      	str	r0, [sp, #4]
 8014d0a:	086d      	lsrs	r5, r5, #1
 8014d0c:	05db      	lsls	r3, r3, #23
 8014d0e:	429d      	cmp	r5, r3
 8014d10:	db0f      	blt.n	8014d32 <atanf+0x32>
 8014d12:	23ff      	movs	r3, #255	; 0xff
 8014d14:	05db      	lsls	r3, r3, #23
 8014d16:	429d      	cmp	r5, r3
 8014d18:	dd04      	ble.n	8014d24 <atanf+0x24>
 8014d1a:	1c01      	adds	r1, r0, #0
 8014d1c:	f7eb fce0 	bl	80006e0 <__aeabi_fadd>
 8014d20:	1c04      	adds	r4, r0, #0
 8014d22:	e004      	b.n	8014d2e <atanf+0x2e>
 8014d24:	9b01      	ldr	r3, [sp, #4]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	dd00      	ble.n	8014d2c <atanf+0x2c>
 8014d2a:	e0cc      	b.n	8014ec6 <atanf+0x1c6>
 8014d2c:	4c67      	ldr	r4, [pc, #412]	; (8014ecc <atanf+0x1cc>)
 8014d2e:	1c20      	adds	r0, r4, #0
 8014d30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014d32:	4b67      	ldr	r3, [pc, #412]	; (8014ed0 <atanf+0x1d0>)
 8014d34:	429d      	cmp	r5, r3
 8014d36:	dc0f      	bgt.n	8014d58 <atanf+0x58>
 8014d38:	23c4      	movs	r3, #196	; 0xc4
 8014d3a:	059b      	lsls	r3, r3, #22
 8014d3c:	429d      	cmp	r5, r3
 8014d3e:	da08      	bge.n	8014d52 <atanf+0x52>
 8014d40:	4964      	ldr	r1, [pc, #400]	; (8014ed4 <atanf+0x1d4>)
 8014d42:	f7eb fccd 	bl	80006e0 <__aeabi_fadd>
 8014d46:	21fe      	movs	r1, #254	; 0xfe
 8014d48:	0589      	lsls	r1, r1, #22
 8014d4a:	f7eb fb83 	bl	8000454 <__aeabi_fcmpgt>
 8014d4e:	2800      	cmp	r0, #0
 8014d50:	d1ed      	bne.n	8014d2e <atanf+0x2e>
 8014d52:	2601      	movs	r6, #1
 8014d54:	4276      	negs	r6, r6
 8014d56:	e01b      	b.n	8014d90 <atanf+0x90>
 8014d58:	f000 f8e2 	bl	8014f20 <fabsf>
 8014d5c:	4b5e      	ldr	r3, [pc, #376]	; (8014ed8 <atanf+0x1d8>)
 8014d5e:	1c04      	adds	r4, r0, #0
 8014d60:	429d      	cmp	r5, r3
 8014d62:	dc7b      	bgt.n	8014e5c <atanf+0x15c>
 8014d64:	4b5d      	ldr	r3, [pc, #372]	; (8014edc <atanf+0x1dc>)
 8014d66:	429d      	cmp	r5, r3
 8014d68:	dc67      	bgt.n	8014e3a <atanf+0x13a>
 8014d6a:	1c01      	adds	r1, r0, #0
 8014d6c:	f7eb fcb8 	bl	80006e0 <__aeabi_fadd>
 8014d70:	21fe      	movs	r1, #254	; 0xfe
 8014d72:	0589      	lsls	r1, r1, #22
 8014d74:	f7ec f940 	bl	8000ff8 <__aeabi_fsub>
 8014d78:	2180      	movs	r1, #128	; 0x80
 8014d7a:	1c05      	adds	r5, r0, #0
 8014d7c:	05c9      	lsls	r1, r1, #23
 8014d7e:	1c20      	adds	r0, r4, #0
 8014d80:	f7eb fcae 	bl	80006e0 <__aeabi_fadd>
 8014d84:	1c01      	adds	r1, r0, #0
 8014d86:	1c28      	adds	r0, r5, #0
 8014d88:	f7eb fe48 	bl	8000a1c <__aeabi_fdiv>
 8014d8c:	2600      	movs	r6, #0
 8014d8e:	1c04      	adds	r4, r0, #0
 8014d90:	1c21      	adds	r1, r4, #0
 8014d92:	1c20      	adds	r0, r4, #0
 8014d94:	f7ec f80a 	bl	8000dac <__aeabi_fmul>
 8014d98:	1c01      	adds	r1, r0, #0
 8014d9a:	1c07      	adds	r7, r0, #0
 8014d9c:	f7ec f806 	bl	8000dac <__aeabi_fmul>
 8014da0:	494f      	ldr	r1, [pc, #316]	; (8014ee0 <atanf+0x1e0>)
 8014da2:	1c05      	adds	r5, r0, #0
 8014da4:	f7ec f802 	bl	8000dac <__aeabi_fmul>
 8014da8:	494e      	ldr	r1, [pc, #312]	; (8014ee4 <atanf+0x1e4>)
 8014daa:	f7eb fc99 	bl	80006e0 <__aeabi_fadd>
 8014dae:	1c29      	adds	r1, r5, #0
 8014db0:	f7eb fffc 	bl	8000dac <__aeabi_fmul>
 8014db4:	494c      	ldr	r1, [pc, #304]	; (8014ee8 <atanf+0x1e8>)
 8014db6:	f7eb fc93 	bl	80006e0 <__aeabi_fadd>
 8014dba:	1c29      	adds	r1, r5, #0
 8014dbc:	f7eb fff6 	bl	8000dac <__aeabi_fmul>
 8014dc0:	494a      	ldr	r1, [pc, #296]	; (8014eec <atanf+0x1ec>)
 8014dc2:	f7eb fc8d 	bl	80006e0 <__aeabi_fadd>
 8014dc6:	1c29      	adds	r1, r5, #0
 8014dc8:	f7eb fff0 	bl	8000dac <__aeabi_fmul>
 8014dcc:	4948      	ldr	r1, [pc, #288]	; (8014ef0 <atanf+0x1f0>)
 8014dce:	f7eb fc87 	bl	80006e0 <__aeabi_fadd>
 8014dd2:	1c29      	adds	r1, r5, #0
 8014dd4:	f7eb ffea 	bl	8000dac <__aeabi_fmul>
 8014dd8:	4946      	ldr	r1, [pc, #280]	; (8014ef4 <atanf+0x1f4>)
 8014dda:	f7eb fc81 	bl	80006e0 <__aeabi_fadd>
 8014dde:	1c39      	adds	r1, r7, #0
 8014de0:	f7eb ffe4 	bl	8000dac <__aeabi_fmul>
 8014de4:	4944      	ldr	r1, [pc, #272]	; (8014ef8 <atanf+0x1f8>)
 8014de6:	1c07      	adds	r7, r0, #0
 8014de8:	1c28      	adds	r0, r5, #0
 8014dea:	f7eb ffdf 	bl	8000dac <__aeabi_fmul>
 8014dee:	4943      	ldr	r1, [pc, #268]	; (8014efc <atanf+0x1fc>)
 8014df0:	f7ec f902 	bl	8000ff8 <__aeabi_fsub>
 8014df4:	1c29      	adds	r1, r5, #0
 8014df6:	f7eb ffd9 	bl	8000dac <__aeabi_fmul>
 8014dfa:	4941      	ldr	r1, [pc, #260]	; (8014f00 <atanf+0x200>)
 8014dfc:	f7ec f8fc 	bl	8000ff8 <__aeabi_fsub>
 8014e00:	1c29      	adds	r1, r5, #0
 8014e02:	f7eb ffd3 	bl	8000dac <__aeabi_fmul>
 8014e06:	493f      	ldr	r1, [pc, #252]	; (8014f04 <atanf+0x204>)
 8014e08:	f7ec f8f6 	bl	8000ff8 <__aeabi_fsub>
 8014e0c:	1c29      	adds	r1, r5, #0
 8014e0e:	f7eb ffcd 	bl	8000dac <__aeabi_fmul>
 8014e12:	493d      	ldr	r1, [pc, #244]	; (8014f08 <atanf+0x208>)
 8014e14:	f7ec f8f0 	bl	8000ff8 <__aeabi_fsub>
 8014e18:	1c29      	adds	r1, r5, #0
 8014e1a:	f7eb ffc7 	bl	8000dac <__aeabi_fmul>
 8014e1e:	1c01      	adds	r1, r0, #0
 8014e20:	1c38      	adds	r0, r7, #0
 8014e22:	f7eb fc5d 	bl	80006e0 <__aeabi_fadd>
 8014e26:	1c21      	adds	r1, r4, #0
 8014e28:	f7eb ffc0 	bl	8000dac <__aeabi_fmul>
 8014e2c:	1c73      	adds	r3, r6, #1
 8014e2e:	d134      	bne.n	8014e9a <atanf+0x19a>
 8014e30:	1c01      	adds	r1, r0, #0
 8014e32:	1c20      	adds	r0, r4, #0
 8014e34:	f7ec f8e0 	bl	8000ff8 <__aeabi_fsub>
 8014e38:	e772      	b.n	8014d20 <atanf+0x20>
 8014e3a:	21fe      	movs	r1, #254	; 0xfe
 8014e3c:	0589      	lsls	r1, r1, #22
 8014e3e:	f7ec f8db 	bl	8000ff8 <__aeabi_fsub>
 8014e42:	21fe      	movs	r1, #254	; 0xfe
 8014e44:	1c05      	adds	r5, r0, #0
 8014e46:	0589      	lsls	r1, r1, #22
 8014e48:	1c20      	adds	r0, r4, #0
 8014e4a:	f7eb fc49 	bl	80006e0 <__aeabi_fadd>
 8014e4e:	1c01      	adds	r1, r0, #0
 8014e50:	1c28      	adds	r0, r5, #0
 8014e52:	f7eb fde3 	bl	8000a1c <__aeabi_fdiv>
 8014e56:	2601      	movs	r6, #1
 8014e58:	1c04      	adds	r4, r0, #0
 8014e5a:	e799      	b.n	8014d90 <atanf+0x90>
 8014e5c:	4b2b      	ldr	r3, [pc, #172]	; (8014f0c <atanf+0x20c>)
 8014e5e:	429d      	cmp	r5, r3
 8014e60:	dc14      	bgt.n	8014e8c <atanf+0x18c>
 8014e62:	21ff      	movs	r1, #255	; 0xff
 8014e64:	0589      	lsls	r1, r1, #22
 8014e66:	f7ec f8c7 	bl	8000ff8 <__aeabi_fsub>
 8014e6a:	21ff      	movs	r1, #255	; 0xff
 8014e6c:	1c05      	adds	r5, r0, #0
 8014e6e:	0589      	lsls	r1, r1, #22
 8014e70:	1c20      	adds	r0, r4, #0
 8014e72:	f7eb ff9b 	bl	8000dac <__aeabi_fmul>
 8014e76:	21fe      	movs	r1, #254	; 0xfe
 8014e78:	0589      	lsls	r1, r1, #22
 8014e7a:	f7eb fc31 	bl	80006e0 <__aeabi_fadd>
 8014e7e:	1c01      	adds	r1, r0, #0
 8014e80:	1c28      	adds	r0, r5, #0
 8014e82:	f7eb fdcb 	bl	8000a1c <__aeabi_fdiv>
 8014e86:	2602      	movs	r6, #2
 8014e88:	1c04      	adds	r4, r0, #0
 8014e8a:	e781      	b.n	8014d90 <atanf+0x90>
 8014e8c:	1c01      	adds	r1, r0, #0
 8014e8e:	4820      	ldr	r0, [pc, #128]	; (8014f10 <atanf+0x210>)
 8014e90:	f7eb fdc4 	bl	8000a1c <__aeabi_fdiv>
 8014e94:	2603      	movs	r6, #3
 8014e96:	1c04      	adds	r4, r0, #0
 8014e98:	e77a      	b.n	8014d90 <atanf+0x90>
 8014e9a:	4b1e      	ldr	r3, [pc, #120]	; (8014f14 <atanf+0x214>)
 8014e9c:	00b6      	lsls	r6, r6, #2
 8014e9e:	58f1      	ldr	r1, [r6, r3]
 8014ea0:	f7ec f8aa 	bl	8000ff8 <__aeabi_fsub>
 8014ea4:	1c21      	adds	r1, r4, #0
 8014ea6:	f7ec f8a7 	bl	8000ff8 <__aeabi_fsub>
 8014eaa:	4b1b      	ldr	r3, [pc, #108]	; (8014f18 <atanf+0x218>)
 8014eac:	1c01      	adds	r1, r0, #0
 8014eae:	58f0      	ldr	r0, [r6, r3]
 8014eb0:	f7ec f8a2 	bl	8000ff8 <__aeabi_fsub>
 8014eb4:	9b01      	ldr	r3, [sp, #4]
 8014eb6:	1c04      	adds	r4, r0, #0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	db00      	blt.n	8014ebe <atanf+0x1be>
 8014ebc:	e737      	b.n	8014d2e <atanf+0x2e>
 8014ebe:	2380      	movs	r3, #128	; 0x80
 8014ec0:	061b      	lsls	r3, r3, #24
 8014ec2:	18c4      	adds	r4, r0, r3
 8014ec4:	e733      	b.n	8014d2e <atanf+0x2e>
 8014ec6:	4c15      	ldr	r4, [pc, #84]	; (8014f1c <atanf+0x21c>)
 8014ec8:	e731      	b.n	8014d2e <atanf+0x2e>
 8014eca:	46c0      	nop			; (mov r8, r8)
 8014ecc:	bfc90fdb 	.word	0xbfc90fdb
 8014ed0:	3edfffff 	.word	0x3edfffff
 8014ed4:	7149f2ca 	.word	0x7149f2ca
 8014ed8:	3f97ffff 	.word	0x3f97ffff
 8014edc:	3f2fffff 	.word	0x3f2fffff
 8014ee0:	3c8569d7 	.word	0x3c8569d7
 8014ee4:	3d4bda59 	.word	0x3d4bda59
 8014ee8:	3d886b35 	.word	0x3d886b35
 8014eec:	3dba2e6e 	.word	0x3dba2e6e
 8014ef0:	3e124925 	.word	0x3e124925
 8014ef4:	3eaaaaab 	.word	0x3eaaaaab
 8014ef8:	bd15a221 	.word	0xbd15a221
 8014efc:	3d6ef16b 	.word	0x3d6ef16b
 8014f00:	3d9d8795 	.word	0x3d9d8795
 8014f04:	3de38e38 	.word	0x3de38e38
 8014f08:	3e4ccccd 	.word	0x3e4ccccd
 8014f0c:	401bffff 	.word	0x401bffff
 8014f10:	bf800000 	.word	0xbf800000
 8014f14:	08015df0 	.word	0x08015df0
 8014f18:	08015de0 	.word	0x08015de0
 8014f1c:	3fc90fdb 	.word	0x3fc90fdb

08014f20 <fabsf>:
 8014f20:	0040      	lsls	r0, r0, #1
 8014f22:	0840      	lsrs	r0, r0, #1
 8014f24:	4770      	bx	lr
	...

08014f28 <floorf>:
 8014f28:	b570      	push	{r4, r5, r6, lr}
 8014f2a:	0045      	lsls	r5, r0, #1
 8014f2c:	086e      	lsrs	r6, r5, #1
 8014f2e:	0e2d      	lsrs	r5, r5, #24
 8014f30:	3d7f      	subs	r5, #127	; 0x7f
 8014f32:	0004      	movs	r4, r0
 8014f34:	2d16      	cmp	r5, #22
 8014f36:	dc24      	bgt.n	8014f82 <floorf+0x5a>
 8014f38:	2d00      	cmp	r5, #0
 8014f3a:	da0e      	bge.n	8014f5a <floorf+0x32>
 8014f3c:	4916      	ldr	r1, [pc, #88]	; (8014f98 <floorf+0x70>)
 8014f3e:	f7eb fbcf 	bl	80006e0 <__aeabi_fadd>
 8014f42:	2100      	movs	r1, #0
 8014f44:	f7eb fa86 	bl	8000454 <__aeabi_fcmpgt>
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	d004      	beq.n	8014f56 <floorf+0x2e>
 8014f4c:	2c00      	cmp	r4, #0
 8014f4e:	da20      	bge.n	8014f92 <floorf+0x6a>
 8014f50:	2e00      	cmp	r6, #0
 8014f52:	d000      	beq.n	8014f56 <floorf+0x2e>
 8014f54:	4c11      	ldr	r4, [pc, #68]	; (8014f9c <floorf+0x74>)
 8014f56:	1c20      	adds	r0, r4, #0
 8014f58:	e01a      	b.n	8014f90 <floorf+0x68>
 8014f5a:	4e11      	ldr	r6, [pc, #68]	; (8014fa0 <floorf+0x78>)
 8014f5c:	412e      	asrs	r6, r5
 8014f5e:	4206      	tst	r6, r0
 8014f60:	d016      	beq.n	8014f90 <floorf+0x68>
 8014f62:	490d      	ldr	r1, [pc, #52]	; (8014f98 <floorf+0x70>)
 8014f64:	f7eb fbbc 	bl	80006e0 <__aeabi_fadd>
 8014f68:	2100      	movs	r1, #0
 8014f6a:	f7eb fa73 	bl	8000454 <__aeabi_fcmpgt>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d0f1      	beq.n	8014f56 <floorf+0x2e>
 8014f72:	2c00      	cmp	r4, #0
 8014f74:	da03      	bge.n	8014f7e <floorf+0x56>
 8014f76:	2380      	movs	r3, #128	; 0x80
 8014f78:	041b      	lsls	r3, r3, #16
 8014f7a:	412b      	asrs	r3, r5
 8014f7c:	18e4      	adds	r4, r4, r3
 8014f7e:	43b4      	bics	r4, r6
 8014f80:	e7e9      	b.n	8014f56 <floorf+0x2e>
 8014f82:	23ff      	movs	r3, #255	; 0xff
 8014f84:	05db      	lsls	r3, r3, #23
 8014f86:	429e      	cmp	r6, r3
 8014f88:	d302      	bcc.n	8014f90 <floorf+0x68>
 8014f8a:	1c01      	adds	r1, r0, #0
 8014f8c:	f7eb fba8 	bl	80006e0 <__aeabi_fadd>
 8014f90:	bd70      	pop	{r4, r5, r6, pc}
 8014f92:	2400      	movs	r4, #0
 8014f94:	e7df      	b.n	8014f56 <floorf+0x2e>
 8014f96:	46c0      	nop			; (mov r8, r8)
 8014f98:	7149f2ca 	.word	0x7149f2ca
 8014f9c:	bf800000 	.word	0xbf800000
 8014fa0:	007fffff 	.word	0x007fffff

08014fa4 <nanf>:
 8014fa4:	4800      	ldr	r0, [pc, #0]	; (8014fa8 <nanf+0x4>)
 8014fa6:	4770      	bx	lr
 8014fa8:	7fc00000 	.word	0x7fc00000

08014fac <scalbnf>:
 8014fac:	0043      	lsls	r3, r0, #1
 8014fae:	b570      	push	{r4, r5, r6, lr}
 8014fb0:	0002      	movs	r2, r0
 8014fb2:	000c      	movs	r4, r1
 8014fb4:	085d      	lsrs	r5, r3, #1
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d006      	beq.n	8014fc8 <scalbnf+0x1c>
 8014fba:	21ff      	movs	r1, #255	; 0xff
 8014fbc:	05c9      	lsls	r1, r1, #23
 8014fbe:	428d      	cmp	r5, r1
 8014fc0:	d303      	bcc.n	8014fca <scalbnf+0x1e>
 8014fc2:	1c01      	adds	r1, r0, #0
 8014fc4:	f7eb fb8c 	bl	80006e0 <__aeabi_fadd>
 8014fc8:	bd70      	pop	{r4, r5, r6, pc}
 8014fca:	4208      	tst	r0, r1
 8014fcc:	d116      	bne.n	8014ffc <scalbnf+0x50>
 8014fce:	2198      	movs	r1, #152	; 0x98
 8014fd0:	05c9      	lsls	r1, r1, #23
 8014fd2:	f7eb feeb 	bl	8000dac <__aeabi_fmul>
 8014fd6:	4b1b      	ldr	r3, [pc, #108]	; (8015044 <scalbnf+0x98>)
 8014fd8:	429c      	cmp	r4, r3
 8014fda:	db29      	blt.n	8015030 <scalbnf+0x84>
 8014fdc:	0002      	movs	r2, r0
 8014fde:	15c3      	asrs	r3, r0, #23
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	3b19      	subs	r3, #25
 8014fe4:	191b      	adds	r3, r3, r4
 8014fe6:	2bfe      	cmp	r3, #254	; 0xfe
 8014fe8:	dd0a      	ble.n	8015000 <scalbnf+0x54>
 8014fea:	4b17      	ldr	r3, [pc, #92]	; (8015048 <scalbnf+0x9c>)
 8014fec:	2800      	cmp	r0, #0
 8014fee:	da00      	bge.n	8014ff2 <scalbnf+0x46>
 8014ff0:	4b16      	ldr	r3, [pc, #88]	; (801504c <scalbnf+0xa0>)
 8014ff2:	4915      	ldr	r1, [pc, #84]	; (8015048 <scalbnf+0x9c>)
 8014ff4:	1c18      	adds	r0, r3, #0
 8014ff6:	f7eb fed9 	bl	8000dac <__aeabi_fmul>
 8014ffa:	e7e5      	b.n	8014fc8 <scalbnf+0x1c>
 8014ffc:	0e1b      	lsrs	r3, r3, #24
 8014ffe:	e7f1      	b.n	8014fe4 <scalbnf+0x38>
 8015000:	2b00      	cmp	r3, #0
 8015002:	dd04      	ble.n	801500e <scalbnf+0x62>
 8015004:	4812      	ldr	r0, [pc, #72]	; (8015050 <scalbnf+0xa4>)
 8015006:	4002      	ands	r2, r0
 8015008:	05d8      	lsls	r0, r3, #23
 801500a:	4310      	orrs	r0, r2
 801500c:	e7dc      	b.n	8014fc8 <scalbnf+0x1c>
 801500e:	0019      	movs	r1, r3
 8015010:	3116      	adds	r1, #22
 8015012:	da0f      	bge.n	8015034 <scalbnf+0x88>
 8015014:	4a0f      	ldr	r2, [pc, #60]	; (8015054 <scalbnf+0xa8>)
 8015016:	0fc3      	lsrs	r3, r0, #31
 8015018:	4294      	cmp	r4, r2
 801501a:	dd05      	ble.n	8015028 <scalbnf+0x7c>
 801501c:	480a      	ldr	r0, [pc, #40]	; (8015048 <scalbnf+0x9c>)
 801501e:	2b00      	cmp	r3, #0
 8015020:	d000      	beq.n	8015024 <scalbnf+0x78>
 8015022:	480a      	ldr	r0, [pc, #40]	; (801504c <scalbnf+0xa0>)
 8015024:	4908      	ldr	r1, [pc, #32]	; (8015048 <scalbnf+0x9c>)
 8015026:	e7e6      	b.n	8014ff6 <scalbnf+0x4a>
 8015028:	480b      	ldr	r0, [pc, #44]	; (8015058 <scalbnf+0xac>)
 801502a:	2b00      	cmp	r3, #0
 801502c:	d000      	beq.n	8015030 <scalbnf+0x84>
 801502e:	480b      	ldr	r0, [pc, #44]	; (801505c <scalbnf+0xb0>)
 8015030:	4909      	ldr	r1, [pc, #36]	; (8015058 <scalbnf+0xac>)
 8015032:	e7e0      	b.n	8014ff6 <scalbnf+0x4a>
 8015034:	21cc      	movs	r1, #204	; 0xcc
 8015036:	3319      	adds	r3, #25
 8015038:	05d8      	lsls	r0, r3, #23
 801503a:	4b05      	ldr	r3, [pc, #20]	; (8015050 <scalbnf+0xa4>)
 801503c:	0589      	lsls	r1, r1, #22
 801503e:	401a      	ands	r2, r3
 8015040:	4310      	orrs	r0, r2
 8015042:	e7d8      	b.n	8014ff6 <scalbnf+0x4a>
 8015044:	ffff3cb0 	.word	0xffff3cb0
 8015048:	7149f2ca 	.word	0x7149f2ca
 801504c:	f149f2ca 	.word	0xf149f2ca
 8015050:	807fffff 	.word	0x807fffff
 8015054:	0000c350 	.word	0x0000c350
 8015058:	0da24260 	.word	0x0da24260
 801505c:	8da24260 	.word	0x8da24260

08015060 <_init>:
 8015060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015062:	46c0      	nop			; (mov r8, r8)
 8015064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015066:	bc08      	pop	{r3}
 8015068:	469e      	mov	lr, r3
 801506a:	4770      	bx	lr

0801506c <_fini>:
 801506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506e:	46c0      	nop			; (mov r8, r8)
 8015070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015072:	bc08      	pop	{r3}
 8015074:	469e      	mov	lr, r3
 8015076:	4770      	bx	lr
